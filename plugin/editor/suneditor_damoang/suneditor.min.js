!function(e){var t={};function n(i){if(t[i])return t[i].exports;var l=t[i]={i:i,l:!1,exports:{}};return e[i].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(i,l,function(t){return e[t]}.bind(null,l));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="XJR1")}({"1kvd":function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"dialog",add:function(e){const t=e.context;t.dialog={kind:"",updateModal:!1,_closeSignal:!1};let n=e.util.createElement("DIV");n.className="se-dialog sun-editor-common";let i=e.util.createElement("DIV");i.className="se-dialog-back",i.style.display="none";let l=e.util.createElement("DIV");l.className="se-dialog-inner",l.style.display="none",n.appendChild(i),n.appendChild(l),t.dialog.modalArea=n,t.dialog.back=i,t.dialog.modal=l,t.dialog.modal.addEventListener("mousedown",this._onMouseDown_dialog.bind(e)),t.dialog.modal.addEventListener("click",this._onClick_dialog.bind(e)),t.element.relative.appendChild(n),n=null,i=null,l=null},_onMouseDown_dialog:function(e){/se-dialog-inner/.test(e.target.className)?this.context.dialog._closeSignal=!0:this.context.dialog._closeSignal=!1},_onClick_dialog:function(e){(/close/.test(e.target.getAttribute("data-command"))||this.context.dialog._closeSignal)&&this.plugins.dialog.close.call(this)},open:function(e,t){if(this.modalForm)return!1;this.plugins.dialog._bindClose&&(this._d.removeEventListener("keydown",this.plugins.dialog._bindClose),this.plugins.dialog._bindClose=null),this.plugins.dialog._bindClose=function(e){/27/.test(e.keyCode)&&this.plugins.dialog.close.call(this)}.bind(this),this._d.addEventListener("keydown",this.plugins.dialog._bindClose),this.context.dialog.updateModal=t,"full"===this.options.popupDisplay?this.context.dialog.modalArea.style.position="fixed":this.context.dialog.modalArea.style.position="absolute",this.context.dialog.kind=e,this.modalForm=this.context[e].modal;const n=this.context[e].focusElement;"function"==typeof this.plugins[e].on&&this.plugins[e].on.call(this,t),this.context.dialog.modalArea.style.display="block",this.context.dialog.back.style.display="block",this.context.dialog.modal.style.display="block",this.modalForm.style.display="block",n&&n.focus()},_bindClose:null,close:function(){this.plugins.dialog._bindClose&&(this._d.removeEventListener("keydown",this.plugins.dialog._bindClose),this.plugins.dialog._bindClose=null);const e=this.context.dialog.kind;this.modalForm.style.display="none",this.context.dialog.back.style.display="none",this.context.dialog.modalArea.style.display="none",this.context.dialog.updateModal=!1,"function"==typeof this.plugins[e].init&&this.plugins[e].init.call(this),this.context.dialog.kind="",this.modalForm=null,this.focus()}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"dialog",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},"3FqI":function(e,t,n){},JhlZ:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"fileBrowser",_xmlHttp:null,_loading:null,add:function(e){const t=e.context;t.fileBrowser={_closeSignal:!1,area:null,header:null,tagArea:null,body:null,list:null,tagElements:null,items:[],selectedTags:[],selectorHandler:null,contextPlugin:"",columnSize:4};let n=e.util.createElement("DIV");n.className="se-file-browser sun-editor-common";let i=e.util.createElement("DIV");i.className="se-file-browser-back";let l=e.util.createElement("DIV");l.className="se-file-browser-inner",l.innerHTML=this.set_browser(e),n.appendChild(i),n.appendChild(l),this._loading=n.querySelector(".se-loading-box"),t.fileBrowser.area=n,t.fileBrowser.header=l.querySelector(".se-file-browser-header"),t.fileBrowser.titleArea=l.querySelector(".se-file-browser-title"),t.fileBrowser.tagArea=l.querySelector(".se-file-browser-tags"),t.fileBrowser.body=l.querySelector(".se-file-browser-body"),t.fileBrowser.list=l.querySelector(".se-file-browser-list"),t.fileBrowser.tagArea.addEventListener("click",this.onClickTag.bind(e)),t.fileBrowser.list.addEventListener("click",this.onClickFile.bind(e)),l.addEventListener("mousedown",this._onMouseDown_browser.bind(e)),l.addEventListener("click",this._onClick_browser.bind(e)),t.element.relative.appendChild(n),n=null,i=null,l=null},set_browser:function(e){const t=e.lang;return'<div class="se-file-browser-content"><div class="se-file-browser-header"><button type="button" data-command="close" class="se-btn se-file-browser-close" class="close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-file-browser-title"></span><div class="se-file-browser-tags"></div></div><div class="se-file-browser-body"><div class="se-loading-box sun-editor-common"><div class="se-loading-effect"></div></div><div class="se-file-browser-list"></div></div></div>'},_onMouseDown_browser:function(e){/se-file-browser-inner/.test(e.target.className)?this.context.fileBrowser._closeSignal=!0:this.context.fileBrowser._closeSignal=!1},_onClick_browser:function(e){e.stopPropagation(),(/close/.test(e.target.getAttribute("data-command"))||this.context.fileBrowser._closeSignal)&&this.plugins.fileBrowser.close.call(this)},open:function(e,t){this.plugins.fileBrowser._bindClose&&(this._d.removeEventListener("keydown",this.plugins.fileBrowser._bindClose),this.plugins.fileBrowser._bindClose=null),this.plugins.fileBrowser._bindClose=function(e){/27/.test(e.keyCode)&&this.plugins.fileBrowser.close.call(this)}.bind(this),this._d.addEventListener("keydown",this.plugins.fileBrowser._bindClose);const n=this.context.fileBrowser;n.contextPlugin=e,n.selectorHandler=t;const i=this.context[e],l=i.listClass;this.util.hasClass(n.list,l)||(n.list.className="se-file-browser-list "+l),"full"===this.options.popupDisplay?n.area.style.position="fixed":n.area.style.position="absolute",n.titleArea.textContent=i.title,n.area.style.display="block",this.plugins.fileBrowser._drawFileList.call(this,this.context[e].url,this.context[e].header)},_bindClose:null,close:function(){const e=this.plugins.fileBrowser;e._xmlHttp&&e._xmlHttp.abort(),e._bindClose&&(this._d.removeEventListener("keydown",e._bindClose),e._bindClose=null);const t=this.context.fileBrowser;t.area.style.display="none",t.selectorHandler=null,t.selectedTags=[],t.items=[],t.list.innerHTML=t.tagArea.innerHTML=t.titleArea.textContent="","function"==typeof this.plugins[t.contextPlugin].init&&this.plugins[t.contextPlugin].init.call(this),t.contextPlugin=""},showBrowserLoading:function(){this._loading.style.display="block"},closeBrowserLoading:function(){this._loading.style.display="none"},_drawFileList:function(e,t){const n=this.plugins.fileBrowser,i=n._xmlHttp=this.util.getXMLHttpRequest();if(i.onreadystatechange=n._callBackGet.bind(this,i),i.open("get",e,!0),null!==t&&"object"==typeof t&&this._w.Object.keys(t).length>0)for(let e in t)i.setRequestHeader(e,t[e]);i.send(null),this.plugins.fileBrowser.showBrowserLoading()},_callBackGet:function(e){if(4===e.readyState)if(this.plugins.fileBrowser._xmlHttp=null,200===e.status)try{const t=JSON.parse(e.responseText);t.result.length>0?this.plugins.fileBrowser._drawListItem.call(this,t.result,!0):t.nullMessage&&(this.context.fileBrowser.list.innerHTML=t.nullMessage)}catch(e){throw Error('[SUNEDITOR.fileBrowser.drawList.fail] cause : "'+e.message+'"')}finally{this.plugins.fileBrowser.closeBrowserLoading(),this.context.fileBrowser.body.style.maxHeight=this._w.innerHeight-this.context.fileBrowser.header.offsetHeight-50+"px"}else if(this.plugins.fileBrowser.closeBrowserLoading(),0!==e.status){const t=e.responseText?JSON.parse(e.responseText):e,n="[SUNEDITOR.fileBrowser.get.serverException] status: "+e.status+", response: "+(t.errorMessage||e.responseText);throw Error(n)}},_drawListItem:function(e,t){const n=this.context.fileBrowser,i=this.context[n.contextPlugin],l=[],o=e.length,s=i.columnSize||n.columnSize,a=s<=1?1:Math.round(o/s)||1,r=i.itemTemplateHandler;let c="",d='<div class="se-file-item-column">',u=1;for(let n,i,h=0;h<o;h++)if(n=e[h],i=n.tag?"string"==typeof n.tag?n.tag.split(","):n.tag:[],i=n.tag=i.map((function(e){return e.trim()})),d+=r(n),(h+1)%a==0&&u<s&&h+1<o&&(u++,d+='</div><div class="se-file-item-column">'),t&&i.length>0)for(let e,t=0,n=i.length;t<n;t++)e=i[t],e&&-1===l.indexOf(e)&&(l.push(e),c+='<a title="'+e+'" aria-label="'+e+'">'+e+"</a>");d+="</div>",n.list.innerHTML=d,t&&(n.items=e,n.tagArea.innerHTML=c,n.tagElements=n.tagArea.querySelectorAll("A"))},onClickTag:function(e){const t=e.target;if(!this.util.isAnchor(t))return;const n=t.textContent,i=this.plugins.fileBrowser,l=this.context.fileBrowser,o=l.tagArea.querySelector('a[title="'+n+'"]'),s=l.selectedTags,a=s.indexOf(n);a>-1?(s.splice(a,1),this.util.removeClass(o,"on")):(s.push(n),this.util.addClass(o,"on")),i._drawListItem.call(this,0===s.length?l.items:l.items.filter((function(e){return e.tag.some((function(e){return s.indexOf(e)>-1}))})),!1)},onClickFile:function(e){e.preventDefault(),e.stopPropagation();const t=this.context.fileBrowser,n=t.list;let i=e.target,l=null;if(i!==n){for(;n!==i.parentNode&&(l=i.getAttribute("data-command"),!l);)i=i.parentNode;l&&((t.selectorHandler||this.context[t.contextPlugin].selectorHandler)(i,i.parentNode.querySelector(".__se__img_name").textContent),this.plugins.fileBrowser.close.call(this))}}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"fileBrowser",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},P6u4:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={code:"en",toolbar:{default:"Default",save:"Save",font:"Font",formats:"Formats",fontSize:"Size",bold:"Bold",underline:"Underline",italic:"Italic",strike:"Strike",subscript:"Subscript",superscript:"Superscript",removeFormat:"Remove Format",fontColor:"Font Color",hiliteColor:"Highlight Color",indent:"Indent",outdent:"Outdent",align:"Align",alignLeft:"Align left",alignRight:"Align right",alignCenter:"Align center",alignJustify:"Align justify",list:"List",orderList:"Ordered list",unorderList:"Unordered list",horizontalRule:"Horizontal line",hr_solid:"Solid",hr_dotted:"Dotted",hr_dashed:"Dashed",table:"Table",link:"Link",math:"Math",image:"Image",video:"Video",audio:"Audio",fullScreen:"Full screen",showBlocks:"Show blocks",codeView:"Code view",undo:"Undo",redo:"Redo",preview:"Preview",print:"print",tag_p:"Paragraph",tag_div:"Normal (DIV)",tag_h:"Header",tag_blockquote:"Quote",tag_pre:"Code",template:"Template",lineHeight:"Line height",paragraphStyle:"Paragraph style",textStyle:"Text style",imageGallery:"Image gallery",dir_ltr:"Left to right",dir_rtl:"Right to left",mention:"Mention"},dialogBox:{linkBox:{title:"Insert Link",url:"URL to link",text:"Text to display",newWindowCheck:"Open in new window",downloadLinkCheck:"Download link",bookmark:"Bookmark"},mathBox:{title:"Math",inputLabel:"Mathematical Notation",fontSizeLabel:"Font Size",previewLabel:"Preview"},imageBox:{title:"Insert image",file:"Select from files",url:"Image URL",altText:"Alternative text"},videoBox:{title:"Insert Video",file:"Select from files",url:"Media embed URL, YouTube/Vimeo"},audioBox:{title:"Insert Audio",file:"Select from files",url:"Audio URL"},browser:{tags:"Tags",search:"Search"},caption:"Insert description",close:"Close",submitButton:"Submit",revertButton:"Revert",proportion:"Constrain proportions",basic:"Basic",left:"Left",right:"Right",center:"Center",width:"Width",height:"Height",size:"Size",ratio:"Ratio"},controller:{edit:"Edit",unlink:"Unlink",remove:"Remove",insertRowAbove:"Insert row above",insertRowBelow:"Insert row below",deleteRow:"Delete row",insertColumnBefore:"Insert column before",insertColumnAfter:"Insert column after",deleteColumn:"Delete column",fixedColumnWidth:"Fixed column width",resize100:"Resize 100%",resize75:"Resize 75%",resize50:"Resize 50%",resize25:"Resize 25%",autoSize:"Auto size",mirrorHorizontal:"Mirror, Horizontal",mirrorVertical:"Mirror, Vertical",rotateLeft:"Rotate left",rotateRight:"Rotate right",maxSize:"Max size",minSize:"Min size",tableHeader:"Table header",mergeCells:"Merge cells",splitCells:"Split Cells",HorizontalSplit:"Horizontal split",VerticalSplit:"Vertical split"},menu:{spaced:"Spaced",bordered:"Bordered",neon:"Neon",translucent:"Translucent",shadow:"Shadow",code:"Code"}};return void 0===t&&(e.SUNEDITOR_LANG||Object.defineProperty(e,"SUNEDITOR_LANG",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_LANG,"en",{enumerable:!0,writable:!0,configurable:!0,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_LANG a window with a document");return l(e)}:l(i)},WUQj:function(e,t,n){},XJR1:function(e,t,n){"use strict";n.r(t);n("3FqI"),n("WUQj");var i={name:"colorPicker",add:function(e){const t=e.context;t.colorPicker={colorListHTML:"",_colorInput:"",_defaultColor:"#000",_styleProperty:"color",_currentColor:"",_colorList:[]},t.colorPicker.colorListHTML=this.createColorList(e,this._makeColorList)},createColorList:function(e,t){const n=e.options,i=e.lang,l=n.colorList&&0!==n.colorList.length?n.colorList:["#ff0000","#ff5e00","#ffe400","#abf200","#00d8ff","#0055ff","#6600ff","#ff00dd","#000000","#ffd8d8","#fae0d4","#faf4c0","#e4f7ba","#d4f4fa","#d9e5ff","#e8d9ff","#ffd9fa","#f1f1f1","#ffa7a7","#ffc19e","#faed7d","#cef279","#b2ebf4","#b2ccff","#d1b2ff","#ffb2f5","#bdbdbd","#f15f5f","#f29661","#e5d85c","#bce55c","#5cd1e5","#6699ff","#a366ff","#f261df","#8c8c8c","#980000","#993800","#998a00","#6b9900","#008299","#003399","#3d0099","#990085","#353535","#670000","#662500","#665c00","#476600","#005766","#002266","#290066","#660058","#222222"];let o=[],s='<div class="se-list-inner">';for(let e,n=0,i=l.length;n<i;n++)e=l[n],e&&("string"==typeof e&&(o.push(e),n<i-1)||(o.length>0&&(s+='<div class="se-selector-color">'+t(o)+"</div>",o=[]),"object"==typeof e&&(s+='<div class="se-selector-color">'+t(e)+"</div>")));return s+='<form class="se-form-group"><input type="text" maxlength="9" class="_se_color_picker_input se-color-input"/><button type="submit" class="se-btn-primary _se_color_picker_submit" title="'+i.dialogBox.submitButton+'" aria-label="'+i.dialogBox.submitButton+'">'+e.icons.checked+'</button><button type="button" class="se-btn _se_color_picker_remove" title="'+i.toolbar.removeFormat+'" aria-label="'+i.toolbar.removeFormat+'">'+e.icons.erase+"</button></form></div>",s},_makeColorList:function(e){let t="";t+='<ul class="se-color-pallet">';for(let n,i=0,l=e.length;i<l;i++)n=e[i],"string"==typeof n&&(t+='<li><button type="button" data-value="'+n+'" title="'+n+'" aria-label="'+n+'" style="background-color:'+n+';"></button></li>');return t+="</ul>",t},init:function(e,t){const n=this.plugins.colorPicker;let i=t||(n.getColorInNode.call(this,e)||this.context.colorPicker._defaultColor);i=n.isHexColor(i)?i:n.rgb2hex(i)||i;const l=this.context.colorPicker._colorList;if(l)for(let e=0,t=l.length;e<t;e++)i.toLowerCase()===l[e].getAttribute("data-value").toLowerCase()?this.util.addClass(l[e],"active"):this.util.removeClass(l[e],"active");n.setInputText.call(this,n.colorName2hex.call(this,i))},setCurrentColor:function(e){this.context.colorPicker._currentColor=e,this.context.colorPicker._colorInput.style.borderColor=e},setInputText:function(e){e=/^#/.test(e)?e:"#"+e,this.context.colorPicker._colorInput.value=e,this.plugins.colorPicker.setCurrentColor.call(this,e)},getColorInNode:function(e){let t="";const n=this.context.colorPicker._styleProperty;for(;e&&!this.util.isWysiwygDiv(e)&&0===t.length;)1===e.nodeType&&e.style[n]&&(t=e.style[n]),e=e.parentNode;return t},isHexColor:function(e){return/^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(e)},rgb2hex:function(e){const t=e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);return t&&4===t.length?"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2):""},colorName2hex:function(e){if(/^#/.test(e))return e;var t=this.util.createElement("div");t.style.display="none",t.style.color=e;var n=this._w.getComputedStyle(this._d.body.appendChild(t)).color.match(/\d+/g).map((function(e){return parseInt(e,10)}));return this.util.removeItem(t),n.length>=3&&"#"+((1<<24)+(n[0]<<16)+(n[1]<<8)+n[2]).toString(16).substr(1)}},l={name:"fontColor",display:"submenu",add:function(e,t){e.addModule([i]);const n=e.context;n.fontColor={previewEl:null,colorInput:null,colorList:null};let l=this.setSubmenu(e);n.fontColor.colorInput=l.querySelector("._se_color_picker_input"),n.fontColor.colorInput.addEventListener("keyup",this.onChangeInput.bind(e)),l.querySelector("._se_color_picker_submit").addEventListener("click",this.submit.bind(e)),l.querySelector("._se_color_picker_remove").addEventListener("click",this.remove.bind(e)),l.addEventListener("click",this.pickup.bind(e)),n.fontColor.colorList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,l),l=null},setSubmenu:function(e){const t=e.context.colorPicker.colorListHTML,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML=t,n},on:function(){const e=this.context.colorPicker,t=this.context.fontColor;e._colorInput=t.colorInput;const n=this.wwComputedStyle.color;e._defaultColor=n?this.plugins.colorPicker.isHexColor(n)?n:this.plugins.colorPicker.rgb2hex(n):"#333333",e._styleProperty="color",e._colorList=t.colorList,this.plugins.colorPicker.init.call(this,this.getSelectionNode(),null)},onChangeInput:function(e){this.plugins.colorPicker.setCurrentColor.call(this,e.target.value)},submit:function(){this.plugins.fontColor.applyColor.call(this,this.context.colorPicker._currentColor)},pickup:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.fontColor.applyColor.call(this,e.target.getAttribute("data-value"))},remove:function(){this.nodeChange(null,["color"],["span"],!0),this.submenuOff()},applyColor:function(e){if(!e)return;const t=this.util.createElement("SPAN");t.style.color=e,this.nodeChange(t,["color"],null,null),this.submenuOff()}},o={name:"hiliteColor",display:"submenu",add:function(e,t){e.addModule([i]);const n=e.context;n.hiliteColor={previewEl:null,colorInput:null,colorList:null};let l=this.setSubmenu(e);n.hiliteColor.colorInput=l.querySelector("._se_color_picker_input"),n.hiliteColor.colorInput.addEventListener("keyup",this.onChangeInput.bind(e)),l.querySelector("._se_color_picker_submit").addEventListener("click",this.submit.bind(e)),l.querySelector("._se_color_picker_remove").addEventListener("click",this.remove.bind(e)),l.addEventListener("click",this.pickup.bind(e)),n.hiliteColor.colorList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,l),l=null},setSubmenu:function(e){const t=e.context.colorPicker.colorListHTML,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML=t,n},on:function(){const e=this.context.colorPicker,t=this.context.hiliteColor;e._colorInput=t.colorInput;const n=this.wwComputedStyle.backgroundColor;e._defaultColor=n?this.plugins.colorPicker.isHexColor(n)?n:this.plugins.colorPicker.rgb2hex(n):"#ffffff",e._styleProperty="backgroundColor",e._colorList=t.colorList,this.plugins.colorPicker.init.call(this,this.getSelectionNode(),null)},onChangeInput:function(e){this.plugins.colorPicker.setCurrentColor.call(this,e.target.value)},submit:function(){this.plugins.hiliteColor.applyColor.call(this,this.context.colorPicker._currentColor)},pickup:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.hiliteColor.applyColor.call(this,e.target.getAttribute("data-value"))},remove:function(){this.nodeChange(null,["background-color"],["span"],!0),this.submenuOff()},applyColor:function(e){if(!e)return;const t=this.util.createElement("SPAN");t.style.backgroundColor=e,this.nodeChange(t,["background-color"],null,null),this.submenuOff()}},s={name:"template",display:"submenu",add:function(e,t){e.context.template={selectedIndex:-1};let n=this.setSubmenu(e);n.querySelector("ul").addEventListener("click",this.pickup.bind(e)),e.initMenuTarget(this.name,t,n),n=null},setSubmenu:function(e){const t=e.options.templates;if(!t||0===t.length)throw Error('[SUNEDITOR.plugins.template.fail] To use the "template" plugin, please define the "templates" option.');const n=e.util.createElement("DIV");n.className="se-list-layer";let i='<div class="se-submenu se-list-inner"><ul class="se-list-basic">';for(let e,n=0,l=t.length;n<l;n++)e=t[n],i+='<li><button type="button" class="se-btn-list" data-value="'+n+'" title="'+e.name+'" aria-label="'+e.name+'">'+e.name+"</button></li>";return i+="</ul></div>",n.innerHTML=i,n},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation(),this.context.template.selectedIndex=1*e.target.getAttribute("data-value");const t=this.options.templates[this.context.template.selectedIndex];if(!t.html)throw this.submenuOff(),Error('[SUNEDITOR.template.fail] cause : "templates[i].html not found"');this.setContents(t.html),this.submenuOff()}},a=n("1kvd"),r=n.n(a),c={name:"selectMenu",add:function(e){e.context.selectMenu={caller:{},callerContext:null}},setForm:function(){return'<div class="se-select-list"></div>'},createList:function(e,t,n){e.form.innerHTML="<ul>"+n+"</ul>",e.items=t,e.menus=e.form.querySelectorAll("li")},initEvent:function(e,t){const n=t.querySelector(".se-select-list"),i=this.context.selectMenu.caller[e]={form:n,items:[],menus:[],index:-1,item:null,clickMethod:null,callerName:e};n.addEventListener("mousedown",this.plugins.selectMenu.onMousedown_list),n.addEventListener("mousemove",this.plugins.selectMenu.onMouseMove_list.bind(this,i)),n.addEventListener("click",this.plugins.selectMenu.onClick_list.bind(this,i))},onMousedown_list:function(e){e.preventDefault(),e.stopPropagation()},onMouseMove_list:function(e,t){this.util.addClass(e.form,"__se_select-menu-mouse-move");const n=t.target.getAttribute("data-index");n&&(e.index=1*n)},onClick_list:function(e,t){const n=t.target.getAttribute("data-index");n&&e.clickMethod.call(this,e.items[n])},moveItem:function(e,t){this.util.removeClass(e.form,"__se_select-menu-mouse-move"),t=e.index+t;const n=e.menus,i=n.length,l=e.index=t>=i?0:t<0?i-1:t;for(let e=0;e<i;e++)e===l?this.util.addClass(n[e],"active"):this.util.removeClass(n[e],"active");e.item=e.items[l]},getItem:function(e,t){return t=!t||t<0?e.index:t,e.items[t]},on:function(e,t){const n=this.context.selectMenu.caller[e];this.context.selectMenu.callerContext=n,n.clickMethod=t,n.callerName=e},open:function(e,t){const n=e.form;n.style.visibility="hidden",n.style.display="block",t(n),n.style.visibility=""},close:function(e){e.form.style.display="none",e.items=[],e.menus=[],e.index=-1,e.item=null},init:function(e){e&&(e.items=[],e.menus=[],e.index=-1,e.item=null,e.callerName="",this.context.selectMenu.callerContext=null)}},d={name:"anchor",add:function(e){e.addModule([c]),e.context.anchor={caller:{},forms:this.setDialogForm(e),host:(e._w.location.origin+e._w.location.pathname).replace(/\/$/,""),callerContext:null}},setDialogForm:function(e){const t=e.lang,n=e.options.linkRel,i=(e.options.linkRelDefault.default||"").split(" "),l=e.icons,o=e.util.createElement("DIV");let s='<div class="se-dialog-body"><div class="se-dialog-form"><label>'+t.dialogBox.linkBox.url+'</label><div class="se-dialog-form-files"><input class="se-input-form se-input-url" type="text" placeholder="'+(e.options.protocol||"")+'" /><button type="button" class="se-btn se-dialog-files-edge-button _se_bookmark_button" title="'+t.dialogBox.linkBox.bookmark+'" aria-label="'+t.dialogBox.linkBox.bookmark+'">'+l.bookmark+"</button>"+e.plugins.selectMenu.setForm()+'</div><div class="se-anchor-preview-form"><span class="se-svg se-anchor-preview-icon _se_anchor_bookmark_icon">'+l.bookmark+'</span><span class="se-svg se-anchor-preview-icon _se_anchor_download_icon">'+l.download+'</span><pre class="se-link-preview"></pre></div></div><div class="se-dialog-form"><label>'+t.dialogBox.linkBox.text+'</label><input class="se-input-form _se_anchor_text" type="text" /></div><div class="se-dialog-form-footer"><label><input type="checkbox" class="se-dialog-btn-check _se_anchor_check" />&nbsp;'+t.dialogBox.linkBox.newWindowCheck+'</label><label><input type="checkbox" class="se-dialog-btn-check _se_anchor_download" />&nbsp;'+t.dialogBox.linkBox.downloadLinkCheck+"</label>";if(n.length>0){s+='<div class="se-anchor-rel"><button type="button" class="se-btn se-btn-select se-anchor-rel-btn">&lt;rel&gt;</button><div class="se-anchor-rel-wrapper"><pre class="se-link-preview se-anchor-rel-preview"></pre></div><div class="se-list-layer"><div class="se-list-inner"><ul class="se-list-basic se-list-checked">';for(let e,t=0,o=n.length;t<o;t++)e=n[t],s+='<li><button type="button" class="se-btn-list'+(i.indexOf(e)>-1?" se-checked":"")+'" data-command="'+e+'" title="'+e+'" aria-label="'+e+'"><span class="se-svg">'+l.checked+"</span>"+e+"</button></li>";s+="</ul></div></div></div>"}return s+="</div></div>",o.innerHTML=s,o},initEvent:function(e,t){const n=this.plugins.anchor,i=this.context.anchor.caller[e]={modal:t,urlInput:null,linkDefaultRel:this.options.linkRelDefault,defaultRel:this.options.linkRelDefault.default||"",currentRel:[],linkAnchor:null,linkValue:"",_change:!1,callerName:e};"string"==typeof i.linkDefaultRel.default&&(i.linkDefaultRel.default=i.linkDefaultRel.default.trim()),"string"==typeof i.linkDefaultRel.check_new_window&&(i.linkDefaultRel.check_new_window=i.linkDefaultRel.check_new_window.trim()),"string"==typeof i.linkDefaultRel.check_bookmark&&(i.linkDefaultRel.check_bookmark=i.linkDefaultRel.check_bookmark.trim()),i.urlInput=t.querySelector(".se-input-url"),i.anchorText=t.querySelector("._se_anchor_text"),i.newWindowCheck=t.querySelector("._se_anchor_check"),i.downloadCheck=t.querySelector("._se_anchor_download"),i.download=t.querySelector("._se_anchor_download_icon"),i.preview=t.querySelector(".se-link-preview"),i.bookmark=t.querySelector("._se_anchor_bookmark_icon"),i.bookmarkButton=t.querySelector("._se_bookmark_button"),this.plugins.selectMenu.initEvent.call(this,e,t);const l=this.context.selectMenu.caller[e];this.options.linkRel.length>0&&(i.relButton=t.querySelector(".se-anchor-rel-btn"),i.relList=t.querySelector(".se-list-layer"),i.relPreview=t.querySelector(".se-anchor-rel-preview"),i.relButton.addEventListener("click",n.onClick_relButton.bind(this,i)),i.relList.addEventListener("click",n.onClick_relList.bind(this,i))),i.newWindowCheck.addEventListener("change",n.onChange_newWindowCheck.bind(this,i)),i.downloadCheck.addEventListener("change",n.onChange_downloadCheck.bind(this,i)),i.anchorText.addEventListener("input",n.onChangeAnchorText.bind(this,i)),i.urlInput.addEventListener("input",n.onChangeUrlInput.bind(this,i)),i.urlInput.addEventListener("keydown",n.onKeyDownUrlInput.bind(this,l)),i.urlInput.addEventListener("focus",n.onFocusUrlInput.bind(this,i,l)),i.urlInput.addEventListener("blur",n.onBlurUrlInput.bind(this,l)),i.bookmarkButton.addEventListener("click",n.onClick_bookmarkButton.bind(this,i))},on:function(e,t){const n=this.plugins.anchor;if(t){if(e.linkAnchor){this.context.dialog.updateModal=!0;const t=e.linkAnchor.getAttribute("href");e.linkValue=e.preview.textContent=e.urlInput.value=n.selfPathBookmark.call(this,t)?t.substr(t.lastIndexOf("#")):t,e.anchorText.value=e.linkAnchor.textContent,e.newWindowCheck.checked=!!/_blank/i.test(e.linkAnchor.target),e.downloadCheck.checked=e.linkAnchor.download}}else n.init.call(this,e),e.anchorText.value=this.getSelection().toString().trim(),e.newWindowCheck.checked=this.options.linkTargetNewWindow;this.context.anchor.callerContext=e,n.setRel.call(this,e,t&&e.linkAnchor?e.linkAnchor.rel:e.defaultRel),n.setLinkPreview.call(this,e,e.linkValue),this.plugins.selectMenu.on.call(this,e.callerName,this.plugins.anchor.setHeaderBookmark)},selfPathBookmark:function(e){const t=this._w.location.href.replace(/\/$/,"");return 0===e.indexOf("#")||0===e.indexOf(t)&&e.indexOf("#")===(-1===t.indexOf("#")?t.length:t.substr(0,t.indexOf("#")).length)},_closeRelMenu:null,toggleRelList:function(e,t){if(t){const t=e.relButton,n=e.relList;this.util.addClass(t,"active"),n.style.visibility="hidden",n.style.display="block",this.options.rtl?n.style.left=t.offsetLeft-n.offsetWidth-1+"px":n.style.left=t.offsetLeft+t.offsetWidth+1+"px",n.style.top=t.offsetTop+t.offsetHeight/2-n.offsetHeight/2+"px",n.style.visibility="",this.plugins.anchor._closeRelMenu=function(e,t,n){n&&(e.relButton.contains(n.target)||e.relList.contains(n.target))||(this.util.removeClass(t,"active"),e.relList.style.display="none",this.modalForm.removeEventListener("click",this.plugins.anchor._closeRelMenu),this.plugins.anchor._closeRelMenu=null)}.bind(this,e,t),this.modalForm.addEventListener("click",this.plugins.anchor._closeRelMenu)}else this.plugins.anchor._closeRelMenu&&this.plugins.anchor._closeRelMenu()},onClick_relButton:function(e,t){this.plugins.anchor.toggleRelList.call(this,e,!this.util.hasClass(t.target,"active"))},onClick_relList:function(e,t){const n=t.target,i=n.getAttribute("data-command");if(!i)return;const l=e.currentRel,o=this.util.toggleClass(n,"se-checked"),s=l.indexOf(i);o?-1===s&&l.push(i):s>-1&&l.splice(s,1),e.relPreview.title=e.relPreview.textContent=l.join(" ")},setRel:function(e,t){const n=e.relList,i=e.currentRel=t?t.split(" "):[];if(!n)return;const l=n.querySelectorAll("button");for(let e,t=0,n=l.length;t<n;t++)e=l[t].getAttribute("data-command"),i.indexOf(e)>-1?this.util.addClass(l[t],"se-checked"):this.util.removeClass(l[t],"se-checked");e.relPreview.title=e.relPreview.textContent=i.join(" ")},createHeaderList:function(e,t,n){const i=this.util.getListChildren(this.context.element.wysiwyg,(function(e){return/h[1-6]/i.test(e.nodeName)}));if(0===i.length)return;const l=new this._w.RegExp("^"+n.replace(/^#/,""),"i"),o=[];let s="";for(let e,t=0,n=i.length;t<n;t++)e=i[t],l.test(e.textContent)&&(o.push(e),s+='<li class="se-select-item" data-index="'+t+'">'+e.textContent+"</li>");0===o.length?this.plugins.selectMenu.close.call(this,t):(this.plugins.selectMenu.createList(t,o,s),this.plugins.selectMenu.open.call(this,t,this.plugins.anchor._setMenuListPosition.bind(this,e)))},_setMenuListPosition:function(e,t){t.style.top=e.urlInput.offsetHeight+1+"px"},onKeyDownUrlInput:function(e,t){switch(t.keyCode){case 38:t.preventDefault(),t.stopPropagation(),this.plugins.selectMenu.moveItem.call(this,e,-1);break;case 40:t.preventDefault(),t.stopPropagation(),this.plugins.selectMenu.moveItem.call(this,e,1);break;case 13:e.index>-1&&(t.preventDefault(),t.stopPropagation(),this.plugins.anchor.setHeaderBookmark.call(this,this.plugins.selectMenu.getItem(e,null)))}},setHeaderBookmark:function(e){const t=this.context.anchor.callerContext,n=e.id||"h_"+this._w.Math.random().toString().replace(/.+\./,"");e.id=n,t.urlInput.value="#"+n,t.anchorText.value.trim()&&t._change||(t.anchorText.value=e.textContent),this.plugins.anchor.setLinkPreview.call(this,t,t.urlInput.value),this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext),this.context.anchor.callerContext.urlInput.focus()},onChangeAnchorText:function(e,t){e._change=!!t.target.value.trim()},onChangeUrlInput:function(e,t){const n=t.target.value.trim();this.plugins.anchor.setLinkPreview.call(this,e,n),this.plugins.anchor.selfPathBookmark.call(this,n)?this.plugins.anchor.createHeaderList.call(this,e,this.context.selectMenu.callerContext,n):this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext)},onFocusUrlInput:function(e,t){const n=e.urlInput.value;this.plugins.anchor.selfPathBookmark.call(this,n)&&this.plugins.anchor.createHeaderList.call(this,e,t,n)},onBlurUrlInput:function(e){this.plugins.selectMenu.close.call(this,e)},setLinkPreview:function(e,t){const n=e.preview,i=this.options.linkProtocol,l=this.options.linkNoPrefix,o=/^(mailto\:|tel\:|sms\:|https*\:\/\/|#)/.test(t)||0===t.indexOf(i),s=!!i&&this._w.RegExp("^"+this.util.escapeStringRegexp(t.substr(0,i.length))).test(i);t=e.linkValue=n.textContent=t?l?t:!i||o||s?o?t:/^www\./.test(t)?"http://"+t:this.context.anchor.host+(/^\//.test(t)?"":"/")+t:i+t:"",this.plugins.anchor.selfPathBookmark.call(this,t)?(e.bookmark.style.display="block",this.util.addClass(e.bookmarkButton,"active")):(e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active")),!this.plugins.anchor.selfPathBookmark.call(this,t)&&e.downloadCheck.checked?e.download.style.display="block":e.download.style.display="none"},setCtx:function(e,t){e&&(t.linkAnchor=e,t.linkValue=e.href,t.currentRel=e.rel.split(" "))},updateAnchor:function(e,t,n,i,l){!this.plugins.anchor.selfPathBookmark.call(this,t)&&i.downloadCheck.checked?e.setAttribute("download",n||t):e.removeAttribute("download"),i.newWindowCheck.checked?e.target="_blank":e.removeAttribute("target");const o=i.currentRel.join(" ");o?e.rel=o:e.removeAttribute("rel"),e.href=t,l?0===e.children.length&&(e.textContent=""):e.textContent=n},createAnchor:function(e,t){if(0===e.linkValue.length)return null;const n=e.linkValue,i=e.anchorText,l=0===i.value.length?n:i.value,o=e.linkAnchor||this.util.createElement("A");return this.plugins.anchor.updateAnchor.call(this,o,n,l,e,t),e.linkValue=e.preview.textContent=e.urlInput.value=e.anchorText.value="",o},onClick_bookmarkButton:function(e){let t=e.urlInput.value;this.plugins.anchor.selfPathBookmark.call(this,t)?(t=t.substr(1),e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active"),this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext)):(t="#"+t,e.bookmark.style.display="block",this.util.addClass(e.bookmarkButton,"active"),e.downloadCheck.checked=!1,e.download.style.display="none",this.plugins.anchor.createHeaderList.call(this,e,this.context.selectMenu.callerContext,t)),e.urlInput.value=t,this.plugins.anchor.setLinkPreview.call(this,e,t),e.urlInput.focus()},onChange_newWindowCheck:function(e,t){"string"==typeof e.linkDefaultRel.check_new_window&&(t.target.checked?this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relMerge.call(this,e,e.linkDefaultRel.check_new_window)):this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relDelete.call(this,e,e.linkDefaultRel.check_new_window)))},onChange_downloadCheck:function(e,t){t.target.checked?(e.download.style.display="block",e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active"),e.linkValue=e.preview.textContent=e.urlInput.value=e.urlInput.value.replace(/^\#+/,""),"string"==typeof e.linkDefaultRel.check_bookmark&&this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relMerge.call(this,e,e.linkDefaultRel.check_bookmark))):(e.download.style.display="none","string"==typeof e.linkDefaultRel.check_bookmark&&this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relDelete.call(this,e,e.linkDefaultRel.check_bookmark)))},_relMerge:function(e,t){const n=e.currentRel;if(!t)return n.join(" ");if(/^only\:/.test(t))return t=t.replace(/^only\:/,"").trim(),e.currentRel=t.split(" "),t;const i=t.split(" ");for(let e,t=0,l=i.length;t<l;t++)e=n.indexOf(i[t]),-1===e&&n.push(i[t]);return n.join(" ")},_relDelete:function(e,t){if(!t)return e.currentRel.join(" ");/^only\:/.test(t)&&(t=t.replace(/^only\:/,"").trim());const n=e.currentRel.join(" ").replace(this._w.RegExp(t+"\\s*"),"");return e.currentRel=n.split(" "),n},init:function(e){e.linkAnchor=null,e.linkValue=e.preview.textContent=e.urlInput.value="",e.anchorText.value="",e.newWindowCheck.checked=!1,e.downloadCheck.checked=!1,e._change=!1,this.plugins.anchor.setRel.call(this,e,e.defaultRel),e.relList&&this.plugins.anchor.toggleRelList.call(this,e,!1),this.context.anchor.callerContext=null,this.plugins.selectMenu.init.call(this,this.context.selectMenu.callerContext)}},u={name:"link",display:"dialog",add:function(e){e.addModule([r.a,d]);const t=e.context,n=t.link={focusElement:null,_linkAnchor:null,anchorCtx:null};let i=this.setDialog(e);n.modal=i;let l=this.setController_LinkButton(e);n.linkController=l,i.querySelector("form").addEventListener("submit",this.submit.bind(e)),l.addEventListener("click",this.onClick_linkController.bind(e)),t.dialog.modal.appendChild(i),t.element.relative.appendChild(l),e.plugins.anchor.initEvent.call(e,"link",i),n.focusElement=t.anchor.caller.link.urlInput,i=null,l=null},setDialog:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.icons;n.className="se-dialog-content",n.style.display="none";let l='<form><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+i.cancel+'</button><span class="se-modal-title">'+t.dialogBox.linkBox.title+"</span></div>"+e.context.anchor.forms.innerHTML+'<div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+t.dialogBox.submitButton+'" aria-label="'+t.dialogBox.submitButton+'"><span>'+t.dialogBox.submitButton+"</span></button></div></form>";return n.innerHTML=l,n},setController_LinkButton:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-link",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><span><a target="_blank" href=""></a>&nbsp;</span><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-btn se-tooltip">'+n.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="unlink" tabindex="-1" class="se-btn se-tooltip">'+n.unlink+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.unlink+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},open:function(){this.plugins.dialog.open.call(this,"link","link"===this.currentControllerName)},submit:function(e){this.showLoading(),e.preventDefault(),e.stopPropagation();try{const e=this.plugins.anchor.createAnchor.call(this,this.context.anchor.caller.link,!1);if(null===e)return;if(this.context.dialog.updateModal){const e=this.context.link._linkAnchor.childNodes[0];this.setRange(e,0,e,e.textContent.length)}else{const t=this.getSelectedElements();if(t.length>1){const n=this.util.createElement(t[0].nodeName);if(n.appendChild(e),!this.insertNode(n,null,!0))return}else if(!this.insertNode(e,null,!0))return;this.setRange(e.childNodes[0],0,e.childNodes[0],e.textContent.length)}}finally{this.plugins.dialog.close.call(this),this.closeLoading(),this.history.push(!1)}return!1},active:function(e){if(e){if(this.util.isAnchor(e)&&null===e.getAttribute("data-image-link"))return this.controllerArray.indexOf(this.context.link.linkController)<0&&this.plugins.link.call_controller.call(this,e),!0}else this.controllerArray.indexOf(this.context.link.linkController)>-1&&this.controllersOff();return!1},on:function(e){this.plugins.anchor.on.call(this,this.context.anchor.caller.link,e)},call_controller:function(e){this.editLink=this.context.link._linkAnchor=this.context.anchor.caller.link.linkAnchor=e;const t=this.context.link.linkController,n=t.querySelector("a");n.href=e.href,n.title=e.textContent,n.textContent=e.textContent,this.util.addClass(e,"on"),this.setControllerPosition(t,e,"bottom",{left:0,top:0}),this.controllersOn(t,e,"link",this.util.removeClass.bind(this.util,this.context.link._linkAnchor,"on"))},onClick_linkController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")||e.target.parentNode.getAttribute("data-command");if(t){if(e.preventDefault(),/update/.test(t))this.plugins.dialog.open.call(this,"link",!0);else if(/unlink/.test(t)){const e=this.util.getChildElement(this.context.link._linkAnchor,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1),t=this.util.getChildElement(this.context.link._linkAnchor,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0);this.setRange(e,0,t,t.textContent.length),this.nodeChange(null,null,["A"],!1)}else this.util.removeItem(this.context.link._linkAnchor),this.context.anchor.caller.link.linkAnchor=null,this.focus(),this.history.push(!1);this.controllersOff()}},init:function(){this.context.link.linkController.style.display="none",this.plugins.anchor.init.call(this,this.context.anchor.caller.link)}},h=n("ZED3"),g=n.n(h),p=n("ee5k"),m=n.n(p),f=n("gjS+"),_=n.n(f),b={name:"image",display:"dialog",add:function(e){e.addModule([r.a,d,g.a,m.a,_.a]);const t=e.options,n=e.context,i=n.image={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,sizeUnit:t._imageSizeUnit,_linkElement:"",_altText:"",_align:"none",_floatClassRegExp:"__se__float\\-[a-z]+",_v_src:{_linkValue:""},svgDefaultSize:"30%",base64RenderIndex:0,_element:null,_cover:null,_container:null,inputX:null,inputY:null,_element_w:1,_element_h:1,_element_l:0,_element_t:0,_defaultSizeX:"auto",_defaultSizeY:"auto",_origin_w:"auto"===t.imageWidth?"":t.imageWidth,_origin_h:"auto"===t.imageHeight?"":t.imageHeight,_proportionChecked:!0,_resizing:t.imageResizing,_resizeDotHide:!t.imageHeightShow,_rotation:t.imageRotation,_alignHide:!t.imageAlignShow,_onlyPercentage:t.imageSizeOnlyPercentage,_ratio:!1,_ratioX:1,_ratioY:1,_captionShow:!0,_captionChecked:!1,_caption:null,captionCheckEl:null};let l=this.setDialog(e);i.modal=l,i.imgInputFile=l.querySelector("._se_image_file"),i.imgUrlFile=l.querySelector("._se_image_url"),i.focusElement=i.imgInputFile||i.imgUrlFile,i.altText=l.querySelector("._se_image_alt"),i.captionCheckEl=l.querySelector("._se_image_check_caption"),i.previewSrc=l.querySelector("._se_tab_content_image .se-link-preview"),l.querySelector(".se-dialog-tabs").addEventListener("click",this.openTab.bind(e)),l.querySelector("form").addEventListener("submit",this.submit.bind(e)),i.imgInputFile&&l.querySelector(".se-file-remove").addEventListener("click",this._removeSelectedFiles.bind(i.imgInputFile,i.imgUrlFile,i.previewSrc)),i.imgUrlFile&&i.imgUrlFile.addEventListener("input",this._onLinkPreview.bind(i.previewSrc,i._v_src,t.linkProtocol)),i.imgInputFile&&i.imgUrlFile&&i.imgInputFile.addEventListener("change",this._fileInputChange.bind(i));const o=l.querySelector(".__se__gallery");o&&o.addEventListener("click",this._openGallery.bind(e)),i.proportion={},i.inputX={},i.inputY={},t.imageResizing&&(i.proportion=l.querySelector("._se_image_check_proportion"),i.inputX=l.querySelector("._se_image_size_x"),i.inputY=l.querySelector("._se_image_size_y"),i.inputX.value=t.imageWidth,i.inputY.value=t.imageHeight,i.inputX.addEventListener("keyup",this.setInputSize.bind(e,"x")),i.inputY.addEventListener("keyup",this.setInputSize.bind(e,"y")),i.inputX.addEventListener("change",this.setRatio.bind(e)),i.inputY.addEventListener("change",this.setRatio.bind(e)),i.proportion.addEventListener("change",this.setRatio.bind(e)),l.querySelector(".se-dialog-btn-revert").addEventListener("click",this.sizeRevert.bind(e))),n.dialog.modal.appendChild(l),e.plugins.anchor.initEvent.call(e,"image",l.querySelector("._se_tab_content_url")),i.anchorCtx=e.context.anchor.caller.image,l=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content se-dialog-image",i.style.display="none";let l='<div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" class="close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.imageBox.title+'</span></div><div class="se-dialog-tabs"><button type="button" class="_se_tab_link active" data-tab-link="image">'+n.toolbar.image+'</button><button type="button" class="_se_tab_link" data-tab-link="url">'+n.toolbar.link+'</button></div><form method="post" enctype="multipart/form-data"><div class="_se_tab_content _se_tab_content_image"><div class="se-dialog-body"><div style="border-bottom: 1px dashed #ccc;">';if(t.imageFileInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.imageBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_image_file" type="file" accept="'+t.imageAccept+'"'+(t.imageMultipleFile?' multiple="multiple"':"")+'/><button type="button" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.imageUrlInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.imageBox.url+'</label><div class="se-dialog-form-files"><input class="se-input-form se-input-url _se_image_url" type="text" />'+(t.imageGalleryUrl&&e.plugins.imageGallery?'<button type="button" class="se-btn se-dialog-files-edge-button __se__gallery" title="'+n.toolbar.imageGallery+'" aria-label="'+n.toolbar.imageGallery+'">'+e.icons.image_gallery+"</button>":"")+'</div><pre class="se-link-preview"></pre></div>'),l+='</div><div class="se-dialog-form"><label>'+n.dialogBox.imageBox.altText+'</label><input class="se-input-form _se_image_alt" type="text" /></div>',t.imageResizing){const i=t.imageSizeOnlyPercentage,o=i?' style="display: none !important;"':"",s=t.imageHeightShow?"":' style="display: none !important;"';l+='<div class="se-dialog-form">',i||!t.imageHeightShow?l+='<div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.size+"</label></div>":l+='<div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.width+'</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h">'+n.dialogBox.height+"</label></div>",l+='<input class="se-input-control _se_image_size_x" placeholder="auto"'+(i?' type="number" min="1"':'type="text"')+(i?' max="100"':"")+' /><label class="se-dialog-size-x"'+s+">"+(i?"%":"x")+'</label><input type="text" class="se-input-control _se_image_size_y" placeholder="auto"'+o+(i?' max="100"':"")+s+"/><label"+o+s+'><input type="checkbox" class="se-dialog-btn-check _se_image_check_proportion" checked/>&nbsp;'+n.dialogBox.proportion+'</label><button type="button" title="'+n.dialogBox.revertButton+'" aria-label="'+n.dialogBox.revertButton+'" class="se-btn se-dialog-btn-revert" style="float: right;">'+e.icons.revert+"</button></div>"}return l+='<div class="se-dialog-form se-dialog-form-footer"><label><input type="checkbox" class="se-dialog-btn-check _se_image_check_caption" />&nbsp;'+n.dialogBox.caption+'</label></div></div></div><div class="_se_tab_content _se_tab_content_url" style="display: none">'+e.context.anchor.forms.innerHTML+'</div><div class="se-dialog-footer"><div'+(t.imageAlignShow?"":' style="display: none"')+'><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="none" checked>'+n.dialogBox.basic+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="left">'+n.dialogBox.left+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="center">'+n.dialogBox.center+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="right">'+n.dialogBox.right+'</label></div><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=l,i},_fileInputChange:function(){this.imgInputFile.value?(this.imgUrlFile.setAttribute("disabled",!0),this.previewSrc.style.textDecoration="line-through"):(this.imgUrlFile.removeAttribute("disabled"),this.previewSrc.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_openGallery:function(){this.callPlugin("imageGallery",this.plugins.imageGallery.open.bind(this,this.plugins.image._setUrlInput.bind(this.context.image)),null)},_setUrlInput:function(e){this.altText.value=e.alt,this._v_src._linkValue=this.previewSrc.textContent=this.imgUrlFile.value=e.getAttribute("data-value")||e.src,this.imgUrlFile.focus()},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},fileTags:["img"],select:function(e){this.plugins.image.onModifyMode.call(this,e,this.plugins.resizing.call_controller_resize.call(this,e,"image"))},destroy:function(e){const t=e||this.context.image._element,n=this.util.getParentElement(t,this.util.isMediaComponent)||t,i=1*t.getAttribute("data-index");if("function"==typeof this.functions.onImageDeleteBefore&&!1===this.functions.onImageDeleteBefore(t,n,i,this))return;let l=n.previousElementSibling||n.nextElementSibling;const o=n.parentNode;this.util.removeItem(n),this.plugins.image.init.call(this),this.controllersOff(),o!==this.context.element.wysiwyg&&this.util.removeItemAllParents(o,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(l),this.plugins.fileManager.deleteInfo.call(this,"image",i,this.functions.onImageUpload),this.history.push(!1)},on:function(e){const t=this.context.image;e?t.imgInputFile&&this.options.imageMultipleFile&&t.imgInputFile.removeAttribute("multiple"):(t.inputX.value=t._origin_w=this.options.imageWidth===t._defaultSizeX?"":this.options.imageWidth,t.inputY.value=t._origin_h=this.options.imageHeight===t._defaultSizeY?"":this.options.imageHeight,t.imgInputFile&&this.options.imageMultipleFile&&t.imgInputFile.setAttribute("multiple","multiple")),this.plugins.anchor.on.call(this,t.anchorCtx,e)},open:function(){this.plugins.dialog.open.call(this,"image","image"===this.currentControllerName)},openTab:function(e){const t=this.context.image.modal,n="init"===e?t.querySelector("._se_tab_link"):e.target;if(!/^BUTTON$/i.test(n.tagName))return!1;const i=n.getAttribute("data-tab-link");let l,o,s;for(o=t.getElementsByClassName("_se_tab_content"),l=0;l<o.length;l++)o[l].style.display="none";for(s=t.getElementsByClassName("_se_tab_link"),l=0;l<s.length;l++)this.util.removeClass(s[l],"active");return t.querySelector("._se_tab_content_"+i).style.display="block",this.util.addClass(n,"active"),"image"===i&&this.context.image.focusElement?this.context.image.focusElement.focus():"url"===i&&this.context.anchor.caller.image.urlInput.focus(),!1},submit:function(e){const t=this.context.image,n=this.plugins.image;e.preventDefault(),e.stopPropagation(),t._altText=t.altText.value,t._align=t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value,t._captionChecked=t.captionCheckEl.checked,t._resizing&&(t._proportionChecked=t.proportion.checked);try{this.context.dialog.updateModal&&n.update_image.call(this,!1,!0,!1),t.imgInputFile&&t.imgInputFile.files.length>0?(this.showLoading(),n.submitAction.call(this,this.context.image.imgInputFile.files)):t.imgUrlFile&&t._v_src._linkValue.length>0&&(this.showLoading(),n.onRender_imgUrl.call(this,t._v_src._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.image.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,l=e.length;i<l;i++)/image/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.imageUploadSizeLimit;if(i>0){let e=0;const n=this.context.image._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.imageUpload.fail] Size of uploadable total images: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onImageUploadError||this.functions.onImageUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const l=this.context.image;l._uploadFileLength=n.length;const o={anchor:this.plugins.anchor.createAnchor.call(this,l.anchorCtx,!0),inputWidth:l.inputX.value,inputHeight:l.inputY.value,align:l._align,isUpdate:this.context.dialog.updateModal,alt:l._altText,element:l._element};if("function"==typeof this.functions.onImageUploadBefore){const e=this.functions.onImageUploadBefore(n,o,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.image.register.call(this,o,e):this.plugins.image.upload.call(this,o,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();this._w.Array.isArray(e)&&e.length>0&&(n=e)}this.plugins.image.upload.call(this,o,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onImageUploadError||this.functions.onImageUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.image.error] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.image.error.call(this,t,null);const n=this.options.imageUploadUrl,i=this.context.dialog.updateModal?1:t.length;if("string"==typeof n&&n.length>0){const l=new FormData;for(let e=0;e<i;e++)l.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.imageUploadHeader,l,this.plugins.image.callBack_imgUpload.bind(this,e),this.functions.onImageUploadError)}else this.plugins.image.setup_reader.call(this,t,e.anchor,e.inputWidth,e.inputHeight,e.align,e.alt,i,e.isUpdate)},callBack_imgUpload:function(e,t){if("function"==typeof this.functions.imageUploadHandler)this.functions.imageUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.image.error.call(this,n.errorMessage,n):this.plugins.image.register.call(this,e,n)}},register:function(e,t){const n=t.result;for(let t,i=0,l=n.length;i<l;i++){if(t={name:n[i].name,size:n[i].size},e.isUpdate){this.plugins.image.update_src.call(this,n[i].url,e.element,t);break}this.plugins.image.create_image.call(this,n[i].url,e.anchor,e.inputWidth,e.inputHeight,e.align,t,e.alt)}this.closeLoading()},setup_reader:function(e,t,n,i,l,o,s,a){try{if(0===s)return this.closeLoading(),void console.warn("[SUNEDITOR.image.base64.fail] cause : No applicable files");this.context.image.base64RenderIndex=s;const r=this._w.FileReader,c=[s];this.context.image.inputX.value=n,this.context.image.inputY.value=i;for(let d,u,h=0;h<s;h++)d=new r,u=e[h],d.onload=function(e,s,a,r,d){c[d]={result:e.result,file:r},0==--this.context.image.base64RenderIndex&&(this.plugins.image.onRender_imgBase64.call(this,s,c,a,t,n,i,l,o),this.closeLoading())}.bind(this,d,a,this.context.image._element,u,h),d.readAsDataURL(u)}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.image.setup_reader.fail] cause : "'+e.message+'"')}},onRender_imgBase64:function(e,t,n,i,l,o,s,a){const r=this.plugins.image.update_src,c=this.plugins.image.create_image;for(let d=0,u=t.length;d<u;d++)e?(this.context.image._element.setAttribute("data-file-name",t[d].file.name),this.context.image._element.setAttribute("data-file-size",t[d].file.size),r.call(this,t[d].result,n,t[d].file)):c.call(this,t[d].result,i,l,o,s,t[d].file,a)},onRender_imgUrl:function(e){if(e||(e=this.context.image._v_src._linkValue),!e)return!1;const t=this.context.image;try{const n={name:e.split("/").pop(),size:0};this.context.dialog.updateModal?this.plugins.image.update_src.call(this,e,t._element,n):this.plugins.image.create_image.call(this,e,this.plugins.anchor.createAnchor.call(this,t.anchorCtx,!0),t.inputX.value,t.inputY.value,t._align,n,t._altText)}catch(e){throw Error('[SUNEDITOR.image.URLRendering.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},onRender_link:function(e,t){return t?(t.setAttribute("data-image-link","image"),e.setAttribute("data-image-link",t.href),t.appendChild(e),t):e},setInputSize:function(e,t){t&&32===t.keyCode?t.preventDefault():this.plugins.resizing._module_setInputSize.call(this,this.context.image,e)},setRatio:function(){this.plugins.resizing._module_setRatio.call(this,this.context.image)},checkFileInfo:function(){const e=this.plugins.image,t=this.context.image,n=function(n){e.onModifyMode.call(this,n,null),e.openModify.call(this,!0),t.inputX.value=t._origin_w,t.inputY.value=t._origin_h;const i=this.util.getFormatElement(n);i&&(t._align=i.style.textAlign||i.style.float),this.util.isAnchor(n.parentNode)&&!t.anchorCtx.linkValue&&(t.anchorCtx.linkValue=" "),e.update_image.call(this,!0,!1,!0),e.init.call(this)}.bind(this);this.plugins.fileManager.checkInfo.call(this,"image",["img"],this.functions.onImageUpload,n,!0)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"image",this.functions.onImageUpload)},create_image:function(e,t,n,i,l,o,s){const a=this.plugins.image,r=this.context.image;this.context.resizing._resize_plugin="image";let c=this.util.createElement("IMG");c.src=e,c.alt=s,c.setAttribute("data-rotate","0"),t=a.onRender_link.call(this,c,t?t.cloneNode(!1):null),r._resizing&&c.setAttribute("data-proportion",r._proportionChecked);const d=this.plugins.component.set_cover.call(this,t),u=this.plugins.component.set_container.call(this,d,"se-image-container");r._captionChecked&&(r._caption=this.plugins.component.create_caption.call(this),d.appendChild(r._caption)),r._element=c,r._cover=d,r._container=u,a.applySize.call(this,n,i),a.setAlign.call(this,l,c,d,u),c.onload=a._image_create_onload.bind(this,c,r.svgDefaultSize,u),this.insertComponent(u,!0,!0,!0)&&this.plugins.fileManager.setInfo.call(this,"image",c,this.functions.onImageUpload,o,!0),this.context.resizing._resize_plugin=""},_image_create_onload:function(e,t,n){if(0===e.offsetWidth&&this.plugins.image.applySize.call(this,t,""),this.options.mediaAutoSelect)this.selectComponent(e,"image");else{const e=this.appendFormatTag(n,null);e&&this.setRange(e,0,e,0)}},update_image:function(e,t,n){const i=this.context.image;let l,o=i._element,s=i._cover,a=i._container,r=!1;null===s&&(r=!0,o=i._element.cloneNode(!0),s=this.plugins.component.set_cover.call(this,o)),null===a?(s=s.cloneNode(!0),o=s.querySelector("img"),r=!0,a=this.plugins.component.set_container.call(this,s,"se-image-container")):r&&(a.innerHTML="",a.appendChild(s),i._cover=s,i._element=o,r=!1);const c=this.util.isNumber(i.inputX.value)?i.inputX.value+i.sizeUnit:i.inputX.value,d=this.util.isNumber(i.inputY.value)?i.inputY.value+i.sizeUnit:i.inputY.value;l=/%$/.test(o.style.width)?c!==a.style.width||d!==a.style.height:c!==o.style.width||d!==o.style.height,o.alt=i._altText;let u=!1;i._captionChecked?i._caption||(i._caption=this.plugins.component.create_caption.call(this),s.appendChild(i._caption),u=!0):i._caption&&(this.util.removeItem(i._caption),i._caption=null,u=!0);let h=null;const g=this.plugins.anchor.createAnchor.call(this,i.anchorCtx,!0);if(g)i._linkElement!==g||r&&!a.contains(g)?(i._linkElement=g.cloneNode(!1),s.insertBefore(this.plugins.image.onRender_link.call(this,o,i._linkElement),i._caption),h=i._element):i._linkElement.setAttribute("data-image-link","image");else if(null!==i._linkElement){const e=o;if(e.setAttribute("data-image-link",""),s.contains(i._linkElement)){const t=e.cloneNode(!0);s.removeChild(i._linkElement),s.insertBefore(t,i._caption),i._element=o=t}}let p=null;if(r){if(p=this.util.isRangeFormatElement(i._element.parentNode)||this.util.isWysiwygDiv(i._element.parentNode)?i._element:this.util.isAnchor(i._element.parentNode)?i._element.parentNode:this.util.getFormatElement(i._element)||i._element,this.util.getParentElement(i._element,this.util.isNotCheckingNode))p=h?g:i._element,p.parentNode.replaceChild(a,p);else if(this.util.isListCell(p)){const e=this.util.getParentElement(i._element,(function(e){return e.parentNode===p}));p.insertBefore(a,e),this.util.removeItem(i._element),this.util.removeEmptyNode(e,null,!0)}else if(this.util.isFormatElement(p)){const e=this.util.getParentElement(i._element,(function(e){return e.parentNode===p}));p=this.util.splitElement(p,e),p.parentNode.insertBefore(a,p),this.util.removeItem(i._element),this.util.removeEmptyNode(p,null,!0),0===p.children.length&&(p.innerHTML=this.util.htmlRemoveWhiteSpace(p.innerHTML))}else if(this.util.isFormatElement(p.parentNode)){const e=p.parentNode;e.parentNode.insertBefore(a,p.previousSibling?e.nextElementSibling:e),0===i.__updateTags.map((function(e){return p.contains(e)})).length&&this.util.removeItem(p)}else p=this.util.isFigures(p.parentNode)?p.parentNode:p,p.parentNode.replaceChild(a,p);o=a.querySelector("img"),i._element=o,i._cover=s,i._container=a}h&&(r?(this.util.removeItem(h),0===this.util.getListChildren(g,(function(e){return/IMG/i.test(e.tagName)})).length&&this.util.removeItem(g)):this.util.removeItem(g)),(u||!i._onlyPercentage&&l)&&!e&&(/\d+/.test(o.style.height)||this.context.resizing._rotateVertical&&i._captionChecked)&&(/%$/.test(i.inputX.value)||/%$/.test(i.inputY.value)?this.plugins.resizing.resetTransform.call(this,o):this.plugins.resizing.setTransformSize.call(this,o,this.util.getNumber(i.inputX.value,0),this.util.getNumber(i.inputY.value,0))),i._resizing&&(o.setAttribute("data-proportion",i._proportionChecked),l&&this.plugins.image.applySize.call(this)),this.plugins.image.setAlign.call(this,null,o,null,null),e&&this.plugins.fileManager.setInfo.call(this,"image",o,this.functions.onImageUpload,null,!0),t&&this.selectComponent(o,"image"),n||this.history.push(!1)},update_src:function(e,t,n){t.src=e,this._w.setTimeout(this.plugins.fileManager.setInfo.bind(this,"image",t,this.functions.onImageUpload,n,!0)),this.selectComponent(t,"image")},onModifyMode:function(e,t){if(!e)return;const n=this.context.image;n._linkElement=n.anchorCtx.linkAnchor=this.util.isAnchor(e.parentNode)?e.parentNode:null,n._element=e,n._cover=this.util.getParentElement(e,"FIGURE"),n._container=this.util.getParentElement(e,this.util.isMediaComponent),n._caption=this.util.getChildElement(n._cover,"FIGCAPTION"),n._align=e.getAttribute("data-align")||e.style.float||"none",e.style.float="",this.plugins.anchor.setCtx(n._linkElement,n.anchorCtx),t&&(n._element_w=t.w,n._element_h=t.h,n._element_t=t.t,n._element_l=t.l);let i,l,o=n._element.getAttribute("data-size")||n._element.getAttribute("data-origin");o?(o=o.split(","),i=o[0],l=o[1]):t&&(i=t.w,l=t.h),n._origin_w=i||e.style.width||e.width||"",n._origin_h=l||e.style.height||e.height||""},openModify:function(e){const t=this.context.image;t.imgUrlFile&&(t._v_src._linkValue=t.previewSrc.textContent=t.imgUrlFile.value=t._element.src),t._altText=t.altText.value=t._element.alt,(t.modal.querySelector('input[name="suneditor_image_radio"][value="'+t._align+'"]')||t.modal.querySelector('input[name="suneditor_image_radio"][value="none"]')).checked=!0,t._align=t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value,t._captionChecked=t.captionCheckEl.checked=!!t._caption,t._resizing&&this.plugins.resizing._module_setModifyInputSize.call(this,t,this.plugins.image),e||this.plugins.dialog.open.call(this,"image",!0)},applySize:function(e,t){const n=this.context.image;return e||(e=n.inputX.value||this.options.imageWidth),t||(t=n.inputY.value||this.options.imageHeight),n._onlyPercentage&&e||/%$/.test(e)?(this.plugins.image.setPercentSize.call(this,e,t),!0):(e&&"auto"!==e||t&&"auto"!==t?this.plugins.image.setSize.call(this,e,t,!1):this.plugins.image.setAutoSize.call(this),!1)},sizeRevert:function(){this.plugins.resizing._module_sizeRevert.call(this,this.context.image)},setSize:function(e,t,n,i){const l=this.context.image,o=/^(rw|lw)$/.test(i)&&/\d+/.test(l._element.style.height);/^(th|bh)$/.test(i)&&/\d+/.test(l._element.style.width)||(l._element.style.width=this.util.isNumber(e)?e+l.sizeUnit:e,this.plugins.image.cancelPercentAttr.call(this)),o||(l._element.style.height=this.util.isNumber(t)?t+l.sizeUnit:/%$/.test(t)?"":t),"center"===l._align&&this.plugins.image.setAlign.call(this,null,null,null,null),n||l._element.removeAttribute("data-percentage"),this.plugins.resizing._module_saveCurrentSize.call(this,l)},setAutoSize:function(){const e=this.context.image;e._caption&&(e._caption.style.marginTop=""),this.plugins.resizing.resetTransform.call(this,e._element),this.plugins.image.cancelPercentAttr.call(this),e._element.style.maxWidth="",e._element.style.width="",e._element.style.height="",e._cover&&(e._cover.style.width="",e._cover.style.height=""),this.plugins.image.setAlign.call(this,null,null,null,null),e._element.setAttribute("data-percentage","auto,auto"),this.plugins.resizing._module_saveCurrentSize.call(this,e)},setOriginSize:function(){const e=this.context.image;e._element.removeAttribute("data-percentage"),this.plugins.resizing.resetTransform.call(this,e._element),this.plugins.image.cancelPercentAttr.call(this);const t=(e._element.getAttribute("data-origin")||"").split(","),n=t[0],i=t[1];t&&(e._onlyPercentage||/%$/.test(n)&&(/%$/.test(i)||!/\d/.test(i))?this.plugins.image.setPercentSize.call(this,n,i):this.plugins.image.setSize.call(this,n,i),this.plugins.resizing._module_saveCurrentSize.call(this,e))},setPercentSize:function(e,t){const n=this.context.image;t=!t||/%$/.test(t)||this.util.getNumber(t,0)?this.util.isNumber(t)?t+n.sizeUnit:t||"":this.util.isNumber(t)?t+"%":t;const i=/%$/.test(t);n._container&&(n._container.style.width=this.util.isNumber(e)?e+"%":e,n._container.style.height=""),n._cover&&(n._cover.style.width="100%",n._cover.style.height=i?t:""),n._element.style.width="100%",n._element.style.height=i?"":t,n._element.style.maxWidth="","center"===n._align&&this.plugins.image.setAlign.call(this,null,null,null,null),n._element.setAttribute("data-percentage",e+","+t),this.plugins.resizing.setCaptionPosition.call(this,n._element),this.plugins.resizing._module_saveCurrentSize.call(this,n)},cancelPercentAttr:function(){const e=this.context.image;e._cover&&(e._cover.style.width="",e._cover.style.height=""),e._container&&(e._container.style.width="",e._container.style.height=""),this.util.removeClass(e._container,this.context.image._floatClassRegExp),this.util.addClass(e._container,"__se__float-"+e._align),"center"===e._align&&this.plugins.image.setAlign.call(this,null,null,null,null)},setAlign:function(e,t,n,i){const l=this.context.image;e||(e=l._align),t||(t=l._element),n||(n=l._cover),i||(i=l._container),/%$/.test(t.style.width)&&"center"===e?(i&&(i.style.minWidth="100%"),n&&(n.style.width=i.style.width)):(i&&(i.style.minWidth=""),n&&(n.style.width=this.context.resizing._rotateVertical?t.style.height||t.offsetHeight:t.style.width&&"auto"!==t.style.width?t.style.width||"100%":"")),this.util.hasClass(i,"__se__float-"+e)||(this.util.removeClass(i,l._floatClassRegExp),this.util.addClass(i,"__se__float-"+e)),t.setAttribute("data-align",e)},init:function(){const e=this.context.image;e.imgInputFile&&(e.imgInputFile.value=""),e.imgUrlFile&&(e._v_src._linkValue=e.previewSrc.textContent=e.imgUrlFile.value=""),e.imgInputFile&&e.imgUrlFile&&(e.imgUrlFile.removeAttribute("disabled"),e.previewSrc.style.textDecoration=""),e.altText.value="",e.modal.querySelector('input[name="suneditor_image_radio"][value="none"]').checked=!0,e.captionCheckEl.checked=!1,e._element=null,this.plugins.image.openTab.call(this,"init"),e._resizing&&(e.inputX.value=this.options.imageWidth===e._defaultSizeX?"":this.options.imageWidth,e.inputY.value=this.options.imageHeight===e._defaultSizeY?"":this.options.imageHeight,e.proportion.checked=!0,e._ratio=!1,e._ratioX=1,e._ratioY=1),this.plugins.anchor.init.call(this,e.anchorCtx)}},v={name:"video",display:"dialog",add:function(e){e.addModule([r.a,g.a,m.a,_.a]);const t=e.options,n=e.context,i=n.video={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,sizeUnit:t._videoSizeUnit,_align:"none",_floatClassRegExp:"__se__float\\-[a-z]+",_youtubeQuery:t.youtubeQuery,_videoRatio:100*t.videoRatio+"%",_defaultRatio:100*t.videoRatio+"%",_linkValue:"",_element:null,_cover:null,_container:null,inputX:null,inputY:null,_element_w:1,_element_h:1,_element_l:0,_element_t:0,_defaultSizeX:"100%",_defaultSizeY:100*t.videoRatio+"%",_origin_w:"100%"===t.videoWidth?"":t.videoWidth,_origin_h:"56.25%"===t.videoHeight?"":t.videoHeight,_proportionChecked:!0,_resizing:t.videoResizing,_resizeDotHide:!t.videoHeightShow,_rotation:t.videoRotation,_alignHide:!t.videoAlignShow,_onlyPercentage:t.videoSizeOnlyPercentage,_ratio:!1,_ratioX:1,_ratioY:1,_captionShow:!1};let l=this.setDialog(e);i.modal=l,i.videoInputFile=l.querySelector("._se_video_file"),i.videoUrlFile=l.querySelector(".se-input-url"),i.focusElement=i.videoUrlFile||i.videoInputFile,i.preview=l.querySelector(".se-link-preview"),l.querySelector("form").addEventListener("submit",this.submit.bind(e)),i.videoInputFile&&l.querySelector(".se-dialog-files-edge-button").addEventListener("click",this._removeSelectedFiles.bind(i.videoInputFile,i.videoUrlFile,i.preview)),i.videoInputFile&&i.videoUrlFile&&i.videoInputFile.addEventListener("change",this._fileInputChange.bind(i)),i.videoUrlFile&&i.videoUrlFile.addEventListener("input",this._onLinkPreview.bind(i.preview,i,t.linkProtocol)),i.proportion={},i.videoRatioOption={},i.inputX={},i.inputY={},t.videoResizing&&(i.proportion=l.querySelector("._se_video_check_proportion"),i.videoRatioOption=l.querySelector(".se-video-ratio"),i.inputX=l.querySelector("._se_video_size_x"),i.inputY=l.querySelector("._se_video_size_y"),i.inputX.value=t.videoWidth,i.inputY.value=t.videoHeight,i.inputX.addEventListener("keyup",this.setInputSize.bind(e,"x")),i.inputY.addEventListener("keyup",this.setInputSize.bind(e,"y")),i.inputX.addEventListener("change",this.setRatio.bind(e)),i.inputY.addEventListener("change",this.setRatio.bind(e)),i.proportion.addEventListener("change",this.setRatio.bind(e)),i.videoRatioOption.addEventListener("change",this.setVideoRatio.bind(e)),l.querySelector(".se-dialog-btn-revert").addEventListener("click",this.sizeRevert.bind(e))),n.dialog.modal.appendChild(l),l=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content",i.style.display="none";let l='<form method="post" enctype="multipart/form-data"><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.videoBox.title+'</span></div><div class="se-dialog-body">';if(t.videoFileInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.videoBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_video_file" type="file" accept="'+t.videoAccept+'"'+(t.videoMultipleFile?' multiple="multiple"':"")+'/><button type="button" data-command="filesRemove" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.videoUrlInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.videoBox.url+'</label><input class="se-input-form se-input-url" type="text" /><pre class="se-link-preview"></pre></div>'),t.videoResizing){const i=t.videoRatioList||[{name:"16:9",value:.5625},{name:"4:3",value:.75},{name:"21:9",value:.4285}],o=t.videoRatio,s=t.videoSizeOnlyPercentage,a=s?' style="display: none !important;"':"",r=t.videoHeightShow?"":' style="display: none !important;"',c=t.videoRatioShow?"":' style="display: none !important;"',d=s||t.videoHeightShow||t.videoRatioShow?"":' style="display: none !important;"';l+='<div class="se-dialog-form"><div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.width+'</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h"'+r+">"+n.dialogBox.height+'</label><label class="size-h"'+c+">("+n.dialogBox.ratio+')</label></div><input class="se-input-control _se_video_size_x" placeholder="100%"'+(s?' type="number" min="1"':'type="text"')+(s?' max="100"':"")+'/><label class="se-dialog-size-x"'+d+">"+(s?"%":"x")+'</label><input class="se-input-control _se_video_size_y" placeholder="'+100*t.videoRatio+'%"'+(s?' type="number" min="1"':'type="text"')+(s?' max="100"':"")+r+'/><select class="se-input-select se-video-ratio" title="'+n.dialogBox.ratio+'" aria-label="'+n.dialogBox.ratio+'"'+c+">",r||(l+='<option value=""> - </option>');for(let e=0,t=i.length;e<t;e++)l+='<option value="'+i[e].value+'"'+(o.toString()===i[e].value.toString()?" selected":"")+">"+i[e].name+"</option>";l+='</select><button type="button" title="'+n.dialogBox.revertButton+'" aria-label="'+n.dialogBox.revertButton+'" class="se-btn se-dialog-btn-revert" style="float: right;">'+e.icons.revert+'</button></div><div class="se-dialog-form se-dialog-form-footer"'+a+d+'><label><input type="checkbox" class="se-dialog-btn-check _se_video_check_proportion" checked/>&nbsp;'+n.dialogBox.proportion+"</label></div>"}return l+='</div><div class="se-dialog-footer"><div'+(t.videoAlignShow?"":' style="display: none"')+'><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="none" checked>'+n.dialogBox.basic+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="left">'+n.dialogBox.left+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="center">'+n.dialogBox.center+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="right">'+n.dialogBox.right+'</label></div><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=l,i},_fileInputChange:function(){this.videoInputFile.value?(this.videoUrlFile.setAttribute("disabled",!0),this.preview.style.textDecoration="line-through"):(this.videoUrlFile.removeAttribute("disabled"),this.preview.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();/^<iframe.*\/iframe>$/.test(i)?(e._linkValue=i,this.textContent='<IFrame :src=".."></IFrame>'):e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},_setTagAttrs:function(e){e.setAttribute("controls",!0);const t=this.options.videoTagAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},createVideoTag:function(){const e=this.util.createElement("VIDEO");return this.plugins.video._setTagAttrs.call(this,e),e},_setIframeAttrs:function(e){e.frameBorder="0",e.allowFullscreen=!0;const t=this.options.videoIframeAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},createIframeTag:function(){const e=this.util.createElement("IFRAME");return this.plugins.video._setIframeAttrs.call(this,e),e},fileTags:["iframe","video"],select:function(e){this.plugins.video.onModifyMode.call(this,e,this.plugins.resizing.call_controller_resize.call(this,e,"video"))},destroy:function(e){const t=e||this.context.video._element,n=this.context.video._container,i=1*t.getAttribute("data-index");if("function"==typeof this.functions.onVideoDeleteBefore&&!1===this.functions.onVideoDeleteBefore(t,n,i,this))return;let l=n.previousElementSibling||n.nextElementSibling;const o=n.parentNode;this.util.removeItem(n),this.plugins.video.init.call(this),this.controllersOff(),o!==this.context.element.wysiwyg&&this.util.removeItemAllParents(o,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(l),this.plugins.fileManager.deleteInfo.call(this,"video",i,this.functions.onVideoUpload),this.history.push(!1)},on:function(e){const t=this.context.video;e?t.videoInputFile&&this.options.videoMultipleFile&&t.videoInputFile.removeAttribute("multiple"):(t.inputX.value=t._origin_w=this.options.videoWidth===t._defaultSizeX?"":this.options.videoWidth,t.inputY.value=t._origin_h=this.options.videoHeight===t._defaultSizeY?"":this.options.videoHeight,t.proportion.disabled=!0,t.videoInputFile&&this.options.videoMultipleFile&&t.videoInputFile.setAttribute("multiple","multiple")),t._resizing&&this.plugins.video.setVideoRatioSelect.call(this,t._origin_h||t._defaultRatio)},open:function(){this.plugins.dialog.open.call(this,"video","video"===this.currentControllerName)},setVideoRatio:function(e){const t=this.context.video,n=e.target.options[e.target.selectedIndex].value;t._defaultSizeY=t._videoRatio=n?100*n+"%":t._defaultSizeY,t.inputY.placeholder=n?100*n+"%":"",t.inputY.value=""},setInputSize:function(e,t){if(t&&32===t.keyCode)return void t.preventDefault();const n=this.context.video;this.plugins.resizing._module_setInputSize.call(this,n,e),"y"===e&&this.plugins.video.setVideoRatioSelect.call(this,t.target.value||n._defaultRatio)},setRatio:function(){this.plugins.resizing._module_setRatio.call(this,this.context.video)},submit:function(e){const t=this.context.video,n=this.plugins.video;e.preventDefault(),e.stopPropagation(),t._align=t.modal.querySelector('input[name="suneditor_video_radio"]:checked').value;try{t.videoInputFile&&t.videoInputFile.files.length>0?(this.showLoading(),n.submitAction.call(this,this.context.video.videoInputFile.files)):t.videoUrlFile&&t._linkValue.length>0&&(this.showLoading(),n.setup_url.call(this,t._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.video.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,l=e.length;i<l;i++)/video/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.videoUploadSizeLimit;if(i>0){let e=0;const n=this.context.video._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.videoUpload.fail] Size of uploadable total videos: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onVideoUploadError||this.functions.onVideoUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const l=this.context.video;l._uploadFileLength=n.length;const o={inputWidth:l.inputX.value,inputHeight:l.inputY.value,align:l._align,isUpdate:this.context.dialog.updateModal,element:l._element};if("function"==typeof this.functions.onVideoUploadBefore){const e=this.functions.onVideoUploadBefore(n,o,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.video.register.call(this,o,e):this.plugins.video.upload.call(this,o,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();"object"==typeof e&&e.length>0&&(n=e)}this.plugins.video.upload.call(this,o,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onVideoUploadError||this.functions.onVideoUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.video.error] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.video.error.call(this,t,null);const n=this.options.videoUploadUrl,i=this.context.dialog.updateModal?1:t.length;if(!("string"==typeof n&&n.length>0))throw Error('[SUNEDITOR.videoUpload.fail] cause : There is no "videoUploadUrl" option.');{const l=new FormData;for(let e=0;e<i;e++)l.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.videoUploadHeader,l,this.plugins.video.callBack_videoUpload.bind(this,e),this.functions.onVideoUploadError)}},callBack_videoUpload:function(e,t){if("function"==typeof this.functions.videoUploadHandler)this.functions.videoUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.video.error.call(this,n.errorMessage,n):this.plugins.video.register.call(this,e,n)}},register:function(e,t){const n=t.result,i=this.plugins.video.createVideoTag.call(this);for(let t,l=0,o=n.length;l<o;l++)t={name:n[l].name,size:n[l].size},this.plugins.video.create_video.call(this,e.isUpdate?e.element:i.cloneNode(!1),n[l].url,e.inputWidth,e.inputHeight,e.align,t,e.isUpdate);this.closeLoading()},setup_url:function(e){try{const t=this.context.video;if(e||(e=t._linkValue),!e)return!1;if(/^<iframe.*\/iframe>$/.test(e)){if(0===(e=(new this._w.DOMParser).parseFromString(e,"text/html").querySelector("iframe").src).length)return!1}if(/youtu\.?be/.test(e)){if(/^http/.test(e)||(e="https://"+e),e=e.replace("watch?v=",""),/^\/\/.+\/embed\//.test(e)||(e=e.replace(e.match(/\/\/.+\//)[0],"//www.youtube.com/embed/").replace("&","?&")),t._youtubeQuery.length>0)if(/\?/.test(e)){const n=e.split("?");e=n[0]+"?"+t._youtubeQuery+"&"+n[1]}else e+="?"+t._youtubeQuery}else/vimeo\.com/.test(e)&&(e.endsWith("/")&&(e=e.slice(0,-1)),e="https://player.vimeo.com/video/"+e.slice(e.lastIndexOf("/")+1));this.plugins.video.create_video.call(this,this.plugins.video[/embed|iframe|player|\/e\/|\.php|\.html?/.test(e)||/vimeo\.com/.test(e)?"createIframeTag":"createVideoTag"].call(this),e,t.inputX.value,t.inputY.value,t._align,null,this.context.dialog.updateModal)}catch(e){throw Error('[SUNEDITOR.video.upload.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},create_video:function(e,t,n,i,l,o,s){this.context.resizing._resize_plugin="video";const a=this.context.video;let r=null,c=null,d=!1;if(s){if((e=a._element).src!==t){d=!0;const n=/youtu\.?be/.test(t),i=/vimeo\.com/.test(t);if(!n&&!i||/^iframe$/i.test(e.nodeName))if(n||i||/^video$/i.test(e.nodeName))e.src=t;else{const n=this.plugins.video.createVideoTag.call(this);n.src=t,e.parentNode.replaceChild(n,e),a._element=e=n}else{const n=this.plugins.video.createIframeTag.call(this);n.src=t,e.parentNode.replaceChild(n,e),a._element=e=n}}c=a._container,r=this.util.getParentElement(e,"FIGURE")}else d=!0,e.src=t,a._element=e,r=this.plugins.component.set_cover.call(this,e),c=this.plugins.component.set_container.call(this,r,"se-video-container");a._cover=r,a._container=c;const u=this.plugins.resizing._module_getSizeX.call(this,a)!==(n||a._defaultSizeX)||this.plugins.resizing._module_getSizeY.call(this,a)!==(i||a._videoRatio),h=!s||u;a._resizing&&(this.context.video._proportionChecked=a.proportion.checked,e.setAttribute("data-proportion",a._proportionChecked));let g=!1;h&&(g=this.plugins.video.applySize.call(this)),g&&"center"===l||this.plugins.video.setAlign.call(this,null,e,r,c);let p=!0;if(s)a._resizing&&this.context.resizing._rotateVertical&&h&&this.plugins.resizing.setTransformSize.call(this,e,null,null);else if(p=this.insertComponent(c,!1,!0,!this.options.mediaAutoSelect),!this.options.mediaAutoSelect){const e=this.appendFormatTag(c,null);e&&this.setRange(e,0,e,0)}p&&(d&&this.plugins.fileManager.setInfo.call(this,"video",e,this.functions.onVideoUpload,o,!0),s&&(this.selectComponent(e,"video"),this.history.push(!1))),this.context.resizing._resize_plugin=""},_update_videoCover:function(e){if(!e)return;const t=this.context.video;/^video$/i.test(e.nodeName)?this.plugins.video._setTagAttrs.call(this,e):this.plugins.video._setIframeAttrs.call(this,e);let n=this.util.isRangeFormatElement(e.parentNode)||this.util.isWysiwygDiv(e.parentNode)?e:this.util.getFormatElement(e)||e;const i=e;t._element=e=e.cloneNode(!0);const l=t._cover=this.plugins.component.set_cover.call(this,e),o=t._container=this.plugins.component.set_container.call(this,l,"se-video-container");try{const s=n.querySelector("figcaption");let a=null;s&&(a=this.util.createElement("DIV"),a.innerHTML=s.innerHTML,this.util.removeItem(s));const r=(e.getAttribute("data-size")||e.getAttribute("data-origin")||"").split(",");this.plugins.video.applySize.call(this,r[0]||i.style.width||i.width||"",r[1]||i.style.height||i.height||"");const c=this.util.getFormatElement(i);if(c&&(t._align=c.style.textAlign||c.style.float),this.plugins.video.setAlign.call(this,null,e,l,o),this.util.getParentElement(i,this.util.isNotCheckingNode))i.parentNode.replaceChild(o,i);else if(this.util.isListCell(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n.insertBefore(o,e),this.util.removeItem(i),this.util.removeEmptyNode(e,null,!0)}else if(this.util.isFormatElement(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n=this.util.splitElement(n,e),n.parentNode.insertBefore(o,n),this.util.removeItem(i),this.util.removeEmptyNode(n,null,!0),0===n.children.length&&(n.innerHTML=this.util.htmlRemoveWhiteSpace(n.innerHTML))}else n.parentNode.replaceChild(o,n);a&&n.parentNode.insertBefore(a,o.nextElementSibling)}catch(e){console.warn("[SUNEDITOR.video.error] Maybe the video tag is nested.",e)}this.plugins.fileManager.setInfo.call(this,"video",e,this.functions.onVideoUpload,null,!0),this.plugins.video.init.call(this)},onModifyMode:function(e,t){const n=this.context.video;n._element=e,n._cover=this.util.getParentElement(e,"FIGURE"),n._container=this.util.getParentElement(e,this.util.isMediaComponent),n._align=e.style.float||e.getAttribute("data-align")||"none",e.style.float="",t&&(n._element_w=t.w,n._element_h=t.h,n._element_t=t.t,n._element_l=t.l);let i,l,o=n._element.getAttribute("data-size")||n._element.getAttribute("data-origin");o?(o=o.split(","),i=o[0],l=o[1]):t&&(i=t.w,l=t.h),n._origin_w=i||e.style.width||e.width||"",n._origin_h=l||e.style.height||e.height||""},openModify:function(e){const t=this.context.video;if(t.videoUrlFile&&(t._linkValue=t.preview.textContent=t.videoUrlFile.value=t._element.src||(t._element.querySelector("source")||"").src||""),(t.modal.querySelector('input[name="suneditor_video_radio"][value="'+t._align+'"]')||t.modal.querySelector('input[name="suneditor_video_radio"][value="none"]')).checked=!0,t._resizing){this.plugins.resizing._module_setModifyInputSize.call(this,t,this.plugins.video);const e=t._videoRatio=this.plugins.resizing._module_getSizeY.call(this,t);this.plugins.video.setVideoRatioSelect.call(this,e)||(t.inputY.value=t._onlyPercentage?this.util.getNumber(e,2):e)}e||this.plugins.dialog.open.call(this,"video",!0)},setVideoRatioSelect:function(e){let t=!1;const n=this.context.video,i=n.videoRatioOption.options;/%$/.test(e)||n._onlyPercentage?e=this.util.getNumber(e,2)/100+"":(!this.util.isNumber(e)||1*e>=1)&&(e=""),n.inputY.placeholder="";for(let l=0,o=i.length;l<o;l++)i[l].value===e?(t=i[l].selected=!0,n.inputY.placeholder=e?100*e+"%":""):i[l].selected=!1;return t},checkFileInfo:function(){this.plugins.fileManager.checkInfo.call(this,"video",["iframe","video"],this.functions.onVideoUpload,this.plugins.video._update_videoCover.bind(this),!0)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"video",this.functions.onVideoUpload)},applySize:function(e,t){const n=this.context.video;return e||(e=n.inputX.value||this.options.videoWidth),t||(t=n.inputY.value||this.options.videoHeight),n._onlyPercentage||/%$/.test(e)||!e?(this.plugins.video.setPercentSize.call(this,e||"100%",t||(/%$/.test(n._videoRatio)?n._videoRatio:n._defaultRatio)),!0):(e&&"auto"!==e||t&&"auto"!==t?this.plugins.video.setSize.call(this,e,t||n._videoRatio||n._defaultRatio,!1):this.plugins.video.setAutoSize.call(this),!1)},sizeRevert:function(){this.plugins.resizing._module_sizeRevert.call(this,this.context.video)},setSize:function(e,t,n,i){const l=this.context.video,o=/^(rw|lw)$/.test(i),s=/^(th|bh)$/.test(i);s||(e=this.util.getNumber(e,0)),o||(t=this.util.isNumber(t)?t+l.sizeUnit:t||""),e=e?e+l.sizeUnit:"",s||(l._element.style.width=e),!o&&l._cover&&(l._cover.style.paddingBottom=l._cover.style.height=t),s||/%$/.test(e)||(l._cover&&(l._cover.style.width=e),l._container&&(l._container.style.width="")),o||/%$/.test(t)?l._element.style.height="":l._element.style.height=t,n||l._element.removeAttribute("data-percentage"),this.plugins.resizing._module_saveCurrentSize.call(this,l)},setAutoSize:function(){this.plugins.video.setPercentSize.call(this,100,this.context.video._defaultRatio)},setOriginSize:function(e){const t=this.context.video;t._element.removeAttribute("data-percentage"),this.plugins.resizing.resetTransform.call(this,t._element),this.plugins.video.cancelPercentAttr.call(this);const n=((e?t._element.getAttribute("data-size"):"")||t._element.getAttribute("data-origin")||"").split(",");if(n){const e=n[0],i=n[1];t._onlyPercentage||/%$/.test(e)&&(/%$/.test(i)||!/\d/.test(i))?this.plugins.video.setPercentSize.call(this,e,i):this.plugins.video.setSize.call(this,e,i),this.plugins.resizing._module_saveCurrentSize.call(this,t)}},setPercentSize:function(e,t){const n=this.context.video;t=!t||/%$/.test(t)||this.util.getNumber(t,0)?this.util.isNumber(t)?t+n.sizeUnit:t||n._defaultRatio:this.util.isNumber(t)?t+"%":t,n._container&&(n._container.style.width=this.util.isNumber(e)?e+"%":e,n._container.style.height=""),n._cover&&(n._cover.style.width="100%",n._cover.style.height=t,n._cover.style.paddingBottom=t),n._element.style.width="100%",n._element.style.height="100%",n._element.style.maxWidth="","center"===n._align&&this.plugins.video.setAlign.call(this,null,null,null,null),n._element.setAttribute("data-percentage",e+","+t),this.plugins.resizing._module_saveCurrentSize.call(this,n)},cancelPercentAttr:function(){const e=this.context.video;e._cover&&(e._cover.style.width="",e._cover.style.height="",e._cover.style.paddingBottom=""),e._container&&(e._container.style.width="",e._container.style.height=""),this.util.removeClass(e._container,this.context.video._floatClassRegExp),this.util.addClass(e._container,"__se__float-"+e._align),"center"===e._align&&this.plugins.video.setAlign.call(this,null,null,null,null)},setAlign:function(e,t,n,i){const l=this.context.video;e||(e=l._align),t||(t=l._element),n||(n=l._cover),i||(i=l._container),/%$/.test(t.style.width)&&"center"===e?(i&&(i.style.minWidth="100%"),n&&(n.style.width=i.style.width,n.style.height=n.style.height,n.style.paddingBottom=/%$/.test(n.style.height)?this.util.getNumber(this.util.getNumber(n.style.height,2)/100*this.util.getNumber(n.style.width,2),2)+"%":n.style.height)):(i&&(i.style.minWidth=""),n&&(n.style.width=this.context.resizing._rotateVertical?t.style.height||t.offsetHeight:t.style.width||"100%",n.style.paddingBottom=n.style.height)),this.util.hasClass(i,"__se__float-"+e)||(this.util.removeClass(i,l._floatClassRegExp),this.util.addClass(i,"__se__float-"+e)),t.setAttribute("data-align",e)},init:function(){const e=this.context.video;e.videoInputFile&&(e.videoInputFile.value=""),e.videoUrlFile&&(e._linkValue=e.preview.textContent=e.videoUrlFile.value=""),e.videoInputFile&&e.videoUrlFile&&(e.videoUrlFile.removeAttribute("disabled"),e.preview.style.textDecoration=""),e._origin_w=this.options.videoWidth,e._origin_h=this.options.videoHeight,e.modal.querySelector('input[name="suneditor_video_radio"][value="none"]').checked=!0,e._resizing&&(e.inputX.value=this.options.videoWidth===e._defaultSizeX?"":this.options.videoWidth,e.inputY.value=this.options.videoHeight===e._defaultSizeY?"":this.options.videoHeight,e.proportion.checked=!0,e.proportion.disabled=!0,this.plugins.video.setVideoRatioSelect.call(this,e._defaultRatio))}},y={name:"audio",display:"dialog",add:function(e){e.addModule([r.a,g.a,_.a]);const t=e.context,n=t.audio={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,targetSelect:null,_origin_w:e.options.audioWidth,_origin_h:e.options.audioHeight,_linkValue:"",_element:null,_cover:null,_container:null};let i=this.setDialog(e);n.modal=i,n.audioInputFile=i.querySelector("._se_audio_files"),n.audioUrlFile=i.querySelector(".se-input-url"),n.focusElement=n.audioInputFile||n.audioUrlFile,n.preview=i.querySelector(".se-link-preview");let l=this.setController(e);n.controller=l,i.querySelector("form").addEventListener("submit",this.submit.bind(e)),n.audioInputFile&&i.querySelector(".se-dialog-files-edge-button").addEventListener("click",this._removeSelectedFiles.bind(n.audioInputFile,n.audioUrlFile,n.preview)),n.audioInputFile&&n.audioUrlFile&&n.audioInputFile.addEventListener("change",this._fileInputChange.bind(n)),l.addEventListener("click",this.onClick_controller.bind(e)),n.audioUrlFile&&n.audioUrlFile.addEventListener("input",this._onLinkPreview.bind(n.preview,n,e.options.linkProtocol)),t.dialog.modal.appendChild(i),t.element.relative.appendChild(l),i=null,l=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content",i.style.display="none";let l='<form method="post" enctype="multipart/form-data"><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.audioBox.title+'</span></div><div class="se-dialog-body">';return t.audioFileInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.audioBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_audio_files" type="file" accept="'+t.audioAccept+'"'+(t.audioMultipleFile?' multiple="multiple"':"")+'/><button type="button" data-command="filesRemove" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.audioUrlInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.audioBox.url+'</label><input class="se-input-form se-input-url" type="text" /><pre class="se-link-preview"></pre></div>'),l+='</div><div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=l,i},setController:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-link",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-tooltip">'+n.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},_fileInputChange:function(){this.audioInputFile.value?(this.audioUrlFile.setAttribute("disabled",!0),this.preview.style.textDecoration="line-through"):(this.audioUrlFile.removeAttribute("disabled"),this.preview.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_createAudioTag:function(){const e=this.util.createElement("AUDIO");this.plugins.audio._setTagAttrs.call(this,e);const t=this.context.audio._origin_w,n=this.context.audio._origin_h;return e.setAttribute("origin-size",t+","+n),e.style.cssText=(t?"width:"+t+"; ":"")+(n?"height:"+n+";":""),e},_setTagAttrs:function(e){e.setAttribute("controls",!0);const t=this.options.audioTagAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},fileTags:["audio"],select:function(e){this.plugins.audio.onModifyMode.call(this,e)},destroy:function(e){e=e||this.context.audio._element;const t=this.util.getParentElement(e,this.util.isComponent)||e,n=1*e.getAttribute("data-index");if("function"==typeof this.functions.onAudioDeleteBefore&&!1===this.functions.onAudioDeleteBefore(e,t,n,this))return;const i=t.previousElementSibling||t.nextElementSibling,l=t.parentNode;this.util.removeItem(t),this.plugins.audio.init.call(this),this.controllersOff(),l!==this.context.element.wysiwyg&&this.util.removeItemAllParents(l,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(i),this.plugins.fileManager.deleteInfo.call(this,"audio",n,this.functions.onAudioUpload),this.history.push(!1)},checkFileInfo:function(){this.plugins.fileManager.checkInfo.call(this,"audio",["audio"],this.functions.onAudioUpload,this.plugins.audio.updateCover.bind(this),!1)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"audio",this.functions.onAudioUpload)},on:function(e){const t=this.context.audio;e?t._element?(this.context.dialog.updateModal=!0,t._linkValue=t.preview.textContent=t.audioUrlFile.value=t._element.src,t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.removeAttribute("multiple")):t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.removeAttribute("multiple"):(this.plugins.audio.init.call(this),t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.setAttribute("multiple","multiple"))},open:function(){this.plugins.dialog.open.call(this,"audio","audio"===this.currentControllerName)},submit:function(e){const t=this.context.audio;e.preventDefault(),e.stopPropagation();try{t.audioInputFile&&t.audioInputFile.files.length>0?(this.showLoading(),this.plugins.audio.submitAction.call(this,t.audioInputFile.files)):t.audioUrlFile&&t._linkValue.length>0&&(this.showLoading(),this.plugins.audio.setupUrl.call(this,t._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.audio.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,l=e.length;i<l;i++)/audio/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.audioUploadSizeLimit;if(i>0){let e=0;const n=this.context.audio._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.audioUpload.fail] Size of uploadable total audios: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onAudioUploadError||this.functions.onAudioUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const l=this.context.audio;l._uploadFileLength=n.length;const o={isUpdate:this.context.dialog.updateModal,element:l._element};if("function"==typeof this.functions.onAudioUploadBefore){const e=this.functions.onAudioUploadBefore(n,o,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.audio.register.call(this,o,e):this.plugins.audio.upload.call(this,o,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();"object"==typeof e&&e.length>0&&(n=e)}this.plugins.audio.upload.call(this,o,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onAudioUploadError||this.functions.onAudioUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.audio.exception] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.audio.error.call(this,t,null);const n=this.options.audioUploadUrl,i=this.context.dialog.updateModal?1:t.length,l=new FormData;for(let e=0;e<i;e++)l.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.audioUploadHeader,l,this.plugins.audio.callBack_upload.bind(this,e),this.functions.onAudioUploadError)},callBack_upload:function(e,t){if("function"==typeof this.functions.audioUploadHandler)this.functions.audioUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.audio.error.call(this,n.errorMessage,n):this.plugins.audio.register.call(this,e,n)}},register:function(e,t){const n=t.result;for(let t,i,l=0,o=n.length;l<o;l++)i=e.isUpdate?e.element:this.plugins.audio._createAudioTag.call(this),t={name:n[l].name,size:n[l].size},this.plugins.audio.create_audio.call(this,i,n[l].url,t,e.isUpdate);this.closeLoading()},setupUrl:function(e){try{if(0===e.length)return!1;this.plugins.audio.create_audio.call(this,this.plugins.audio._createAudioTag.call(this),e,null,this.context.dialog.updateModal)}catch(e){throw Error('[SUNEDITOR.audio.audio.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},create_audio:function(e,t,n,i){const l=this.context.audio;if(i){if(l._element&&(e=l._element),!e||e.src===t)return void this.selectComponent(e,"audio");e.src=t,this.selectComponent(e,"audio")}else{e.src=t;const n=this.plugins.component.set_cover.call(this,e),i=this.plugins.component.set_container.call(this,n,"");if(!this.insertComponent(i,!1,!0,!this.options.mediaAutoSelect))return void this.focus();if(!this.options.mediaAutoSelect){const e=this.appendFormatTag(i,null);e&&this.setRange(e,0,e,0)}}this.plugins.fileManager.setInfo.call(this,"audio",e,this.functions.onAudioUpload,n,!1),i&&this.history.push(!1)},updateCover:function(e){const t=this.context.audio;this.plugins.audio._setTagAttrs.call(this,e);let n=this.util.isRangeFormatElement(e.parentNode)||this.util.isWysiwygDiv(e.parentNode)?e:this.util.getFormatElement(e)||e;const i=e;t._element=e=e.cloneNode(!1);const l=this.plugins.component.set_cover.call(this,e),o=this.plugins.component.set_container.call(this,l,"se-audio-container");try{if(this.util.getParentElement(i,this.util.isNotCheckingNode))i.parentNode.replaceChild(o,i);else if(this.util.isListCell(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n.insertBefore(o,e),this.util.removeItem(i),this.util.removeEmptyNode(e,null,!0)}else if(this.util.isFormatElement(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n=this.util.splitElement(n,e),n.parentNode.insertBefore(o,n),this.util.removeItem(i),this.util.removeEmptyNode(n,null,!0),0===n.children.length&&(n.innerHTML=this.util.htmlRemoveWhiteSpace(n.innerHTML))}else n.parentNode.replaceChild(o,n)}catch(e){console.warn("[SUNEDITOR.audio.error] Maybe the audio tag is nested.",e)}this.plugins.fileManager.setInfo.call(this,"audio",e,this.functions.onAudioUpload,null,!1),this.plugins.audio.init.call(this)},onModifyMode:function(e){const t=this.context.audio;this.setControllerPosition(t.controller,e,"bottom",{left:0,top:0}),this.controllersOn(t.controller,e,this.plugins.audio.onControllerOff.bind(this,e),"audio"),this.util.addClass(e,"active"),t._element=e,t._cover=this.util.getParentElement(e,"FIGURE"),t._container=this.util.getParentElement(e,this.util.isComponent)},openModify:function(e){if(this.context.audio.audioUrlFile){const e=this.context.audio;e._linkValue=e.preview.textContent=e.audioUrlFile.value=e._element.src}e||this.plugins.dialog.open.call(this,"audio",!0)},onClick_controller:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command");t&&(e.preventDefault(),/update/.test(t)?this.plugins.audio.openModify.call(this,!1):this.plugins.audio.destroy.call(this,this.context.audio._element),this.controllersOff())},onControllerOff:function(e){this.util.removeClass(e,"active"),this.context.audio.controller.style.display="none"},init:function(){if(this.context.dialog.updateModal)return;const e=this.context.audio;e.audioInputFile&&(e.audioInputFile.value=""),e.audioUrlFile&&(e._linkValue=e.preview.textContent=e.audioUrlFile.value=""),e.audioInputFile&&e.audioUrlFile&&(e.audioUrlFile.removeAttribute("disabled"),e.preview.style.textDecoration=""),e._element=null}};var C={name:"math",display:"dialog",add:function(e){e.addModule([r.a]);const t=e.context;t.math={focusElement:null,previewElement:null,fontSizeElement:null,defaultFontSize:"",_mathExp:null};let n=this.setDialog(e);t.math.modal=n,t.math.focusElement=n.querySelector(".se-math-exp"),t.math.previewElement=n.querySelector(".se-math-preview"),t.math.fontSizeElement=n.querySelector(".se-math-size"),t.math.focusElement.addEventListener(e.util.isIE?"textinput":"input",this._renderMathExp.bind(e,t.math),!1),t.math.fontSizeElement.addEventListener("change",function(e){this.fontSize=e.target.value}.bind(t.math.previewElement.style),!1);let i=this.setController_MathButton(e);t.math.mathController=i,t.math._mathExp=null,n.querySelector("form").addEventListener("submit",this.submit.bind(e),!1),i.addEventListener("click",this.onClick_mathController.bind(e)),t.math.previewElement.style.fontSize=t.math.defaultFontSize,t.dialog.modal.appendChild(n),t.element.relative.appendChild(i),n=null,i=null},setDialog:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.options.mathFontSize;let l=i[0].value;n.className="se-dialog-content",n.style.display="none";let o='<form><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+t.dialogBox.mathBox.title+'</span></div><div class="se-dialog-body"><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.inputLabel+' (<a href="https://katex.org/docs/supported.html" target="_blank">KaTeX</a>)</label><textarea class="se-input-form se-math-exp" type="text"></textarea></div><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.fontSizeLabel+'</label><select class="se-input-select se-math-size">';for(let e,t=0,n=i.length;t<n;t++)e=i[t],e.default&&(l=e.value),o+='<option value="'+e.value+'"'+(e.default?" selected":"")+">"+e.text+"</option>";return o+='</select></div><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.previewLabel+'</label><p class="se-math-preview"></p></div></div><div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+t.dialogBox.submitButton+'" aria-label="'+t.dialogBox.submitButton+'"><span>'+t.dialogBox.submitButton+"</span></button></div></form>",e.context.math.defaultFontSize=l,n.innerHTML=o,n},setController_MathButton:function(e){const t=e.lang,n=e.util.createElement("DIV");return n.className="se-controller se-controller-link",n.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-btn se-tooltip">'+e.icons.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-btn se-tooltip">'+e.icons.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",n},open:function(){this.plugins.dialog.open.call(this,"math","math"===this.currentControllerName)},managedTags:function(){return{className:"katex",method:function(e){if(!e.getAttribute("data-exp")||!this.options.katex)return;const t=this._d.createRange().createContextualFragment(this.plugins.math._renderer.call(this,this.util.HTMLDecoder(e.getAttribute("data-exp"))));e.innerHTML=t.querySelector(".katex").innerHTML,e.setAttribute("contenteditable",!1)}}},_renderer:function(e){let t="";try{this.util.removeClass(this.context.math.focusElement,"se-error"),t=this.options.katex.src.renderToString(e,{throwOnError:!0,displayMode:!0})}catch(e){this.util.addClass(this.context.math.focusElement,"se-error"),t='<span class="se-math-katex-error">Katex syntax error. (Refer <a href="https://katex.org/docs/supported.html" target="_blank">KaTeX</a>)</span>',console.warn("[SUNEDITOR.math.Katex.error] ",e)}return t},_renderMathExp:function(e,t){e.previewElement.innerHTML=this.plugins.math._renderer.call(this,t.target.value)},submit:function(e){this.showLoading(),e.preventDefault(),e.stopPropagation();const t=function(){if(0===this.context.math.focusElement.value.trim().length)return!1;const e=this.context.math,t=e.focusElement.value,n=e.previewElement.querySelector(".katex");if(!n)return!1;if(n.className="__se__katex "+n.className,n.setAttribute("contenteditable",!1),n.setAttribute("data-exp",this.util.HTMLEncoder(t)),n.setAttribute("data-font-size",e.fontSizeElement.value),n.style.fontSize=e.fontSizeElement.value,this.context.dialog.updateModal){const t=this.util.getParentElement(e._mathExp,".katex");t.parentNode.replaceChild(n,t),this.setRange(n,0,n,1)}else{const e=this.getSelectedElements();if(e.length>1){const t=this.util.createElement(e[0].nodeName);if(t.appendChild(n),!this.insertNode(t,null,!0))return!1}else if(!this.insertNode(n,null,!0))return!1;const t=this.util.createTextNode(this.util.zeroWidthSpace);n.parentNode.insertBefore(t,n.nextSibling),this.setRange(n,0,n,1)}return e.focusElement.value="",e.fontSizeElement.value="1em",e.previewElement.style.fontSize="1em",e.previewElement.innerHTML="",!0}.bind(this);try{t()&&(this.plugins.dialog.close.call(this),this.history.push(!1))}catch(e){this.plugins.dialog.close.call(this)}finally{this.closeLoading()}return!1},active:function(e){if(e){if(e.getAttribute("data-exp"))return this.controllerArray.indexOf(this.context.math.mathController)<0&&(this.setRange(e,0,e,1),this.plugins.math.call_controller.call(this,e)),!0}else this.controllerArray.indexOf(this.context.math.mathController)>-1&&this.controllersOff();return!1},on:function(e){if(e){const e=this.context.math;if(e._mathExp){const t=this.util.HTMLDecoder(e._mathExp.getAttribute("data-exp")),n=e._mathExp.getAttribute("data-font-size")||"1em";this.context.dialog.updateModal=!0,e.focusElement.value=t,e.fontSizeElement.value=n,e.previewElement.innerHTML=this.plugins.math._renderer.call(this,t),e.previewElement.style.fontSize=n}}else this.plugins.math.init.call(this)},call_controller:function(e){this.context.math._mathExp=e;const t=this.context.math.mathController;this.setControllerPosition(t,e,"bottom",{left:0,top:0}),this.controllersOn(t,e,"math")},onClick_mathController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")||e.target.parentNode.getAttribute("data-command");t&&(e.preventDefault(),/update/.test(t)?(this.context.math.focusElement.value=this.util.HTMLDecoder(this.context.math._mathExp.getAttribute("data-exp")),this.plugins.dialog.open.call(this,"math",!0)):(this.util.removeItem(this.context.math._mathExp),this.context.math._mathExp=null,this.focus(),this.history.push(!1)),this.controllersOff())},init:function(){const e=this.context.math;e.mathController.style.display="none",e._mathExp=null,e.focusElement.value="",e.previewElement.innerHTML=""}},w=n("JhlZ"),x=n.n(w),E={blockquote:{name:"blockquote",display:"command",add:function(e,t){e.context.blockquote={targetButton:t,tag:e.util.createElement("BLOCKQUOTE")}},active:function(e){if(e){if(/blockquote/i.test(e.nodeName))return this.util.addClass(this.context.blockquote.targetButton,"active"),!0}else this.util.removeClass(this.context.blockquote.targetButton,"active");return!1},action:function(){const e=this.util.getParentElement(this.getSelectionNode(),"blockquote");e?this.detachRangeFormatElement(e,null,null,!1,!1):this.applyRangeFormatElement(this.context.blockquote.tag.cloneNode(!1))}},align:{name:"align",display:"submenu",add:function(e,t){const n=e.icons,i=e.context;i.align={targetButton:t,_itemMenu:null,_alignList:null,currentAlign:"",defaultDir:e.options.rtl?"right":"left",icons:{justify:n.align_justify,left:n.align_left,right:n.align_right,center:n.align_center}};let l=this.setSubmenu(e),o=i.align._itemMenu=l.querySelector("ul");o.addEventListener("click",this.pickup.bind(e)),i.align._alignList=o.querySelectorAll("li button"),e.initMenuTarget(this.name,t,l),l=null,o=null},setSubmenu:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV"),l=e.options.alignItems;let o="";for(let e,i,s=0;s<l.length;s++)e=l[s],i=t.toolbar["align"+e.charAt(0).toUpperCase()+e.slice(1)],o+='<li><button type="button" class="se-btn-list se-btn-align" data-value="'+e+'" title="'+i+'" aria-label="'+i+'"><span class="se-list-icon">'+n["align_"+e]+"</span>"+i+"</button></li>";return i.className="se-submenu se-list-layer se-list-align",i.innerHTML='<div class="se-list-inner"><ul class="se-list-basic">'+o+"</ul></div>",i},active:function(e){const t=this.context.align,n=t.targetButton,i=n.firstElementChild;if(e){if(this.util.isFormatElement(e)){const l=e.style.textAlign;if(l)return this.util.changeElement(i,t.icons[l]||t.icons[t.defaultDir]),n.setAttribute("data-focus",l),!0}}else this.util.changeElement(i,t.icons[t.defaultDir]),n.removeAttribute("data-focus");return!1},on:function(){const e=this.context.align,t=e._alignList,n=e.targetButton.getAttribute("data-focus")||e.defaultDir;if(n!==e.currentAlign){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentAlign=n}},exchangeDir:function(){const e=this.options.rtl?"right":"left";if(!this.context.align||this.context.align.defaultDir===e)return;this.context.align.defaultDir=e;let t=this.context.align._itemMenu,n=t.querySelector('[data-value="left"]'),i=t.querySelector('[data-value="right"]');if(n&&i){const e=n.parentElement,t=i.parentElement;e.appendChild(i),t.appendChild(n)}},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null;for(;!n&&!/UL/i.test(t.tagName);)n=t.getAttribute("data-value"),t=t.parentNode;if(!n)return;const i=this.context.align.defaultDir,l=this.getSelectedElements();for(let e=0,t=l.length;e<t;e++)this.util.setStyle(l[e],"textAlign",n===i?"":n);this.effectNode=null,this.submenuOff(),this.focus(),this.history.push(!1)}},font:{name:"font",display:"submenu",add:function(e,t){const n=e.context;n.font={targetText:t.querySelector(".txt"),targetTooltip:t.parentNode.querySelector(".se-tooltip-text"),_fontList:null,currentFont:""};let i=this.setSubmenu(e);i.querySelector(".se-list-inner").addEventListener("click",this.pickup.bind(e)),n.font._fontList=i.querySelectorAll("ul li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV");let i,l,o,s;n.className="se-submenu se-list-layer se-list-font-family";let a=e.options.font,r='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+t.toolbar.default+'" aria-label="'+t.toolbar.default+'">('+t.toolbar.default+")</button></li>";for(o=0,s=a.length;o<s;o++)i=a[o],l=i.split(",")[0],r+='<li><button type="button" class="se-btn-list" data-value="'+i+'" data-txt="'+l+'" title="'+l+'" aria-label="'+l+'" style="font-family:'+i+';">'+l+"</button></li>";return r+="</ul></div>",n.innerHTML=r,n},active:function(e){const t=this.context.font.targetText,n=this.context.font.targetTooltip;if(e){if(e.style&&e.style.fontFamily.length>0){const i=e.style.fontFamily.replace(/["']/g,"");return this.util.changeTxt(t,i),this.util.changeTxt(n,this.lang.toolbar.font+" ("+i+")"),!0}}else{const e=this.hasFocus?this.wwComputedStyle.fontFamily:this.lang.toolbar.font;this.util.changeTxt(t,e),this.util.changeTxt(n,this.hasFocus?this.lang.toolbar.font+(e?" ("+e+")":""):e)}return!1},on:function(){const e=this.context.font,t=e._fontList,n=e.targetText.textContent;if(n!==e.currentFont){for(let e=0,i=t.length;e<i;e++)n===(t[e].getAttribute("data-value")||"").replace(/'|"/g,"")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentFont=n}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();let t=e.target.getAttribute("data-value");if(t){const e=this.util.createElement("SPAN");/[\s\d\W]/.test(t)&&!/^['"].*['"]$/.test(t)&&(t='"'+t+'"'),e.style.fontFamily=t,this.nodeChange(e,["font-family"],null,null)}else this.nodeChange(null,["font-family"],["span"],!0);this.submenuOff()}},fontSize:{name:"fontSize",display:"submenu",add:function(e,t){const n=e.context;n.fontSize={targetText:t.querySelector(".txt"),_sizeList:null,currentSize:""};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.fontSize._sizeList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer se-list-font-size";const l=t.fontSize?t.fontSize:[8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72];let o='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+n.toolbar.default+'" aria-label="'+n.toolbar.default+'">('+n.toolbar.default+")</button></li>";for(let e,n=0,i=t.fontSizeUnit,s=l.length;n<s;n++)e=l[n],o+='<li><button type="button" class="se-btn-list" data-value="'+e+i+'" title="'+e+i+'" aria-label="'+e+i+'" style="font-size:'+e+i+';">'+e+"</button></li>";return o+="</ul></div>",i.innerHTML=o,i},active:function(e){if(e){if(e.style&&e.style.fontSize.length>0)return this.util.changeTxt(this.context.fontSize.targetText,this._convertFontSize.call(this,this.options.fontSizeUnit,e.style.fontSize)),!0}else this.util.changeTxt(this.context.fontSize.targetText,this.hasFocus?this._convertFontSize.call(this,this.options.fontSizeUnit,this.wwComputedStyle.fontSize):this.lang.toolbar.fontSize);return!1},on:function(){const e=this.context.fontSize,t=e._sizeList,n=e.targetText.textContent;if(n!==e.currentSize){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentSize=n}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();const t=e.target.getAttribute("data-value");if(t){const e=this.util.createElement("SPAN");e.style.fontSize=t,this.nodeChange(e,["font-size"],null,null)}else this.nodeChange(null,["font-size"],["span"],!0);this.submenuOff()}},fontColor:l,hiliteColor:o,horizontalRule:{name:"horizontalRule",display:"submenu",add:function(e,t){e.context.horizontalRule={currentHR:null};let n=this.setSubmenu(e);n.querySelector("ul").addEventListener("click",this.horizontalRulePick.bind(e)),e.initMenuTarget(this.name,t,n),n=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.options.hrItems||[{name:t.toolbar.hr_solid,class:"__se__solid"},{name:t.toolbar.hr_dashed,class:"__se__dashed"},{name:t.toolbar.hr_dotted,class:"__se__dotted"}];let l="";for(let e=0,t=i.length;e<t;e++)l+='<li><button type="button" class="se-btn-list btn_line" data-command="horizontalRule" data-value="'+i[e].class+'" title="'+i[e].name+'" aria-label="'+i[e].name+'"><hr'+(i[e].class?' class="'+i[e].class+'"':"")+(i[e].style?' style="'+i[e].style+'"':"")+"/></button></li>";return n.className="se-submenu se-list-layer se-list-line",n.innerHTML='<div class="se-list-inner"><ul class="se-list-basic">'+l+"</ul></div>",n},active:function(e){if(e){if(/HR/i.test(e.nodeName))return this.context.horizontalRule.currentHR=e,this.util.hasClass(e,"on")||(this.util.addClass(e,"on"),this.controllersOn("hr",this.util.removeClass.bind(this.util,e,"on"))),!0}else this.util.hasClass(this.context.horizontalRule.currentHR,"on")&&this.controllersOff();return!1},appendHr:function(e){return this.focus(),this.insertComponent(e.cloneNode(!1),!1,!0,!1)},horizontalRulePick:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=t.getAttribute("data-command");for(;!n&&!/UL/i.test(t.tagName);)t=t.parentNode,n=t.getAttribute("data-command");if(!n)return;const i=this.plugins.horizontalRule.appendHr.call(this,t.firstElementChild);i&&(this.setRange(i,0,i,0),this.submenuOff())}},list:{name:"list",display:"submenu",add:function(e,t){const n=e.context;n.list={targetButton:t,_list:null,currentList:"",icons:{bullets:e.icons.list_bullets,number:e.icons.list_number}};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.list._list=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="se-btn-list se-tooltip" data-command="OL" title="'+t.toolbar.orderList+'" aria-label="'+t.toolbar.orderList+'">'+e.icons.list_number+'</button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="UL" title="'+t.toolbar.unorderList+'" aria-label="'+t.toolbar.unorderList+'">'+e.icons.list_bullets+"</button></li></ul></div>",n},active:function(e){const t=this.context.list.targetButton,n=t.firstElementChild,i=this.util;if(i.isList(e)){const l=e.nodeName;return t.setAttribute("data-focus",l),i.addClass(t,"active"),/UL/i.test(l)?i.changeElement(n,this.context.list.icons.bullets):i.changeElement(n,this.context.list.icons.number),!0}return t.removeAttribute("data-focus"),i.changeElement(n,this.context.list.icons.number),i.removeClass(t,"active"),!1},on:function(){const e=this.context.list,t=e._list,n=e.targetButton.getAttribute("data-focus")||"";if(n!==e.currentList){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-command")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentList=n}},editList:function(e,t,n){let i=this.getRange(),l=t||this.getSelectedElementsAndComponents(!1);if(0===l.length){if(t)return;if(i=this.getRange_addLine(i,null),l=this.getSelectedElementsAndComponents(!1),0===l.length)return}const o=this.util;o.sortByDepth(l,!0);let s=l[0],a=l[l.length-1],r=!o.isListCell(s)&&!o.isComponent(s)||s.previousElementSibling?s.previousElementSibling:s.parentNode.previousElementSibling,c=!o.isListCell(a)&&!o.isComponent(a)||a.nextElementSibling?a.nextElementSibling:a.parentNode.nextElementSibling;const d=i.collapsed,u={sc:i.startContainer,so:i.startContainer===i.endContainer&&o.onlyZeroWidthSpace(i.startContainer)&&0===i.startOffset&&1===i.endOffset?i.endOffset:i.startOffset,ec:i.endContainer,eo:i.endOffset};let h=null,g=!0;for(let e=0,t=l.length;e<t;e++)if(!o.isList(o.getRangeFormatElement(l[e],function(t){return this.getRangeFormatElement(t)&&t!==l[e]}.bind(o)))){g=!1;break}if(!g||r&&s.tagName===r.tagName&&e===r.tagName.toUpperCase()||c&&a.tagName===c.tagName&&e===c.tagName.toUpperCase()){const t=r?r.parentNode:r,n=c?c.parentNode:c;r=t&&!o.isWysiwygDiv(t)&&t.nodeName===e?t:r,c=n&&!o.isWysiwygDiv(n)&&n.nodeName===e?n:c;const i=r&&r.tagName===e,s=c&&c.tagName===e;let a=i?r:o.createElement(e),d=null,h=null,g=null,p=null;const m=function(e){return!this.isComponent(e)&&!this.isList(e)}.bind(o);for(let t,n,s,r,c,p,f,_,b,v=0,y=l.length;v<y;v++)if(n=l[v],0!==n.childNodes.length||o._isIgnoreNodeChange(n)){if(r=l[v+1],c=n.parentNode,p=r?r.parentNode:null,s=o.isListCell(n),b=o.isRangeFormatElement(c)?c:null,f=s&&!o.isWysiwygDiv(c)?c.parentNode:c,_=s&&!o.isWysiwygDiv(c)?!r||o.isListCell(f)?c:c.nextSibling:n.nextSibling,t=o.createElement("LI"),o.copyFormatAttributes(t,n),0===v&&u.sc===n&&(u.sc=t),v===y-1&&u.ec===n&&(u.ec=t),o.isComponent(n)){const e=/^HR$/i.test(n.nodeName);e||(t.innerHTML="<br>"),t.innerHTML+=n.outerHTML,e&&(t.innerHTML+="<br>")}else{const e=n.childNodes;for(;e[0];)t.appendChild(e[0])}a.appendChild(t),r||(h=a),r&&f===p&&!o.isRangeFormatElement(_)||(d||(d=a),i&&r&&f===p||r&&o.isList(p)&&p===c||a.parentNode!==f&&f.insertBefore(a,_)),o.removeItem(n),i&&null===g&&(g=a.children.length-1),r&&(o.getRangeFormatElement(p,m)!==o.getRangeFormatElement(c,m)||o.isList(p)&&o.isList(c)&&o.getElementDepth(p)!==o.getElementDepth(c))&&(a=o.createElement(e)),b&&0===b.children.length&&o.removeItem(b)}else o.removeItem(n);g&&(d=d.children[g]),s&&(p=a.children.length-1,a.innerHTML+=c.innerHTML,h=a.children[p],o.removeItem(c))}else{if(n)for(let e=0,t=l.length;e<t;e++)for(let n=e-1;n>=0;n--)if(l[n].contains(l[e])){l.splice(e,1),e--,t--;break}const t=o.getRangeFormatElement(s),i=t&&t.tagName===e;let a,r;const c=function(e){return!this.isComponent(e)}.bind(o);i||(r=o.createElement(e));for(let t,s,d=0,u=l.length;d<u;d++)s=o.getRangeFormatElement(l[d],c),s&&o.isList(s)&&(t?t!==s?(n&&o.isListCell(s.parentNode)?this.plugins.list._detachNested.call(this,a.f):h=this.detachRangeFormatElement(a.f[0].parentNode,a.f,r,!1,!0),s=l[d].parentNode,i||(r=o.createElement(e)),t=s,a={r:t,f:[o.getParentElement(l[d],"LI")]}):a.f.push(o.getParentElement(l[d],"LI")):(t=s,a={r:t,f:[o.getParentElement(l[d],"LI")]}),d===u-1&&(n&&o.isListCell(s.parentNode)?this.plugins.list._detachNested.call(this,a.f):h=this.detachRangeFormatElement(a.f[0].parentNode,a.f,r,!1,!0)))}return this.effectNode=null,d?h:u},_detachNested:function(e){const t=e[0],n=e[e.length-1],i=n.nextElementSibling,l=t.parentNode,o=l.parentNode.nextElementSibling,s=l.parentNode.parentNode;for(let t=0,n=e.length;t<n;t++)s.insertBefore(e[t],o);if(i&&l.children.length>0){const e=l.cloneNode(!1),t=l.childNodes,o=this.util.getPositionIndex(i);for(;t[o];)e.appendChild(t[o]);n.appendChild(e)}0===l.children.length&&this.util.removeItem(l),this.util.mergeSameTags(s);const a=this.util.getEdgeChildNodes(t,n);return{cc:t.parentNode,sc:a.sc,ec:a.ec}},editInsideList:function(e,t){const n=(t=t||this.getSelectedElements().filter(function(e){return this.isListCell(e)}.bind(this.util))).length;if(0===n||!e&&!this.util.isListCell(t[0].previousElementSibling)&&!this.util.isListCell(t[n-1].nextElementSibling))return{sc:t[0],so:0,ec:t[n-1],eo:1};let i=t[0].parentNode,l=t[n-1],o=null;if(e){if(i!==l.parentNode&&this.util.isList(l.parentNode.parentNode)&&l.nextElementSibling)for(l=l.nextElementSibling;l;)t.push(l),l=l.nextElementSibling;o=this.plugins.list.editList.call(this,i.nodeName.toUpperCase(),t,!0)}else{let e=this.util.createElement(i.nodeName),s=t[0].previousElementSibling,a=l.nextElementSibling;const r={s:null,e:null,sl:i,el:i};for(let l,o=0,c=n;o<c;o++)l=t[o],l.parentNode!==i&&(this.plugins.list._insiedList.call(this,i,e,s,a,r),i=l.parentNode,e=this.util.createElement(i.nodeName)),s=l.previousElementSibling,a=l.nextElementSibling,e.appendChild(l);this.plugins.list._insiedList.call(this,i,e,s,a,r);const c=this.util.getNodeFromPath(r.s,r.sl),d=this.util.getNodeFromPath(r.e,r.el);o={sc:c,so:0,ec:d,eo:d.textContent.length}}return o},_insiedList:function(e,t,n,i,l){let o=!1;if(n&&t.tagName===n.tagName){const e=t.children;for(;e[0];)n.appendChild(e[0]);t=n,o=!0}if(i&&t.tagName===i.tagName){const e=i.children;for(;e[0];)t.appendChild(e[0]);const n=i.nextElementSibling;i.parentNode.removeChild(i),i=n}if(!o){this.util.isListCell(n)&&(e=n,i=null),e.insertBefore(t,i),l.s||(l.s=this.util.getNodePath(t.firstElementChild.firstChild,e,null),l.sl=e);const o=e.contains(l.sl)?this.util.getNodePath(l.sl,e):null;l.e=this.util.getNodePath(t.lastElementChild.firstChild,e,null),l.el=e,this.util.mergeSameTags(e,[l.s,l.e,o],!1),this.util.mergeNestedTags(e),o&&(l.sl=this.util.getNodeFromPath(o,e))}return t},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n="";for(;!n&&!/^UL$/i.test(t.tagName);)n=t.getAttribute("data-command"),t=t.parentNode;if(!n)return;const i=this.plugins.list.editList.call(this,n,null,!1);i&&this.setRange(i.sc,i.so,i.ec,i.eo),this.submenuOff(),this.history.push(!1)}},table:{name:"table",display:"submenu",add:function(e,t){const n=e.context;let i=n.table={_element:null,_tdElement:null,_trElement:null,_trElements:null,_tableXY:[],_maxWidth:!0,_fixedColumn:!1,_rtl:e.options.rtl,cellControllerTop:"top"===e.options.tableCellControllerPosition,resizeText:null,headerButton:null,mergeButton:null,splitButton:null,splitMenu:null,maxText:e.lang.controller.maxSize,minText:e.lang.controller.minSize,_physical_cellCnt:0,_logical_cellCnt:0,_rowCnt:0,_rowIndex:0,_physical_cellIndex:0,_logical_cellIndex:0,_current_colSpan:0,_current_rowSpan:0,icons:{expansion:e.icons.expansion,reduction:e.icons.reduction}},l=this.setSubmenu(e),o=l.querySelector(".se-controller-table-picker");i.tableHighlight=l.querySelector(".se-table-size-highlighted"),i.tableUnHighlight=l.querySelector(".se-table-size-unhighlighted"),i.tableDisplay=l.querySelector(".se-table-size-display"),e.options.rtl&&(i.tableHighlight.style.left="167px");let s=this.setController_table(e);i.tableController=s,i.resizeButton=s.querySelector("._se_table_resize"),i.resizeText=s.querySelector("._se_table_resize > span > span"),i.columnFixedButton=s.querySelector("._se_table_fixed_column"),i.headerButton=s.querySelector("._se_table_header");let a=this.setController_tableEditor(e,i.cellControllerTop);i.resizeDiv=a,i.splitMenu=a.querySelector(".se-btn-group-sub"),i.mergeButton=a.querySelector("._se_table_merge_button"),i.splitButton=a.querySelector("._se_table_split_button"),i.insertRowAboveButton=a.querySelector("._se_table_insert_row_a"),i.insertRowBelowButton=a.querySelector("._se_table_insert_row_b"),o.addEventListener("mousemove",this.onMouseMove_tablePicker.bind(e,i)),o.addEventListener("click",this.appendTable.bind(e)),a.addEventListener("click",this.onClick_tableController.bind(e)),s.addEventListener("click",this.onClick_tableController.bind(e)),e.initMenuTarget(this.name,t,l),n.element.relative.appendChild(a),n.element.relative.appendChild(s),l=null,o=null,a=null,s=null,i=null},setSubmenu:function(e){const t=e.util.createElement("DIV");return t.className="se-submenu se-selector-table",t.innerHTML='<div class="se-table-size"><div class="se-table-size-picker se-controller-table-picker"></div><div class="se-table-size-highlighted"></div><div class="se-table-size-unhighlighted"></div></div><div class="se-table-size-display">1 x 1</div>',t},setController_table:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-table",i.innerHTML='<div><div class="se-btn-group"><button type="button" data-command="resize" class="se-btn se-tooltip _se_table_resize">'+n.expansion+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.maxSize+'</span></span></button><button type="button" data-command="layout" class="se-btn se-tooltip _se_table_fixed_column">'+n.fixed_column_width+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.fixedColumnWidth+'</span></span></button><button type="button" data-command="header" class="se-btn se-tooltip _se_table_header">'+n.table_header+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.tableHeader+'</span></span></button><button type="button" data-command="remove" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},setController_tableEditor:function(e,t){const n=e.lang,i=e.icons,l=e.util.createElement("DIV");return l.className="se-controller se-controller-table-cell",l.innerHTML=(t?"":'<div class="se-arrow se-arrow-up"></div>')+'<div class="se-btn-group"><button type="button" data-command="insert" data-value="row" data-option="up" class="se-btn se-tooltip _se_table_insert_row_a">'+i.insert_row_above+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertRowAbove+'</span></span></button><button type="button" data-command="insert" data-value="row" data-option="down" class="se-btn se-tooltip _se_table_insert_row_b">'+i.insert_row_below+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertRowBelow+'</span></span></button><button type="button" data-command="delete" data-value="row" class="se-btn se-tooltip">'+i.delete_row+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.deleteRow+'</span></span></button><button type="button" data-command="merge" class="_se_table_merge_button se-btn se-tooltip" disabled>'+i.merge_cell+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.mergeCells+'</span></span></button></div><div class="se-btn-group" style="padding-top: 0;"><button type="button" data-command="insert" data-value="cell" data-option="left" class="se-btn se-tooltip">'+i.insert_column_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertColumnBefore+'</span></span></button><button type="button" data-command="insert" data-value="cell" data-option="right" class="se-btn se-tooltip">'+i.insert_column_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertColumnAfter+'</span></span></button><button type="button" data-command="delete" data-value="cell" class="se-btn se-tooltip">'+i.delete_column+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.deleteColumn+'</span></span></button><button type="button" data-command="onsplit" class="_se_table_split_button se-btn se-tooltip">'+i.split_cell+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.splitCells+'</span></span></button><div class="se-btn-group-sub sun-editor-common se-list-layer se-table-split"><div class="se-list-inner"><ul class="se-list-basic"><li class="se-btn-list" data-command="split" data-value="vertical" style="line-height:32px;" title="'+n.controller.VerticalSplit+'" aria-label="'+n.controller.VerticalSplit+'">'+n.controller.VerticalSplit+'</li><li class="se-btn-list" data-command="split" data-value="horizontal" style="line-height:32px;" title="'+n.controller.HorizontalSplit+'" aria-label="'+n.controller.HorizontalSplit+'">'+n.controller.HorizontalSplit+"</li></ul></div></div></div>",l},appendTable:function(){const e=this.util.createElement("TABLE"),t=this.plugins.table.createCells,n=this.context.table._tableXY[0];let i=this.context.table._tableXY[1],l="<tbody>";for(;i>0;)l+="<tr>"+t.call(this,"td",n)+"</tr>",--i;l+="</tbody>",e.innerHTML=l;if(this.insertComponent(e,!1,!0,!1)){const t=e.querySelector("td div");this.setRange(t,0,t,0),this.plugins.table.reset_table_picker.call(this)}},createCells:function(e,t,n){if(e=e.toLowerCase(),n){const t=this.util.createElement(e);return t.innerHTML="<div><br></div>",t}{let n="";for(;t>0;)n+="<"+e+"><div><br></div></"+e+">",t--;return n}},onMouseMove_tablePicker:function(e,t){t.stopPropagation();let n=this._w.Math.ceil(t.offsetX/18),i=this._w.Math.ceil(t.offsetY/18);n=n<1?1:n,i=i<1?1:i,e._rtl&&(e.tableHighlight.style.left=18*n-13+"px",n=11-n),e.tableHighlight.style.width=n+"em",e.tableHighlight.style.height=i+"em",this.util.changeTxt(e.tableDisplay,n+" x "+i),e._tableXY=[n,i]},reset_table_picker:function(){if(!this.context.table.tableHighlight)return;const e=this.context.table.tableHighlight.style,t=this.context.table.tableUnHighlight.style;e.width="1em",e.height="1em",t.width="10em",t.height="10em",this.util.changeTxt(this.context.table.tableDisplay,"1 x 1"),this.submenuOff()},init:function(){const e=this.context.table,t=this.plugins.table;if(t._removeEvents.call(this),t._selectedTable){const e=t._selectedTable.querySelectorAll(".se-table-selected-cell");for(let t=0,n=e.length;t<n;t++)this.util.removeClass(e[t],"se-table-selected-cell")}t._toggleEditor.call(this,!0),e._element=null,e._tdElement=null,e._trElement=null,e._trElements=null,e._tableXY=[],e._maxWidth=!0,e._fixedColumn=!1,e._physical_cellCnt=0,e._logical_cellCnt=0,e._rowCnt=0,e._rowIndex=0,e._physical_cellIndex=0,e._logical_cellIndex=0,e._current_colSpan=0,e._current_rowSpan=0,t._shift=!1,t._selectedCells=null,t._selectedTable=null,t._ref=null,t._fixedCell=null,t._selectedCell=null,t._fixedCellName=null},call_controller_tableEdit:function(e){const t=this.plugins.table,n=this.context.table;if(!this.getSelection().isCollapsed&&!t._selectedCell)return this.controllersOff(),void this.util.removeClass(e,"se-table-selected-cell");const i=n._element||this.plugins.table._selectedTable||this.util.getParentElement(e,"TABLE");n._maxWidth=this.util.hasClass(i,"se-table-size-100")||"100%"===i.style.width||!i.style.width&&!this.util.hasClass(i,"se-table-size-auto"),n._fixedColumn=this.util.hasClass(i,"se-table-layout-fixed")||"fixed"===i.style.tableLayout,t.setTableStyle.call(this,n._maxWidth?"width|column":"width"),t.setPositionControllerTop.call(this,i),t.setPositionControllerDiv.call(this,e,t._shift),t._shift||this.controllersOn(n.resizeDiv,n.tableController,t.init.bind(this),e,"table")},setPositionControllerTop:function(e){this.setControllerPosition(this.context.table.tableController,e,"top",{left:0,top:0})},setPositionControllerDiv:function(e,t){const n=this.context.table,i=n.resizeDiv;this.plugins.table.setCellInfo.call(this,e,t),n.cellControllerTop?this.setControllerPosition(i,n._element,"top",{left:n.tableController.offsetWidth,top:0}):this.setControllerPosition(i,e,"bottom",{left:0,top:0})},setCellInfo:function(e,t){const n=this.context.table,i=n._element=this.plugins.table._selectedTable||this.util.getParentElement(e,"TABLE");if(/THEAD/i.test(i.firstElementChild.nodeName)?this.util.addClass(n.headerButton,"active"):this.util.removeClass(n.headerButton,"active"),t||0===n._physical_cellCnt){n._tdElement!==e&&(n._tdElement=e,n._trElement=e.parentNode);const t=n._trElements=i.rows,l=e.cellIndex;let o=0;for(let e=0,n=t[0].cells,i=t[0].cells.length;e<i;e++)o+=n[e].colSpan;const s=n._rowIndex=n._trElement.rowIndex;n._rowCnt=t.length,n._physical_cellCnt=n._trElement.cells.length,n._logical_cellCnt=o,n._physical_cellIndex=l,n._current_colSpan=n._tdElement.colSpan-1,n._current_rowSpan,n._trElement.cells[l].rowSpan;let a=[],r=[];for(let e,i,o=0;o<=s;o++){e=t[o].cells,i=0;for(let t,c,d,u,h=0,g=e.length;h<g;h++){if(t=e[h],c=t.colSpan-1,d=t.rowSpan-1,u=h+i,r.length>0)for(let e,t=0;t<r.length;t++)e=r[t],e.row>o||(u>=e.index?(i+=e.cs,u+=e.cs,e.rs-=1,e.row=o+1,e.rs<1&&(r.splice(t,1),t--)):h===g-1&&(e.rs-=1,e.row=o+1,e.rs<1&&(r.splice(t,1),t--)));if(o===s&&h===l){n._logical_cellIndex=u;break}d>0&&a.push({index:u,cs:c+1,rs:d,row:-1}),i+=c}r=r.concat(a).sort((function(e,t){return e.index-t.index})),a=[]}a=null,r=null}},editTable:function(e,t){const n=this.plugins.table,i=this.context.table,l=i._element,o="row"===e;if(o){const e=i._trElement.parentNode;if(/^THEAD$/i.test(e.nodeName)){if("up"===t)return;if(!e.nextElementSibling||!/^TBODY$/i.test(e.nextElementSibling.nodeName))return void(l.innerHTML+="<tbody><tr>"+n.createCells.call(this,"td",i._logical_cellCnt,!1)+"</tr></tbody>")}}if(n._ref){const e=i._tdElement,l=n._selectedCells;if(o)if(t)n.setCellInfo.call(this,"up"===t?l[0]:l[l.length-1],!0),n.editRow.call(this,t,e);else{let e=l[0].parentNode;const i=[l[0]];for(let t,n=1,o=l.length;n<o;n++)t=l[n],e!==t.parentNode&&(i.push(t),e=t.parentNode);for(let e=0,l=i.length;e<l;e++)n.setCellInfo.call(this,i[e],!0),n.editRow.call(this,t)}else{const i=l[0].parentNode;if(t){let o=null;for(let e=0,t=l.length-1;e<t;e++)if(i!==l[e+1].parentNode){o=l[e];break}n.setCellInfo.call(this,"left"===t?l[0]:o||l[0],!0),n.editCell.call(this,t,e)}else{const e=[l[0]];for(let t,n=1,o=l.length;n<o&&(t=l[n],i===t.parentNode);n++)e.push(t);for(let i=0,l=e.length;i<l;i++)n.setCellInfo.call(this,e[i],!0),n.editCell.call(this,t)}}t||n.init.call(this)}else n[o?"editRow":"editCell"].call(this,t);if(!t){const e=l.children;for(let t=0;t<e.length;t++)0===e[t].children.length&&(this.util.removeItem(e[t]),t--);0===l.children.length&&this.util.removeItem(l)}},editRow:function(e,t){const n=this.context.table,i=!e,l="up"===e,o=n._rowIndex,s=i||l?o:o+n._current_rowSpan+1,a=i?-1:1,r=n._trElements;let c=n._logical_cellCnt;for(let e,t=0,n=o+(i?-1:0);t<=n;t++){if(e=r[t].cells,0===e.length)return;for(let n,i,l=0,o=e.length;l<o;l++)n=e[l].rowSpan,i=e[l].colSpan,n<2&&i<2||n+t>s&&s>t&&(e[l].rowSpan=n+a,c-=i)}if(i){const e=r[o+1];if(e){const t=[];let n=r[o].cells,i=0;for(let e,l,o=0,s=n.length;o<s;o++)e=n[o],l=o+i,i+=e.colSpan-1,e.rowSpan>1&&(e.rowSpan-=1,t.push({cell:e.cloneNode(!1),index:l}));if(t.length>0){let l=t.shift();n=e.cells,i=0;for(let o,s,a=0,r=n.length;a<r&&(o=n[a],s=a+i,i+=o.colSpan-1,!(s>=l.index)||(a--,i--,i+=l.cell.colSpan-1,e.insertBefore(l.cell,o),l=t.shift(),l));a++);if(l){e.appendChild(l.cell);for(let n=0,i=t.length;n<i;n++)e.appendChild(t[n].cell)}}}n._element.deleteRow(s)}else{n._element.insertRow(s).innerHTML=this.plugins.table.createCells.call(this,"td",c,!1)}i?this.controllersOff():this.plugins.table.setPositionControllerDiv.call(this,t||n._tdElement,!0)},editCell:function(e,t){const n=this.context.table,i=this.util,l=!e,o="left"===e,s=n._current_colSpan,a=l||o?n._logical_cellIndex:n._logical_cellIndex+s+1,r=n._trElements;let c=[],d=[],u=0;const h=[],g=[];for(let e,t,o,p,m,f,_=0,b=n._rowCnt;_<b;_++){e=r[_],t=a,m=!1,o=e.cells,f=0;for(let e,n,r,p,b=0,v=o.length;b<v&&(e=o[b],e);b++)if(n=e.rowSpan-1,r=e.colSpan-1,l){if(p=b+f,d.length>0){const e=!o[b+1];for(let t,n=0;n<d.length;n++)t=d[n],t.row>_||(p>=t.index?(f+=t.cs,p=b+f,t.rs-=1,t.row=_+1,t.rs<1&&(d.splice(n,1),n--)):e&&(t.rs-=1,t.row=_+1,t.rs<1&&(d.splice(n,1),n--)))}n>0&&c.push({rs:n,cs:r+1,index:p,row:-1}),p>=t&&p+r<=t+s?h.push(e):p<=t+s&&p+r>=t?e.colSpan-=i.getOverlapRangeAtIndex(a,a+s,p,p+r):n>0&&(p<t||p+r>t+s)&&g.push({cell:e,i:_,rs:_+n}),f+=r}else{if(b>=t)break;if(r>0){if(u<1&&r+b>=t){e.colSpan+=1,t=null,u=n+1;break}t-=r}if(!m){for(let e,n=0;n<d.length;n++)e=d[n],t-=e.cs,e.rs-=1,e.rs<1&&(d.splice(n,1),n--);m=!0}}if(d=d.concat(c).sort((function(e,t){return e.index-t.index})),c=[],!l){if(u>0){u-=1;continue}null!==t&&o.length>0&&(p=this.plugins.table.createCells.call(this,o[0].nodeName,0,!0),p=e.insertBefore(p,o[t]))}}if(l){let e,t;for(let n,l=0,o=h.length;l<o;l++)n=h[l].parentNode,i.removeItem(h[l]),0===n.cells.length&&(e||(e=i.getArrayIndex(r,n)),t=i.getArrayIndex(r,n),i.removeItem(n));for(let n,l=0,o=g.length;l<o;l++)n=g[l],n.cell.rowSpan=i.getOverlapRangeAtIndex(e,t,n.i,n.rs);this.controllersOff()}else this.plugins.table.setPositionControllerDiv.call(this,t||n._tdElement,!0)},_closeSplitMenu:null,openSplitMenu:function(){this.util.addClass(this.context.table.splitButton,"on"),this.context.table.splitMenu.style.display="inline-table",this.plugins.table._closeSplitMenu=function(){this.util.removeClass(this.context.table.splitButton,"on"),this.context.table.splitMenu.style.display="none",this.removeDocEvent("click",this.plugins.table._closeSplitMenu),this.plugins.table._closeSplitMenu=null}.bind(this),this.addDocEvent("click",this.plugins.table._closeSplitMenu)},splitCells:function(e){const t=this.util,n="vertical"===e,i=this.context.table,l=i._tdElement,o=i._trElements,s=i._trElement,a=i._logical_cellIndex,r=i._rowIndex,c=this.plugins.table.createCells.call(this,l.nodeName,0,!0);if(n){const e=l.colSpan;if(c.rowSpan=l.rowSpan,e>1)c.colSpan=this._w.Math.floor(e/2),l.colSpan=e-c.colSpan,s.insertBefore(c,l.nextElementSibling);else{let t=[],n=[];for(let s,r,c=0,d=i._rowCnt;c<d;c++){s=o[c].cells,r=0;for(let i,o,d,u,h=0,g=s.length;h<g;h++){if(i=s[h],o=i.colSpan-1,d=i.rowSpan-1,u=h+r,n.length>0)for(let e,t=0;t<n.length;t++)e=n[t],e.row>c||(u>=e.index?(r+=e.cs,u+=e.cs,e.rs-=1,e.row=c+1,e.rs<1&&(n.splice(t,1),t--)):h===g-1&&(e.rs-=1,e.row=c+1,e.rs<1&&(n.splice(t,1),t--)));if(u<=a&&d>0&&t.push({index:u,cs:o+1,rs:d,row:-1}),i!==l&&u<=a&&u+o>=a+e-1){i.colSpan+=1;break}if(u>a)break;r+=o}n=n.concat(t).sort((function(e,t){return e.index-t.index})),t=[]}s.insertBefore(c,l.nextElementSibling)}}else{const e=l.rowSpan;if(c.colSpan=l.colSpan,e>1){c.rowSpan=this._w.Math.floor(e/2);const n=e-c.rowSpan,i=[],r=t.getArrayIndex(o,s)+n;for(let e,t,n=0;n<r;n++){e=o[n].cells,t=0;for(let l,o,s,c=0,d=e.length;c<d&&(s=c+t,!(s>=a));c++)l=e[c],o=l.rowSpan-1,o>0&&o+n>=r&&s<a&&i.push({index:s,cs:l.colSpan}),t+=l.colSpan-1}const d=o[r],u=d.cells;let h=i.shift();for(let e,t,n,l,o=0,s=u.length,r=0;o<s;o++){if(n=o+r,e=u[o],t=e.colSpan-1,l=n+t+1,h&&l>=h.index&&(r+=h.cs,l+=h.cs,h=i.shift()),l>=a||o===s-1){d.insertBefore(c,e.nextElementSibling);break}r+=t}l.rowSpan=n}else{c.rowSpan=l.rowSpan;const e=t.createElement("TR");e.appendChild(c);for(let e,t=0;t<r;t++){if(e=o[t].cells,0===e.length)return;for(let n=0,i=e.length;n<i;n++)t+e[n].rowSpan-1>=r&&(e[n].rowSpan+=1)}const n=i._physical_cellIndex,a=s.cells;for(let e=0,t=a.length;e<t;e++)e!==n&&(a[e].rowSpan+=1);s.parentNode.insertBefore(e,s.nextElementSibling)}}this.focusEdge(l),this.plugins.table.setPositionControllerDiv.call(this,l,!0)},mergeCells:function(){const e=this.plugins.table,t=this.context.table,n=this.util,i=e._ref,l=e._selectedCells,o=l[0];let s=null,a=null,r=i.ce-i.cs+1,c=i.re-i.rs+1,d="",u=null;for(let e,t,i=1,o=l.length;i<o;i++){e=l[i],u!==e.parentNode&&(u=e.parentNode),t=e.children;for(let e=0,i=t.length;e<i;e++)n.isFormatElement(t[e])&&n.onlyZeroWidthSpace(t[e].textContent)&&n.removeItem(t[e]);d+=e.innerHTML,n.removeItem(e),0===u.cells.length&&(s?a=u:s=u,c-=1)}if(s){const e=t._trElements,i=n.getArrayIndex(e,s),l=n.getArrayIndex(e,a||s),o=[];for(let t,s=0;s<=l;s++)if(t=e[s].cells,0!==t.length)for(let e,o,a=0,r=t.length;a<r;a++)e=t[a],o=e.rowSpan-1,o>0&&s+o>=i&&(e.rowSpan-=n.getOverlapRangeAtIndex(i,l,s,s+o));else o.push(e[s]);for(let e=0,t=o.length;e<t;e++)n.removeItem(o[e])}o.innerHTML+=d,o.colSpan=r,o.rowSpan=c,this.controllersOff(),e.setActiveButton.call(this,!0,!1),e.call_controller_tableEdit.call(this,o),n.addClass(o,"se-table-selected-cell"),this.focusEdge(o)},toggleHeader:function(){const e=this.util,t=this.context.table.headerButton,n=e.hasClass(t,"active"),i=this.context.table._element;if(n)e.removeItem(i.querySelector("thead"));else{const t=e.createElement("THEAD");t.innerHTML="<tr>"+this.plugins.table.createCells.call(this,"th",this.context.table._logical_cellCnt,!1)+"</tr>",i.insertBefore(t,i.firstElementChild)}e.toggleClass(t,"active"),/TH/i.test(this.context.table._tdElement.nodeName)?this.controllersOff():this.plugins.table.setPositionControllerDiv.call(this,this.context.table._tdElement,!1)},setTableStyle:function(e){const t=this.context.table,n=t._element;let i,l,o,s;e.indexOf("width")>-1&&(i=t.resizeButton.firstElementChild,l=t.resizeText,t._maxWidth?(o=t.icons.reduction,s=t.minText,t.columnFixedButton.style.display="block",this.util.removeClass(n,"se-table-size-auto"),this.util.addClass(n,"se-table-size-100")):(o=t.icons.expansion,s=t.maxText,t.columnFixedButton.style.display="none",this.util.removeClass(n,"se-table-size-100"),this.util.addClass(n,"se-table-size-auto")),this.util.changeElement(i,o),this.util.changeTxt(l,s)),e.indexOf("column")>-1&&(t._fixedColumn?(this.util.removeClass(n,"se-table-layout-auto"),this.util.addClass(n,"se-table-layout-fixed"),this.util.addClass(t.columnFixedButton,"active")):(this.util.removeClass(n,"se-table-layout-fixed"),this.util.addClass(n,"se-table-layout-auto"),this.util.removeClass(t.columnFixedButton,"active")))},setActiveButton:function(e,t){const n=this.context.table;/^TH$/i.test(e.nodeName)?(n.insertRowAboveButton.setAttribute("disabled",!0),n.insertRowBelowButton.setAttribute("disabled",!0)):(n.insertRowAboveButton.removeAttribute("disabled"),n.insertRowBelowButton.removeAttribute("disabled")),t&&e!==t?(n.splitButton.setAttribute("disabled",!0),n.mergeButton.removeAttribute("disabled")):(n.splitButton.removeAttribute("disabled"),n.mergeButton.setAttribute("disabled",!0))},_bindOnSelect:null,_bindOffSelect:null,_bindOffShift:null,_selectedCells:null,_shift:!1,_fixedCell:null,_fixedCellName:null,_selectedCell:null,_selectedTable:null,_ref:null,_toggleEditor:function(e){this.context.element.wysiwyg.setAttribute("contenteditable",e),e?this.util.removeClass(this.context.element.wysiwyg,"se-disabled"):this.util.addClass(this.context.element.wysiwyg,"se-disabled")},_offCellMultiSelect:function(e){e.stopPropagation();const t=this.plugins.table;t._shift?t._initBind&&(this._wd.removeEventListener("touchmove",t._initBind),t._initBind=null):(t._removeEvents.call(this),t._toggleEditor.call(this,!0)),t._fixedCell&&t._selectedTable&&(t.setActiveButton.call(this,t._fixedCell,t._selectedCell),t.call_controller_tableEdit.call(this,t._selectedCell||t._fixedCell),t._selectedCells=t._selectedTable.querySelectorAll(".se-table-selected-cell"),t._selectedCell&&t._fixedCell&&this.focusEdge(t._selectedCell),t._shift||(t._fixedCell=null,t._selectedCell=null,t._fixedCellName=null))},_onCellMultiSelect:function(e){this._antiBlur=!0;const t=this.plugins.table,n=this.util.getParentElement(e.target,this.util.isCell);if(t._shift)n===t._fixedCell?t._toggleEditor.call(this,!0):t._toggleEditor.call(this,!1);else if(!t._ref){if(n===t._fixedCell)return;t._toggleEditor.call(this,!1)}n&&n!==t._selectedCell&&t._fixedCellName===n.nodeName&&t._selectedTable===this.util.getParentElement(n,"TABLE")&&(t._selectedCell=n,t._setMultiCells.call(this,t._fixedCell,n))},_setMultiCells:function(e,t){const n=this.plugins.table,i=n._selectedTable.rows,l=this.util,o=n._selectedTable.querySelectorAll(".se-table-selected-cell");for(let e=0,t=o.length;e<t;e++)l.removeClass(o[e],"se-table-selected-cell");if(e===t&&(l.addClass(e,"se-table-selected-cell"),!n._shift))return;let s=!0,a=[],r=[];const c=n._ref={_i:0,cs:null,ce:null,rs:null,re:null};for(let n,o,d=0,u=i.length;d<u;d++){n=i[d].cells,o=0;for(let i,u,h,g,p=0,m=n.length;p<m;p++){if(i=n[p],h=i.colSpan-1,g=i.rowSpan-1,u=p+o,a.length>0)for(let e,t=0;t<a.length;t++)e=a[t],e.row>d||(u>=e.index?(o+=e.cs,u+=e.cs,e.rs-=1,e.row=d+1,e.rs<1&&(a.splice(t,1),t--)):p===m-1&&(e.rs-=1,e.row=d+1,e.rs<1&&(a.splice(t,1),t--)));if(s){if(i!==e&&i!==t||(c.cs=null!==c.cs&&c.cs<u?c.cs:u,c.ce=null!==c.ce&&c.ce>u+h?c.ce:u+h,c.rs=null!==c.rs&&c.rs<d?c.rs:d,c.re=null!==c.re&&c.re>d+g?c.re:d+g,c._i+=1),2===c._i){s=!1,a=[],r=[],d=-1;break}}else if(l.getOverlapRangeAtIndex(c.cs,c.ce,u,u+h)&&l.getOverlapRangeAtIndex(c.rs,c.re,d,d+g)){const e=c.cs<u?c.cs:u,t=c.ce>u+h?c.ce:u+h,n=c.rs<d?c.rs:d,o=c.re>d+g?c.re:d+g;if(c.cs!==e||c.ce!==t||c.rs!==n||c.re!==o){c.cs=e,c.ce=t,c.rs=n,c.re=o,d=-1,a=[],r=[];break}l.addClass(i,"se-table-selected-cell")}g>0&&r.push({index:u,cs:h+1,rs:g,row:-1}),o+=i.colSpan-1}a=a.concat(r).sort((function(e,t){return e.index-t.index})),r=[]}},_removeEvents:function(){const e=this.plugins.table;e._initBind&&(this._wd.removeEventListener("touchmove",e._initBind),e._initBind=null),e._bindOnSelect&&(this._wd.removeEventListener("mousedown",e._bindOnSelect),this._wd.removeEventListener("mousemove",e._bindOnSelect),e._bindOnSelect=null),e._bindOffSelect&&(this._wd.removeEventListener("mouseup",e._bindOffSelect),e._bindOffSelect=null),e._bindOffShift&&(this._wd.removeEventListener("keyup",e._bindOffShift),e._bindOffShift=null)},_initBind:null,onTableCellMultiSelect:function(e,t){const n=this.plugins.table;n._removeEvents.call(this),this.controllersOff(),n._shift=t,n._fixedCell=e,n._fixedCellName=e.nodeName,n._selectedTable=this.util.getParentElement(e,"TABLE");const i=n._selectedTable.querySelectorAll(".se-table-selected-cell");for(let e=0,t=i.length;e<t;e++)this.util.removeClass(i[e],"se-table-selected-cell");this.util.addClass(e,"se-table-selected-cell"),n._bindOnSelect=n._onCellMultiSelect.bind(this),n._bindOffSelect=n._offCellMultiSelect.bind(this),t?(n._bindOffShift=function(){this.controllersOn(this.context.table.resizeDiv,this.context.table.tableController,this.plugins.table.init.bind(this),e,"table"),n._ref||this.controllersOff()}.bind(this),this._wd.addEventListener("keyup",n._bindOffShift,!1),this._wd.addEventListener("mousedown",n._bindOnSelect,!1)):this._wd.addEventListener("mousemove",n._bindOnSelect,!1),this._wd.addEventListener("mouseup",n._bindOffSelect,!1),n._initBind=n.init.bind(this),this._wd.addEventListener("touchmove",n._initBind,!1)},onClick_tableController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")?e.target:e.target.parentNode;if(t.getAttribute("disabled"))return;const n=t.getAttribute("data-command"),i=t.getAttribute("data-value"),l=t.getAttribute("data-option"),o=this.plugins.table;if("function"==typeof o._closeSplitMenu&&(o._closeSplitMenu(),"onsplit"===n))return;if(!n)return;e.preventDefault();const s=this.context.table;switch(n){case"insert":case"delete":o.editTable.call(this,i,l);break;case"header":o.toggleHeader.call(this);break;case"onsplit":o.openSplitMenu.call(this);break;case"split":o.splitCells.call(this,i);break;case"merge":o.mergeCells.call(this);break;case"resize":s._maxWidth=!s._maxWidth,o.setTableStyle.call(this,"width"),o.setPositionControllerTop.call(this,s._element),o.setPositionControllerDiv.call(this,s._tdElement,o._shift);break;case"layout":s._fixedColumn=!s._fixedColumn,o.setTableStyle.call(this,"column"),o.setPositionControllerTop.call(this,s._element),o.setPositionControllerDiv.call(this,s._tdElement,o._shift);break;case"remove":const e=s._element.parentNode;this.util.removeItem(s._element),this.controllersOff(),e!==this.context.element.wysiwyg&&this.util.removeItemAllParents(e,(function(e){return 0===e.childNodes.length}),null),this.focus()}this.history.push(!1)}},formatBlock:{name:"formatBlock",display:"submenu",add:function(e,t){const n=e.context;n.formatBlock={targetText:t.querySelector(".txt"),targetTooltip:t.parentNode.querySelector(".se-tooltip-text"),_formatList:null,currentFormat:""};let i=this.setSubmenu(e);i.querySelector("ul").addEventListener("click",this.pickUp.bind(e)),n.formatBlock._formatList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.options,n=e.lang.toolbar,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer se-list-format";const l=["p","div","blockquote","pre","h1","h2","h3","h4","h5","h6"],o=t.formats&&0!==t.formats.length?t.formats:l;let s='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,i,a,r,c,d,u=0,h=o.length;u<h;u++)e=o[u],"string"==typeof e&&l.indexOf(e)>-1?(t=e.toLowerCase(),i="blockquote"===t?"range":"pre"===t?"free":"replace",r=/^h/.test(t)?t.match(/\d+/)[0]:"",a=n["tag_"+(r?"h":t)]+r,d="",c=""):(t=e.tag.toLowerCase(),i=e.command,a=e.name||t,d=e.class,c=d?' class="'+d+'"':""),s+='<li><button type="button" class="se-btn-list" data-command="'+i+'" data-value="'+t+'" data-class="'+d+'" title="'+a+'" aria-label="'+a+'"><'+t+c+">"+a+"</"+t+"></button></li>";return s+="</ul></div>",i.innerHTML=s,i},active:function(e){let t=this.lang.toolbar.formats;const n=this.context.formatBlock.targetText;if(e){if(this.util.isFormatElement(e)){const i=this.context.formatBlock._formatList,l=e.nodeName.toLowerCase(),o=(e.className.match(/(\s|^)__se__format__[^\s]+/)||[""])[0].trim();for(let e,n=0,s=i.length;n<s;n++)if(e=i[n],l===e.getAttribute("data-value")&&o===e.getAttribute("data-class")){t=e.title;break}return this.util.changeTxt(n,t),n.setAttribute("data-value",l),n.setAttribute("data-class",o),!0}}else this.util.changeTxt(n,t);return!1},on:function(){const e=this.context.formatBlock,t=e._formatList,n=e.targetText,i=(n.getAttribute("data-value")||"")+(n.getAttribute("data-class")||"");if(i!==e.currentFormat){for(let e,n=0,l=t.length;n<l;n++)e=t[n],i===e.getAttribute("data-value")+e.getAttribute("data-class")?this.util.addClass(e,"active"):this.util.removeClass(e,"active");e.currentFormat=i}},pickUp:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null,i=null,l=null,o="";for(;!n&&!/UL/i.test(t.tagName);){if(n=t.getAttribute("data-command"),i=t.getAttribute("data-value"),o=t.getAttribute("data-class"),n){l=t.firstChild;break}t=t.parentNode}if(n){if("range"===n){const e=l.cloneNode(!1);this.applyRangeFormatElement(e)}else{let e=this.getRange(),t=this.getSelectedElementsAndComponents(!1);if(0===t.length&&(e=this.getRange_addLine(e,null),t=this.getSelectedElementsAndComponents(!1),0===t.length))return;const s=e.startOffset,a=e.endOffset,r=this.util;let c=t[0],d=t[t.length-1];const u=r.getNodePath(e.startContainer,c,null,null),h=r.getNodePath(e.endContainer,d,null,null),g=this.detachList(t,!1);g.sc&&(c=g.sc),g.ec&&(d=g.ec),this.setRange(r.getNodeFromPath(u,c),s,r.getNodeFromPath(h,d),a);const p=this.getSelectedElementsAndComponents(!1);if("free"===n){const e=p.length-1;let t=p[e].parentNode,n=l.cloneNode(!1);const i=n;for(let i,o,s,a,c,d,u=e,h=!0;u>=0;u--)if(i=p[u],i!==(p[u+1]?p[u+1].parentNode:null)){if(d=r.isComponent(i),o=d?"":i.innerHTML.replace(/(?!>)\s+(?=<)|\n/g," "),s=r.getParentElement(i,(function(e){return e.parentNode===t})),(t!==i.parentNode||d)&&(r.isFormatElement(t)?(t.parentNode.insertBefore(n,t.nextSibling),t=t.parentNode):(t.insertBefore(n,s?s.nextSibling:null),t=i.parentNode),a=n.nextSibling,a&&n.nodeName===a.nodeName&&r.isSameAttributes(n,a)&&(n.innerHTML+="<BR>"+a.innerHTML,r.removeItem(a)),n=l.cloneNode(!1),h=!0),c=n.innerHTML,n.innerHTML=(h||!o||!c||/<br>$/i.test(o)?o:o+"<BR>")+c,0===u){t.insertBefore(n,i),a=i.nextSibling,a&&n.nodeName===a.nodeName&&r.isSameAttributes(n,a)&&(n.innerHTML+="<BR>"+a.innerHTML,r.removeItem(a));const e=n.previousSibling;e&&n.nodeName===e.nodeName&&r.isSameAttributes(n,e)&&(e.innerHTML+="<BR>"+n.innerHTML,r.removeItem(n))}d||r.removeItem(i),o&&(h=!1)}this.setRange(i,0,i,0)}else{for(let e,t,n=0,s=p.length;n<s;n++)e=p[n],e.nodeName.toLowerCase()===i.toLowerCase()&&(e.className.match(/(\s|^)__se__format__[^\s]+/)||[""])[0].trim()===o||r.isComponent(e)||(t=l.cloneNode(!1),r.copyFormatAttributes(t,e),t.innerHTML=e.innerHTML,e.parentNode.replaceChild(t,e)),0===n&&(c=t||e),n===s-1&&(d=t||e),t=null;this.setRange(r.getNodeFromPath(u,c),s,r.getNodeFromPath(h,d),a)}this.history.push(!1)}this.submenuOff()}}},lineHeight:{name:"lineHeight",display:"submenu",add:function(e,t){const n=e.context;n.lineHeight={_sizeList:null,currentSize:-1};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.lineHeight._sizeList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer";const l=t.lineHeights?t.lineHeights:[{text:"1",value:1},{text:"1.15",value:1.15},{text:"1.5",value:1.5},{text:"2",value:2}];let o='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+n.toolbar.default+'" aria-label="'+n.toolbar.default+'">('+n.toolbar.default+")</button></li>";for(let e,t=0,n=l.length;t<n;t++)e=l[t],o+='<li><button type="button" class="se-btn-list" data-value="'+e.value+'" title="'+e.text+'" aria-label="'+e.text+'">'+e.text+"</button></li>";return o+="</ul></div>",i.innerHTML=o,i},on:function(){const e=this.context.lineHeight,t=e._sizeList,n=this.util.getFormatElement(this.getSelectionNode()),i=n?n.style.lineHeight+"":"";if(i!==e.currentSize){for(let e=0,n=t.length;e<n;e++)i===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentSize=i}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();const t=e.target.getAttribute("data-value")||"",n=this.getSelectedElements();for(let e=0,i=n.length;e<i;e++)n[e].style.lineHeight=t;this.submenuOff(),this.history.push(!1)}},template:s,paragraphStyle:{name:"paragraphStyle",display:"submenu",add:function(e,t){const n=e.context;n.paragraphStyle={_classList:null};let i=this.setSubmenu(e);i.querySelector("ul").addEventListener("click",this.pickUp.bind(e)),n.paragraphStyle._classList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.options,n=e.util.createElement("DIV");n.className="se-submenu se-list-layer se-list-format";const i=e.lang.menu,l={spaced:{name:i.spaced,class:"__se__p-spaced",_class:""},bordered:{name:i.bordered,class:"__se__p-bordered",_class:""},neon:{name:i.neon,class:"__se__p-neon",_class:""}},o=t.paragraphStyles&&0!==t.paragraphStyles.length?t.paragraphStyles:["spaced","bordered","neon"];let s='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,n,i,a=0,r=o.length;a<r;a++){if(e=o[a],"string"==typeof e){const t=l[e.toLowerCase()];if(!t)continue;e=t}t=e.name,n=e.class?' class="'+e.class+'"':"",i=e._class,s+='<li><button type="button" class="se-btn-list'+(i?" "+i:"")+'" data-value="'+e.class+'" title="'+t+'" aria-label="'+t+'"><div'+n+">"+t+"</div></button></li>"}return s+="</ul></div>",n.innerHTML=s,n},on:function(){const e=this.context.paragraphStyle._classList,t=this.util.getFormatElement(this.getSelectionNode());for(let n=0,i=e.length;n<i;n++)this.util.hasClass(t,e[n].getAttribute("data-value"))?this.util.addClass(e[n],"active"):this.util.removeClass(e[n],"active")},pickUp:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null;for(;!/^UL$/i.test(t.tagName)&&(n=t.getAttribute("data-value"),!n);)t=t.parentNode;if(!n)return;let i=this.getSelectedElements();if(0===i.length&&(this.getRange_addLine(this.getRange(),null),i=this.getSelectedElements(),0===i.length))return;const l=this.util.hasClass(t,"active")?this.util.removeClass.bind(this.util):this.util.addClass.bind(this.util);for(let e=0,t=i.length;e<t;e++)l(i[e],n);this.submenuOff(),this.history.push(!1)}},textStyle:{name:"textStyle",display:"submenu",add:function(e,t){const n=e.context;n.textStyle={_styleList:null};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.textStyle._styleList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.options,n=e.util.createElement("DIV");n.className="se-submenu se-list-layer se-list-format";const i={code:{name:e.lang.menu.code,class:"__se__t-code",tag:"code"},translucent:{name:e.lang.menu.translucent,style:"opacity: 0.5;",tag:"span"},shadow:{name:e.lang.menu.shadow,class:"__se__t-shadow",tag:"span"}},l=t.textStyles?t.textStyles:e._w.Object.keys(i);let o='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,n,s,a,r,c,d=0,u=l.length;d<u;d++){if(e=l[d],s="",r="",a=[],"string"==typeof e){const t=i[e.toLowerCase()];if(!t)continue;e=t}n=e.name,t=e.tag||"span",c=e._class,e.style&&(s+=' style="'+e.style+'"',r+=e.style.replace(/:[^;]+(;|$)\s*/g,","),a.push("style")),e.class&&(s+=' class="'+e.class+'"',r+="."+e.class.trim().replace(/\s+/g,",."),a.push("class")),r=r.replace(/,$/,""),o+='<li><button type="button" class="se-btn-list'+(c?" "+c:"")+'" data-command="'+t+'" data-value="'+r+'" title="'+n+'" aria-label="'+n+'"><'+t+s+">"+n+"</"+t+"></button></li>"}return o+="</ul></div>",n.innerHTML=o,n},on:function(){const e=this.util,t=this.context.textStyle._styleList,n=this.getSelectionNode();for(let i,l,o,s=0,a=t.length;s<a;s++){i=t[s],l=i.getAttribute("data-value").split(",");for(let t,s,a=0;a<l.length;a++){for(t=n,o=!1;t&&!e.isFormatElement(t)&&!e.isComponent(t);){if(t.nodeName.toLowerCase()===i.getAttribute("data-command").toLowerCase()&&(s=l[a],/^\./.test(s)?e.hasClass(t,s.replace(/^\./,"")):t.style[s])){o=!0;break}t=t.parentNode}if(!o)break}o?e.addClass(i,"active"):e.removeClass(i,"active")}},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null,i=null;for(;!n&&!/UL/i.test(t.tagName);){if(n=t.getAttribute("data-command"),n){i=t.firstChild;break}t=t.parentNode}if(!n)return;const l=i.style.cssText.replace(/:.+(;|$)/g,",").split(",");l.pop();const o=i.classList;for(let e=0,t=o.length;e<t;e++)l.push("."+o[e]);const s=this.util.hasClass(t,"active")?null:i.cloneNode(!1),a=s?null:[i.nodeName];this.nodeChange(s,l,a,!0),this.submenuOff()}},link:u,image:b,video:v,audio:y,math:C,imageGallery:{name:"imageGallery",add:function(e){e.addModule([x.a]);e.context.imageGallery={title:e.lang.toolbar.imageGallery,url:e.options.imageGalleryUrl,header:e.options.imageGalleryHeader,listClass:"se-image-list",itemTemplateHandler:this.drawItems,selectorHandler:this.setImage.bind(e),columnSize:4}},open:function(e){this.plugins.fileBrowser.open.call(this,"imageGallery",e)},drawItems:function(e){const t=e.src.split("/").pop();return'<div class="se-file-item-img"><img src="'+(e.thumbnail||e.src)+'" alt="'+(e.alt||t)+'" data-command="pick" data-value="'+(e.src||e.thumbnail)+'"><div class="se-file-img-name se-file-name-back"></div><div class="se-file-img-name __se__img_name">'+(e.name||t)+"</div></div>"},setImage:function(e,t){this.callPlugin("image",function(){const n={name:t,size:0};this.plugins.image.create_image.call(this,e.getAttribute("data-value"),null,this.context.image._origin_w,this.context.image._origin_h,"none",n,e.alt)}.bind(this),null)}}},S={rtl:{italic:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10.5 15.8" xml:space="preserve"><g><path d="M0.3,0.1c0.3,0,0.5,0,0.7,0c1,0.1,1.7,0.1,2.2,0.1H4L7.2,0l0.2,1.1H7c-0.5,0-1,0.1-1.5,0.3v0.4l0.3,1.9L6,4.4L6.3,6 l0.1,0.4l0.1,0.5c0.1,0.2,0.1,0.4,0.2,0.7s0.1,0.6,0.2,0.9L7,9.1l0.6,2.8l0.3,1.4c0.1,0.4,0.2,0.7,0.4,1c0.4,0.2,0.8,0.3,1.2,0.4 l0.8,0.2l0.2,0.9l-1.1,0c-0.9-0.1-1.5-0.1-1.8-0.1h-2c-0.9,0.1-1.4,0.2-1.5,0.2c-0.1,0-0.2,0-0.3,0H3.4c-0.1,0-0.2,0-0.2,0 l-0.1-0.4c0-0.2-0.1-0.4-0.1-0.6l0.7-0.1c0.4,0,0.8-0.1,1.2-0.2c0-0.1,0-0.2,0-0.3l-0.1-0.5l-0.4-2.4L4,9.6L3.4,6.4 C3.2,5.7,3,4.7,2.7,3.3c0-0.3-0.1-0.5-0.1-0.8C2.5,2.1,2.4,1.9,2.3,1.6C2,1.4,1.6,1.3,1.3,1.2C0.9,1.2,0.5,1.1,0.2,0.9L0,0.4L0,0 L0.3,0.1L0.3,0.1z"/></g></svg>',indent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><g><path d="M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z"/></g><path d="M13.1,3.5L15.7,6c0.1,0.1,0.1,0.3,0,0.4l-2.5,2.5C13.1,9,13,9,12.9,9c-0.1,0-0.1,0-0.2-0.1c-0.1-0.1-0.1-0.1-0.1-0.2V3.7 c0-0.1,0-0.2,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C13,3.4,13.1,3.4,13.1,3.5z"/></g></svg>',outdent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><g><path d="M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z"/></g><path d="M15.5,3.4c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2v5.1c0,0.1,0,0.1-0.1,0.2C15.6,9,15.5,9,15.5,9 c-0.1,0-0.1,0-0.2-0.1l-2.5-2.5c-0.1-0.1-0.1-0.3,0-0.4l2.5-2.5C15.3,3.4,15.4,3.4,15.5,3.4z"/></g></svg>',list_bullets:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><path d="M12.4,10.7c0,0.9,0.8,1.7,1.7,1.7c0.9,0,1.7-0.8,1.7-1.7C15.7,9.8,15,9,14.1,9c-0.4,0-0.9,0.2-1.2,0.5 C12.5,9.8,12.4,10.2,12.4,10.7C12.4,10.7,12.4,10.7,12.4,10.7z M12.4,6.2c0,0.9,0.8,1.7,1.7,1.7c0.4,0,0.9-0.2,1.2-0.5 c0.3-0.3,0.4-0.7,0.4-1.1c0-0.9-0.7-1.7-1.6-1.7C13.1,4.6,12.4,5.3,12.4,6.2C12.4,6.2,12.4,6.2,12.4,6.2z M0,9.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1l10.7,0c0,0,0,0,0,0c0.1,0,0.3-0.1,0.3-0.3V9.8c0-0.1,0-0.1-0.1-0.2 C11.1,9.6,11,9.6,11,9.6l-10.7,0c-0.1,0-0.1,0-0.2,0.1C0,9.7,0,9.8,0,9.8L0,9.8z M12.9,2.9c0.3,0.3,0.7,0.5,1.2,0.5 c0.4,0,0.9-0.2,1.2-0.5c0.7-0.7,0.7-1.7,0-2.4C14.9,0.2,14.5,0,14.1,0c-0.4,0-0.9,0.2-1.2,0.5c-0.3,0.3-0.5,0.7-0.5,1.2 C12.4,2.1,12.5,2.6,12.9,2.9z M0,5.3V7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.1,0,0.2-0.1 c0.1-0.1,0.1-0.1,0.1-0.2V5.3c0,0,0,0,0,0c0-0.1-0.1-0.3-0.3-0.3H0.3c-0.1,0-0.1,0-0.2,0.1C0,5.2,0,5.3,0,5.3L0,5.3z M0,0.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1h10.7c0.1,0,0.1,0,0.2-0.1c0,0,0.1-0.1,0.1-0.2V0.8c0-0.1,0-0.1-0.1-0.2 c0-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.1,0-0.2,0.1C0,0.7,0,0.8,0,0.8L0,0.8z"/></g></svg>',list_number:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M0,11.5l0,1.7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2v-1.7 c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.2,0-0.2,0.1C0,11.4,0,11.4,0,11.5L0,11.5z M0,8.7c0,0.1,0,0.1,0.1,0.2 C0.1,8.9,0.2,9,0.3,9H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V7c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1l-10.7,0 c-0.1,0-0.2,0-0.2,0.1C0,6.8,0,6.9,0,7C0,7,0,8.7,0,8.7z M0,2.5v1.7c0,0.1,0,0.1,0.1,0.2c0,0,0.1,0.1,0.2,0.1l10.7,0 c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V2.4c0-0.1,0-0.1-0.1-0.2c-0.1,0-0.1,0-0.2,0H0.3c-0.1,0-0.1,0-0.2,0 C0,2.3,0,2.4,0,2.5L0,2.5z"/></g><path d="M15.6,14.2c0-0.3-0.1-0.6-0.3-0.8c-0.2-0.2-0.4-0.4-0.7-0.4l0.9-1v-0.8h-2.9v1.3h0.9v-0.5h0.9l0,0c-0.1,0.1-0.2,0.2-0.3,0.3 s-0.2,0.3-0.4,0.5l-0.3,0.3l0.2,0.5c0.6,0,0.9,0.1,0.9,0.5c0,0.1-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.4,0.1c-0.3,0-0.7-0.1-0.9-0.3 l-0.5,0.8c0.4,0.4,0.9,0.6,1.5,0.6c0.4,0,0.9-0.1,1.2-0.4C15.5,15.1,15.6,14.7,15.6,14.2z"/><path d="M15.6,8.7h-0.9v0.5h-1.1c0-0.2,0.2-0.4,0.4-0.5c0.2-0.2,0.4-0.3,0.7-0.4c0.3-0.2,0.5-0.3,0.7-0.6c0.2-0.2,0.3-0.5,0.3-0.8 c0-0.4-0.2-0.8-0.5-1c-0.6-0.4-1.4-0.5-2-0.1c-0.3,0.2-0.5,0.4-0.6,0.7L13.3,7c0.1-0.3,0.4-0.5,0.7-0.5c0.1,0,0.3,0,0.3,0.1 c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.2,0.1-0.3,0.3-0.5,0.4c-0.2,0.1-0.4,0.3-0.6,0.4c-0.2,0.2-0.4,0.4-0.5,0.6 c-0.1,0.2-0.2,0.5-0.2,0.8c0,0.2,0,0.3,0,0.5h3.2L15.6,8.7L15.6,8.7z"/><path d="M15.6,3.6h-1V0h-0.9l-1.2,1.1l0.6,0.7c0.2-0.1,0.3-0.3,0.4-0.5l0,0v2.2h-0.9v0.9h3L15.6,3.6L15.6,3.6z"/></svg>',link:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M7.4,9.9l3.1,3.1c0.3,0.3,0.8,0.5,1.3,0.5c0.5,0,0.9-0.2,1.3-0.5c0,0,0,0,0,0c0.7-0.7,0.7-1.9,0-2.6L9.9,7.3 c0-0.1,0-0.2,0-0.3C9.9,7,10,7,10.1,7l2.2-0.2c0.1,0,0.1,0,0.2,0.1l2.1,2.1c0.4,0.4,0.7,0.8,0.9,1.3c0.2,0.5,0.3,1,0.3,1.5 c0,0.5-0.1,1-0.3,1.5c-0.8,2-3.2,3-5.2,2.2c-0.5-0.2-0.9-0.5-1.3-0.9l-2.1-2.1c-0.1,0-0.1-0.1-0.1-0.2L7,10.1C7,10,7,9.9,7.1,9.9 C7.2,9.8,7.3,9.9,7.4,9.9z M1.2,1.1C1.6,0.7,2,0.4,2.5,0.3c1-0.4,2.1-0.4,3.1,0C6,0.4,6.5,0.7,6.8,1.1L9,3.2C9,3.3,9.1,3.3,9,3.4 L8.8,5.6c0,0.1-0.1,0.2-0.2,0.2c-0.1,0.1-0.2,0.1-0.3,0L5.3,2.7C5,2.3,4.5,2.1,4,2.1c-0.5,0-0.9,0.2-1.3,0.5c0,0,0,0,0,0 C2,3.4,2,4.5,2.7,5.2l3.1,3.2c0.1,0.1,0.1,0.2,0,0.3c0,0.1-0.1,0.1-0.2,0.1L3.5,9C3.4,9,3.4,9,3.3,8.9L1.2,6.8c0,0,0,0,0,0 C-0.4,5.2-0.4,2.7,1.2,1.1L1.2,1.1z M14.3,6h-2.6c0,0,0,0,0,0c-0.1,0-0.2-0.1-0.2-0.2c0-0.1,0-0.2,0.1-0.3l2.5-0.7 c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0.1,0.1,0.2l0.1,0.8c0,0.1,0,0.1-0.1,0.2C14.5,6,14.4,6,14.3,6L14.3,6z M10.2,4.1 c0,0.1-0.1,0.2-0.2,0.2l0,0c0,0,0,0,0,0C9.8,4.2,9.7,4.1,9.8,4L9.7,1.4c0-0.1,0-0.1,0.1-0.2c0.1,0,0.1,0,0.2,0h0.8 c0.1,0,0.1,0,0.2,0.1c0,0.1,0,0.1,0,0.2L10.2,4.1L10.2,4.1z M1.5,9.7h1.3h1.3c0.1,0,0.2,0.1,0.2,0.2c0,0.1,0,0.2-0.1,0.3l-2.5,0.6 H1.6c0,0-0.1,0-0.1,0c-0.1,0-0.1-0.1-0.1-0.2L1.2,9.9c0-0.1,0-0.1,0.1-0.2c0-0.1,0.1-0.1,0.2-0.1L1.5,9.7z M5.6,11.6 C5.6,11.6,5.6,11.6,5.6,11.6c0-0.1,0.1-0.2,0.3-0.1c0,0,0,0,0,0c0.1,0,0.2,0.1,0.2,0.2v2.6c0,0.1,0,0.1-0.1,0.2 c0,0-0.1,0.1-0.2,0.1L5,14.5c-0.1,0-0.1,0-0.2-0.1c0-0.1,0-0.1,0-0.2L5.6,11.6L5.6,11.6z"/></g></svg>',unlink:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M14.6,14.6c1.6-1.6,1.6-4.1,0-5.7l0,0l-3.1-3.1l-1.2,1.6l2.9,2.9c0.4,0.4,0.6,0.9,0.6,1.5c0,1.1-0.9,2.1-2.1,2.1l0,0 c-0.6,0-1.1-0.2-1.5-0.6l-0.4-0.4l-1.7,1l0.8,0.8C10.4,16.2,13,16.2,14.6,14.6L14.6,14.6L14.6,14.6z M3.6,6C3,5.9,2.6,5.5,2.3,5 S1.9,4,2.1,3.4C2.3,2.9,2.6,2.5,3,2.2C3.5,2,4.1,1.9,4.6,2l3.3,1.4l0.5-2L5.1,0.1C4-0.1,2.9,0,2,0.5C1.1,1.1,0.4,1.9,0.2,3 C-0.1,4,0,5.1,0.6,6C1.1,6.9,1.9,7.6,3,7.8l5.4,2l0.5-2L6.2,6.9L3.6,6z"/></g></svg>'},redo:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.59 14.18"><g><path d="M11.58,18.48a6.84,6.84,0,1,1,6.85-6.85s0,.26,0,.67a8,8,0,0,1-.22,1.44l.91-.55a.51.51,0,0,1,.36,0,.45.45,0,0,1,.29.22.47.47,0,0,1,.06.36.45.45,0,0,1-.22.29L17.42,15.3l-.12,0h-.25l-.12-.06-.09-.09-.06-.07,0-.06-.87-2.12a.43.43,0,0,1,0-.37.49.49,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26l.44,1.09a6.51,6.51,0,0,0,.24-1.36,4.58,4.58,0,0,0,0-.64,5.83,5.83,0,0,0-1.73-4.17,5.88,5.88,0,0,0-8.34,0,5.9,5.9,0,0,0,4.17,10.06.51.51,0,0,1,.33.15.48.48,0,0,1,0,.68.53.53,0,0,1-.33.12Z" transform="translate(-4.48 -4.54)"/></g></svg>',undo:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.59 14.18"><g><path d="M5,14a.43.43,0,0,1-.22-.29.46.46,0,0,1,.06-.36.43.43,0,0,1,.29-.22.56.56,0,0,1,.36,0l.91.55a8.27,8.27,0,0,1-.22-1.45,5.07,5.07,0,0,1,0-.67A6.85,6.85,0,1,1,13,18.47a.44.44,0,0,1-.33-.13.48.48,0,0,1,0-.68.51.51,0,0,1,.33-.15A5.89,5.89,0,0,0,17.15,7.45a5.88,5.88,0,0,0-8.33,0,5.84,5.84,0,0,0-1.73,4.17s0,.25,0,.65a6.49,6.49,0,0,0,.24,1.37l.44-1.09a.57.57,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26.43.43,0,0,1,0,.37L7.82,15l0,.09-.09.09-.1.07-.06,0H7.28l-.13,0-1.09-.63c-.65-.36-1-.57-1.1-.63Z" transform="translate(-4.49 -4.53)"/></g></svg>',bold:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.76 15.75"><g><path d="M6.4,3.76V19.5h6.76a5.55,5.55,0,0,0,2-.32,4.93,4.93,0,0,0,1.52-1,4.27,4.27,0,0,0,1.48-3.34,3.87,3.87,0,0,0-.69-2.37,5.74,5.74,0,0,0-.71-.83,3.44,3.44,0,0,0-1.1-.65,3.6,3.6,0,0,0,1.58-1.36,3.66,3.66,0,0,0,.53-1.93,3.7,3.7,0,0,0-1.21-2.87,4.65,4.65,0,0,0-3.25-1.1H6.4Zm2.46,6.65V5.57h3.52a4.91,4.91,0,0,1,1.36.15,2.3,2.3,0,0,1,.85.45,2.06,2.06,0,0,1,.74,1.71,2.3,2.3,0,0,1-.78,1.92,2.54,2.54,0,0,1-.86.46,4.7,4.7,0,0,1-1.32.15H8.86Zm0,7.27V12.15H12.7a4.56,4.56,0,0,1,1.38.17,3.43,3.43,0,0,1,.95.49,2.29,2.29,0,0,1,.92,2,2.73,2.73,0,0,1-.83,2.1,2.66,2.66,0,0,1-.83.58,3.25,3.25,0,0,1-1.26.2H8.86Z" transform="translate(-6.4 -3.75)"/></g></svg>',underline:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9.78 15.74"><g><path d="M14.64,3.76h2.52v7.72a4.51,4.51,0,0,1-.59,2.31,3.76,3.76,0,0,1-1.71,1.53,6.12,6.12,0,0,1-2.64.53,5,5,0,0,1-3.57-1.18,4.17,4.17,0,0,1-1.27-3.24V3.76H9.9v7.3a3,3,0,0,0,.55,2,2.3,2.3,0,0,0,1.83.65,2.26,2.26,0,0,0,1.8-.65,3.09,3.09,0,0,0,.55-2V3.76Zm2.52,13.31V19.5H7.39V17.08h9.77Z" transform="translate(-7.38 -3.76)"/></g></svg>',italic:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10.49 15.76"><g><path d="M17.16,3.79l.37,0-.06.38-.14.52A10,10,0,0,1,16.21,5a9.37,9.37,0,0,0-1,.32,6.68,6.68,0,0,0-.25.89c-.06.31-.11.59-.14.85-.3,1.36-.52,2.41-.68,3.14l-.61,3.18L13.1,15l-.43,2.4-.12.46a.62.62,0,0,0,0,.28c.44.1.85.17,1.23.22l.68.11a4.51,4.51,0,0,1-.08.6l-.09.42a.92.92,0,0,0-.23,0l-.43,0a1.37,1.37,0,0,1-.29,0c-.13,0-.63-.08-1.49-.16l-2,0c-.28,0-.87,0-1.78.12L7,19.5l.17-.88.8-.2A6.61,6.61,0,0,0,9.19,18,2.62,2.62,0,0,0,9.61,17l.28-1.41.58-2.75.12-.66c.05-.3.11-.58.17-.86s.12-.51.17-.69l.12-.48.12-.43.31-1.6.15-.65.31-1.91V5.14a3.86,3.86,0,0,0-1.48-.29l-.38,0,.2-1.06,3.24.14.75,0c.45,0,1.18,0,2.18-.09.23,0,.46,0,.71,0Z" transform="translate(-7.04 -3.76)"/></g></svg>',strike:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.9"><g><path d="M12.94,13a4.27,4.27,0,0,1,1.32.58,1.46,1.46,0,0,1,.55,1.2,1.87,1.87,0,0,1-.88,1.64,4.17,4.17,0,0,1-2.35.59,4.44,4.44,0,0,1-2.74-.71,2.72,2.72,0,0,1-1-2.17H5.57a4.56,4.56,0,0,0,1.55,3.7,7,7,0,0,0,4.47,1.23,6,6,0,0,0,4.07-1.3,4.24,4.24,0,0,0,1.52-3.37,4,4,0,0,0-.26-1.4h-4ZM6.37,10.24A3.27,3.27,0,0,1,6,8.68a4,4,0,0,1,1.48-3.3,5.92,5.92,0,0,1,3.88-1.21,5.58,5.58,0,0,1,3.91,1.24,4.36,4.36,0,0,1,1.45,3.17H14.44a2.12,2.12,0,0,0-.91-1.81,4.45,4.45,0,0,0-2.44-.55,3.69,3.69,0,0,0-2,.51A1.64,1.64,0,0,0,8.3,8.22a1.3,1.3,0,0,0,.48,1.11,7,7,0,0,0,2.1.78l.28.06.28.08H6.37Zm13.09.68a.73.73,0,0,1,.49.21.66.66,0,0,1,.2.48.64.64,0,0,1-.2.48.71.71,0,0,1-.49.19H5.1a.67.67,0,0,1-.49-.19.66.66,0,0,1-.2-.48.64.64,0,0,1,.2-.48.73.73,0,0,1,.49-.21H19.46Z" transform="translate(-4.41 -4.17)"/></g></svg>',subscript:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 14.61"><g><path d="M15.38,4.33H12.74L11.19,7c-.28.46-.51.87-.69,1.21L10.07,9h0l-.44-.8c-.22-.4-.45-.81-.71-1.23L7.34,4.33H4.68L8.26,10,4.4,16.08H7.1l1.69-2.83c.38-.63.72-1.22,1-1.78l.25-.46h0l.49.92c.24.45.48.89.74,1.32L13,16.08h2.61L11.84,10l1.77-2.84,1.77-2.85Zm4.77,13.75H17v-.15c0-.4.05-.64.16-.72a4.42,4.42,0,0,1,1.16-.31,3.3,3.3,0,0,0,1.54-.56A1.84,1.84,0,0,0,20.15,15a1.78,1.78,0,0,0-.44-1.41A2.8,2.8,0,0,0,18,13.25a2.71,2.71,0,0,0-1.69.37,1.83,1.83,0,0,0-.44,1.43v.23H17v-.23q0-.63.18-.78a1.62,1.62,0,0,1,.88-.15,1.59,1.59,0,0,1,.88.15q.18.15.18.75t-.18.75a3.58,3.58,0,0,1-1.18.33,3.33,3.33,0,0,0-1.52.51,1.57,1.57,0,0,0-.32,1.18v1.15h4.27v-.86Z" transform="translate(-4.4 -4.33)"/></g></svg>',superscript:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.42"><g><path d="M12,13.14l3.61-5.81H12.94L11.33,10c-.28.46-.51.88-.69,1.25l-.45.83h0l-.45-.85c-.22-.41-.45-.82-.71-1.24L7.4,7.33H4.68l3.66,5.81L4.4,19.33H7.14l1.74-2.87q.58-1,1-1.83l.25-.48h0l.51.94.75,1.37,1.72,2.87h2.67l-1.92-3.09c-1.12-1.8-1.76-2.83-1.92-3.1Zm4.84-4.41h0l0,.15h3.27v.86H15.77V8.58a1.66,1.66,0,0,1,.33-1.22,3.51,3.51,0,0,1,1.56-.51,3.68,3.68,0,0,0,1.21-.34c.13-.1.19-.36.19-.77S19,5.07,18.87,5A1.63,1.63,0,0,0,18,4.8a1.58,1.58,0,0,0-.91.17c-.13.11-.19.38-.19.8V6H15.78V5.76a1.87,1.87,0,0,1,.45-1.47A2.84,2.84,0,0,1,18,3.91a2.8,2.8,0,0,1,1.72.38,1.84,1.84,0,0,1,.45,1.44,1.91,1.91,0,0,1-.34,1.35,3.24,3.24,0,0,1-1.58.57A3.69,3.69,0,0,0,17,8c-.12.1-.17.35-.17.76Z" transform="translate(-4.4 -3.91)"/></g></svg>',erase:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.76"><g><path d="M13.69,17.2h6.46v1.31H8.56L4.41,14.37,14,4.75l6.06,6.06L16.89,14l-3.2,3.19Zm-4.61,0h2.77L14.09,15,9.88,10.75,6.25,14.38l1.41,1.41c.84.82,1.31,1.29,1.42,1.41Z" transform="translate(-4.41 -4.75)"/></g></svg>',indent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.36"><g><path d="M4.68,14.45a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V9.1a.27.27,0,0,1,.08-.19.28.28,0,0,1,.2-.08.25.25,0,0,1,.19.07l2.54,2.54a.29.29,0,0,1,0,.4L4.88,14.36a.24.24,0,0,1-.2.09Zm15.19,1.12a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87Zm0-3.38a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm0-3.37a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm.2-3.29a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z" transform="translate(-4.41 -5.44)"/></g></svg>',outdent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.36"><g><path d="M19.87,15.57a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87ZM7.5,14.45a.25.25,0,0,1-.2-.09L4.76,11.84a.29.29,0,0,1,0-.4L7.3,8.9a.29.29,0,0,1,.4,0,.31.31,0,0,1,.07.2v5.06a.32.32,0,0,1-.08.21.26.26,0,0,1-.19.08ZM19.87,8.82a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm0,3.37a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm.2-6.66a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z" transform="translate(-4.41 -5.44)"/></g></svg>',expansion:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M11.8,13.06l-5.1,5.1H9.51V19.5H4.41V14.4H5.75v2.81L8.3,14.66q2.25-2.23,2.55-2.55Zm8.35-9.3v5.1H18.81V6.05l-5.1,5.1-1-1,5.1-5.1H15.05V3.76Z" transform="translate(-4.41 -3.76)"/></g></svg>',reduction:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M14.91,10h2.87v1.38H12.55V6.12h1.38V9l5.24-5.24.48.49.49.48ZM6.77,11.92H12v5.23H10.62V14.26L5.37,19.5l-1-1L9.63,13.3H6.77Z" transform="translate(-4.4 -3.76)"/></g></svg>',code_view:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 11.8"><g><path d="M8.09,7.94a.76.76,0,0,1,.53.22.72.72,0,0,1,.21.52.76.76,0,0,1-.22.54L6.18,11.63l2.43,2.44a.69.69,0,0,1,.2.51.66.66,0,0,1-.21.51.75.75,0,0,1-.51.22.63.63,0,0,1-.51-.21h0L4.63,12.15a.7.7,0,0,1-.22-.53.67.67,0,0,1,.25-.55L7.57,8.16a.82.82,0,0,1,.52-.22Zm12.05,3.69a.7.7,0,0,1-.23.52L17,15.1h0a.66.66,0,0,1-.51.21.73.73,0,0,1-.51-.22.75.75,0,0,1-.22-.51.63.63,0,0,1,.21-.51l2.43-2.44L15.92,9.22a.73.73,0,0,1-.22-.53A.74.74,0,0,1,17,8.18h0l2.91,2.91a.67.67,0,0,1,.27.54Zm-5.9-5.9a.73.73,0,0,1,.61.32.71.71,0,0,1,.07.68L11,17a1,1,0,0,1-.22.32.6.6,0,0,1-.35.16.75.75,0,0,1-.69-.26.69.69,0,0,1-.12-.72L13.56,6.23a.75.75,0,0,1,.26-.35.74.74,0,0,1,.42-.15Z" transform="translate(-4.41 -5.73)"/></g></svg>',preview:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.65 15.66"><g><path d="M16.19,14.43l2.49,2.49a.73.73,0,0,1,.21.52.67.67,0,0,1-.22.51.7.7,0,0,1-.52.22.69.69,0,0,1-.51-.21l-2.49-2.48a5.17,5.17,0,0,1-1.34.69,4.64,4.64,0,0,1-1.48.24,4.78,4.78,0,1,1,0-9.56,4.79,4.79,0,0,1,1.84.36,4.9,4.9,0,0,1,1.56,1,4.77,4.77,0,0,1,.46,6.18ZM10,14a3.3,3.3,0,0,0,2.34.93A3.37,3.37,0,0,0,14.7,14a3.3,3.3,0,0,0-1.08-5.41,3.47,3.47,0,0,0-2.56,0A3,3,0,0,0,10,9.28,3.31,3.31,0,0,0,10,14ZM16,4a3.86,3.86,0,0,1,2.77,1.14A3.9,3.9,0,0,1,20,7.85v4a.77.77,0,0,1-.22.53.7.7,0,0,1-.52.21.72.72,0,0,1-.74-.74v-4a2.46,2.46,0,0,0-.72-1.73A2.37,2.37,0,0,0,16,5.45H8.53A2.42,2.42,0,0,0,6.08,7.89v7.52a2.41,2.41,0,0,0,.71,1.73,2.46,2.46,0,0,0,1.74.72h4.08a.73.73,0,0,1,0,1.46H8.53a3.85,3.85,0,0,1-2.78-1.14A3.93,3.93,0,0,1,4.6,15.4V7.87A3.94,3.94,0,0,1,5.76,5.09,3.88,3.88,0,0,1,8.54,4H16Z" transform="translate(-4.45 -3.8)"/></g></svg>',print:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16.05 16.04"><g><path d="M19.76,15.84a1.29,1.29,0,0,0,.39-.92V8.35A2.05,2.05,0,0,0,19.57,7a1.93,1.93,0,0,0-1.38-.57H6.37a1.95,1.95,0,0,0-2,2v6.56a1.23,1.23,0,0,0,.38.92,1.35,1.35,0,0,0,.93.38h2V14.9l-2,0V8.35a.67.67,0,0,1,.18-.47.62.62,0,0,1,.48-.19H18.18a.6.6,0,0,1,.46.19.66.66,0,0,1,.18.47V14.9h-2v1.32h2A1.35,1.35,0,0,0,19.76,15.84ZM17.52,7.69V5.06a1.31,1.31,0,0,0-.38-.92,1.34,1.34,0,0,0-.94-.38H8.34A1.3,1.3,0,0,0,7,5.06V7.69H8.34V5.06h7.87V7.69h1.31ZM8.34,12.93h7.87l0,5.26H8.34V12.93Zm7.87,5.26v0Zm.65,1.31a.6.6,0,0,0,.46-.19.72.72,0,0,0,.2-.47V12.29a.74.74,0,0,0-.2-.47.6.6,0,0,0-.46-.19H7.68a.6.6,0,0,0-.46.19.72.72,0,0,0-.2.47v6.55a.74.74,0,0,0,.2.47.6.6,0,0,0,.46.19h9.18ZM16.67,9.28a.7.7,0,0,0-.94,0,.63.63,0,0,0-.18.46.67.67,0,0,0,.18.47.68.68,0,0,0,.94,0,.66.66,0,0,0,.18-.47A.58.58,0,0,0,16.67,9.28Z" transform="translate(-4.25 -3.61)"/></g></svg>',template:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.27 15.64"><g><path d="M18.18,19.16a1,1,0,0,0,1-1V5.73a1,1,0,0,0-1-1h-2v1h2V18.19H6.37V5.73h2v-1h-2A.94.94,0,0,0,5.68,5a1,1,0,0,0-.29.7V18.18a.94.94,0,0,0,.29.69,1,1,0,0,0,.69.29H18.18ZM9.82,10.31h4.92a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H9.82a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15Zm5.9,4.92H8.83a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h6.89a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.51.51,0,0,0-.5-.5ZM7.36,12.77a.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h8.85a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H7.85a.49.49,0,0,0-.35.15.52.52,0,0,0-.14.35Z" transform="translate(-5.14 -3.77)"/><path d="M14.24,6.71a1,1,0,0,0,1-1,1,1,0,0,0-1-1,1,1,0,0,0-1-1h-2a.94.94,0,0,0-.69.28,1,1,0,0,0-.29.7A.94.94,0,0,0,9.62,5a.91.91,0,0,0-.29.69,1,1,0,0,0,.29.7,1,1,0,0,0,.69.29h3.93Z" transform="translate(-5.14 -3.77)"/></g></svg>',line_height:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 13.56"><g><path d="M4.4,4.88V8.26a2,2,0,0,0,.5.39s.1,0,.18-.12a.62.62,0,0,0,.17-.28c.06-.19.13-.44.21-.74s.14-.52.19-.66a.58.58,0,0,1,.21-.3,2.41,2.41,0,0,1,.63-.21,3.83,3.83,0,0,1,.88-.12,9.15,9.15,0,0,1,1.31.06.16.16,0,0,1,.11,0,.26.26,0,0,1,.06.14,4,4,0,0,1,0,.49v2l.05,3.77c0,1.41,0,2.68-.05,3.81a1.79,1.79,0,0,1-.11.49,10.68,10.68,0,0,1-1.4.45,1.12,1.12,0,0,0-.69.43v.31l0,.22.61,0c.85-.08,1.54-.12,2.06-.12a19.76,19.76,0,0,1,2.09.08,15.08,15.08,0,0,0,1.64.08,1.4,1.4,0,0,0,.29,0,1.58,1.58,0,0,0,0-.26l-.05-.43a2.26,2.26,0,0,0-.43-.17l-.77-.22-.15,0a2.55,2.55,0,0,1-.78-.28,2.56,2.56,0,0,1-.11-.75l0-1.29,0-3.15V7.53a10.51,10.51,0,0,1,.06-1.2,3.83,3.83,0,0,1,.6,0l1.88,0a2.18,2.18,0,0,1,.38,0,.45.45,0,0,1,.23.17.9.9,0,0,1,.05.25c0,.16.06.35.1.58a3.33,3.33,0,0,0,.14.55A6.39,6.39,0,0,0,15,9a2.91,2.91,0,0,0,.6-.15,2.77,2.77,0,0,0,0-.46l0-.51,0-2.95-.25,0-.38,0L15,4.94a.71.71,0,0,1-.18.15.45.45,0,0,1-.25.07l-.29,0H8.75l-.15,0H7.45a17,17,0,0,1-1.86,0L5.36,5l-.25-.13ZM19.75,16.14h-.69v-9h.69A.4.4,0,0,0,20.13,7c.06-.11,0-.24-.1-.39L18.92,5.15a.52.52,0,0,0-.86,0L17,6.58c-.12.15-.16.28-.1.39s.18.16.38.16h.69v9h-.69a.4.4,0,0,0-.38.16c-.06.11,0,.24.1.39l1.11,1.43a.52.52,0,0,0,.86,0L20,16.69c.12-.15.16-.28.1-.39a.4.4,0,0,0-.38-.16Z" transform="translate(-4.4 -4.86)"/></g></svg>',paragraph_style:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.81 15.74"><g><path d="M18.18,3.76v2h-2V19.5h-2V5.73h-2V19.5h-2V11.63a3.94,3.94,0,0,1,0-7.87h7.87Z" transform="translate(-6.37 -3.76)"/></g></svg>',text_style:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.76 15.74"><g><path d="M17.68,6.71a2.22,2.22,0,0,0,1.06-.22.74.74,0,0,0,.42-.7.73.73,0,0,0-.08-.33.67.67,0,0,0-.17-.22,1,1,0,0,0-.31-.15L18.26,5l-.45-.09A15.27,15.27,0,0,0,13.26,5V4.74c0-.66-.63-1-1.92-1-.24,0-.43.15-.59.46a4,4,0,0,0-.36,1.14h0v0a26.45,26.45,0,0,1-3.5.35A2,2,0,0,0,5.77,6a.84.84,0,0,0-.37.79,2.14,2.14,0,0,0,.41,1.29,1.23,1.23,0,0,0,1.05.63,16.62,16.62,0,0,0,3.29-.45l-.34,3.35c-.16,1.61-.29,2.9-.37,3.86s-.12,1.66-.12,2.09l0,.65a5.15,5.15,0,0,0,.05.6,1.28,1.28,0,0,0,.16.54.34.34,0,0,0,.28.18,1.16,1.16,0,0,0,.79-.46,3.66,3.66,0,0,0,.68-1,22.08,22.08,0,0,0,1-4.33q.49-3.1.78-6.15a24.69,24.69,0,0,1,4.62-.84Z" transform="translate(-5.4 -3.76)"/></g></svg>',save:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M18.53,19.5l.2-.05A1.78,1.78,0,0,0,20.13,18l0-.09V7.14a2,2,0,0,0-.28-.64A3.18,3.18,0,0,0,19.43,6c-.5-.52-1-1-1.55-1.54A2.59,2.59,0,0,0,17.37,4a1.83,1.83,0,0,0-.61-.25H6l-.21,0a1.78,1.78,0,0,0-1.4,1.49l0,.1V17.87a2.49,2.49,0,0,0,.09.37,1.79,1.79,0,0,0,1.44,1.23l.09,0Zm-6.25-.6H6.92a.61.61,0,0,1-.68-.48.78.78,0,0,1,0-.22V12.3a.62.62,0,0,1,.69-.68H17.64a.62.62,0,0,1,.69.69V18.2a.64.64,0,0,1-.71.69H12.28ZM12,9.81H8.15a.63.63,0,0,1-.72-.71v-4a.64.64,0,0,1,.72-.72h7.66a.64.64,0,0,1,.72.72v4a.65.65,0,0,1-.74.72ZM13.5,5V9.18h1.78V5Z" transform="translate(-4.41 -3.76)"/></g></svg>',blockquote:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 475.082 475.081"><g><path d="M164.45,219.27h-63.954c-7.614,0-14.087-2.664-19.417-7.994c-5.327-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.416-51.678c14.276-14.272,31.503-21.411,51.678-21.411h18.271c4.948,0,9.229-1.809,12.847-5.424c3.616-3.617,5.424-7.898,5.424-12.847V54.819c0-4.948-1.809-9.233-5.424-12.85c-3.617-3.612-7.898-5.424-12.847-5.424h-18.271c-19.797,0-38.684,3.858-56.673,11.563c-17.987,7.71-33.545,18.132-46.68,31.267c-13.134,13.129-23.553,28.688-31.262,46.677C3.855,144.039,0,162.931,0,182.726v200.991c0,15.235,5.327,28.171,15.986,38.834c10.66,10.657,23.606,15.985,38.832,15.985h109.639c15.225,0,28.167-5.328,38.828-15.985c10.657-10.663,15.987-23.599,15.987-38.834V274.088c0-15.232-5.33-28.168-15.994-38.832C192.622,224.6,179.675,219.27,164.45,219.27z"/><path d="M459.103,235.256c-10.656-10.656-23.599-15.986-38.828-15.986h-63.953c-7.61,0-14.089-2.664-19.41-7.994c-5.332-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.409-51.678c14.271-14.272,31.497-21.411,51.682-21.411h18.267c4.949,0,9.233-1.809,12.848-5.424c3.613-3.617,5.428-7.898,5.428-12.847V54.819c0-4.948-1.814-9.233-5.428-12.85c-3.614-3.612-7.898-5.424-12.848-5.424h-18.267c-19.808,0-38.691,3.858-56.685,11.563c-17.984,7.71-33.537,18.132-46.672,31.267c-13.135,13.129-23.559,28.688-31.265,46.677c-7.707,17.987-11.567,36.879-11.567,56.674v200.991c0,15.235,5.332,28.171,15.988,38.834c10.657,10.657,23.6,15.985,38.828,15.985h109.633c15.229,0,28.171-5.328,38.827-15.985c10.664-10.663,15.985-23.599,15.985-38.834V274.088C475.082,258.855,469.76,245.92,459.103,235.256z"/></g></svg>',arrow_down:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 8.67"><g><path d="M18.79,7.52a.8.8,0,0,1,.56-.23.82.82,0,0,1,.79.79.8.8,0,0,1-.23.56l-7.07,7.07a.79.79,0,0,1-.57.25.77.77,0,0,1-.57-.25h0L4.64,8.65a.8.8,0,0,1-.23-.57.82.82,0,0,1,.79-.79.8.8,0,0,1,.56.23L12.28,14l3.26-3.26,3.25-3.26Z" transform="translate(-4.41 -7.29)"/></g></svg>',align_justify:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm0,5.9H20.15v-2H4.41v2Zm0,3.94H20.15v-2H4.41v2Zm0,3.93h7.87v-2H4.41v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm11.8,3.94H4.41v2H16.22v-2Zm-11.8,5.9H18.18v-2H4.41v2Zm0,3.93h9.84v-2H4.41v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm3.93,5.9H20.15v-2H8.34v2Zm-2,3.94H20.14v-2H6.37v2Zm3.94,3.93h9.84v-2H10.31v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_center:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm2,3.94v2H18.18v-2H6.37Zm-1,5.9H19.16v-2H5.39v2Zm2,3.93H17.2v-2H7.36v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',font_color:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.61"><g><path d="M18.5,15.57,14.28,4.32h-3.4L6.65,15.57h3l.8-2.26h4.23l.8,2.26h3ZM14,11.07H11.14L12.54,7,13.25,9c.41,1.18.64,1.86.7,2ZM4.41,16.69v2.24H20.15V16.69H4.41Z" transform="translate(-4.41 -4.32)"/></g></svg>',highlight_color:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.66 15.74"><g><path d="M12.32,9.31,13.38,13H11.21l.52-1.83q.46-1.61.54-1.83ZM4.44,3.76H20.1V19.5H4.44V3.76ZM14.71,17.32h2.63L13.7,6H10.89L7.26,17.32H9.89l.63-2.24h3.55l.32,1.12c.18.65.29,1,.32,1.12Z" transform="translate(-4.44 -3.76)"/></g></svg>',list_bullets:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.37"><g><path d="M7.77,16.12a1.59,1.59,0,0,0-.49-1.18,1.62,1.62,0,0,0-1.19-.49,1.68,1.68,0,1,0,0,3.36,1.67,1.67,0,0,0,1.68-1.69Zm0-4.48A1.67,1.67,0,0,0,6.09,10,1.68,1.68,0,0,0,4.9,12.82a1.62,1.62,0,0,0,1.19.49,1.67,1.67,0,0,0,1.68-1.67Zm12.38,3.64a.27.27,0,0,0-.08-.19.28.28,0,0,0-.2-.09H9.19a.28.28,0,0,0-.2.08.29.29,0,0,0-.08.19V17a.27.27,0,0,0,.28.28H19.87a.27.27,0,0,0,.19-.08.24.24,0,0,0,.08-.2V15.28ZM7.77,7.13a1.63,1.63,0,0,0-.49-1.2,1.61,1.61,0,0,0-1.19-.49,1.61,1.61,0,0,0-1.19.49,1.71,1.71,0,0,0,0,2.4,1.62,1.62,0,0,0,1.19.49,1.61,1.61,0,0,0,1.19-.49,1.63,1.63,0,0,0,.49-1.2Zm12.38,3.66a.28.28,0,0,0-.08-.2.29.29,0,0,0-.19-.08H9.19a.27.27,0,0,0-.28.28v1.69a.27.27,0,0,0,.08.19.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08.25.25,0,0,0,.08-.19V10.79Zm0-4.5a.27.27,0,0,0-.08-.19A.25.25,0,0,0,19.88,6H9.19A.28.28,0,0,0,9,6.1a.26.26,0,0,0-.08.19V8A.27.27,0,0,0,9,8.17a.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08A.25.25,0,0,0,20.14,8V6.29Z" transform="translate(-4.41 -5.44)"/></g></svg>',list_number:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.69 15.74"><g><path d="M7.66,18a1.24,1.24,0,0,0-.26-.78,1.17,1.17,0,0,0-.72-.42l.85-1V15H4.58v1.34h.94v-.46l.85,0h0c-.11.11-.22.23-.32.35s-.23.27-.37.47L5.39,17l.23.51c.61-.05.92.11.92.49a.42.42,0,0,1-.18.37.79.79,0,0,1-.45.12A1.41,1.41,0,0,1,5,18.15l-.51.77A2.06,2.06,0,0,0,6,19.5a1.8,1.8,0,0,0,1.2-.41A1.38,1.38,0,0,0,7.66,18Zm0-5.54H6.75V13H5.63A.72.72,0,0,1,6,12.51a5.45,5.45,0,0,1,.66-.45,2.71,2.71,0,0,0,.67-.57,1.19,1.19,0,0,0,.31-.81,1.29,1.29,0,0,0-.45-1,1.86,1.86,0,0,0-2-.11,1.51,1.51,0,0,0-.62.7l.74.52A.87.87,0,0,1,6,10.28a.51.51,0,0,1,.35.12.42.42,0,0,1,.13.33.55.55,0,0,1-.21.4,3,3,0,0,1-.5.38c-.19.13-.39.27-.58.42a2,2,0,0,0-.5.6,1.63,1.63,0,0,0-.21.81,3.89,3.89,0,0,0,.05.48h3.2V12.44Zm12.45,2.82a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2V17a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V15.26ZM7.69,7.32h-1V3.76H5.8L4.6,4.88l.63.68a1.85,1.85,0,0,0,.43-.48h0l0,2.24H4.74V8.2h3V7.32Zm12.43,3.42a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2v1.71a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V10.74Zm0-4.52A.27.27,0,0,0,20,6,.28.28,0,0,0,19.83,6H9.1A.32.32,0,0,0,8.89,6a.24.24,0,0,0-.08.19V7.93a.27.27,0,0,0,.08.19.32.32,0,0,0,.21.08H19.83A.32.32,0,0,0,20,8.12a.26.26,0,0,0,.08-.2V6.22Z" transform="translate(-4.43 -3.76)"/></g></svg>',table:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M4.41,8.05V3.76H8.7V8.05H4.41Zm5.71,0V3.76h4.3V8.05h-4.3Zm5.74-4.29h4.29V8.05H15.86V3.76Zm-11.45,10V9.48H8.7v4.3H4.41Zm5.71,0V9.48h4.3v4.3h-4.3Zm5.74,0V9.48h4.29v4.3H15.86ZM4.41,19.5V15.21H8.7V19.5H4.41Zm5.71,0V15.21h4.3V19.5h-4.3Zm5.74,0V15.21h4.29V19.5H15.86Z" transform="translate(-4.41 -3.76)"/></g></svg>',horizontal_rule:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 2.24"><g><path d="M20.15,12.75V10.51H4.41v2.24H20.15Z" transform="translate(-4.41 -10.51)"/></g></svg>',show_blocks:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.66 15.67"><g><path d="M19.72,5.58a1.64,1.64,0,0,0-1.64-1.64H6.23a1.62,1.62,0,0,0-1.16.48,1.63,1.63,0,0,0-.48,1.16V9.63a1.6,1.6,0,0,0,.48,1.16,1.62,1.62,0,0,0,1.16.47H18.09a1.67,1.67,0,0,0,1.16-.47,1.62,1.62,0,0,0,.48-1.16V5.58Zm-.94,4.05a.68.68,0,0,1-.7.7H6.23a.66.66,0,0,1-.48-.2.74.74,0,0,1-.21-.5V5.58a.66.66,0,0,1,.2-.48.71.71,0,0,1,.48-.21H18.08a.74.74,0,0,1,.5.21.66.66,0,0,1,.2.48ZM6.48,7.72a.21.21,0,0,0,.17-.07.22.22,0,0,0,.07-.17V7.06a1.27,1.27,0,0,1,.11-.52.37.37,0,0,1,.36-.23H8.77A.25.25,0,0,0,9,6.17a.19.19,0,0,0,0-.23.27.27,0,0,0-.2-.12H7.19a.88.88,0,0,0-.72.39,1.51,1.51,0,0,0-.23.85v.42a.24.24,0,0,0,.24.24Zm-.19.81a.21.21,0,0,0,.17-.07.26.26,0,0,0,.07-.17.24.24,0,0,0-.24-.24.2.2,0,0,0-.16.09.2.2,0,0,0-.07.16.22.22,0,0,0,.07.17.23.23,0,0,0,.16.06Zm8.46,5.1a1.63,1.63,0,0,0-.47-1.16A1.61,1.61,0,0,0,13.12,12H6.23a1.6,1.6,0,0,0-1.16.46,1.62,1.62,0,0,0-.48,1.16v4.05a1.64,1.64,0,0,0,1.64,1.64h6.89a1.6,1.6,0,0,0,1.16-.48,1.62,1.62,0,0,0,.47-1.16Zm-.94,4a.7.7,0,0,1-.2.49.65.65,0,0,1-.5.2H6.23a.66.66,0,0,1-.48-.2.75.75,0,0,1-.21-.49v-4a.74.74,0,0,1,.21-.5.66.66,0,0,1,.48-.2h6.89a.68.68,0,0,1,.7.7v4Zm6.15,0v-4a1.6,1.6,0,0,0-.48-1.16A1.67,1.67,0,0,0,18.32,12H17.1a1.63,1.63,0,0,0-1.16.47,1.61,1.61,0,0,0-.47,1.16v4a1.67,1.67,0,0,0,.47,1.16,1.62,1.62,0,0,0,1.16.48h1.22A1.64,1.64,0,0,0,20,17.68Zm-.94-4v4a.75.75,0,0,1-.21.49.62.62,0,0,1-.48.2H17.11a.69.69,0,0,1-.5-.2.7.7,0,0,1-.2-.49v-4a.68.68,0,0,1,.7-.7h1.22a.66.66,0,0,1,.48.2.72.72,0,0,1,.21.5Z" transform="translate(-4.44 -3.79)"/></g></svg>',cancel:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M14.15,11.63l5.61,5.61a1.29,1.29,0,0,1,.38.93,1.27,1.27,0,0,1-.4.93,1.25,1.25,0,0,1-.92.4,1.31,1.31,0,0,1-.94-.4l-5.61-5.61L6.67,19.1a1.31,1.31,0,0,1-.94.4,1.24,1.24,0,0,1-.92-.4,1.27,1.27,0,0,1-.4-.93,1.33,1.33,0,0,1,.38-.93l5.61-5.63L4.79,6a1.26,1.26,0,0,1-.38-.93,1.22,1.22,0,0,1,.4-.92,1.28,1.28,0,0,1,.92-.39,1.38,1.38,0,0,1,.94.38l5.61,5.61,5.61-5.61a1.33,1.33,0,0,1,.94-.38,1.26,1.26,0,0,1,.92.39,1.24,1.24,0,0,1,.4.92,1.29,1.29,0,0,1-.39.93L17,8.81l-2.8,2.82Z" transform="translate(-4.41 -3.76)"/></g></svg>',image:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.77"><g><path d="M8.77,8.72a.88.88,0,0,1-.61-.27.82.82,0,0,1-.25-.61.89.89,0,0,1,.25-.62A.82.82,0,0,1,8.77,7a.81.81,0,0,1,.61.25.83.83,0,0,1,.27.62.81.81,0,0,1-.25.61.91.91,0,0,1-.63.27Zm9.62-5a1.74,1.74,0,0,1,1.76,1.76V17.76a1.74,1.74,0,0,1-1.76,1.76H6.16A1.74,1.74,0,0,1,4.4,17.76V5.51A1.74,1.74,0,0,1,6.16,3.75H18.39Zm0,1.75H6.16v8L8.53,11.8a.94.94,0,0,1,.54-.17.86.86,0,0,1,.54.2L11.09,13l3.64-4.55a.78.78,0,0,1,.34-.25.85.85,0,0,1,.42-.07.89.89,0,0,1,.39.12.78.78,0,0,1,.28.29l2.24,3.67V5.51Zm0,12.24V15.6L15.3,10.53,11.89,14.8a.89.89,0,0,1-.59.32.82.82,0,0,1-.64-.18L9,13.62,6.16,15.74v2Z" transform="translate(-4.4 -3.75)"/></g></svg>',video:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.55"><g><path d="M20.15,10.26V18.9l-3.94-1.57v1.2H4.41V10.66H16.22v1.23l2-.81,2-.82ZM14.64,17h0V12.54h0v-.31H6V17h8.67Zm3.94-.37v-4l-2.37,1v2l1.18.48,1.19.48ZM7.94,9.86A2.77,2.77,0,0,1,5.19,7.11a2.76,2.76,0,0,1,5.51,0A2.78,2.78,0,0,1,7.94,9.86Zm0-3.93a1.21,1.21,0,0,0-.83.35,1.15,1.15,0,0,0-.34.84A1.09,1.09,0,0,0,7.11,8,1.15,1.15,0,0,0,8,8.28,1.13,1.13,0,0,0,9.11,7.12,1.16,1.16,0,0,0,7.94,5.93Zm5.9,3.93a2.34,2.34,0,0,1-1.67-.68,2.3,2.3,0,0,1-.68-1.67,2.35,2.35,0,0,1,4-1.67,2.37,2.37,0,0,1,0,3.34,2.33,2.33,0,0,1-1.68.68Zm0-3.14a.75.75,0,1,0,.55.22.73.73,0,0,0-.55-.22Z" transform="translate(-4.41 -4.35)"/></g></svg>',link:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.72"><g><path d="M13.05,13.63a.24.24,0,0,1,.15.22L13.42,16a.19.19,0,0,1-.08.18l-2.12,2.14a4.08,4.08,0,0,1-1.29.85A4,4,0,0,1,4.71,17a3.92,3.92,0,0,1-.3-1.52A4,4,0,0,1,4.71,14a3.91,3.91,0,0,1,.87-1.3L7.7,10.56a.25.25,0,0,1,.2-.06l2.17.22a.21.21,0,0,1,.19.15.24.24,0,0,1,0,.25L7.12,14.23a1.81,1.81,0,0,0,0,2.58,1.78,1.78,0,0,0,1.29.52,1.74,1.74,0,0,0,1.28-.52L12.8,13.7a.24.24,0,0,1,.25-.07ZM19,4.92a4,4,0,0,1,0,5.66L16.86,12.7a.25.25,0,0,1-.17.08l-2.2-.23a.21.21,0,0,1-.19-.15.22.22,0,0,1,0-.25L17.44,9a1.81,1.81,0,0,0,0-2.58,1.78,1.78,0,0,0-1.29-.52,1.74,1.74,0,0,0-1.28.52L11.76,9.57a.21.21,0,0,1-.25,0,.24.24,0,0,1-.16-.21l-.22-2.17a.19.19,0,0,1,.08-.18l2.12-2.14a4.08,4.08,0,0,1,1.29-.85,4.05,4.05,0,0,1,3.06,0,3.85,3.85,0,0,1,1.3.85ZM5.84,9.82a.25.25,0,0,1-.18-.08.19.19,0,0,1-.07-.19l.11-.77a.2.2,0,0,1,.11-.17.24.24,0,0,1,.2,0l2.5.72a.25.25,0,0,1,.15.27.22.22,0,0,1-.23.21l-2.59,0Zm4.12-2-.73-2.5a.27.27,0,0,1,0-.2A.21.21,0,0,1,9.41,5L10.19,5a.25.25,0,0,1,.19,0,.23.23,0,0,1,.08.18l-.05,2.61a.2.2,0,0,1-.19.23h0A.22.22,0,0,1,10,7.85Zm8.76,5.58a.25.25,0,0,1,.18.08.23.23,0,0,1,.06.2l-.11.77a.25.25,0,0,1-.11.17.21.21,0,0,1-.12,0l-.08,0L16,14a.25.25,0,0,1-.15-.27.22.22,0,0,1,.22-.21l1.29,0,1.33,0Zm-4.12,2,.74,2.51a.28.28,0,0,1,0,.2.23.23,0,0,1-.18.11l-.8.11a.23.23,0,0,1-.17-.07.25.25,0,0,1-.08-.18l0-2.61a.22.22,0,0,1,.22-.22.21.21,0,0,1,.26.15Z" transform="translate(-4.41 -3.77)"/></g></svg>',math:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.81 15.73"><g><path d="M17.19,5.73a1,1,0,0,0,.71-.29,1,1,0,0,0,.28-.7,1,1,0,0,0-1-1H7.35a1,1,0,0,0-1,1,.77.77,0,0,0,.13.47h0l4.58,6.43L6.68,17.81a1.25,1.25,0,0,0-.29.71.94.94,0,0,0,.28.7.92.92,0,0,0,.69.28H17.2a1,1,0,0,0,.71-.28,1,1,0,0,0,0-1.39.92.92,0,0,0-.71-.29H9.26l3.87-5.43a.86.86,0,0,0,0-.95L9.26,5.73h7.93Z" transform="translate(-6.38 -3.77)"/></g></svg>',unlink:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.72"><g><path d="M19,18.32a4,4,0,0,0,0-5.68L15.85,9.5l-1.17,1.55L17.57,14a2,2,0,0,1,.61,1.47,2.08,2.08,0,0,1-2.09,2.09,2,2,0,0,1-1.47-.61l-.38-.37-1.74,1,.8.78a4,4,0,0,0,5.68,0ZM8,9.77a2,2,0,0,1-1.27-1,1.89,1.89,0,0,1-.21-1.57A2.1,2.1,0,0,1,7.45,6,2,2,0,0,1,9,5.76L12.27,7.2l.49-2L9.48,3.9a4,4,0,0,0-3.06.41A3.82,3.82,0,0,0,4.56,6.73a3.8,3.8,0,0,0,.4,3A3.78,3.78,0,0,0,7.39,11.6l5.38,2,.49-2-2.64-.94L8,9.77Z" transform="translate(-4.41 -3.76)"/></g></svg>',table_header:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.74"><g><path d="M17,19.5v-.78H15.5v.78H17Zm-3,0v-.78H12.5v.78H14Zm-3,0v-.78H9.53v.78H11Zm-3,0v-.78H6.53v.78H8Zm10.55,0a1.73,1.73,0,0,0,.85-.35,1.67,1.67,0,0,0,.56-.76l-.71-.31a1.21,1.21,0,0,1-.35.4,1.34,1.34,0,0,1-.53.23l.08.38c.06.24.09.38.1.41Zm-13.7-.63.55-.55A.77.77,0,0,1,5.25,18a1.31,1.31,0,0,1-.06-.38v-.38H4.41v.38a2,2,0,0,0,.12.68,1.6,1.6,0,0,0,.35.57Zm15.27-2.12V15.26h-.78v1.49h.78Zm-15-1V14.23H4.41v1.49h.78Zm15-2V12.26h-.78v1.49h.78Zm-15-1V11.22H4.41v1.51h.78Zm15-2V9.26h-.78v1.51h.78Zm-15-1V8.17H4.41V9.74h.78Zm15-2V6.28h-.78V7.77h.78Zm-15-1.11V5.33L4.48,5.1a.77.77,0,0,0-.07.27,2.72,2.72,0,0,0,0,.28v1h.79ZM19.21,5l.63-.4A1.62,1.62,0,0,0,19.16,4a1.94,1.94,0,0,0-.91-.22v.78a1.31,1.31,0,0,1,.56.12.88.88,0,0,1,.4.36ZM6,4.54H7.78V3.76H6a.82.82,0,0,0-.28.06l.12.35c.07.21.1.33.11.36Zm10.8,0V3.76H15.28v.78h1.49Zm-3,0V3.76H12.28v.78h1.49Zm-3,0V3.76H9.28v.78h1.51ZM6,10.84h12.6V6.91H6Z" transform="translate(-4.4 -3.76)"/></g></svg>',merge_cell:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 15.74"><g><path d="M18.92,13.5h1.23v4.15A1.84,1.84,0,0,1,18.3,19.5H14V18.27H18.3a.6.6,0,0,0,.44-.18.59.59,0,0,0,.18-.44V13.5ZM18.3,3.76a1.84,1.84,0,0,1,1.85,1.85V9.82H18.92V5.6a.6.6,0,0,0-.18-.44A.59.59,0,0,0,18.3,5H14V3.76H18.3Zm1.85,8.51H15.6L17.26,14l-.86.86-3.14-3.17L16.4,8.51l.86.86L15.62,11h4.54v1.24Zm-13.9,6h4.27V19.5H6.25A1.84,1.84,0,0,1,4.4,17.65V13.5H5.63v4.15a.61.61,0,0,0,.62.62Zm0-14.51h4.27V5H6.25a.6.6,0,0,0-.44.18.57.57,0,0,0-.17.43V9.81H4.41V5.6A1.83,1.83,0,0,1,6.25,3.76Zm5,7.9L8.15,14.83,7.3,14,9,12.27H4.41V11H8.94L7.3,9.38,7.73,9l.43-.43Z" transform="translate(-4.4 -3.76)"/></g></svg>',split_cell:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.74"><g><path d="M10.37,12.25H6.74L8.4,13.94l-.87.86L4.41,11.63,7.53,8.5l.87.86L6.74,11h3.62v1.23Zm9.78-.61L17,14.81,16.13,14l1.66-1.69H14.16V11h3.63L16.13,9.37l.43-.43A5.24,5.24,0,0,1,17,8.51ZM18.9,8.22V5.61a.57.57,0,0,0-.18-.43A.65.65,0,0,0,18.29,5H12.88V18.28h5.41a.7.7,0,0,0,.44-.18.57.57,0,0,0,.18-.43V15h1.23v2.64a1.84,1.84,0,0,1-1.85,1.83h-12A1.84,1.84,0,0,1,4.94,19a1.81,1.81,0,0,1-.54-1.29V15H5.63v2.64a.57.57,0,0,0,.18.43.67.67,0,0,0,.44.18h5.41V5H6.25a.7.7,0,0,0-.44.18.56.56,0,0,0-.17.43V8.22H4.41V5.61A1.8,1.8,0,0,1,5,4.31a1.91,1.91,0,0,1,1.31-.55h12a1.89,1.89,0,0,1,1.31.55,1.8,1.8,0,0,1,.54,1.3V8.23H18.9Z" transform="translate(-4.4 -3.76)"/></g></svg>',caption:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.79"><g><path d="M4.41,18.52H20.15v-2H4.41ZM20,4.73H18.07V6h.65v.65H20V4.73ZM17,6V4.73H14.55V6H17ZM13.49,6V4.73H11V6h2.47ZM10,6V4.73H7.5V6H10ZM5.79,6h.65V4.73H4.5V6.67H5.8V6ZM4.5,11.34H5.79V8.48H4.5ZM6.44,13.8H5.79v-.65H4.5v1.94H6.44ZM17,15.09V13.8H14.55v1.29H17Zm-3.52,0V13.8H11v1.29h2.47Zm-3.53,0V13.8H7.5v1.29H10ZM20,13.16H18.72v.65h-.65V15.1H20Zm-1.29-1.82H20V8.48h-1.3v2.86Z" transform="translate(-4.41 -4.73)"/></g></svg>',edit:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.73"><g><path d="M7.51,5.68h6l1.52-1.57H6.94a2.4,2.4,0,0,0-1.79.82A2.8,2.8,0,0,0,4.41,6.8V17a2.55,2.55,0,0,0,.75,1.8A2.48,2.48,0,0,0,7,19.5H17.22a2.57,2.57,0,0,0,1.83-.74,2.52,2.52,0,0,0,.77-1.8V8.83l-1.58,1.54v6a1.54,1.54,0,0,1-1.53,1.53H7.51A1.54,1.54,0,0,1,6,16.41V7.21A1.52,1.52,0,0,1,7.51,5.68Zm5.63,7.47h0L10.7,10.74l-1,3.38,1.71-.48,1.7-.49Zm.34-.34h0l5.36-5.32L16.4,5.08,11,10.4l1.23,1.21,1.21,1.2ZM19.93,6.4a.82.82,0,0,0,.22-.48A.54.54,0,0,0,20,5.47L18.45,4A.67.67,0,0,0,18,3.77a.7.7,0,0,0-.48.21l-.74.72,2.44,2.43.37-.37.35-.36Z" transform="translate(-4.41 -3.77)"/></g></svg>',delete:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 15.74"><g><path d="M19.16,6.71a.94.94,0,0,0,.69-.28.91.91,0,0,0,.29-.68A1,1,0,0,0,19.85,5a.93.93,0,0,0-.69-.3H14.24A.94.94,0,0,0,14,4.06a.92.92,0,0,0-.7-.3h-2a1,1,0,0,0-.7.3.93.93,0,0,0-.28.68H5.39A.92.92,0,0,0,4.7,5a1,1,0,0,0-.29.71.91.91,0,0,0,.29.68,1,1,0,0,0,.69.28H19.16Zm-12.79,1a1,1,0,0,0-.7.3.94.94,0,0,0-.28.69v8.85A1.88,1.88,0,0,0,6,18.93a1.9,1.9,0,0,0,1.39.57H17.2a1.87,1.87,0,0,0,1.39-.58,1.91,1.91,0,0,0,.58-1.39V8.68A1,1,0,0,0,18.88,8a.89.89,0,0,0-.7-.29,1,1,0,0,0-.69.29.92.92,0,0,0-.29.68v7.87a1,1,0,0,1-1,1H8.34a.94.94,0,0,1-.69-.28,1,1,0,0,1-.29-.71V8.68a1,1,0,0,0-1-1Z" transform="translate(-4.41 -3.76)"/></g></svg>',modify:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.74"><g><path d="M19.79,15.23a.66.66,0,0,1,.3.38.59.59,0,0,1-.07.48l-.8,1.38a.66.66,0,0,1-.38.3.59.59,0,0,1-.48-.07l-.68-.38a4.55,4.55,0,0,1-1.34.77v.78a.64.64,0,0,1-.18.45.61.61,0,0,1-.45.18h-1.6a.6.6,0,0,1-.44-.18.66.66,0,0,1-.19-.45v-.78a4.36,4.36,0,0,1-1.32-.77l-.69.38a.58.58,0,0,1-.48.07.66.66,0,0,1-.38-.3l-.38-.66h.83a1.77,1.77,0,0,0,1.23-.52,1.72,1.72,0,0,0,.51-1.23v-.18a3,3,0,0,0,.49-.28l.15.09a1.83,1.83,0,0,0,.88.23A1.75,1.75,0,0,0,15.84,14l.88-1.52a1.7,1.7,0,0,0,.17-1.32,1.66,1.66,0,0,0-.3-.61,1.84,1.84,0,0,0-.51-.45l-.15-.09,0-.29,0-.28.15-.09a1,1,0,0,0,.26-.18l0,.06v.78a4.34,4.34,0,0,1,1.34.77l.68-.38a.68.68,0,0,1,.48-.06.64.64,0,0,1,.38.29l.8,1.38a.58.58,0,0,1,.07.48.63.63,0,0,1-.3.38l-.68.4a3.84,3.84,0,0,1,.08.76,4.13,4.13,0,0,1-.08.78l.34.18.32.2ZM10.17,7.86a1.9,1.9,0,0,1,1.35,3.23,1.85,1.85,0,0,1-1.35.55A1.9,1.9,0,0,1,8.83,8.41a1.92,1.92,0,0,1,1.34-.55Zm1.58,7.2a.73.73,0,0,1-.21.49.66.66,0,0,1-.48.2H9.29a.68.68,0,0,1-.69-.69V14.2a4.75,4.75,0,0,1-1.48-.86l-.75.45a.73.73,0,0,1-.7,0,.63.63,0,0,1-.25-.26L4.54,12a.67.67,0,0,1-.08-.53.71.71,0,0,1,.32-.42l.75-.43a4.8,4.8,0,0,1-.08-.85,4.71,4.71,0,0,1,.08-.85l-.74-.44a.71.71,0,0,1-.32-.42.65.65,0,0,1,.07-.54L5.42,6a.66.66,0,0,1,.42-.32l.18,0a.73.73,0,0,1,.35.09l.75.43A4.68,4.68,0,0,1,8.6,5.33V4.45a.68.68,0,0,1,.69-.69h1.77a.64.64,0,0,1,.48.2.73.73,0,0,1,.21.49v.88a4.75,4.75,0,0,1,1.48.85L14,5.75a.67.67,0,0,1,.34-.09l.18,0a.71.71,0,0,1,.42.32l.89,1.54a.67.67,0,0,1,.06.52.73.73,0,0,1-.32.43l-.75.42a4.8,4.8,0,0,1,.08.85,4.71,4.71,0,0,1-.08.85l.75.43a.66.66,0,0,1,.32.42.73.73,0,0,1-.06.54l-.89,1.52a.69.69,0,0,1-.25.26.7.7,0,0,1-.35.09.64.64,0,0,1-.34-.09l-.75-.45a4.87,4.87,0,0,1-1.48.86v.87ZM7.23,9.75a3,3,0,0,0,.86,2.08,2.94,2.94,0,1,0,4.16-4.16,3,3,0,0,0-2.08-.85A2.94,2.94,0,0,0,7.23,9.75Z" transform="translate(-4.44 -3.76)"/></g></svg>',revert:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 14.69"><g><path d="M18.26,15V12.3l1.89-2V15a2.58,2.58,0,0,1-.24,1c-.2.58-.75.92-1.65,1H7.56v2L4.41,15.63,7.56,13v2h10.7ZM6.3,8.28V11L4.41,13V8.28a2.58,2.58,0,0,1,.24-1c.2-.58.75-.92,1.65-1H17v-2l3.15,3.34L17,10.3v-2H6.3Z" transform="translate(-4.4 -4.28)"/></g></svg>',auto_size:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M6.71,17.19,6.89,16l1.21-.15A6,6,0,0,1,6.81,13.9a5.78,5.78,0,0,1-.45-2.27A6,6,0,0,1,8.1,7.45a5.83,5.83,0,0,1,4.17-1.73l1-1-1-1A7.89,7.89,0,0,0,5,14.64a7.73,7.73,0,0,0,1.71,2.55Zm5.57,2.31h0A7.86,7.86,0,0,0,17.85,6.07L17.67,7.3l-1.21.15a5.9,5.9,0,0,1,1.29,1.92,5.81,5.81,0,0,1,.45,2.26,5.91,5.91,0,0,1-5.9,5.9l-1,1,.49.49.47.5Z" transform="translate(-4.41 -3.76)"/></g></svg>',insert_row_below:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M15.7,1.3c-0.1-0.1-0.1-0.2-0.2-0.2L15.3,1H0.4L0.3,1.1c0,0-0.1,0.1-0.1,0.1c0,0-0.1,0.1-0.1,0.1L0,1.4v7.7l0.1,0.1c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h2.3V9.3l0.1-0.5L3,8.5l0.1-0.2c-0.1,0-0.2,0-0.3,0H1.2v-6h13.3v6h-1.6c-0.1,0-0.2,0-0.3,0l0.1,0.2l0.2,0.4C12.9,9,13,9.2,13,9.3v0.1h2.3l0.2-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1V1.4L15.7,1.3z"/><path d="M10.5,7.5C9.9,7.1,9.3,6.8,8.6,6.7c-0.2,0-0.5-0.1-0.7,0c-0.2,0-0.5,0-0.7,0C6.6,6.7,6.1,6.9,5.6,7.3C5.2,7.6,4.7,8,4.4,8.4C4.3,8.6,4.2,8.8,4.2,8.9C4.1,9.1,4,9.3,3.9,9.4C3.9,9.6,3.8,9.7,3.8,9.9c0,0.2-0.1,0.3-0.1,0.5v-0.1c-0.1,0.8,0.1,1.6,0.5,2.4c0.4,0.7,1,1.3,1.7,1.7c0.3,0.2,0.6,0.3,0.9,0.3c0.3,0.1,0.7,0.1,1,0.1c0.3,0,0.7,0,1-0.1c0.3-0.1,0.6-0.2,0.9-0.3c0.5-0.3,0.9-0.6,1.3-1c0.3-0.4,0.6-0.8,0.8-1.3c0.1-0.4,0.2-0.9,0.2-1.4c0-0.5-0.1-1-0.3-1.4C11.5,8.6,11.1,8,10.5,7.5z M10.1,11.3H8.5v1.6H8H7.9H7.3v0v-0.1v-1.4H5.7v-0.4v-0.2v-0.6h0h1.5V8.5h1.2v1.6h1.6V11.3z"/></g></svg>',insert_row_above:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M0.1,14.5c0.1,0.1,0.1,0.2,0.2,0.2l0.1,0.1h14.9l0.1-0.1c0,0,0.1-0.1,0.1-0.1c0,0,0.1-0.1,0.1-0.1l0.1-0.1V6.7l-0.1-0.1c0-0.1-0.1-0.1-0.2-0.2l-0.1-0.1h-2.3v0.1l-0.1,0.5l-0.2,0.4l-0.1,0.2c0.1,0,0.2,0,0.3,0h1.6v6H1.3v-6h1.6c0.1,0,0.2,0,0.3,0L3.1,7.3L2.9,6.9C2.8,6.8,2.8,6.6,2.7,6.5V6.3H0.4L0.3,6.4c-0.1,0-0.1,0.1-0.2,0.2L0,6.7v7.7L0.1,14.5z"/><path d="M5.3,8.3c0.6,0.5,1.2,0.8,1.9,0.9c0.2,0,0.5,0.1,0.7,0c0.2,0,0.5,0,0.7,0c0.6-0.1,1.1-0.3,1.6-0.6c0.5-0.3,0.9-0.7,1.2-1.2c0.1-0.2,0.2-0.3,0.3-0.5c0.1-0.2,0.2-0.4,0.2-0.5c0.1-0.1,0.1-0.3,0.1-0.4C12,5.8,12,5.6,12,5.4v0.1c0.1-0.8-0.1-1.6-0.5-2.4c-0.4-0.7-1-1.3-1.7-1.7C9.5,1.3,9.2,1.2,8.9,1.1C8.5,1,8.2,1,7.9,1c-0.3,0-0.7,0-1,0.1C6.6,1.2,6.3,1.3,6,1.4C5.5,1.7,5.1,2,4.7,2.4C4.4,2.8,4.1,3.3,3.9,3.8C3.8,4.2,3.7,4.7,3.7,5.2c0,0.5,0.1,1,0.3,1.4C4.3,7.2,4.7,7.8,5.3,8.3z M5.7,4.5h1.6V2.9h0.5h0.1h0.6v0v0.1v1.4H10v0.4v0.2v0.6h0H8.5v1.6H7.3V5.7H5.7V4.5z"/></g></svg>',insert_column_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M14.5,15.7c0.1-0.1,0.2-0.1,0.2-0.2l0.1-0.1V0.4l-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1L14.4,0H6.7L6.6,0.1c-0.1,0-0.1,0.1-0.2,0.2L6.3,0.4v2.3h0.1l0.5,0.1L7.3,3l0.2,0.1c0-0.1,0-0.2,0-0.3V1.2h6v13.3h-6v-1.6c0-0.1,0-0.2,0-0.3l-0.2,0.1l-0.4,0.2C6.7,12.9,6.6,13,6.4,13H6.3v2.3l0.1,0.2c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h7.7L14.5,15.7z"/><path d="M8.3,10.5C8.7,10,9,9.3,9.1,8.6c0-0.2,0.1-0.5,0-0.7c0-0.2,0-0.5,0-0.7C9,6.7,8.8,6.1,8.5,5.7C8.2,5.2,7.8,4.8,7.3,4.5C7.2,4.4,7,4.3,6.9,4.2C6.7,4.1,6.5,4,6.4,4C6.2,3.9,6.1,3.9,5.9,3.8c-0.2,0-0.3-0.1-0.5-0.1h0.1C4.7,3.7,3.8,3.9,3.1,4.3C2.4,4.7,1.8,5.3,1.4,6C1.3,6.3,1.2,6.6,1.1,6.9C1,7.2,1,7.6,1,7.9c0,0.3,0,0.7,0.1,1c0.1,0.3,0.2,0.6,0.3,0.9c0.3,0.5,0.6,0.9,1,1.3c0.4,0.3,0.8,0.6,1.3,0.8C4.2,12,4.7,12.1,5.1,12c0.5,0,1-0.1,1.4-0.3C7.2,11.5,7.8,11.1,8.3,10.5zM4.5,10.1V8.5H2.9V8V7.9V7.3h0H3h1.4V5.7h0.4h0.2h0.6v0v1.5h1.6v1.2H5.7v1.6H4.5z"/></g></svg>',insert_column_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M1.3,0.1C1.2,0.2,1.1,0.2,1.1,0.3L1,0.4v14.9l0.1,0.1c0,0,0.1,0.1,0.1,0.1c0,0,0.1,0.1,0.1,0.1l0.1,0.1h7.7l0.1-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1v-2.3H9.3l-0.5-0.1l-0.4-0.2l-0.2-0.1c0,0.1,0,0.2,0,0.3v1.6h-6V1.3h6v1.6c0,0.1,0,0.2,0,0.3l0.2-0.1l0.4-0.2C9,2.9,9.2,2.8,9.3,2.8h0.1V0.5L9.4,0.3c0-0.1-0.1-0.1-0.2-0.2L9.1,0H1.4L1.3,0.1z"/><path d="M7.5,5.3C7,5.8,6.7,6.5,6.6,7.2c0,0.2-0.1,0.5,0,0.7c0,0.2,0,0.5,0,0.7c0.1,0.6,0.3,1.1,0.6,1.6c0.3,0.5,0.7,0.9,1.2,1.2c0.2,0.1,0.3,0.2,0.5,0.3c0.2,0.1,0.4,0.2,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3,0.1,0.5,0.1h-0.1c0.8,0.1,1.6-0.1,2.4-0.5c0.7-0.4,1.3-1,1.7-1.7c0.2-0.3,0.3-0.6,0.3-0.9c0.1-0.3,0.1-0.7,0.1-1c0-0.3,0-0.7-0.1-1c-0.1-0.3-0.2-0.6-0.3-0.9c-0.3-0.5-0.6-0.9-1-1.3C13,4.4,12.5,4.2,12,4c-0.4-0.1-0.9-0.2-1.4-0.2c-0.5,0-1,0.1-1.4,0.2C8.5,4.3,7.9,4.7,7.5,5.3z M11.3,5.7v1.6h1.6v0.5v0.1v0.6h0h-0.1h-1.4v1.6h-0.4h-0.2h-0.6v0V8.5H8.5V7.3h1.6V5.7H11.3z"/></g></svg>',delete_row:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 13.83"><g><path d="M4.7,18.46l.12.08H19.73l.12-.08a.58.58,0,0,0,.22-.22l.08-.12,0-7.69-.08-.11a.77.77,0,0,0-.18-.18l-.11-.08-2.31,0-.08.28-.1.29a1.58,1.58,0,0,1-.12.29l-.14.34s0,0,.18,0H18.9v6H5.64v-6H7.35c.14,0,.2,0,.18,0l-.14-.34a2.85,2.85,0,0,1-.12-.29l-.1-.29-.07-.27-2.31,0-.11.08a.77.77,0,0,0-.18.18l-.08.11,0,7.69.08.12a.47.47,0,0,0,.09.12l.13.09ZM12.11,13a4,4,0,0,0,1.46-.21,4.51,4.51,0,0,0,1.31-.71A4,4,0,0,0,16.26,10a4.32,4.32,0,0,0-.08-2.54,4.34,4.34,0,0,0-1-1.52,4.15,4.15,0,0,0-1.54-1,4.34,4.34,0,0,0-1.35-.22A4.07,4.07,0,0,0,11,4.93,3.94,3.94,0,0,0,9.24,6.07,3.92,3.92,0,0,0,8.15,8.88a3.91,3.91,0,0,0,.12.95A4.16,4.16,0,0,0,12.11,13Zm2.35-4.14v.58H10.09V8.27h4.37v.58Z" transform="translate(-4.4 -4.71)"/></g></svg>',delete_column:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.81 15.74"><g><path d="M5.66,19.42l.12.08,7.69,0,.11-.08a.77.77,0,0,0,.18-.18l.08-.11,0-2.32-.15,0-.45-.15-.42-.18-.17-.07a1,1,0,0,0,0,.27v1.63h-6V5h6V6.62a.9.9,0,0,0,0,.26l.17-.07.42-.17a3.91,3.91,0,0,1,.45-.15l.15,0,0-2.32L13.75,4a.77.77,0,0,0-.18-.18l-.11-.08H5.79l-.13.07a.63.63,0,0,0-.21.22l-.08.12V19.08l.08.12a.47.47,0,0,0,.09.12.35.35,0,0,0,.12.1Zm9-3.67a4.16,4.16,0,0,0,2.36-.51,4.08,4.08,0,0,0,1.67-1.72,4,4,0,0,0,.35-.91,3.79,3.79,0,0,0,.1-1,4.71,4.71,0,0,0-.11-1,5,5,0,0,0-.3-.87,4.25,4.25,0,0,0-1-1.25,4.49,4.49,0,0,0-1.34-.81A4.26,4.26,0,0,0,15,7.48a3.88,3.88,0,0,0-1.41.25A4.32,4.32,0,0,0,11.86,9,4,4,0,0,0,11,10.94a4.4,4.4,0,0,0-.05.68,4.5,4.5,0,0,0,.05.68,3.93,3.93,0,0,0,.61,1.57,4.22,4.22,0,0,0,1.18,1.2,4.59,4.59,0,0,0,.48.27c.2.1.37.17.5.22a2.44,2.44,0,0,0,.45.12,4.61,4.61,0,0,0,.5.07Zm2.54-4.12v.58H12.87V11h4.37v.59Z" transform="translate(-5.37 -3.76)"/></g></svg>',fixed_column_width:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6,5H18A1,1 0 0,1 19,6A1,1 0 0,1 18,7H6A1,1 0 0,1 5,6A1,1 0 0,1 6,5M21,2V4H3V2H21M15,8H17V22H15V8M7,8H9V22H7V8M11,8H13V22H11V8Z" /></svg>',rotate_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M0.5,10.2c0,0.1,0,0.2,0,0.3v0.2l0,0c0.1,0.3,0.3,0.6,0.4,0.9l0,0C1,11.8,1.3,12,1.5,11.9h0.1h0.2h0.1c0.1-0.1,0.3-0.3,0.4-0.5v-0.2c0-0.1,0-0.2-0.1-0.3l0,0c-0.2-0.2-0.3-0.4-0.3-0.7l0,0C1.8,10,1.7,9.9,1.5,9.8c-0.1,0-0.2,0-0.3,0H0.9C0.7,9.9,0.6,10,0.5,10.2L0.5,10.2z"/><path d="M2.2,11.5L2.2,11.5L2.2,11.5z"/><path d="M5.9,3.6L5.9,3.6L5.9,3.6z"/><path d="M0.1,7.9c0,0.3,0,0.6,0,0.9l0,0l0,0l0,0l0,0c0,0.2,0.1,0.3,0.2,0.4l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0l0,0c0.2,0,0.4-0.1,0.5-0.3l0,0c0-0.1,0.1-0.3,0.1-0.4V8.6l0,0c0-0.2,0-0.5,0-0.7l0,0c0-0.2-0.1-0.4-0.2-0.5C1.1,7.3,0.9,7.2,0.7,7.2S0.3,7.3,0.2,7.4C0.1,7.5,0,7.7,0.1,7.9z"/><path d="M1.9,12.7L1.9,12.7c0,0.2,0,0.4,0.2,0.5l0,0l0.2,0.3l0,0c0.2,0.1,0.3,0.2,0.5,0.4l0,0l0,0l0,0l0,0C2.9,14,3,14.1,3.2,14.1s0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5v-0.1c0-0.2-0.1-0.4-0.2-0.5l0,0l-0.4-0.4l-0.2-0.2l0,0C3,12.1,2.8,12,2.6,12l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0C2,12.3,1.9,12.5,1.9,12.7z"/><path d="M6.6,15c0,0.2,0.1,0.4,0.2,0.5c0.1,0.1,0.2,0.2,0.4,0.3l0,0c0.3,0,0.5,0,0.7,0h0.3l0,0c0.2,0,0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5l0,0l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0H7.9c-0.1,0-0.3,0-0.5,0l0,0H7.3c-0.2-0.1-0.3,0-0.5,0.1l0,0C6.7,14.6,6.6,14.8,6.6,15L6.6,15L6.6,15L6.6,15z"/><path d="M4.2,7.4C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.1,0.1,0.3,0.2,0.5,0.2s0.3-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0C11.5,7.3,11,6.7,10,5.8l0,0L8.4,4.2l0,0C8.3,4.1,8.1,4,7.9,4S7.5,4.1,7.4,4.2L4.2,7.4L4.2,7.4z M6.8,9L5.7,7.9l2.2-2.2l2.3,2.2l-2.3,2.2C7.7,9.9,7.3,9.5,6.8,9L6.8,9z"/><path d="M4.1,14.1C4,14.2,4,14.3,4,14.4v0.2l0,0c0.1,0.1,0.2,0.3,0.4,0.4l0,0c0.3,0.1,0.6,0.2,0.9,0.4h0.1h0.1l0,0c0.2,0,0.3-0.1,0.5-0.1l0,0c0.2-0.1,0.3-0.3,0.3-0.4l0,0l0,0l0,0l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3l0,0C6.1,14.2,6,14.1,5.8,14l0,0c-0.3-0.1-0.5-0.2-0.8-0.2l0,0c-0.1-0.1-0.2-0.1-0.3-0.1H4.5C4.3,13.7,4.2,13.9,4.1,14.1z"/><path d="M9.3,14.4c0,0.1-0.1,0.3,0,0.4V15l0,0c0,0.1,0.1,0.3,0.5,0.4c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1l0,0c0.3-0.1,0.6-0.2,0.9-0.3l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0.1-0.3c0-0.1-0.1-0.2-0.1-0.3l0,0c-0.1-0.2-0.2-0.3-0.4-0.4l0,0h-0.3c-0.1,0-0.2,0-0.3,0l0,0c-0.2,0.1-0.5,0.2-0.8,0.3l0,0C9.5,14.1,9.4,14.2,9.3,14.4L9.3,14.4z"/><path d="M11.4,14.7L11.4,14.7L11.4,14.7z"/><path d="M9.5,15.3L9.5,15.3L9.5,15.3z"/><path d="M15.9,7.9c0-1-0.2-2-0.6-3l0,0c-0.4-1-1-1.9-1.7-2.6C12.8,1.6,12,1,11,0.6l0,0C10.1,0.2,9,0,8,0C7.3,0,6.5,0.1,5.8,0.3l0,0C5.2,0.5,4.6,0.8,4,1.1L3.1,0.2l0,0C2.9,0.1,2.8,0,2.6,0H2.4l0,0C2.2,0,2,0.2,1.9,0.4l0,0L0.1,4.9l0,0C0,5,0,5.1,0,5.2c0,0.2,0.1,0.4,0.2,0.5l0,0c0.2,0.1,0.3,0.2,0.5,0.2h0.1H1l0,0l4.7-1.8l0,0C5.9,4,6.1,3.8,6.1,3.6V3.4C6.1,3.2,6,3,5.9,2.9l0,0L5.1,2.1c0.4-0.2,0.8-0.4,1.3-0.5c0.5-0.1,1.1-0.2,1.7-0.2c0.9,0,1.7,0.2,2.5,0.5l0,0c0.8,0.3,1.5,0.8,2.1,1.4c0.6,0.6,1.1,1.3,1.4,2.1l0,0c0.3,0.8,0.5,1.6,0.5,2.5s-0.2,1.7-0.5,2.5l0,0c-0.3,0.8-0.8,1.5-1.4,2.1c-0.2,0.2-0.4,0.3-0.6,0.5l0,0c-0.2,0.1-0.3,0.3-0.3,0.5v0.1c0,0.1,0,0.3,0.1,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0c0.1,0,0.3-0.1,0.4-0.2l0,0l0,0l0,0l0,0c0.2-0.2,0.5-0.4,0.7-0.6l0,0l0,0l0,0l0,0c0.7-0.8,1.3-1.6,1.7-2.6C15.6,10,15.8,9,15.9,7.9z M1.9,4C2,3.8,2.1,3.5,2.3,3.1l0,0L2.7,2l1.2,1.2L1.9,4z"/><path d="M6.8,15.5L6.8,15.5L6.8,15.5z"/></g></svg>',rotate_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M9.9,15.3L9.9,15.3L9.9,15.3z"/><path d="M6.9,15.1L6.9,15.1c0,0.1,0.1,0.3,0.2,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0h0.3c0.2,0,0.4,0,0.7,0l0,0c0.2-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.2-0.4V15c0-0.2-0.1-0.4-0.2-0.4c-0.2-0.1-0.3-0.2-0.5-0.2H8.4l0,0c-0.1,0-0.3,0-0.5,0H7.6l0,0c-0.2,0-0.4,0.1-0.5,0.2C7,14.7,6.9,14.9,6.9,15.1z"/><path d="M6.5,14.4L6.5,14.4L6.5,14.4z"/><path d="M5.8,5.8L5.8,5.8c-1,0.9-1.5,1.5-1.7,1.6l0,0C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.2,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0L8.4,4.2C8.3,4.1,8.1,4,7.9,4C7.7,4,7.5,4.1,7.4,4.2l0,0L5.8,5.8z M5.6,7.9l2.3-2.2l2.2,2.2L9,9l0,0l0,0l0,0l0,0c-0.5,0.6-0.9,0.9-1.1,1.1L5.6,7.9z"/><path d="M9,15.5L9,15.5L9,15.5z"/><path d="M9.6,14.7v0.2l0,0l0,0l0,0l0,0c0.1,0.2,0.1,0.3,0.3,0.3c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1h0.1c0.3-0.1,0.6-0.3,0.9-0.4l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0,0v-0.2c0-0.1,0-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4H11c-0.1,0-0.2,0.1-0.3,0.1l0,0c-0.2,0.1-0.4,0.2-0.7,0.3l0,0l0,0c-0.1,0.1-0.3,0.2-0.4,0.4C9.6,14.5,9.6,14.6,9.6,14.7z"/><path d="M9,14.5L9,14.5L9,14.5z"/><path d="M9.6,14.4L9.6,14.4L9.6,14.4z"/><path d="M11.7,14L11.7,14L11.7,14z"/><path d="M15.6,7.4L15.6,7.4L15.6,7.4z"/><path d="M15,9.4c0.2,0,0.4,0,0.6-0.2l0,0c0.1-0.1,0.2-0.2,0.2-0.4l0,0l0,0l0,0l0,0c0-0.3,0-0.6,0-0.9c0-0.2-0.1-0.4-0.2-0.5c-0.1-0.1-0.3-0.2-0.5-0.2s-0.4,0.1-0.5,0.2c-0.1,0.1-0.2,0.3-0.2,0.5l0,0c0,0.2,0,0.4,0,0.7l0,0v0.1c0,0.1,0,0.3,0.1,0.4l0,0C14.6,9.3,14.8,9.4,15,9.4L15,9.4L15,9.4z"/><path d="M14,12h0.1h0.2h0.1c0.2,0,0.5-0.2,0.6-0.4l0,0c0.2-0.3,0.3-0.6,0.4-0.9l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4h-0.3c-0.1,0-0.2,0-0.3,0C14.2,9.9,14,10,14,10.3l0,0c-0.1,0.2-0.2,0.5-0.3,0.7l0,0c-0.1,0.1-0.1,0.2-0.1,0.3v0.2l0,0l0,0C13.6,11.6,13.8,11.8,14,12z"/><path d="M14.6,7.4L14.6,7.4L14.6,7.4z"/><path d="M4.4,14.2c-0.1,0.1-0.1,0.2-0.1,0.3l0.1,0.2c0,0.2,0.2,0.3,0.3,0.4l0,0c0.3,0.1,0.6,0.3,1.1,0.4l0,0h0.1l0,0c0.1,0,0.2-0.1,0.4-0.2c0.1,0,0.2-0.2,0.3-0.3l0,0v-0.2c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.1-0.2-0.2-0.4-0.3l0,0c-0.2-0.1-0.5-0.2-0.7-0.3l0,0c-0.1,0-0.2,0-0.3,0H4.7l0,0C4.6,13.9,4.4,14,4.4,14.2L4.4,14.2z"/><path d="M11.9,13.3c0,0.2,0.1,0.4,0.2,0.6c0.1,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l0,0l0,0l0,0c0.1-0.1,0.3-0.3,0.4-0.4l0,0l0.2-0.3l0,0c0.1-0.2,0.2-0.3,0.2-0.5l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.2,0.2l-0.4,0.4l0,0C12,13,11.9,13.1,11.9,13.3L11.9,13.3z"/><path d="M12.1,13.8L12.1,13.8L12.1,13.8z"/><path d="M11.9,13.3L11.9,13.3L11.9,13.3z"/><path d="M15.9,5.2c0-0.1-0.1-0.2-0.1-0.3l0,0L14,0.4l0,0C13.9,0.2,13.7,0,13.5,0l0,0l0,0h-0.2c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.9,0.9c-0.5-0.3-1.1-0.6-1.8-0.8l0,0C9.4,0.1,8.7,0,7.9,0c-1,0-2,0.2-3,0.6S3,1.6,2.3,2.3C1.6,3.1,1,3.9,0.6,4.9l0,0C0.2,5.8,0,6.8,0,7.9c0,1,0.2,2,0.6,3s0.9,1.8,1.7,2.6l0,0l0,0l0,0l0,0c0.2,0.2,0.5,0.4,0.7,0.6l0,0l0,0l0,0l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0c0.2,0,0.4-0.1,0.6-0.3l0,0c0.1-0.1,0.1-0.3,0.1-0.4v-0.1l0,0C4.1,13.3,4,13.1,3.9,13l0,0c-0.2-0.1-0.4-0.3-0.6-0.5c-0.6-0.6-1.1-1.3-1.4-2.1l0,0C1.6,9.6,1.4,8.8,1.4,7.9s0.2-1.7,0.5-2.5l0,0c0.3-0.8,0.8-1.5,1.4-2.1c0.6-0.6,1.3-1.1,2.1-1.4l0,0C6.2,1.6,7,1.4,7.9,1.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.5l-0.8,0.8l0,0C10,3.1,9.9,3.2,9.9,3.4v0.2l0,0l0,0c0,0.2,0.2,0.4,0.4,0.5l0,0l4.5,1.8l0,0H15h0.1c0.2,0,0.4-0.1,0.5-0.2l0,0C15.7,5.6,15.8,5.4,15.9,5.2z M11.8,3.2L13,2l0.4,1.1l0,0c0.2,0.4,0.3,0.7,0.4,0.9L11.8,3.2z"/></g></svg>',mirror_horizontal:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.75 15.74"><g><path d="M13.75,3.76l5.9,15.74h-5.9V3.76ZM4.9,19.5,10.8,3.76V19.5H4.9Z" transform="translate(-4.9 -3.76)"/></g></svg>',mirror_vertical:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.75"><g><path d="M20.15,13.1,4.41,19V13.1H20.15ZM4.41,4.25l15.74,5.9H4.41V4.25Z" transform="translate(-4.41 -4.25)"/></g></svg>',checked:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 12.1"><g><path d="M4.59,12.23l.12.18L9.43,17.5a.58.58,0,0,0,.84,0L20,7.45h0a.58.58,0,0,0,0-.84l-.85-.85a.58.58,0,0,0-.84,0H18.2l-8.12,8.41a.29.29,0,0,1-.42,0l-3.4-3.63a.58.58,0,0,0-.84,0l-.85.85a.6.6,0,0,0-.14.21.51.51,0,0,0,0,.44c.05.06.1.13.16.19Z" transform="translate(-4.38 -5.58)"/></g></svg>',line_break:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,6a1,1,0,0,0-1,1v4a1,1,0,0,1-1,1H7.41l1.3-1.29A1,1,0,0,0,7.29,9.29l-3,3a1,1,0,0,0-.21.33,1,1,0,0,0,0,.76,1,1,0,0,0,.21.33l3,3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L7.41,14H17a3,3,0,0,0,3-3V7A1,1,0,0,0,19,6Z"/></svg>',audio:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z" /></svg>',image_gallery:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="30 30 150 150"><g><path d="M152.775,120.548V51.651c0-12.271-9.984-22.254-22.254-22.254H43.727c-12.271,0-22.254,9.983-22.254,22.254v68.896c0,12.27,9.983,22.254,22.254,22.254h86.795C142.791,142.802,152.775,132.817,152.775,120.548z M36.394,51.651c0-4.042,3.291-7.333,7.333-7.333h86.795c4.042,0,7.332,3.291,7.332,7.333v23.917l-14.938-17.767c-1.41-1.678-3.487-2.649-5.68-2.658h-0.029c-2.184,0-4.255,0.954-5.674,2.613L76.709,98.519l-9.096-9.398c-1.427-1.474-3.392-2.291-5.448-2.273c-2.052,0.025-4.004,0.893-5.396,2.4L36.394,111.32V51.651z M41.684,127.585l20.697-22.416l9.312,9.622c1.461,1.511,3.489,2.334,5.592,2.27c2.101-0.066,4.075-1.013,5.44-2.612l34.436-40.308l20.693,24.613v21.794c0,4.042-3.29,7.332-7.332,7.332H43.727C43.018,127.88,42.334,127.775,41.684,127.585z M182.616,152.5V75.657c0-4.12-3.34-7.46-7.461-7.46c-4.119,0-7.46,3.34-7.46,7.46V152.5c0,4.112-3.347,7.46-7.461,7.46h-94c-4.119,0-7.46,3.339-7.46,7.459c0,4.123,3.341,7.462,7.46,7.462h94C172.576,174.881,182.616,164.841,182.616,152.5z"/></g></svg>',bookmark:'<svg viewBox="0 0 24 24"><path d="M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z" /></svg>',download:'<svg viewBox="0 0 24 24"><path d="M2 12H4V17H20V12H22V17C22 18.11 21.11 19 20 19H4C2.9 19 2 18.11 2 17V12M12 15L17.55 9.54L16.13 8.13L13 11.25V2H11V11.25L7.88 8.13L6.46 9.55L12 15Z" /></svg>',dir_ltr:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M9 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2H9C6.79 2 5 3.79 5 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zm0 12v3H5v2h12v3l4-4-4-4z"/></svg>',dir_rtl:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M10 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2h-8C7.79 2 6 3.79 6 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zM8 14l-4 4 4 4v-3h12v-2H8v-3z"/></svg>',alert_outline:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z" /></svg>',more_text:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 10 180 180"><g><path d="M49.711,142.188h49.027c2.328,0.002,4.394,1.492,5.129,3.699l9.742,29.252c0.363,1.092,1.385,1.828,2.537,1.83l15.883,0.01c0.859,0,1.667-0.412,2.17-1.109s0.641-1.594,0.37-2.41l-16.625-50.045L86.503,28.953c-0.36-1.097-1.383-1.839-2.537-1.842H64.532c-1.153-0.001-2.178,0.736-2.542,1.831L13.847,173.457c-0.271,0.816-0.135,1.713,0.369,2.412c0.503,0.697,1.311,1.109,2.171,1.109h15.872c1.151,0,2.173-0.736,2.537-1.828l9.793-29.287C45.325,143.66,47.39,142.18,49.711,142.188L49.711,142.188z M53.493,119.098l15.607-46.9c0.744-2.196,2.806-3.674,5.125-3.674s4.381,1.478,5.125,3.674l15.607,46.904c0.537,1.621,0.263,3.402-0.736,4.789c-1.018,1.408-2.649,2.24-4.386,2.24H58.615c-1.736,0-3.368-0.832-4.386-2.24C53.23,122.504,52.956,120.721,53.493,119.098L53.493,119.098z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_paragraph:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 10 180 180"><g><path d="M128.39,28.499H63.493c-25.558,0-46.354,20.796-46.354,46.354c0,25.559,20.796,46.353,46.354,46.353h9.271v55.625h18.542V47.04h9.271V176.83h18.543V47.04h9.271V28.499z M72.764,102.664h-9.271c-15.337,0-27.813-12.475-27.813-27.812c0-15.336,12.476-27.813,27.813-27.813h9.271V102.664z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_plus:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="35 30 140 140"><g><path d="M137.215,102.045c0,3.498-2.835,6.332-6.333,6.332H24.549c-3.498,0-6.334-2.834-6.334-6.332l0,0c0-3.498,2.836-6.333,6.334-6.333h106.333C134.38,95.711,137.215,98.547,137.215,102.045L137.215,102.045z M77.715,161.545c-3.498,0-6.333-2.836-6.333-6.334V48.878c0-3.498,2.836-6.333,6.333-6.333l0,0c3.498,0,6.334,2.835,6.334,6.333v106.333C84.049,158.709,81.213,161.545,77.715,161.545L77.715,161.545z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.632,190.465,66.177,190.465,63.32L190.465,63.32z M190.465,101.993c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.888,1.026,5.353,3.056,7.396c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.993L190.465,101.993z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_horizontal:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 3.58"><g><path d="M4.64,10.73a1.84,1.84,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0A1.79,1.79,0,0,1,8,11.63a1.84,1.84,0,0,1-.25.9,1.69,1.69,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2.08,2.08,0,0,1,4.64,10.73Zm6.09,0a1.84,1.84,0,0,1,.65-.65,1.78,1.78,0,0,1,2.67,1.55,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.76,1.76,0,0,1-1.79,0,1.79,1.79,0,0,1-.64-2.44Zm6.08,0a1.69,1.69,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0,1.79,1.79,0,0,1,.9,1.54,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2,2,0,0,1,16.81,10.73Z" transform="translate(-4.39 -9.84)"/></g></svg>',more_vertical:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3.94 15.75"><g><path d="M12.28,7.69a1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,2,2,0,0,1,1.39-.58,1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58Zm0,2a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39A1.92,1.92,0,0,1,13.67,13a2,2,0,0,1-1.39.58A1.92,1.92,0,0,1,10.89,13a2,2,0,0,1-.58-1.39,2,2,0,0,1,2-2Zm0,5.9a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,1.94,1.94,0,0,1,1.39-.58Z" transform="translate(-10.31 -3.75)"/></g></svg>',attachment:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8.38 15.68"><g><path d="M15.23,6h1v9.78a3.88,3.88,0,0,1-1.31,2.45,4,4,0,0,1-6.57-2.45V7A3,3,0,0,1,9.2,4.89a3,3,0,0,1,5,2.09v8.31a1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39V8h1v7.32a1,1,0,0,0,.29.69,1,1,0,0,0,.69.28A.9.9,0,0,0,13,16a1,1,0,0,0,.29-.69V7a1.92,1.92,0,0,0-.58-1.39A2,2,0,0,0,11.27,5a1.92,1.92,0,0,0-1.39.58A2,2,0,0,0,9.33,7v8.31a3,3,0,1,0,5.9,0V6Z" transform="translate(-8.08 -3.78)"/></g></svg>',map:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.7 15.62"><g><path d="M12.05,12.42a2.93,2.93,0,1,1,2.07-5A2.88,2.88,0,0,1,15,9.49a3,3,0,0,1-.86,2.07,2.89,2.89,0,0,1-2.07.86Zm0-5.36a2.43,2.43,0,0,0-1.72,4.16,2.48,2.48,0,0,0,1.72.72,2.44,2.44,0,0,0,0-4.88Zm0-3.3A5.84,5.84,0,0,1,17.9,9.62a9.94,9.94,0,0,1-1.73,5A33.59,33.59,0,0,1,12.84,19a1.52,1.52,0,0,1-.23.2,1,1,0,0,1-.55.2h0a1,1,0,0,1-.55-.2,1.52,1.52,0,0,1-.23-.2,33.59,33.59,0,0,1-3.33-4.32,9.93,9.93,0,0,1-1.72-5,5.84,5.84,0,0,1,5.85-5.86ZM12,18.34l.08.05.06-.06a35.58,35.58,0,0,0,3.06-3.93,9.35,9.35,0,0,0,1.74-4.77,4.88,4.88,0,0,0-4.88-4.88A4.79,4.79,0,0,0,8.6,6.17,4.84,4.84,0,0,0,7.17,9.62,9.29,9.29,0,0,0,8.91,14.4,36,36,0,0,0,12,18.34Z" transform="translate(-6.2 -3.76)"/></g></svg>',magic_stick:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 15.75"><g><path d="M19.86,19.21a1,1,0,0,0,.28-.68,1,1,0,0,0-.28-.7L13,10.93a1,1,0,0,0-.7-.28,1,1,0,0,0-.68,1.65l6.9,6.9a1,1,0,0,0,.69.29.93.93,0,0,0,.69-.28ZM9.19,8.55a3,3,0,0,0,1.68,0,14.12,14.12,0,0,0,1.41-.32A11.26,11.26,0,0,0,10.8,7.06c-.56-.36-.86-.56-.91-.58S10,5.91,10,5.11s0-1.26-.15-1.37a4.35,4.35,0,0,0-1.19.71c-.53.4-.81.62-.87.68a9,9,0,0,0-2-.6,6.84,6.84,0,0,0-.76-.09s0,.27.08.77a8.6,8.6,0,0,0,.61,2q-.09.09-.69.87a3.59,3.59,0,0,0-.68,1.17c.12.17.57.23,1.36.15S7,9.26,7.15,9.23s.21.36.57.91a10.49,10.49,0,0,0,1.14,1.48c0-.1.14-.57.31-1.4a3,3,0,0,0,0-1.67Z" transform="translate(-4.41 -3.74)"/></g></svg>',empty_file:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12.78 15.75"><g><path d="M14.73,3.76,18.67,7.7v9.84a2,2,0,0,1-2,2H7.84a1.89,1.89,0,0,1-1.38-.58,2,2,0,0,1-.57-1.39V5.73a1.93,1.93,0,0,1,.57-1.38,2,2,0,0,1,1.38-.58h6.62l.26,0v0Zm2.95,4.92h-2a1.93,1.93,0,0,1-1.38-.57,2,2,0,0,1-.58-1.4V6.17c0-.36,0-.84,0-1.43H7.85a1,1,0,0,0-.7.29,1,1,0,0,0-.29.7V17.54a1,1,0,0,0,.29.69,1,1,0,0,0,.69.29h8.85a1,1,0,0,0,.71-.29.92.92,0,0,0,.28-.69Zm0-1L14.73,4.74v2A1,1,0,0,0,15,7.4a1,1,0,0,0,.69.29Z" transform="translate(-5.89 -3.76)"/></g></svg>'},N=n("P6u4"),T=n.n(N);const k={_d:null,_w:null,isIE:null,isIE_Edge:null,isOSX_IOS:null,isChromium:null,isMobile:null,isResizeObserverSupported:null,_propertiesInit:function(){this._d||(this._d=document,this._w=window,this.isIE=navigator.userAgent.indexOf("Trident")>-1,this.isIE_Edge=navigator.userAgent.indexOf("Trident")>-1||navigator.appVersion.indexOf("Edge")>-1,this.isOSX_IOS=/(Mac|iPhone|iPod|iPad)/.test(navigator.platform),this.isChromium=!!window.chrome,this.isResizeObserverSupported="function"==typeof ResizeObserver,this.isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)},_allowedEmptyNodeList:".se-component, pre, blockquote, hr, li, table, img, iframe, video, audio, canvas",_HTMLConvertor:function(e){const t={"&":"&amp;"," ":"&nbsp;","'":"&apos;",'"':"&quot;","<":"&lt;",">":"&gt;"};return e.replace(/&|\u00A0|'|"|<|>/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},zeroWidthSpace:String.fromCharCode(8203),zeroWidthRegExp:new RegExp(String.fromCharCode(8203),"g"),onlyZeroWidthRegExp:new RegExp("^"+String.fromCharCode(8203)+"+$"),fontValueMap:{"xx-small":1,"x-small":2,small:3,medium:4,large:5,"x-large":6,"xx-large":7},onlyZeroWidthSpace:function(e){return null!=e&&("string"!=typeof e&&(e=e.textContent),""===e||this.onlyZeroWidthRegExp.test(e))},getXMLHttpRequest:function(){if(!this._w.ActiveXObject)return this._w.XMLHttpRequest?new XMLHttpRequest:null;try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(e){try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return null}}},getValues:function(e){return e?this._w.Object.keys(e).map((function(t){return e[t]})):[]},camelToKebabCase:function(e){return"string"==typeof e?e.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()})):e.map((function(e){return k.camelToKebabCase(e)}))},kebabToCamelCase:function(e){return"string"==typeof e?e.replace(/-[a-zA-Z]/g,(function(e){return e.replace("-","").toUpperCase()})):e.map((function(e){return k.camelToKebabCase(e)}))},createElement:function(e){return this._d.createElement(e)},createTextNode:function(e){return this._d.createTextNode(e||"")},HTMLEncoder:function(e){const t={"<":"$lt;",">":"$gt;"};return e.replace(/<|>/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},HTMLDecoder:function(e){const t={"$lt;":"<","$gt;":">"};return e.replace(/\$lt;|\$gt;/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},hasOwn:function(e,t){return this._hasOwn.call(e,t)},_hasOwn:Object.prototype.hasOwnProperty,getIncludePath:function(e,t){let n="";const i=[],l="js"===t?"script":"link",o="js"===t?"src":"href";let s="(?:";for(let t=0,n=e.length;t<n;t++)s+=e[t]+(t<n-1?"|":")");const a=new this._w.RegExp("(^|.*[\\/])"+s+"(\\.[^\\/]+)?."+t+"(?:\\?.*|;.*)?$","i"),r=new this._w.RegExp(".+\\."+t+"(?:\\?.*|;.*)?$","i");for(let e=this._d.getElementsByTagName(l),t=0;t<e.length;t++)r.test(e[t][o])&&i.push(e[t]);for(let e=0;e<i.length;e++){let t=i[e][o].match(a);if(t){n=t[0];break}}if(""===n&&(n=i.length>0?i[0][o]:""),-1===n.indexOf(":/")&&"//"!==n.slice(0,2)&&(n=0===n.indexOf("/")?location.href.match(/^.*?:\/\/[^\/]*/)[0]+n:location.href.match(/^[^\?]*\/(?:)/)[0]+n),!n)throw"[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +"+name+", extension: "+t+")";return n},getPageStyle:function(e){let t="";const n=(e||this._d).styleSheets;for(let e,i=0,l=n.length;i<l;i++){try{e=n[i].cssRules}catch(e){continue}if(e)for(let n=0,i=e.length;n<i;n++)t+=e[n].cssText}return t},getIframeDocument:function(e){let t=e.contentWindow||e.contentDocument;return t.document&&(t=t.document),t},getAttributesToString:function(e,t){if(!e.attributes)return"";const n=e.attributes;let i="";for(let e=0,l=n.length;e<l;e++)t&&t.indexOf(n[e].name)>-1||(i+=n[e].name+'="'+n[e].value+'" ');return i},getByteLength:function(e){if(!e||!e.toString)return 0;e=e.toString();const t=this._w.encodeURIComponent;let n,i;return this.isIE_Edge?(i=this._w.unescape(t(e)).length,n=0,null!==t(e).match(/(%0A|%0D)/gi)&&(n=t(e).match(/(%0A|%0D)/gi).length),i+n):(i=new this._w.TextEncoder("utf-8").encode(e).length,n=0,null!==t(e).match(/(%0A|%0D)/gi)&&(n=t(e).match(/(%0A|%0D)/gi).length),i+n)},isWysiwygDiv:function(e){return e&&1===e.nodeType&&(this.hasClass(e,"se-wrapper-wysiwyg")||/^BODY$/i.test(e.nodeName))},isNonEditable:function(e){return e&&1===e.nodeType&&"false"===e.getAttribute("contenteditable")},isTextStyleElement:function(e){return e&&3!==e.nodeType&&/^(strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)$/i.test(e.nodeName)},isInputElement:function(e){return e&&1===e.nodeType&&/^(INPUT|TEXTAREA)$/i.test(e.nodeName)},isFormatElement:function(e){return e&&1===e.nodeType&&(/^(P|DIV|H[1-6]|PRE|LI|TH|TD|DETAILS)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__replace_.+(\\s|$)|(\\s|^)__se__format__free_.+(\\s|$)"))&&!this.isComponent(e)&&!this.isWysiwygDiv(e)},isRangeFormatElement:function(e){return e&&1===e.nodeType&&(/^(BLOCKQUOTE|OL|UL|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD|DETAILS)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__range_.+(\\s|$)"))},isClosureRangeFormatElement:function(e){return e&&1===e.nodeType&&(/^(TH|TD)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__range__closure_.+(\\s|$)"))},isFreeFormatElement:function(e){return e&&1===e.nodeType&&(/^PRE$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__free_.+(\\s|$)"))&&!this.isComponent(e)&&!this.isWysiwygDiv(e)},isClosureFreeFormatElement:function(e){return e&&1===e.nodeType&&this.hasClass(e,"(\\s|^)__se__format__free__closure_.+(\\s|$)")},isComponent:function(e){return e&&(/se-component/.test(e.className)||/^(TABLE|HR)$/.test(e.nodeName))},isUneditableComponent:function(e){return e&&this.hasClass(e,"__se__uneditable")},isMediaComponent:function(e){return e&&/se-component/.test(e.className)},isNotCheckingNode:function(e){return e&&/katex|__se__tag/.test(e.className)},getFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isRangeFormatElement(e)&&e.firstElementChild,this.isFormatElement(e)&&t(e))return e;e=e.parentNode}return null},getRangeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isRangeFormatElement(e)&&!/^(THEAD|TBODY|TR)$/i.test(e.nodeName)&&t(e))return e;e=e.parentNode}return null},getFreeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isFreeFormatElement(e)&&t(e))return e;e=e.parentNode}return null},getClosureFreeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isClosureFreeFormatElement(e)&&t(e))return e;e=e.parentNode}return null},copyTagAttributes:function(e,t,n){if(t.style.cssText){const n=t.style;for(let t=0,i=n.length;t<i;t++)e.style[n[t]]=n[n[t]]}const i=t.attributes;for(let t,l=0,o=i.length;l<o;l++)t=i[l].name.toLowerCase(),n&&n.indexOf(t)>-1||!i[l].value?e.removeAttribute(t):"style"!==t&&e.setAttribute(i[l].name,i[l].value)},copyFormatAttributes:function(e,t){(t=t.cloneNode(!1)).className=t.className.replace(/(\s|^)__se__format__[^\s]+/g,""),this.copyTagAttributes(e,t)},getArrayItem:function(e,t,n){if(!e||0===e.length)return null;t=t||function(){return!0};const i=[];for(let l,o=0,s=e.length;o<s;o++)if(l=e[o],t(l)){if(!n)return l;i.push(l)}return n?i:null},arrayIncludes:function(e,t){for(let n=0;n<e.length;n++)if(e[n]===t)return!0;return!1},getArrayIndex:function(e,t){let n=-1;for(let i=0,l=e.length;i<l;i++)if(e[i]===t){n=i;break}return n},nextIdx:function(e,t){let n=this.getArrayIndex(e,t);return-1===n?-1:n+1},prevIdx:function(e,t){let n=this.getArrayIndex(e,t);return-1===n?-1:n-1},getPositionIndex:function(e){let t=0;for(;e=e.previousSibling;)t+=1;return t},getNodePath:function(e,t,n){const i=[];let l=!0;return this.getParentElement(e,function(e){if(e===t&&(l=!1),l&&!this.isWysiwygDiv(e)){if(n&&3===e.nodeType){let t=null,i=null;n.s=n.e=0;let l=e.previousSibling;for(;l&&3===l.nodeType;)i=l.textContent.replace(this.zeroWidthRegExp,""),n.s+=i.length,e.textContent=i+e.textContent,t=l,l=l.previousSibling,this.removeItem(t);let o=e.nextSibling;for(;o&&3===o.nodeType;)i=o.textContent.replace(this.zeroWidthRegExp,""),n.e+=i.length,e.textContent+=i,t=o,o=o.nextSibling,this.removeItem(t)}i.push(e)}return!1}.bind(this)),i.map(this.getPositionIndex).reverse()},getNodeFromPath:function(e,t){let n,i=t;for(let t=0,l=e.length;t<l&&(n=i.childNodes,0!==n.length);t++)i=n.length<=e[t]?n[n.length-1]:n[e[t]];return i},isSameAttributes:function(e,t){if(3===e.nodeType&&3===t.nodeType)return!0;if(3===e.nodeType||3===t.nodeType)return!1;const n=e.style,i=t.style;let l=0;for(let e=0,t=n.length;e<t;e++)n[n[e]]===i[n[e]]&&l++;const o=e.classList,s=t.classList,a=this._w.RegExp;let r=0;for(let e=0,t=o.length;e<t;e++)a("(s|^)"+o[e]+"(s|$)").test(s.value)&&r++;return l===i.length&&l===n.length&&r===s.length&&r===o.length},isEmptyLine:function(e){return!e||!e.parentNode||!e.querySelector("IMG, IFRAME, AUDIO, VIDEO, CANVAS, TABLE")&&0===e.children.length&&this.onlyZeroWidthSpace(e.textContent)},isSpanWithoutAttr:function(e){return!!e&&1===e.nodeType&&/^SPAN$/i.test(e.nodeName)&&!e.className&&!e.style.cssText},isList:function(e){return e&&/^(OL|UL)$/i.test("string"==typeof e?e:e.nodeName)},isListCell:function(e){return e&&/^LI$/i.test("string"==typeof e?e:e.nodeName)},isTable:function(e){return e&&/^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test("string"==typeof e?e:e.nodeName)},isCell:function(e){return e&&/^(TD|TH)$/i.test("string"==typeof e?e:e.nodeName)},isBreak:function(e){return e&&/^BR$/i.test("string"==typeof e?e:e.nodeName)},isAnchor:function(e){return e&&/^A$/i.test("string"==typeof e?e:e.nodeName)},isMedia:function(e){return e&&/^(IMG|IFRAME|AUDIO|VIDEO|CANVAS)$/i.test("string"==typeof e?e:e.nodeName)},isFigures:function(e){return e&&(this.isMedia(e)||/^(FIGURE)$/i.test("string"==typeof e?e:e.nodeName))},isNumber:function(e){return!!e&&/^-?\d+(\.\d+)?$/.test(e+"")},getNumber:function(e,t){if(!e)return 0;let n=(e+"").match(/-?\d+(\.\d+)?/);return n&&n[0]?(n=n[0],t<0?1*n:0===t?this._w.Math.round(1*n):1*(1*n).toFixed(t)):0},getListChildren:function(e,t){const n=[];return e&&e.children&&0!==e.children.length?(t=t||function(){return!0},function i(l){if(e!==l&&t(l)&&n.push(l),l.children)for(let e=0,t=l.children.length;e<t;e++)i(l.children[e])}(e),n):n},getListChildNodes:function(e,t){const n=[];return e&&0!==e.childNodes.length?(t=t||function(){return!0},function i(l){e!==l&&t(l)&&n.push(l);for(let e=0,t=l.childNodes.length;e<t;e++)i(l.childNodes[e])}(e),n):n},getElementDepth:function(e){if(!e||this.isWysiwygDiv(e))return-1;let t=0;for(e=e.parentNode;e&&!this.isWysiwygDiv(e);)t+=1,e=e.parentNode;return t},compareElements:function(e,t){let n=e,i=t;for(;n&&i&&n.parentNode!==i.parentNode;)n=n.parentNode,i=i.parentNode;if(!n||!i)return{ancestor:null,a:e,b:t,result:0};const l=n.parentNode.childNodes,o=this.getArrayIndex(l,n),s=this.getArrayIndex(l,i);return{ancestor:n.parentNode,a:n,b:i,result:o>s?1:o<s?-1:0}},getParentElement:function(e,t){let n;if("function"==typeof t)n=t;else{let e;/^\./.test(t)?(e="className",t=t.split(".")[1]):/^#/.test(t)?(e="id",t="^"+t.split("#")[1]+"$"):/^:/.test(t)?(e="name",t="^"+t.split(":")[1]+"$"):(e="nodeName",t="^"+t+"$");const i=new this._w.RegExp(t,"i");n=function(t){return i.test(t[e])}}for(;e&&!n(e);){if(this.isWysiwygDiv(e))return null;e=e.parentNode}return e},getPreviousDeepestNode:function(e,t){let n=e.previousSibling;if(!n){for(let i=e.parentNode;i;i=i.parentNode){if(i===t)return null;if(i.previousSibling){n=i.previousSibling;break}}if(!n)return null}for(;n.lastChild;)n=n.lastChild;return n},getNextDeepestNode:function(e,t){let n=e.nextSibling;if(!n){for(let i=e.parentNode;i;i=i.parentNode){if(i===t)return null;if(i.nextSibling){n=i.nextSibling;break}}if(!n)return null}for(;n.firstChild;)n=n.firstChild;return n},getChildElement:function(e,t,n){let i;if("function"==typeof t)i=t;else{let e;/^\./.test(t)?(e="className",t=t.split(".")[1]):/^#/.test(t)?(e="id",t="^"+t.split("#")[1]+"$"):/^:/.test(t)?(e="name",t="^"+t.split(":")[1]+"$"):(e="nodeName",t="^"+("text"===t?"#"+t:t)+"$");const n=new this._w.RegExp(t,"i");i=function(t){return n.test(t[e])}}const l=this.getListChildNodes(e,(function(e){return i(e)}));return l[n?l.length-1:0]},getEdgeChildNodes:function(e,t){if(e){for(t||(t=e);e&&1===e.nodeType&&e.childNodes.length>0&&!this.isBreak(e);)e=e.firstChild;for(;t&&1===t.nodeType&&t.childNodes.length>0&&!this.isBreak(t);)t=t.lastChild;return{sc:e,ec:t||e}}},getOffset:function(e,t){let n=0,i=0,l=3===e.nodeType?e.parentElement:e;const o=this.getParentElement(e,this.isWysiwygDiv.bind(this));for(;l&&!this.hasClass(l,"se-container")&&l!==o;)n+=l.offsetLeft,i+=l.offsetTop,l=l.offsetParent;const s=t&&/iframe/i.test(t.nodeName);return{left:n+(s?t.parentElement.offsetLeft:0),top:i-(o?o.scrollTop:0)+(s?t.parentElement.offsetTop:0)}},getOverlapRangeAtIndex:function(e,t,n,i){if(e<=i?t<n:t>n)return 0;const l=(e>n?e:n)-(t<i?t:i);return(l<0?-1*l:l)+1},changeTxt:function(e,t){e&&t&&(e.textContent=t)},changeElement:function(e,t){if("string"==typeof t)if(e.outerHTML)e.outerHTML=t;else{const n=this.createElement("DIV");n.innerHTML=t,t=n.firstChild,e.parentNode.replaceChild(t,e)}else 1===t.nodeType&&e.parentNode.replaceChild(t,e)},setStyle:function(e,t,n){e.style[t]=n,n||e.style.cssText||e.removeAttribute("style")},hasClass:function(e,t){if(e)return new this._w.RegExp(t).test(e.className)},addClass:function(e,t){if(!e)return;new this._w.RegExp("(\\s|^)"+t+"(\\s|$)").test(e.className)||(e.className+=(e.className.length>0?" ":"")+t)},removeClass:function(e,t){if(!e)return;const n=new this._w.RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ").trim(),e.className.trim()||e.removeAttribute("class")},toggleClass:function(e,t){if(!e)return;let n=!1;const i=new this._w.RegExp("(\\s|^)"+t+"(\\s|$)");return i.test(e.className)?e.className=e.className.replace(i," ").trim():(e.className+=" "+t,n=!0),e.className.trim()||e.removeAttribute("class"),n},isImportantDisabled:function(e){return e.hasAttribute("data-important-disabled")},setDisabledButtons:function(e,t,n){for(let i=0,l=t.length;i<l;i++){let l=t[i];!n&&this.isImportantDisabled(l)||(l.disabled=e),n&&(e?l.setAttribute("data-important-disabled",""):l.removeAttribute("data-important-disabled"))}},removeItem:function(e){e&&("function"==typeof e.remove?e.remove():e.parentNode&&e.parentNode.removeChild(e))},removeItemAllParents:function(e,t,n){if(!e)return null;let i=null;return t||(t=function(e){if(e===n||this.isComponent(e))return!1;const t=e.textContent.trim();return 0===t.length||/^(\n|\u200B)+$/.test(t)}.bind(this)),function e(n){if(!k.isWysiwygDiv(n)){const l=n.parentNode;l&&t(n)&&(i={sc:n.previousElementSibling,ec:n.nextElementSibling},k.removeItem(n),e(l))}}(e),i},detachNestedList:function(e,t){const n=this._deleteNestedList(e);let i,l,o;if(n){i=n.cloneNode(!1),l=n.childNodes;const t=this.getPositionIndex(e);for(;l[t];)i.appendChild(l[t])}else i=e;if(t)o=this.getListChildren(i,function(e){return this.isListCell(e)&&!e.previousElementSibling}.bind(this));else{const t=this.getElementDepth(e)+2;o=this.getListChildren(e,function(e){return this.isListCell(e)&&!e.previousElementSibling&&this.getElementDepth(e)===t}.bind(this))}for(let e=0,t=o.length;e<t;e++)this._deleteNestedList(o[e]);return n&&(n.parentNode.insertBefore(i,n.nextSibling),l&&0===l.length&&this.removeItem(n)),i===e?i.parentNode:i},_deleteNestedList:function(e){const t=e.parentNode;let n,i,l,o,s,a=t,r=a.parentNode;for(;this.isListCell(r);){for(o=this.getPositionIndex(e),n=r.nextElementSibling,i=r.parentNode,l=a;l;){if(a=a.nextSibling,this.isList(l)){for(s=l.childNodes;s[o];)i.insertBefore(s[o],n);0===s.length&&this.removeItem(l)}else i.appendChild(l);l=a}a=i,r=i.parentNode}return 0===t.children.length&&this.removeItem(t),i},splitElement:function(e,t,n){if(this.isWysiwygDiv(e))return e;if(t&&!this.isNumber(t)){const n=e.childNodes;let i=this.getPositionIndex(t);const l=e.cloneNode(!1),o=e.cloneNode(!1);for(let e=0,t=n.length;e<t;e++){if(e<i)l.appendChild(n[e]);else{if(!(e>i))continue;o.appendChild(n[e])}e--,t--,i--}return l.childNodes.length>0&&e.parentNode.insertBefore(l,e),o.childNodes.length>0&&e.parentNode.insertBefore(o,e.nextElementSibling),e}const i=e.parentNode;let l,o,s,a=0,r=1,c=!0;if((!n||n<0)&&(n=0),3===e.nodeType){if(a=this.getPositionIndex(e),t>=0&&e.length!==t){e.splitText(t);const n=this.getNodeFromPath([a+1],i);this.onlyZeroWidthSpace(n)&&(n.data=this.zeroWidthSpace)}}else if(1===e.nodeType){if(0===t){for(;e.firstChild;)e=e.firstChild;if(3===e.nodeType){const t=this.createTextNode(this.zeroWidthSpace);e.parentNode.insertBefore(t,e),e=t}}e.previousSibling?e=e.previousSibling:this.getElementDepth(e)===n&&(c=!1)}1===e.nodeType&&(r=0);let d=e;for(;this.getElementDepth(d)>n;)for(a=this.getPositionIndex(d)+r,d=d.parentNode,s=l,l=d.cloneNode(!1),o=d.childNodes,s&&(this.isListCell(l)&&this.isList(s)&&s.firstElementChild?(l.innerHTML=s.firstElementChild.innerHTML,k.removeItem(s.firstElementChild),s.children.length>0&&l.appendChild(s)):l.appendChild(s));o[a];)l.appendChild(o[a]);d.childNodes.length<=1&&(!d.firstChild||0===d.firstChild.textContent.length)&&(d.innerHTML="<br>");const u=d.parentNode;return c&&(d=d.nextSibling),l?(this.mergeSameTags(l,null,!1),this.mergeNestedTags(l,function(e){return this.isList(e)}.bind(this)),l.childNodes.length>0?u.insertBefore(l,d):l=d,this.isListCell(l)&&l.children&&this.isList(l.children[0])&&l.insertBefore(this.createElement("BR"),l.children[0]),0===i.childNodes.length&&this.removeItem(i),l):d},mergeSameTags:function(e,t,n){const i=this,l=t?t.length:0;let o=null;return l&&(o=this._w.Array.apply(null,new this._w.Array(l)).map(this._w.Number.prototype.valueOf,0)),function e(s,a,r){const c=s.childNodes;for(let d,u,h=0,g=c.length;h<g&&(d=c[h],u=c[h+1],d);h++)if(n&&i._isIgnoreNodeChange(d)||!n&&(i.isTable(d)||i.isListCell(d)||i.isFormatElement(d)&&!i.isFreeFormatElement(d)))(i.isTable(d)||i.isListCell(d))&&e(d,a+1,h);else{if(1===g&&s.nodeName===d.nodeName&&s.parentNode){if(l){let e,n,o,r,c;for(let u=0;u<l;u++)if(e=t[u],e&&e[a]===h){for(n=d,o=s,r=a,c=!0;r>=0;){if(i.getArrayIndex(o.childNodes,n)!==e[r]){c=!1;break}n=d.parentNode,o=n.parentNode,r--}c&&(e.splice(a,1),e[a]=h)}}i.copyTagAttributes(d,s),s.parentNode.insertBefore(d,s),i.removeItem(s)}if(!u){1===d.nodeType&&e(d,a+1,h);break}if(d.nodeName===u.nodeName&&i.isSameAttributes(d,u)&&d.href===u.href){const e=d.childNodes;let n=0;for(let t=0,i=e.length;t<i;t++)e[t].textContent.length>0&&n++;const s=d.lastChild,c=u.firstChild;let g=0;if(s&&c){const e=3===s.nodeType&&3===c.nodeType;g=s.textContent.length;let i=s.previousSibling;for(;i&&3===i.nodeType;)g+=i.textContent.length,i=i.previousSibling;if(n>0&&3===s.nodeType&&3===c.nodeType&&(s.textContent.length>0||c.textContent.length>0)&&n--,l){let i=null;for(let d=0;d<l;d++)if(i=t[d],i&&i[a]>h){if(a>0&&i[a-1]!==r)continue;i[a]-=1,i[a+1]>=0&&i[a]===h&&(i[a+1]+=n,e&&s&&3===s.nodeType&&c&&3===c.nodeType&&(o[d]+=g))}}}if(3===d.nodeType){if(g=d.textContent.length,d.textContent+=u.textContent,l){let e=null;for(let i=0;i<l;i++)if(e=t[i],e&&e[a]>h){if(a>0&&e[a-1]!==r)continue;e[a]-=1,e[a+1]>=0&&e[a]===h&&(e[a+1]+=n,o[i]+=g)}}}else d.innerHTML+=u.innerHTML;i.removeItem(u),h--}else 1===d.nodeType&&e(d,a+1,h)}}(e,0,0),o},mergeNestedTags:function(e,t){"string"==typeof t?t=function(e){return this.test(e.tagName)}.bind(new this._w.RegExp("^("+(t||".+")+")$","i")):"function"!=typeof t&&(t=function(){return!0}),function e(n){let i=n.children;if(1===i.length&&i[0].nodeName===n.nodeName&&t(n)){const e=i[0];for(i=e.children;i[0];)n.appendChild(i[0]);n.removeChild(e)}for(let t=0,i=n.children.length;t<i;t++)e(n.children[t])}(e)},removeEmptyNode:function(e,t,n){const i=this;t&&(t=i.getParentElement(t,(function(t){return e===t.parentElement}))),function n(l){if(i._notTextNode(l)||l===t||i.isNonEditable(l))return 0;if(l===e||!i.onlyZeroWidthSpace(l.textContent)||l.firstChild&&i.isBreak(l.firstChild)||l.querySelector(i._allowedEmptyNodeList)){const e=l.children;for(let t=0,l=e.length,o=0;t<l;t++)e[t+o]&&!i.isComponent(e[t+o])&&(o+=n(e[t+o]))}else if(l.parentNode)return l.parentNode.removeChild(l),-1;return 0}(e),0===e.childNodes.length&&(n?this.removeItem(e):e.innerHTML="<br>")},htmlRemoveWhiteSpace:function(e){return e?e.trim().replace(/<\/?(?!strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)[^>^<]+>\s+(?=<)/gi,(function(e){return e.replace(/\n/g,"").replace(/\s+/," ")})):""},htmlCompress:function(e){return e.replace(/\n/g,"").replace(/(>)(?:\s+)(<)/g,"$1$2")},sortByDepth:function(e,t){const n=t?1:-1,i=-1*n;e.sort(function(e,t){return this.isListCell(e)&&this.isListCell(t)?(e=this.getElementDepth(e))>(t=this.getElementDepth(t))?n:e<t?i:0:0}.bind(this))},escapeStringRegexp:function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")},_isExcludeSelectionElement:function(e){return!/FIGCAPTION/i.test(e.nodeName)&&(this.isComponent(e)||/FIGURE/i.test(e.nodeName))},_isIgnoreNodeChange:function(e){return e&&3!==e.nodeType&&(this.isNonEditable(e)||!this.isTextStyleElement(e))},_isMaintainedNode:function(e){return e&&3!==e.nodeType&&/^(a|label|code|summary)$/i.test("string"==typeof e?e:e.nodeName)},_isSizeNode:function(e){return e&&3!==e.nodeType&&this.isTextStyleElement(e)&&!!e.style.fontSize},_notTextNode:function(e){return e&&3!==e.nodeType&&(this.isComponent(e)||/^(br|input|select|canvas|img|iframe|audio|video)$/i.test("string"==typeof e?e:e.nodeName))},_disallowedTags:function(e){return/^(meta|script|link|style|[a-z]+\:[a-z]+)$/i.test(e.nodeName)},createTagsWhitelist:function(e){return new RegExp("<\\/?\\b(?!\\b"+(e||"").replace(/\|/g,"\\b|\\b")+"\\b)[^>]*>","gi")},createTagsBlacklist:function(e){return new RegExp("<\\/?\\b(?:\\b"+(e||"^").replace(/\|/g,"\\b|\\b")+"\\b)[^>]*>","gi")},_consistencyCheckOfHTML:function(e,t,n,i){const l=[],o=[],s=[],a=[],r=this.getListChildNodes(e,function(r){if(1!==r.nodeType)return this.isList(r.parentElement)&&l.push(r),!1;if(n.test(r.nodeName)||!t.test(r.nodeName)&&0===r.childNodes.length&&this.isNotCheckingNode(r))return l.push(r),!1;const c=!this.getParentElement(r,this.isNotCheckingNode);if(!this.isTable(r)&&!this.isListCell(r)&&!this.isAnchor(r)&&(this.isFormatElement(r)||this.isRangeFormatElement(r)||this.isTextStyleElement(r))&&0===r.childNodes.length&&c)return o.push(r),!1;if(this.isList(r.parentNode)&&!this.isList(r)&&!this.isListCell(r))return s.push(r),!1;if(this.isCell(r)){const e=r.firstElementChild;if(!this.isFormatElement(e)&&!this.isRangeFormatElement(e)&&!this.isComponent(e))return a.push(r),!1}if(c&&r.className){const e=new this._w.Array(r.classList).map(i).join(" ").trim();e?r.className=e:r.removeAttribute("class")}return r.parentNode!==e&&c&&(this.isListCell(r)&&!this.isList(r.parentNode)||(this.isFormatElement(r)||this.isComponent(r))&&!this.isRangeFormatElement(r.parentNode)&&!this.getParentElement(r,this.isComponent))}.bind(this));for(let e=0,t=l.length;e<t;e++)this.removeItem(l[e]);const c=[];for(let e,t,n=0,i=r.length;n<i;n++)if(e=r[n],t=e.parentNode,t&&t.parentNode)if(this.getParentElement(e,this.isListCell)){const n=e.childNodes;for(let l=n.length-1;i>=0;l--)t.insertBefore(e,n[l]);c.push(e)}else t.parentNode.insertBefore(e,t),c.push(t);for(let e,t=0,n=c.length;t<n;t++)e=c[t],this.onlyZeroWidthSpace(e.textContent.trim())&&this.removeItem(e);for(let e=0,t=o.length;e<t;e++)this.removeItem(o[e]);for(let e,t,n,i,l=0,o=s.length;l<o;l++)if(e=s[l],i=e.parentNode,i)if(t=this.createElement("LI"),this.isFormatElement(e)){for(n=e.childNodes;n[0];)t.appendChild(n[0]);i.insertBefore(t,e),this.removeItem(e)}else e=e.nextSibling,t.appendChild(s[l]),i.insertBefore(t,e);for(let e,t,n=0,i=a.length;n<i;n++)e=a[n],t=this.createElement("DIV"),t.innerHTML=0===e.textContent.trim().length&&0===e.children.length?"<br>":e.innerHTML,e.innerHTML=t.outerHTML},_setDefaultOptionStyle:function(e,t){let n="";e.height&&(n+="height:"+e.height+";"),e.minHeight&&(n+="min-height:"+e.minHeight+";"),e.maxHeight&&(n+="max-height:"+e.maxHeight+";"),e.position&&(n+="position:"+e.position+";"),e.width&&(n+="width:"+e.width+";"),e.minWidth&&(n+="min-width:"+e.minWidth+";"),e.maxWidth&&(n+="max-width:"+e.maxWidth+";");let i="",l="",o="";const s=(t=n+t).split(";");for(let t,n=0,a=s.length;n<a;n++)t=s[n].trim(),t&&(/^(min-|max-)?width\s*:/.test(t)||/^(z-index|position)\s*:/.test(t)?i+=t+";":/^(min-|max-)?height\s*:/.test(t)?(/^height/.test(t)&&"auto"===t.split(":")[1].trim()&&(e.height="auto"),l+=t+";"):o+=t+";");return{top:i,frame:l,editor:o}},_setIframeDocument:function(e,t){e.setAttribute("scrolling","auto"),e.contentDocument.head.innerHTML='<meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">'+this._setIframeCssTags(t),e.contentDocument.body.className=t._editableClass,e.contentDocument.body.setAttribute("contenteditable",!0),e.contentDocument.body.setAttribute("autocorrect","off")},_setIframeCssTags:function(e){const t=e.iframeCSSFileName,n=this._w.RegExp;let i="";for(let e,l=0,o=t.length;l<o;l++){if(e=[],/(^https?:\/\/)|(^data:text\/css,)/.test(t[l]))e.push(t[l]);else{const i=new n("(^|.*[\\/])"+t[l]+"(\\..+)?\\.css(?:\\?.*|;.*)?$","i");for(let t,n=document.getElementsByTagName("link"),l=0,o=n.length;l<o;l++)t=n[l].href.match(i),t&&e.push(t[0])}if(!e||0===e.length)throw'[SUNEDITOR.constructor.iframe.fail] The suneditor CSS files installation path could not be automatically detected. Please set the option property "iframeCSSFileName" before creating editor instances.';for(let t=0,n=e.length;t<n;t++)i+='<link href="'+e[t]+'" rel="stylesheet">'}return i+("auto"===e.height?"<style>\n/** Iframe height auto */\nbody{height: min-content; overflow: hidden;}\n</style>":"")}};var L=k,B={init:function(e,t){"object"!=typeof t&&(t={});const n=document;this._initOptions(e,t);const i=n.createElement("DIV");i.className="sun-editor"+(t.rtl?" se-rtl":""),e.id&&(i.id="suneditor_"+e.id);const l=n.createElement("DIV");l.className="se-container";const o=this._createToolBar(n,t.buttonList,t.plugins,t),s=o.element.cloneNode(!1);s.className+=" se-toolbar-shadow",o.element.style.visibility="hidden",o.pluginCallButtons.math&&this._checkKatexMath(t.katex);const a=n.createElement("DIV");a.className="se-arrow";const r=n.createElement("DIV");r.className="se-toolbar-sticky-dummy";const c=n.createElement("DIV");c.className="se-wrapper";const d=this._initElements(t,i,o.element,a),u=d.bottomBar,h=d.wysiwygFrame,g=d.placeholder;let p=d.codeView;const m=u.resizingBar,f=u.navigation,_=u.charWrapper,b=u.charCounter,v=n.createElement("DIV");v.className="se-loading-box sun-editor-common",v.innerHTML='<div class="se-loading-effect"></div>';const y=n.createElement("DIV");y.className="se-line-breaker",y.innerHTML='<button class="se-btn">'+t.icons.line_break+"</button>";const C=n.createElement("DIV");C.className+="se-line-breaker-component";const w=C.cloneNode(!0);C.innerHTML=w.innerHTML=t.icons.line_break;const x=n.createElement("DIV");x.className="se-resizing-back";const E=n.createElement("INPUT");E.tabIndex=-1,E.style.cssText="position: absolute !important; top: -10000px !important; display: block !important; width: 0 !important; height: 0 !important; margin: 0 !important; padding: 0 !important;";const S=t.toolbarContainer;S&&(S.appendChild(o.element),S.appendChild(s));const N=t.resizingBarContainer;return m&&N&&N.appendChild(m),c.appendChild(p),g&&c.appendChild(g),S||(l.appendChild(o.element),l.appendChild(s)),l.appendChild(r),l.appendChild(c),l.appendChild(x),l.appendChild(v),l.appendChild(y),l.appendChild(C),l.appendChild(w),l.appendChild(E),m&&!N&&l.appendChild(m),i.appendChild(l),p=this._checkCodeMirror(t,p),{constructed:{_top:i,_relative:l,_toolBar:o.element,_toolbarShadow:s,_menuTray:o._menuTray,_editorArea:c,_wysiwygArea:h,_codeArea:p,_placeholder:g,_resizingBar:m,_navigation:f,_charWrapper:_,_charCounter:b,_loading:v,_lineBreaker:y,_lineBreaker_t:C,_lineBreaker_b:w,_resizeBack:x,_stickyDummy:r,_arrow:a,_focusTemp:E},options:t,plugins:o.plugins,pluginCallButtons:o.pluginCallButtons,_responsiveButtons:o.responsiveButtons}},_checkCodeMirror:function(e,t){if(e.codeMirror){const n=[{mode:"htmlmixed",htmlMode:!0,lineNumbers:!0,lineWrapping:!0},e.codeMirror.options||{}].reduce((function(e,t){for(let n in t)L.hasOwn(t,n)&&(e[n]=t[n]);return e}),{});"auto"===e.height&&(n.viewportMargin=1/0,n.height="auto");const i=e.codeMirror.src.fromTextArea(t,n);i.display.wrapper.style.cssText=t.style.cssText,e.codeMirrorEditor=i,(t=i.display.wrapper).className+=" se-wrapper-code-mirror"}return t},_checkKatexMath:function(e){if(!e)throw Error('[SUNEDITOR.create.fail] To use the math button you need to add a "katex" object to the options.');const t=[{throwOnError:!1},e.options||{}].reduce((function(e,t){for(let n in t)L.hasOwn(t,n)&&(e[n]=t[n]);return e}),{});e.options=t},_setOptions:function(e,t,n){this._initOptions(t.element.originElement,e);const i=t.element,l=i.relative,o=i.editorArea,s=e.toolbarContainer&&e.toolbarContainer!==n.toolbarContainer,a=e.lang!==n.lang||e.buttonList!==n.buttonList||e.mode!==n.mode||s,r=this._createToolBar(document,a?e.buttonList:n.buttonList,e.plugins,e);r.pluginCallButtons.math&&this._checkKatexMath(e.katex);const c=document.createElement("DIV");c.className="se-arrow",a&&(r.element.style.visibility="hidden",s?(e.toolbarContainer.appendChild(r.element),i.toolbar.parentElement.removeChild(i.toolbar)):i.toolbar.parentElement.replaceChild(r.element,i.toolbar),i.toolbar=r.element,i._menuTray=r._menuTray,i._arrow=c);const d=this._initElements(e,i.topArea,a?r.element:i.toolbar,c),u=d.bottomBar,h=d.wysiwygFrame,g=d.placeholder;let p=d.codeView;return i.resizingBar&&L.removeItem(i.resizingBar),u.resizingBar&&(e.resizingBarContainer&&e.resizingBarContainer!==n.resizingBarContainer?e.resizingBarContainer.appendChild(u.resizingBar):l.appendChild(u.resizingBar)),o.innerHTML="",o.appendChild(p),g&&o.appendChild(g),p=this._checkCodeMirror(e,p),i.resizingBar=u.resizingBar,i.navigation=u.navigation,i.charWrapper=u.charWrapper,i.charCounter=u.charCounter,i.wysiwygFrame=h,i.code=p,i.placeholder=g,e.rtl?L.addClass(i.topArea,"se-rtl"):L.removeClass(i.topArea,"se-rtl"),{callButtons:r.pluginCallButtons,plugins:r.plugins,toolbar:r}},_initElements:function(e,t,n,i){t.style.cssText=e._editorStyles.top,/inline/i.test(e.mode)?(n.className+=" se-toolbar-inline",n.style.width=e.toolbarWidth):/balloon/i.test(e.mode)&&(n.className+=" se-toolbar-balloon",n.style.width=e.toolbarWidth,n.appendChild(i));const l=document.createElement(e.iframe?"IFRAME":"DIV");if(l.className="se-wrapper-inner se-wrapper-wysiwyg",e.iframe)l.allowFullscreen=!0,l.frameBorder=0,l.style.cssText=e._editorStyles.frame,l.className+=e.className;else{l.setAttribute("contenteditable",!0),l.setAttribute("autocorrect","off"),l.setAttribute("scrolling","auto");for(let t in e.iframeAttributes)l.setAttribute(t,e.iframeAttributes[t]);l.className+=" "+e._editableClass,l.style.cssText=e._editorStyles.frame+e._editorStyles.editor,l.className+=e.className}const o=document.createElement("TEXTAREA");o.className="se-wrapper-inner se-wrapper-code"+e.className,o.style.cssText=e._editorStyles.frame,o.style.display="none","auto"===e.height&&(o.style.overflow="hidden");let s=null,a=null,r=null,c=null;if(e.resizingBar&&(s=document.createElement("DIV"),s.className="se-resizing-bar sun-editor-common",a=document.createElement("DIV"),a.className="se-navigation sun-editor-common",s.appendChild(a),e.charCounter)){if(r=document.createElement("DIV"),r.className="se-char-counter-wrapper",e.charCounterLabel){const t=document.createElement("SPAN");t.className="se-char-label",t.textContent=e.charCounterLabel,r.appendChild(t)}if(c=document.createElement("SPAN"),c.className="se-char-counter",c.textContent="0",r.appendChild(c),e.maxCharCount>0){const t=document.createElement("SPAN");t.textContent=" / "+e.maxCharCount,r.appendChild(t)}s.appendChild(r)}let d=null;return e.placeholder&&(d=document.createElement("SPAN"),d.className="se-placeholder",d.innerText=e.placeholder),{bottomBar:{resizingBar:s,navigation:a,charWrapper:r,charCounter:c},wysiwygFrame:l,codeView:o,placeholder:d}},_initOptions:function(e,t){const n={};if(t.plugins){const e=t.plugins,i=e.length?e:Object.keys(e).map((function(t){return e[t]}));for(let e,t=0,l=i.length;t<l;t++)e=i[t].default||i[t],n[e.name]=e}t.plugins=n,t.strictMode=!1!==t.strictMode,t.lang=t.lang||T.a,t.value="string"==typeof t.value?t.value:null,t.allowedClassNames=new L._w.RegExp((t.allowedClassNames&&"string"==typeof t.allowedClassNames?t.allowedClassNames+"|":"")+"^__se__|se-|katex"),t.historyStackDelayTime="number"==typeof t.historyStackDelayTime?t.historyStackDelayTime:400,t.frameAttrbutes=t.frameAttrbutes||{},t.defaultTag="string"==typeof t.defaultTag&&t.defaultTag.length>0?t.defaultTag:"p";const i=t.textTags=[{bold:"STRONG",underline:"U",italic:"EM",strike:"DEL",sub:"SUB",sup:"SUP"},t.textTags||{}].reduce((function(e,t){for(let n in t)e[n]=t[n];return e}),{});t._textTagsMap={strong:i.bold.toLowerCase(),b:i.bold.toLowerCase(),u:i.underline.toLowerCase(),ins:i.underline.toLowerCase(),em:i.italic.toLowerCase(),i:i.italic.toLowerCase(),del:i.strike.toLowerCase(),strike:i.strike.toLowerCase(),s:i.strike.toLowerCase(),sub:i.sub.toLowerCase(),sup:i.sup.toLowerCase()},t._defaultCommand={bold:t.textTags.bold,underline:t.textTags.underline,italic:t.textTags.italic,strike:t.textTags.strike,subscript:t.textTags.sub,superscript:t.textTags.sup},t.__allowedScriptTag=!0===t.__allowedScriptTag;t.tagsBlacklist=t.tagsBlacklist||"",t._defaultTagsWhitelist=("string"==typeof t._defaultTagsWhitelist?t._defaultTagsWhitelist:"br|p|div|pre|blockquote|h1|h2|h3|h4|h5|h6|ol|ul|li|hr|figure|figcaption|img|iframe|audio|video|source|table|thead|tbody|tr|th|td|a|b|strong|var|i|em|u|ins|s|span|strike|del|sub|sup|code|svg|path|details|summary")+(t.__allowedScriptTag?"|script":""),t._editorTagsWhitelist="*"===t.addTagsWhitelist?"*":this._setWhitelist(t._defaultTagsWhitelist+("string"==typeof t.addTagsWhitelist&&t.addTagsWhitelist.length>0?"|"+t.addTagsWhitelist:""),t.tagsBlacklist),t.pasteTagsBlacklist=t.tagsBlacklist+(t.tagsBlacklist&&t.pasteTagsBlacklist?"|"+t.pasteTagsBlacklist:t.pasteTagsBlacklist||""),t.pasteTagsWhitelist="*"===t.pasteTagsWhitelist?"*":this._setWhitelist("string"==typeof t.pasteTagsWhitelist?t.pasteTagsWhitelist:t._editorTagsWhitelist,t.pasteTagsBlacklist),t.attributesWhitelist=t.attributesWhitelist&&"object"==typeof t.attributesWhitelist?t.attributesWhitelist:null,t.attributesBlacklist=t.attributesBlacklist&&"object"==typeof t.attributesBlacklist?t.attributesBlacklist:null,t.mode=t.mode||"classic",t.rtl=!!t.rtl,t.lineAttrReset=["id"].concat(t.lineAttrReset&&"string"==typeof t.lineAttrReset?t.lineAttrReset.toLowerCase().split("|"):[]),t._editableClass="sun-editor-editable"+(t.rtl?" se-rtl":""),t._printClass="string"==typeof t._printClass?t._printClass:null,t.toolbarWidth=t.toolbarWidth?L.isNumber(t.toolbarWidth)?t.toolbarWidth+"px":t.toolbarWidth:"auto",t.toolbarContainer="string"==typeof t.toolbarContainer?document.querySelector(t.toolbarContainer):t.toolbarContainer,t.stickyToolbar=/balloon/i.test(t.mode)||t.toolbarContainer?-1:void 0===t.stickyToolbar?0:/^\d+/.test(t.stickyToolbar)?L.getNumber(t.stickyToolbar,0):-1,t.hideToolbar=!!t.hideToolbar,t.fullScreenOffset=void 0===t.fullScreenOffset?0:/^\d+/.test(t.fullScreenOffset)?L.getNumber(t.fullScreenOffset,0):0,t.fullPage=!!t.fullPage,t.iframe=t.fullPage||!!t.iframe,t.iframeAttributes=t.iframeAttributes||{},t.iframeCSSFileName=t.iframe?"string"==typeof t.iframeCSSFileName?[t.iframeCSSFileName]:t.iframeCSSFileName||["suneditor"]:null,t.previewTemplate="string"==typeof t.previewTemplate?t.previewTemplate:null,t.printTemplate="string"==typeof t.printTemplate?t.printTemplate:null,t.codeMirror=t.codeMirror?t.codeMirror.src?t.codeMirror:{src:t.codeMirror}:null,t.katex=t.katex?t.katex.src?t.katex:{src:t.katex}:null,t.mathFontSize=t.mathFontSize?t.mathFontSize:[{text:"1",value:"1em"},{text:"1.5",value:"1.5em"},{text:"2",value:"2em"},{text:"2.5",value:"2.5em"}],t.position="string"==typeof t.position?t.position:null,t.display=t.display||("none"!==e.style.display&&e.style.display?e.style.display:"block"),t.popupDisplay=t.popupDisplay||"full",t.resizingBar=void 0===t.resizingBar?!/inline|balloon/i.test(t.mode):t.resizingBar,t.showPathLabel=!!t.resizingBar&&("boolean"!=typeof t.showPathLabel||t.showPathLabel),t.resizeEnable=void 0===t.resizeEnable||!!t.resizeEnable,t.resizingBarContainer="string"==typeof t.resizingBarContainer?document.querySelector(t.resizingBarContainer):t.resizingBarContainer,t.charCounter=t.maxCharCount>0||"boolean"==typeof t.charCounter&&t.charCounter,t.charCounterType="string"==typeof t.charCounterType?t.charCounterType:"char",t.charCounterLabel="string"==typeof t.charCounterLabel?t.charCounterLabel.trim():null,t.maxCharCount=L.isNumber(t.maxCharCount)&&t.maxCharCount>-1?1*t.maxCharCount:null,t.width=t.width?L.isNumber(t.width)?t.width+"px":t.width:e.clientWidth?e.clientWidth+"px":"100%",t.minWidth=(L.isNumber(t.minWidth)?t.minWidth+"px":t.minWidth)||"",t.maxWidth=(L.isNumber(t.maxWidth)?t.maxWidth+"px":t.maxWidth)||"",t.height=t.height?L.isNumber(t.height)?t.height+"px":t.height:e.clientHeight?e.clientHeight+"px":"auto",t.minHeight=(L.isNumber(t.minHeight)?t.minHeight+"px":t.minHeight)||"",t.maxHeight=(L.isNumber(t.maxHeight)?t.maxHeight+"px":t.maxHeight)||"",t.className="string"==typeof t.className&&t.className.length>0?" "+t.className:"",t.defaultStyle="string"==typeof t.defaultStyle?t.defaultStyle:"",t.font=t.font?t.font:["Arial","Comic Sans MS","Courier New","Impact","Georgia","tahoma","Trebuchet MS","Verdana"],t.fontSize=t.fontSize?t.fontSize:null,t.formats=t.formats?t.formats:null,t.colorList=t.colorList?t.colorList:null,t.lineHeights=t.lineHeights?t.lineHeights:null,t.paragraphStyles=t.paragraphStyles?t.paragraphStyles:null,t.textStyles=t.textStyles?t.textStyles:null,t.fontSizeUnit="string"==typeof t.fontSizeUnit&&t.fontSizeUnit.trim().toLowerCase()||"px",t.alignItems="object"==typeof t.alignItems?t.alignItems:t.rtl?["right","center","left","justify"]:["left","center","right","justify"],t.imageResizing=void 0===t.imageResizing||t.imageResizing,t.imageHeightShow=void 0===t.imageHeightShow||!!t.imageHeightShow,t.imageAlignShow=void 0===t.imageAlignShow||!!t.imageAlignShow,t.imageWidth=t.imageWidth?L.isNumber(t.imageWidth)?t.imageWidth+"px":t.imageWidth:"auto",t.imageHeight=t.imageHeight?L.isNumber(t.imageHeight)?t.imageHeight+"px":t.imageHeight:"auto",t.imageSizeOnlyPercentage=!!t.imageSizeOnlyPercentage,t._imageSizeUnit=t.imageSizeOnlyPercentage?"%":"px",t.imageRotation=void 0!==t.imageRotation?t.imageRotation:!(t.imageSizeOnlyPercentage||!t.imageHeightShow),t.imageFileInput=void 0===t.imageFileInput||t.imageFileInput,t.imageUrlInput=void 0===t.imageUrlInput||!t.imageFileInput||t.imageUrlInput,t.imageUploadHeader=t.imageUploadHeader||null,t.imageUploadUrl="string"==typeof t.imageUploadUrl?t.imageUploadUrl:null,t.imageUploadSizeLimit=/\d+/.test(t.imageUploadSizeLimit)?L.getNumber(t.imageUploadSizeLimit,0):null,t.imageMultipleFile=!!t.imageMultipleFile,t.imageAccept="string"!=typeof t.imageAccept||"*"===t.imageAccept.trim()?"image/*":t.imageAccept.trim()||"image/*",t.imageGalleryUrl="string"==typeof t.imageGalleryUrl?t.imageGalleryUrl:null,t.imageGalleryHeader=t.imageGalleryHeader||null,t.videoResizing=void 0===t.videoResizing||t.videoResizing,t.videoHeightShow=void 0===t.videoHeightShow||!!t.videoHeightShow,t.videoAlignShow=void 0===t.videoAlignShow||!!t.videoAlignShow,t.videoRatioShow=void 0===t.videoRatioShow||!!t.videoRatioShow,t.videoWidth=t.videoWidth&&L.getNumber(t.videoWidth,0)?L.isNumber(t.videoWidth)?t.videoWidth+"px":t.videoWidth:"",t.videoHeight=t.videoHeight&&L.getNumber(t.videoHeight,0)?L.isNumber(t.videoHeight)?t.videoHeight+"px":t.videoHeight:"",t.videoSizeOnlyPercentage=!!t.videoSizeOnlyPercentage,t._videoSizeUnit=t.videoSizeOnlyPercentage?"%":"px",t.videoRotation=void 0!==t.videoRotation?t.videoRotation:!(t.videoSizeOnlyPercentage||!t.videoHeightShow),t.videoRatio=L.getNumber(t.videoRatio,4)||.5625,t.videoRatioList=t.videoRatioList?t.videoRatioList:null,t.youtubeQuery=(t.youtubeQuery||"").replace("?",""),t.videoFileInput=!!t.videoFileInput,t.videoUrlInput=void 0===t.videoUrlInput||!t.videoFileInput||t.videoUrlInput,t.videoUploadHeader=t.videoUploadHeader||null,t.videoUploadUrl="string"==typeof t.videoUploadUrl?t.videoUploadUrl:null,t.videoUploadSizeLimit=/\d+/.test(t.videoUploadSizeLimit)?L.getNumber(t.videoUploadSizeLimit,0):null,t.videoMultipleFile=!!t.videoMultipleFile,t.videoTagAttrs=t.videoTagAttrs||null,t.videoIframeAttrs=t.videoIframeAttrs||null,t.videoAccept="string"!=typeof t.videoAccept||"*"===t.videoAccept.trim()?"video/*":t.videoAccept.trim()||"video/*",t.audioWidth=t.audioWidth?L.isNumber(t.audioWidth)?t.audioWidth+"px":t.audioWidth:"",t.audioHeight=t.audioHeight?L.isNumber(t.audioHeight)?t.audioHeight+"px":t.audioHeight:"",t.audioFileInput=!!t.audioFileInput,t.audioUrlInput=void 0===t.audioUrlInput||!t.audioFileInput||t.audioUrlInput,t.audioUploadHeader=t.audioUploadHeader||null,t.audioUploadUrl="string"==typeof t.audioUploadUrl?t.audioUploadUrl:null,t.audioUploadSizeLimit=/\d+/.test(t.audioUploadSizeLimit)?L.getNumber(t.audioUploadSizeLimit,0):null,t.audioMultipleFile=!!t.audioMultipleFile,t.audioTagAttrs=t.audioTagAttrs||null,t.audioAccept="string"!=typeof t.audioAccept||"*"===t.audioAccept.trim()?"audio/*":t.audioAccept.trim()||"audio/*",t.tableCellControllerPosition="string"==typeof t.tableCellControllerPosition?t.tableCellControllerPosition.toLowerCase():"cell",t.linkTargetNewWindow=!!t.linkTargetNewWindow,t.linkProtocol="string"==typeof t.linkProtocol?t.linkProtocol:null,t.linkRel=Array.isArray(t.linkRel)?t.linkRel:[],t.linkRelDefault=t.linkRelDefault||{},t.tabDisable=!!t.tabDisable,t.shortcutsDisable=Array.isArray(t.shortcutsDisable)?t.shortcutsDisable:[],t.shortcutsHint=void 0===t.shortcutsHint||!!t.shortcutsHint,t.callBackSave=t.callBackSave?t.callBackSave:null,t.templates=t.templates?t.templates:null,t.placeholder="string"==typeof t.placeholder?t.placeholder:null,t.mediaAutoSelect=void 0===t.mediaAutoSelect||!!t.mediaAutoSelect,t.buttonList=t.buttonList?t.buttonList:[["undo","redo"],["bold","underline","italic","strike","subscript","superscript"],["removeFormat"],["outdent","indent"],["fullScreen","showBlocks","codeView"],["preview","print"]],t.rtl&&(t.buttonList=t.buttonList.reverse()),t.icons=t.icons&&"object"==typeof t.icons?[S,t.icons].reduce((function(e,t){for(let n in t)L.hasOwn(t,n)&&(e[n]=t[n]);return e}),{}):S,t.icons=t.rtl?[t.icons,t.icons.rtl].reduce((function(e,t){for(let n in t)L.hasOwn(t,n)&&(e[n]=t[n]);return e}),{}):t.icons,t.__listCommonStyle=t.__listCommonStyle||["fontSize","color","fontFamily","fontWeight","fontStyle"],t._editorStyles=L._setDefaultOptionStyle(t,t.defaultStyle)},_setWhitelist:function(e,t){if("string"!=typeof t)return e;t=t.split("|"),e=e.split("|");for(let n,i=0,l=t.length;i<l;i++)n=e.indexOf(t[i]),n>-1&&e.splice(n,1);return e.join("|")},_defaultButtons:function(e){const t=e.icons,n=e.lang,i=L.isOSX_IOS?"⌘":"CTRL",l=L.isOSX_IOS?"⇧":"+SHIFT",o=e.shortcutsHint?e.shortcutsDisable:["bold","strike","underline","italic","undo","indent","save"],s=e.rtl?["[","]"]:["]","["],a=e.rtl?[t.outdent,t.indent]:[t.indent,t.outdent];return{bold:["",n.toolbar.bold+'<span class="se-shortcut">'+(o.indexOf("bold")>-1?"":i+'+<span class="se-shortcut-key">B</span>')+"</span>","bold","",t.bold],underline:["",n.toolbar.underline+'<span class="se-shortcut">'+(o.indexOf("underline")>-1?"":i+'+<span class="se-shortcut-key">U</span>')+"</span>","underline","",t.underline],italic:["",n.toolbar.italic+'<span class="se-shortcut">'+(o.indexOf("italic")>-1?"":i+'+<span class="se-shortcut-key">I</span>')+"</span>","italic","",t.italic],strike:["",n.toolbar.strike+'<span class="se-shortcut">'+(o.indexOf("strike")>-1?"":i+l+'+<span class="se-shortcut-key">S</span>')+"</span>","strike","",t.strike],subscript:["",n.toolbar.subscript,"SUB","",t.subscript],superscript:["",n.toolbar.superscript,"SUP","",t.superscript],removeFormat:["",n.toolbar.removeFormat,"removeFormat","",t.erase],indent:["",n.toolbar.indent+'<span class="se-shortcut">'+(o.indexOf("indent")>-1?"":i+'+<span class="se-shortcut-key">'+s[0]+"</span>")+"</span>","indent","",a[0]],outdent:["",n.toolbar.outdent+'<span class="se-shortcut">'+(o.indexOf("indent")>-1?"":i+'+<span class="se-shortcut-key">'+s[1]+"</span>")+"</span>","outdent","",a[1]],fullScreen:["se-code-view-enabled se-resizing-enabled",n.toolbar.fullScreen,"fullScreen","",t.expansion],showBlocks:["",n.toolbar.showBlocks,"showBlocks","",t.show_blocks],codeView:["se-code-view-enabled se-resizing-enabled",n.toolbar.codeView,"codeView","",t.code_view],undo:["",n.toolbar.undo+'<span class="se-shortcut">'+(o.indexOf("undo")>-1?"":i+'+<span class="se-shortcut-key">Z</span>')+"</span>","undo","",t.undo],redo:["",n.toolbar.redo+'<span class="se-shortcut">'+(o.indexOf("undo")>-1?"":i+'+<span class="se-shortcut-key">Y</span> / '+i+l+'+<span class="se-shortcut-key">Z</span>')+"</span>","redo","",t.redo],preview:["se-resizing-enabled",n.toolbar.preview,"preview","",t.preview],print:["se-resizing-enabled",n.toolbar.print,"print","",t.print],dir:["",n.toolbar[e.rtl?"dir_ltr":"dir_rtl"],"dir","",t[e.rtl?"dir_ltr":"dir_rtl"]],dir_ltr:["",n.toolbar.dir_ltr,"dir_ltr","",t.dir_ltr],dir_rtl:["",n.toolbar.dir_rtl,"dir_rtl","",t.dir_rtl],save:["se-resizing-enabled",n.toolbar.save+'<span class="se-shortcut">'+(o.indexOf("save")>-1?"":i+'+<span class="se-shortcut-key">S</span>')+"</span>","save","",t.save],blockquote:["",n.toolbar.tag_blockquote,"blockquote","command",t.blockquote],font:["se-btn-select se-btn-tool-font",n.toolbar.font,"font","submenu",'<span class="txt">'+n.toolbar.font+"</span>"+t.arrow_down],formatBlock:["se-btn-select se-btn-tool-format",n.toolbar.formats,"formatBlock","submenu",'<span class="txt">'+n.toolbar.formats+"</span>"+t.arrow_down],fontSize:["se-btn-select se-btn-tool-size",n.toolbar.fontSize,"fontSize","submenu",'<span class="txt">'+n.toolbar.fontSize+"</span>"+t.arrow_down],fontColor:["",n.toolbar.fontColor,"fontColor","submenu",t.font_color],hiliteColor:["",n.toolbar.hiliteColor,"hiliteColor","submenu",t.highlight_color],align:["se-btn-align",n.toolbar.align,"align","submenu",e.rtl?t.align_right:t.align_left],list:["",n.toolbar.list,"list","submenu",t.list_number],horizontalRule:["btn_line",n.toolbar.horizontalRule,"horizontalRule","submenu",t.horizontal_rule],table:["",n.toolbar.table,"table","submenu",t.table],lineHeight:["",n.toolbar.lineHeight,"lineHeight","submenu",t.line_height],template:["",n.toolbar.template,"template","submenu",t.template],paragraphStyle:["",n.toolbar.paragraphStyle,"paragraphStyle","submenu",t.paragraph_style],textStyle:["",n.toolbar.textStyle,"textStyle","submenu",t.text_style],link:["",n.toolbar.link,"link","dialog",t.link],image:["",n.toolbar.image,"image","dialog",t.image],video:["",n.toolbar.video,"video","dialog",t.video],audio:["",n.toolbar.audio,"audio","dialog",t.audio],math:["",n.toolbar.math,"math","dialog",t.math],imageGallery:["",n.toolbar.imageGallery,"imageGallery","fileBrowser",t.image_gallery]}},_createModuleGroup:function(){const e=L.createElement("DIV");e.className="se-btn-module se-btn-module-border";const t=L.createElement("UL");return t.className="se-menu-list",e.appendChild(t),{div:e,ul:t}},_createButton:function(e,t,n,i,l,o,s){const a=L.createElement("LI"),r=L.createElement("BUTTON"),c=t||n;return r.setAttribute("type","button"),r.setAttribute("class","se-btn"+(e?" "+e:"")+" se-tooltip"),r.setAttribute("data-command",n),r.setAttribute("data-display",i),r.setAttribute("aria-label",c.replace(/<span .+<\/span>/,"")),r.setAttribute("tabindex","-1"),l||(l='<span class="se-icon-text">!</span>'),/^default\./i.test(l)&&(l=s[l.replace(/^default\./i,"")]),/^text\./i.test(l)&&(l=l.replace(/^text\./i,""),r.className+=" se-btn-more-text"),l+='<span class="se-tooltip-inner"><span class="se-tooltip-text">'+c+"</span></span>",o&&r.setAttribute("disabled",!0),r.innerHTML=l,a.appendChild(r),{li:a,button:r}},_createToolBar:function(e,t,n,i){const l=e.createElement("DIV");l.className="se-toolbar-separator-vertical";const o=e.createElement("DIV");o.className="se-toolbar sun-editor-common";const s=e.createElement("DIV");s.className="se-btn-tray",o.appendChild(s),t=JSON.parse(JSON.stringify(t));const a=i.icons,r=this._defaultButtons(i),c={},d=[];let u=null,h=null,g=null,p=null,m="",f=!1;const _=L.createElement("DIV");_.className="se-toolbar-more-layer";e:for(let i,o,b,v,y,C=0;C<t.length;C++)if(i=!1,y="",v=t[C],g=this._createModuleGroup(),"object"==typeof v){for(let e,l=0;l<v.length;l++){if(h=v[l],e=!1,/^\%\d+/.test(h)&&0===l){v[0]=h.replace(/[^\d]/g,""),d.push(v),t.splice(C--,1);continue e}if("object"==typeof h)"function"==typeof h.add?(m=h.name,u=r[m],n[m]=h):(m=h.name,u=[h.buttonClass,h.title,h.name,h.dataDisplay,h.innerHTML,h._disabled]);else{if(/^\-/.test(h)){y=h.substr(1),g.div.className+=" module-float-"+y;continue}if(/^\#/.test(h)){"fix"===h.substr(1)&&(g.ul.className+=" se-menu-dir-fix");continue}if(/^\:/.test(h)){e=!0;const t=h.match(/^\:([^\-]+)\-([^\-]+)\-([^\-]+)/);b="__se__"+t[1].trim();u=["se-btn-more",t[2].trim(),b,"MORE",t[3].trim()]}else u=r[h];if(m=h,!u){const e=n[m];if(!e)throw Error("[SUNEDITOR.create.toolbar.fail] The button name of a plugin that does not exist. ["+m+"]");u=[e.buttonClass,e.title,e.name,e.display,e.innerHTML,e._disabled]}}p=this._createButton(u[0],u[1],u[2],u[3],u[4],u[5],a),(i?o:g.ul).appendChild(p.li),n[m]&&(c[m]=p.button),e&&(i=!0,o=L.createElement("DIV"),o.className="se-more-layer "+b,o.innerHTML='<div class="se-more-form"><ul class="se-menu-list"'+(y?' style="float: '+y+';"':"")+"></ul></div>",_.appendChild(o),o=o.firstElementChild.firstElementChild)}if(f){const e=l.cloneNode(!1);s.appendChild(e)}s.appendChild(g.div),f=!0}else if(/^\/$/.test(v)){const t=e.createElement("DIV");t.className="se-btn-module-enter",s.appendChild(t),f=!1}switch(s.children.length){case 0:s.style.display="none";break;case 1:L.removeClass(s.firstElementChild,"se-btn-module-border");break;default:if(i.rtl){const e=l.cloneNode(!1);e.style.float=s.lastElementChild.style.float,s.appendChild(e)}}d.length>0&&d.unshift(t),_.children.length>0&&s.appendChild(_);const b=e.createElement("DIV");b.className="se-menu-tray",o.appendChild(b);const v=e.createElement("DIV");return v.className="se-toolbar-cover",o.appendChild(v),i.hideToolbar&&(o.style.display="none"),{element:o,plugins:n,pluginCallButtons:c,responsiveButtons:d,_menuTray:b,_buttonTray:s}}};var A=function(e,t,n){return{element:{originElement:e,topArea:t._top,relative:t._relative,toolbar:t._toolBar,_toolbarShadow:t._toolbarShadow,_buttonTray:t._toolBar.querySelector(".se-btn-tray"),_menuTray:t._menuTray,resizingBar:t._resizingBar,navigation:t._navigation,charWrapper:t._charWrapper,charCounter:t._charCounter,editorArea:t._editorArea,wysiwygFrame:t._wysiwygArea,wysiwyg:t._wysiwygArea,code:t._codeArea,placeholder:t._placeholder,loading:t._loading,lineBreaker:t._lineBreaker,lineBreaker_t:t._lineBreaker_t,lineBreaker_b:t._lineBreaker_b,resizeBackground:t._resizeBack,_stickyDummy:t._stickyDummy,_arrow:t._arrow,_focusTemp:t._focusTemp},tool:{cover:t._toolBar.querySelector(".se-toolbar-cover"),bold:t._toolBar.querySelector('[data-command="bold"]'),underline:t._toolBar.querySelector('[data-command="underline"]'),italic:t._toolBar.querySelector('[data-command="italic"]'),strike:t._toolBar.querySelector('[data-command="strike"]'),sub:t._toolBar.querySelector('[data-command="SUB"]'),sup:t._toolBar.querySelector('[data-command="SUP"]'),undo:t._toolBar.querySelector('[data-command="undo"]'),redo:t._toolBar.querySelector('[data-command="redo"]'),save:t._toolBar.querySelector('[data-command="save"]'),outdent:t._toolBar.querySelector('[data-command="outdent"]'),indent:t._toolBar.querySelector('[data-command="indent"]'),fullScreen:t._toolBar.querySelector('[data-command="fullScreen"]'),showBlocks:t._toolBar.querySelector('[data-command="showBlocks"]'),codeView:t._toolBar.querySelector('[data-command="codeView"]'),dir:t._toolBar.querySelector('[data-command="dir"]'),dir_ltr:t._toolBar.querySelector('[data-command="dir_ltr"]'),dir_rtl:t._toolBar.querySelector('[data-command="dir_rtl"]')},options:n,option:n}},z={name:"notice",add:function(e){const t=e.context;t.notice={};let n=e.util.createElement("DIV"),i=e.util.createElement("SPAN"),l=e.util.createElement("BUTTON");n.className="se-notice",l.className="close",l.setAttribute("aria-label","Close"),l.setAttribute("title",e.lang.dialogBox.close),l.innerHTML=e.icons.cancel,n.appendChild(i),n.appendChild(l),t.notice.modal=n,t.notice.message=i,l.addEventListener("click",this.onClick_cancel.bind(e)),t.element.editorArea.appendChild(n),n=null},onClick_cancel:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.notice.close.call(this)},open:function(e){this.context.notice.message.textContent=e,this.context.notice.modal.style.display="block"},close:function(){this.context.notice.modal.style.display="none"}},M={init:function(e){return{create:function(t,n){return this.create(t,n,e)}.bind(this)}},create:function(e,t,n){L._propertiesInit(),"object"!=typeof t&&(t={}),n&&(t=[n,t].reduce((function(e,t){for(let n in t)if(L.hasOwn(t,n))if("plugins"===n&&t[n]&&e[n]){let i=e[n],l=t[n];i=i.length?i:Object.keys(i).map((function(e){return i[e]})),l=l.length?l:Object.keys(l).map((function(e){return l[e]})),e[n]=l.filter((function(e){return-1===i.indexOf(e)})).concat(i)}else e[n]=t[n];return e}),{}));const i="string"==typeof e?document.getElementById(e):e;if(!i){if("string"==typeof e)throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:"'+e+'")');throw Error("[SUNEDITOR.create.fail] suneditor requires textarea's element or id value")}const l=B.init(i,t);if(l.constructed._top.id&&document.getElementById(l.constructed._top.id))throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:"'+l.constructed._top.id+'")');return function(e,t,n,i,l,o){const s=e.element.originElement.ownerDocument||document,a=s.defaultView||window,r=L,c=l.icons,d={_d:s,_w:a,_parser:new a.DOMParser,_prevRtl:l.rtl,_editorHeight:0,_editorHeightPadding:0,_listCamel:l.__listCommonStyle,_listKebab:r.camelToKebabCase(l.__listCommonStyle),__focusTemp:e.element._focusTemp,_wd:null,_ww:null,_shadowRoot:null,_shadowRootControllerEventTarget:null,util:r,functions:null,options:null,wwComputedStyle:null,notice:z,icons:c,history:null,context:e,pluginCallButtons:t,plugins:n||{},initPlugins:{},_targetPlugins:{},_menuTray:{},lang:i,effectNode:null,submenu:null,container:null,_submenuName:"",_bindedSubmenuOff:null,_bindedContainerOff:null,submenuActiveButton:null,containerActiveButton:null,controllerArray:[],currentControllerName:"",currentControllerTarget:null,currentFileComponentInfo:null,codeViewDisabledButtons:[],resizingDisabledButtons:[],_moreLayerActiveButton:null,_htmlCheckWhitelistRegExp:null,_htmlCheckBlacklistRegExp:null,_disallowedTextTagsRegExp:null,editorTagsWhitelistRegExp:null,editorTagsBlacklistRegExp:null,pasteTagsWhitelistRegExp:null,pasteTagsBlacklistRegExp:null,hasFocus:!1,isDisabled:!1,isReadOnly:!1,_attributesWhitelistRegExp:null,_attributesWhitelistRegExp_all_data:null,_attributesBlacklistRegExp:null,_attributesTagsWhitelist:null,_attributesTagsBlacklist:null,_bindControllersOff:null,_isInline:null,_isBalloon:null,_isBalloonAlways:null,_inlineToolbarAttr:{top:"",width:"",isShow:!1},_notHideToolbar:!1,_sticky:!1,_antiBlur:!1,_lineBreaker:null,_lineBreakerButton:null,_componentsInfoInit:!0,_componentsInfoReset:!1,activePlugins:null,managedTagsInfo:null,_charTypeHTML:!1,_fileInfoPluginsCheck:null,_fileInfoPluginsReset:null,_fileManager:{tags:null,regExp:null,queryString:null,pluginRegExp:null,pluginMap:null},commandMap:{},_commandMapStyles:{STRONG:["font-weight"],U:["text-decoration"],EM:["font-style"],DEL:["text-decoration"]},_styleCommandMap:null,_cleanStyleRegExp:{div:new a.RegExp("\\s*[^-a-zA-Z](.+)\\s*:[^;]+(?!;)*","ig"),span:new a.RegExp("\\s*[^-a-zA-Z](font-family|font-size|color|background-color)\\s*:[^;]+(?!;)*","ig"),format:new a.RegExp("\\s*[^-a-zA-Z](text-align|margin-left|margin-right|width|height|line-height)\\s*:[^;]+(?!;)*","ig"),fontSizeUnit:new a.RegExp("\\d+"+l.fontSizeUnit+"$","i")},_variable:{isChanged:!1,isCodeView:!1,isFullScreen:!1,innerHeight_fullScreen:0,resizeClientY:0,tabSize:4,codeIndent:2,minResizingSize:r.getNumber(e.element.wysiwygFrame.style.minHeight||"65",0),currentNodes:[],currentNodesMap:[],_range:null,_selectionNode:null,_originCssText:e.element.topArea.style.cssText,_bodyOverflow:"",_editorAreaOriginCssText:"",_wysiwygOriginCssText:"",_codeOriginCssText:"",_fullScreenAttrs:{sticky:!1,balloon:!1,inline:!1},_lineBreakComp:null,_lineBreakDir:""},_formatAttrsTemp:null,_saveButtonStates:function(){this.allCommandButtons||(this.allCommandButtons={});const e=this.context.element._buttonTray.querySelectorAll(".se-menu-list button[data-display]");for(let t,n,i=0;i<e.length;i++)t=e[i],n=t.getAttribute("data-command"),this.allCommandButtons[n]=t},_recoverButtonStates:function(){if(this.allCommandButtons){const e=this.context.element._buttonTray.querySelectorAll(".se-menu-list button[data-display]");for(let t,n,i,l=0;l<e.length;l++)t=e[l],n=t.getAttribute("data-command"),i=this.allCommandButtons[n],i&&(t.parentElement.replaceChild(i,t),this.context.tool[n]&&(this.context.tool[n]=i))}},callPlugin:function(e,n,i){if(i=i||t[e],!this.plugins[e])throw Error('[SUNEDITOR.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:"'+e+'")');this.initPlugins[e]?"object"==typeof this._targetPlugins[e]&&i&&this.initMenuTarget(e,i,this._targetPlugins[e]):(this.plugins[e].add(this,i),this.initPlugins[e]=!0),this.plugins[e].active&&!this.commandMap[e]&&i&&(this.commandMap[e]=i,this.activePlugins.push(e)),"function"==typeof n&&n()},addModule:function(e){for(let t,n=0,i=e.length;n<i;n++)t=e[n].name,this.plugins[t]||(this.plugins[t]=e[n]),this.initPlugins[t]||(this.initPlugins[t]=!0,"function"==typeof this.plugins[t].add&&this.plugins[t].add(this))},getGlobalScrollOffset:function(){let t=0,n=0,i=e.element.topArea;for(;i;)t+=i.scrollTop,n+=i.scrollLeft,i=i.parentElement;for(i=this._shadowRoot?this._shadowRoot.host:null;i;)t+=i.scrollTop,n+=i.scrollLeft,i=i.parentElement;return{top:t,left:n}},initMenuTarget:function(t,n,i){n?(e.element._menuTray.appendChild(i),this._targetPlugins[t]=!0,this._menuTray[n.getAttribute("data-command")]=i):this._targetPlugins[t]=i},submenuOn:function(e){this._bindedSubmenuOff&&this._bindedSubmenuOff(),this._bindControllersOff&&this.controllersOff();const t=this._submenuName=e.getAttribute("data-command"),n=this.submenu=this._menuTray[t];this.submenuActiveButton=e,this._setMenuPosition(e,n),this._bindedSubmenuOff=this.submenuOff.bind(this),this.addDocEvent("mousedown",this._bindedSubmenuOff,!1),this.plugins[t].on&&this.plugins[t].on.call(this),this._antiBlur=!0},submenuOff:function(){this.removeDocEvent("mousedown",this._bindedSubmenuOff),this._bindedSubmenuOff=null,this.submenu&&(this._submenuName="",this.submenu.style.display="none",this.submenu=null,r.removeClass(this.submenuActiveButton,"on"),this.submenuActiveButton=null,this._notHideToolbar=!1),this._antiBlur=!1},moreLayerOff:function(){if(this._moreLayerActiveButton){e.element.toolbar.querySelector("."+this._moreLayerActiveButton.getAttribute("data-command")).style.display="none",r.removeClass(this._moreLayerActiveButton,"on"),this._moreLayerActiveButton=null}},containerOn:function(e){this._bindedContainerOff&&this._bindedContainerOff();const t=this._containerName=e.getAttribute("data-command"),n=this.container=this._menuTray[t];this.containerActiveButton=e,this._setMenuPosition(e,n),this._bindedContainerOff=this.containerOff.bind(this),this.addDocEvent("mousedown",this._bindedContainerOff,!1),this.plugins[t].on&&this.plugins[t].on.call(this),this._antiBlur=!0},containerOff:function(){this.removeDocEvent("mousedown",this._bindedContainerOff),this._bindedContainerOff=null,this.container&&(this._containerName="",this.container.style.display="none",this.container=null,r.removeClass(this.containerActiveButton,"on"),this.containerActiveButton=null,this._notHideToolbar=!1),this._antiBlur=!1},_setMenuPosition:function(t,n){n.style.visibility="hidden",n.style.display="block",n.style.height="",r.addClass(t,"on");const i=this.context.element.toolbar,o=i.offsetWidth,s=u._getEditorOffsets(e.element.toolbar),c=n.offsetWidth,d=t.parentElement.offsetLeft+3;if(l.rtl){const e=t.offsetWidth,i=c>e?c-e:0,l=i>0?0:e-c;n.style.left=d-i+l+"px",s.left>u._getEditorOffsets(n).left&&(n.style.left="0px")}else{const e=o<=c?0:o-(d+c);n.style.left=e<0?d+e+"px":d+"px"}let h=0,g=t;for(;g&&g!==i;)h+=g.offsetTop,g=g.offsetParent;const p=h;this._isBalloon?h+=i.offsetTop+t.offsetHeight:h-=t.offsetHeight;const m=s.top,f=n.offsetHeight,_=this.getGlobalScrollOffset().top,b=a.innerHeight-(m-_+p+t.parentElement.offsetHeight);if(b<f){let e=-1*(f-p+3);const i=m-_+e,l=f+(i<0?i:0);l>b?(n.style.height=l+"px",e=-1*(l-p+3)):(n.style.height=b+"px",e=p+t.parentElement.offsetHeight),n.style.top=e+"px"}else n.style.top=p+t.parentElement.offsetHeight+"px";n.style.visibility=""},controllersOn:function(){this._bindControllersOff&&this._bindControllersOff(),this.controllerArray=[];for(let e,t=0;t<arguments.length;t++)e=arguments[t],e&&("string"!=typeof e?"function"!=typeof e?r.hasClass(e,"se-controller")?(e.style&&(e.style.display="block",this._shadowRoot&&-1===this._shadowRootControllerEventTarget.indexOf(e)&&(e.addEventListener("mousedown",(function(e){e.preventDefault(),e.stopPropagation()})),this._shadowRootControllerEventTarget.push(e))),this.controllerArray.push(e)):(this.currentControllerTarget=e,this.currentFileComponentInfo=this.getFileComponent(e)):this.controllerArray.push(e):this.currentControllerName=e);this._bindControllersOff=this.controllersOff.bind(this),this.addDocEvent("mousedown",this._bindControllersOff,!1),this.addDocEvent("keydown",this._bindControllersOff,!1),this._antiBlur=!0,"function"==typeof h.showController&&h.showController(this.currentControllerName,this.controllerArray,this)},controllersOff:function(t){this._lineBreaker.style.display="none";const n=this.controllerArray.length;if(t&&t.target&&n>0)for(let e=0;e<n;e++)if("function"==typeof this.controllerArray[e].contains&&this.controllerArray[e].contains(t.target))return;if((!this._fileManager.pluginRegExp.test(this.currentControllerName)||!t||"keydown"!==t.type||27===t.keyCode)&&(e.element.lineBreaker_t.style.display=e.element.lineBreaker_b.style.display="none",this._variable._lineBreakComp=null,this.currentControllerName="",this.currentControllerTarget=null,this.currentFileComponentInfo=null,this.effectNode=null,this._bindControllersOff)){if(this.removeDocEvent("mousedown",this._bindControllersOff),this.removeDocEvent("keydown",this._bindControllersOff),this._bindControllersOff=null,n>0){for(let e=0;e<n;e++)"function"==typeof this.controllerArray[e]?this.controllerArray[e]():this.controllerArray[e].style.display="none";this.controllerArray=[]}this._antiBlur=!1}},setControllerPosition:function(t,n,i,o){l.rtl&&(o.left*=-1);const s=r.getOffset(n,e.element.wysiwygFrame);t.style.visibility="hidden",t.style.display="block";const a="top"===i?-(t.offsetHeight+2):n.offsetHeight+12;t.style.top=s.top+a+o.top+"px";const c=s.left-e.element.wysiwygFrame.scrollLeft+o.left,d=t.offsetWidth,u=n.offsetWidth,h=r.hasClass(t.firstElementChild,"se-arrow")?t.firstElementChild:null;if(l.rtl){const n=d>u?d-u:0,i=n>0?0:u-d;t.style.left=c-n+i+"px",n>0&&h&&(h.style.left=(d-14<10+n?d-14:10+n)+"px");const l=e.element.wysiwygFrame.offsetLeft-t.offsetLeft;l>0&&(t.style.left="0px",h&&(h.style.left=l+"px"))}else{t.style.left=c+"px";const n=e.element.wysiwygFrame.offsetWidth-(t.offsetLeft+d);n<0?(t.style.left=t.offsetLeft+n+"px",h&&(h.style.left=20-n+"px")):h&&(h.style.left="20px")}t.style.visibility=""},execCommand:function(e,t,n){this._wd.execCommand(e,t,"formatBlock"===e?"<"+n+">":n),this.history.push(!0)},nativeFocus:function(){this.__focus(),this._editorRange()},__focus:function(){const t=r.getParentElement(this.getSelectionNode(),"figcaption");t?t.focus():e.element.wysiwyg.focus()},focus:function(){if("none"!==e.element.wysiwygFrame.style.display){if(l.iframe)this.nativeFocus();else try{const t=this.getRange();if(t.startContainer===t.endContainer&&r.isWysiwygDiv(t.startContainer)){const n=t.commonAncestorContainer.children[t.startOffset];if(!r.isFormatElement(n)&&!r.isComponent(n)){const t=r.createElement(l.defaultTag),i=r.createElement("BR");return t.appendChild(i),e.element.wysiwyg.insertBefore(t,n),void this.setRange(i,0,i,0)}}this.setRange(t.startContainer,t.startOffset,t.endContainer,t.endOffset)}catch(e){this.nativeFocus()}u._applyTagEffects(),this._isBalloon&&u._toggleToolbarBalloon()}},focusEdge:function(t){t||(t=e.element.wysiwyg.lastElementChild);const n=this.getFileComponent(t);n?this.selectComponent(n.target,n.pluginName):t?(t=r.getChildElement(t,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0))?this.setRange(t,t.textContent.length,t,t.textContent.length):this.nativeFocus():this.focus()},blur:function(){l.iframe?e.element.wysiwygFrame.blur():e.element.wysiwyg.blur()},setRange:function(e,t,n,i){if(!e||!n)return;t>e.textContent.length&&(t=e.textContent.length),i>n.textContent.length&&(i=n.textContent.length),r.isFormatElement(e)&&(e=e.childNodes[t]||e.childNodes[t-1]||e,t=t>0?1===e.nodeType?1:e.textContent?e.textContent.length:0:0),r.isFormatElement(n)&&(n=n.childNodes[i]||n.childNodes[i-1]||n,i=i>0?1===n.nodeType?1:n.textContent?n.textContent.length:0:0);const o=this._wd.createRange();try{o.setStart(e,t),o.setEnd(n,i)}catch(e){return console.warn("[SUNEDITOR.core.focus.error] "+e),void this.nativeFocus()}const s=this.getSelection();return s.removeAllRanges&&s.removeAllRanges(),s.addRange(o),this._rangeInfo(o,this.getSelection()),l.iframe&&this.__focus(),o},removeRange:function(){this._variable._range=null,this._variable._selectionNode=null,this.hasFocus&&this.getSelection().removeAllRanges(),this._setKeyEffect([])},getRange:function(){const t=this._variable._range||this._createDefaultRange(),n=this.getSelection();if(t.collapsed===n.isCollapsed||!e.element.wysiwyg.contains(n.focusNode))return t;if(n.rangeCount>0)return this._variable._range=n.getRangeAt(0),this._variable._range;{const e=n.anchorNode,t=n.focusNode,i=n.anchorOffset,l=n.focusOffset,o=r.compareElements(e,t),s=o.ancestor&&(0===o.result?i<=l:o.result>1);return this.setRange(s?e:t,s?i:l,s?t:e,s?l:i)}},getRange_addLine:function(t,n){if(this._selectionVoid(t)){const i=e.element.wysiwyg,o=r.createElement(l.defaultTag);o.innerHTML="<br>",i.insertBefore(o,n&&n!==i?n.nextElementSibling:i.firstElementChild),this.setRange(o.firstElementChild,0,o.firstElementChild,1),t=this._variable._range}return t},getSelection:function(){const t=this._shadowRoot&&this._shadowRoot.getSelection?this._shadowRoot.getSelection():this._ww.getSelection();return this._variable._range||e.element.wysiwyg.contains(t.focusNode)||(t.removeAllRanges(),t.addRange(this._createDefaultRange())),t},getSelectionNode:function(){if(e.element.wysiwyg.contains(this._variable._selectionNode)||this._editorRange(),!this._variable._selectionNode){const t=r.getChildElement(e.element.wysiwyg.firstChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1);if(t)return this._variable._selectionNode=t,t;this._editorRange()}return this._variable._selectionNode},_editorRange:function(){const e=this._wd.activeElement;if(r.isInputElement(e))return this._variable._selectionNode=e,e;const t=this.getSelection();if(!t)return null;let n=null;n=t.rangeCount>0?t.getRangeAt(0):this._createDefaultRange(),this._rangeInfo(n,t)},_rangeInfo:function(e,t){let n=null;this._variable._range=e,n=e.collapsed?r.isWysiwygDiv(e.commonAncestorContainer)&&e.commonAncestorContainer.children[e.startOffset]||e.commonAncestorContainer:t.extentNode||t.anchorNode,this._variable._selectionNode=n},_createDefaultRange:function(){const t=e.element.wysiwyg,n=this._wd.createRange();let i=t.firstElementChild,o=null;return i?(o=i.firstChild,o||(o=r.createElement("BR"),i.appendChild(o))):(i=r.createElement(l.defaultTag),o=r.createElement("BR"),i.appendChild(o),t.appendChild(i)),n.setStart(o,0),n.setEnd(o,0),n},_selectionVoid:function(e){const t=e.commonAncestorContainer;return r.isWysiwygDiv(e.startContainer)&&r.isWysiwygDiv(e.endContainer)||/FIGURE/i.test(t.nodeName)||this._fileManager.regExp.test(t.nodeName)||r.isMediaComponent(t)},_resetRangeToTextNode:function(){const t=this.getRange();if(this._selectionVoid(t))return!1;let n,i,o,s=t.startContainer,a=t.startOffset,c=t.endContainer,d=t.endOffset;if(r.isFormatElement(s))for(s.childNodes[a]?(s=s.childNodes[a]||s,a=0):(s=s.lastChild||s,a=s.textContent.length);s&&1===s.nodeType&&s.firstChild;)s=s.firstChild||s,a=0;if(r.isFormatElement(c)){for(c=c.childNodes[d]||c.lastChild||c;c&&1===c.nodeType&&c.lastChild;)c=c.lastChild;d=c.textContent.length}if(n=r.isWysiwygDiv(s)?e.element.wysiwyg.firstChild:s,i=a,r.isBreak(n)||1===n.nodeType&&n.childNodes.length>0){const e=r.isBreak(n);if(!e){for(;n&&!r.isBreak(n)&&1===n.nodeType;)n=n.childNodes[i]||n.nextElementSibling||n.nextSibling,i=0;let e=r.getFormatElement(n,null);e===r.getRangeFormatElement(e,null)&&(e=r.createElement(r.getParentElement(n,r.isCell)?"DIV":l.defaultTag),n.parentNode.insertBefore(e,n),e.appendChild(n))}if(r.isBreak(n)){const t=r.createTextNode(r.zeroWidthSpace);n.parentNode.insertBefore(t,n),n=t,e&&s===c&&(c=n,d=1)}}if(s=n,a=i,n=r.isWysiwygDiv(c)?e.element.wysiwyg.lastChild:c,i=d,r.isBreak(n)||1===n.nodeType&&n.childNodes.length>0){const e=r.isBreak(n);if(!e){for(;n&&!r.isBreak(n)&&1===n.nodeType&&(o=n.childNodes,0!==o.length);)n=o[i>0?i-1:i]||!/FIGURE/i.test(o[0].nodeName)?o[0]:n.previousElementSibling||n.previousSibling||s,i=i>0?n.textContent.length:i;let e=r.getFormatElement(n,null);e===r.getRangeFormatElement(e,null)&&(e=r.createElement(r.isCell(e)?"DIV":l.defaultTag),n.parentNode.insertBefore(e,n),e.appendChild(n))}if(r.isBreak(n)){const t=r.createTextNode(r.zeroWidthSpace);n.parentNode.insertBefore(t,n),n=t,i=1,e&&!n.previousSibling&&r.removeItem(c)}}return c=n,d=i,this.setRange(s,a,c,d),!0},getSelectedElements:function(t){if(!this._resetRangeToTextNode())return[];let n=this.getRange();if(r.isWysiwygDiv(n.startContainer)){const t=e.element.wysiwyg.children;if(0===t.length)return[];this.setRange(t[0],0,t[t.length-1],t[t.length-1].textContent.trim().length),n=this.getRange()}const i=n.startContainer,l=n.endContainer,o=n.commonAncestorContainer,s=r.getListChildren(o,(function(e){return t?t(e):r.isFormatElement(e)}));if(r.isWysiwygDiv(o)||r.isRangeFormatElement(o)||s.unshift(r.getFormatElement(o,null)),i===l||1===s.length)return s;let a=r.getFormatElement(i,null),c=r.getFormatElement(l,null),d=null,u=null;const h=function(e){return!r.isTable(e)||/^TABLE$/i.test(e.nodeName)};let g=r.getRangeFormatElement(a,h),p=r.getRangeFormatElement(c,h);r.isTable(g)&&r.isListCell(g.parentNode)&&(g=g.parentNode),r.isTable(p)&&r.isListCell(p.parentNode)&&(p=p.parentNode);const m=g===p;for(let e,t=0,n=s.length;t<n;t++)if(e=s[t],a===e||!m&&e===g)d=t;else if(c===e||!m&&e===p){u=t;break}return null===d&&(d=0),null===u&&(u=s.length-1),s.slice(d,u+1)},getSelectedElementsAndComponents:function(e){const t=this.getRange().commonAncestorContainer,n=r.getParentElement(t,r.isComponent),i=r.isTable(t)?this.getSelectedElements(null):this.getSelectedElements(function(e){const t=this.getParentElement(e,this.isComponent);return this.isFormatElement(e)&&(!t||t===n)||this.isComponent(e)&&!this.getFormatElement(e)}.bind(r));if(e)for(let e=0,t=i.length;e<t;e++)for(let n=e-1;n>=0;n--)if(i[n].contains(i[e])){i.splice(e,1),e--,t--;break}return i},isEdgePoint:function(e,t,n){return"end"!==n&&0===t||(!n||"front"!==n)&&!e.nodeValue&&1===t||(!n||"end"===n)&&!!e.nodeValue&&t===e.nodeValue.length},_isEdgeFormat:function(e,t,n){if(!this.isEdgePoint(e,t,n))return!1;const i=[];for(n="front"===n?"previousSibling":"nextSibling";e&&!r.isFormatElement(e)&&!r.isWysiwygDiv(e);){if(e[n]&&(!r.isBreak(e[n])||e[n][n]))return null;1===e.nodeType&&i.push(e.cloneNode(!1)),e=e.parentNode}return i},showLoading:function(){e.element.loading.style.display="block"},closeLoading:function(){e.element.loading.style.display="none"},appendFormatTag:function(e,t){if(!e||!e.parentNode)return null;const n=r.getFormatElement(this.getSelectionNode(),null);let i=null;if(!r.isFormatElement(e)&&r.isFreeFormatElement(n||e.parentNode))i=r.createElement("BR");else{const e=t?"string"==typeof t?t:t.nodeName:!r.isFormatElement(n)||r.isRangeFormatElement(n)||r.isFreeFormatElement(n)?l.defaultTag:n.nodeName;i=r.createElement(e),i.innerHTML="<br>",(t&&"string"!=typeof t||!t&&r.isFormatElement(n))&&r.copyTagAttributes(i,t||n,["id"])}return r.isCell(e)?e.insertBefore(i,e.nextElementSibling):e.parentNode.insertBefore(i,e.nextElementSibling),i},insertComponent:function(e,t,n,i){if(this.isReadOnly||n&&!this.checkCharCount(e,null))return null;const l=this.removeNode();this.getRange_addLine(this.getRange(),l.container);let o=null,s=this.getSelectionNode(),a=r.getFormatElement(s,null);if(r.isListCell(a))this.insertNode(e,s===a?null:l.container.nextSibling,!1),e.nextSibling||e.parentNode.appendChild(r.createElement("BR"));else{if(this.getRange().collapsed&&(3===l.container.nodeType||r.isBreak(l.container))){const e=r.getParentElement(l.container,function(e){return this.isRangeFormatElement(e)}.bind(r));o=r.splitElement(l.container,l.offset,e?r.getElementDepth(e)+1:0),o&&(a=o.previousSibling)}this.insertNode(e,r.isRangeFormatElement(a)?null:a,!1),a&&r.onlyZeroWidthSpace(a)&&r.removeItem(a)}if(!i){this.setRange(e,0,e,0);const t=this.getFileComponent(e);t?this.selectComponent(t.target,t.pluginName):o&&(o=r.getEdgeChildNodes(o,null).sc||o,this.setRange(o,0,o,0))}return t||this.history.push(1),o||e},getFileComponent:function(e){if(!this._fileManager.queryString||!e)return null;let t,n;return(/^FIGURE$/i.test(e.nodeName)||/se-component/.test(e.className))&&(t=e.querySelector(this._fileManager.queryString)),!t&&e.nodeName&&this._fileManager.regExp.test(e.nodeName)&&(t=e),t&&(n=this._fileManager.pluginMap[t.nodeName.toLowerCase()],n)?{target:t,component:r.getParentElement(t,r.isComponent),pluginName:n}:null},selectComponent:function(e,t){if(r.isUneditableComponent(r.getParentElement(e,r.isComponent))||r.isUneditableComponent(e))return!1;this.hasFocus||this.focus();const n=this.plugins[t];n&&a.setTimeout(function(){"function"==typeof n.select&&this.callPlugin(t,n.select.bind(this,e),null),this._setComponentLineBreaker(e)}.bind(this))},_setComponentLineBreaker:function(t){this._lineBreaker.style.display="none";const n=r.getParentElement(t,r.isComponent),i=e.element.lineBreaker_t.style,l=e.element.lineBreaker_b.style,o="block"===this.context.resizing.resizeContainer.style.display?this.context.resizing.resizeContainer:t,s=r.isListCell(n.parentNode);let a,c,d;(s?n.previousSibling:r.isFormatElement(n.previousElementSibling))?i.display="none":(this._variable._lineBreakComp=n,c=e.element.wysiwyg.scrollTop,a=r.getOffset(t,e.element.wysiwygFrame).top+c,d=o.offsetWidth/2/2,i.top=a-c-12+"px",i.left=r.getOffset(o).left+d+"px",i.display="block"),(s?n.nextSibling:r.isFormatElement(n.nextElementSibling))?l.display="none":(a||(this._variable._lineBreakComp=n,c=e.element.wysiwyg.scrollTop,a=r.getOffset(t,e.element.wysiwygFrame).top+c,d=o.offsetWidth/2/2),l.top=a+o.offsetHeight-c-12+"px",l.left=r.getOffset(o).left+o.offsetWidth-d-24+"px",l.display="block")},_checkDuplicateNode:function(e,t){!function e(n){d._dupleCheck(n,t);const i=n.childNodes;for(let t=0,n=i.length;t<n;t++)e(i[t])}(e)},_dupleCheck:function(e,t){if(!r.isTextStyleElement(e))return;const n=(e.style.cssText.match(/[^;]+;/g)||[]).map((function(e){return e.trim()})),i=e.nodeName;if(/^span$/i.test(i)&&0===n.length)return e;let l=!1;return function t(o){if(!r.isWysiwygDiv(o)&&r.isTextStyleElement(o)){if(o.nodeName===i){l=!0;const t=o.style.cssText.match(/[^;]+;/g)||[];for(let e,i=0,l=t.length;i<l;i++)(e=n.indexOf(t[i].trim()))>-1&&n.splice(e,1);for(let t=0,n=o.classList.length;t<n;t++)e.classList.remove(o.classList[t])}t(o.parentElement)}}(t),l&&((e.style.cssText=n.join(" "))||(e.setAttribute("style",""),e.removeAttribute("style")),e.attributes.length||e.setAttribute("data-se-duple","true")),e},insertNode:function(t,n,i){if(this.isReadOnly||i&&!this.checkCharCount(t,null))return null;let o,s,a,c=this.getRange(),d=r.isListCell(c.commonAncestorContainer)?c.commonAncestorContainer:r.getFormatElement(this.getSelectionNode(),null),u=r.isListCell(d)&&(r.isListCell(t)||r.isList(t)),h=null;const g=r.isFreeFormatElement(d),p=!g&&(r.isFormatElement(t)||r.isRangeFormatElement(t))||r.isComponent(t);if(u&&(a=n||r.isList(t)?d.lastChild:d.nextElementSibling,h=r.isList(t)?d:(a||d).parentNode),!n&&(p||r.isComponent(t)||r.isMedia(t))){const e=this.isEdgePoint(c.endContainer,c.endOffset,"end"),t=this.removeNode(),i=t.container,l=i===t.prevContainer&&c.collapsed?null:t.prevContainer;if(u&&l)if(h=3===l.nodeType?l.parentNode:l,h.contains(i)){let e=!0;for(a=i;a.parentNode&&a.parentNode!==h;)a=a.parentNode,e=!1;e&&i===l&&(a=a.nextSibling)}else a=null;else if(u&&r.isListCell(i)&&!d.parentElement)d=r.createElement("LI"),h.appendChild(d),i.appendChild(h),a=null;else if(3===i.nodeType||r.isBreak(i)||u){const l=r.getParentElement(i,function(e){return this.isRangeFormatElement(e)||this.isListCell(e)}.bind(r));if(n=r.splitElement(i,t.offset,l?r.getElementDepth(l)+1:0))if(u){if(d.contains(i)){const t=r.isList(d.lastElementChild);let i=null;e||(i=d.cloneNode(!1),i.appendChild(n.textContent.trim()?n:r.createTextNode(r.zeroWidthSpace))),t&&(i||(i=d.cloneNode(!1),i.appendChild(r.createTextNode(r.zeroWidthSpace))),i.appendChild(d.lastElementChild)),i&&(d.parentNode.insertBefore(i,d.nextElementSibling),a=n=i)}}else n=n.previousSibling;else a=n=d}}c=n||p?this.getRange():this.getRange_addLine(this.getRange(),null);const m=c.commonAncestorContainer,f=c.startOffset,_=c.endOffset,b=c.startContainer===m&&r.isFormatElement(m),v=b&&(m.childNodes[f]||m.childNodes[0])||c.startContainer,y=b&&(m.childNodes[_]||m.childNodes[m.childNodes.length-1])||c.endContainer;if(!u)if(n)o=n.parentNode,n=n.nextSibling,s=!0;else if(o=v,3===v.nodeType&&(o=v.parentNode),c.collapsed)if(3===m.nodeType)n=m.textContent.length>_?m.splitText(_):m.nextSibling;else if(r.isBreak(o))n=o,o=o.parentNode;else{let e=o.childNodes[f];const i=e&&3===e.nodeType&&r.onlyZeroWidthSpace(e)&&r.isBreak(e.nextSibling)?e.nextSibling:e;i?!i.nextSibling&&r.isBreak(i)?(o.removeChild(i),n=null):n=r.isBreak(i)&&!r.isBreak(t)?i:i.nextSibling:n=null}else{if(v===y){n=this.isEdgePoint(y,_)?y.nextSibling:y.splitText(_);let e=v;this.isEdgePoint(v,f)||(e=v.splitText(f)),o.removeChild(e),0===o.childNodes.length&&p&&(o.innerHTML="<br>")}else{const e=this.removeNode(),i=e.container,s=e.prevContainer;if(i&&0===i.childNodes.length&&p&&(r.isFormatElement(i)?i.innerHTML="<br>":r.isRangeFormatElement(i)&&(i.innerHTML="<"+l.defaultTag+"><br></"+l.defaultTag+">")),r.isListCell(i)&&3===t.nodeType)o=i,n=null;else if(!p&&s)if(o=3===s.nodeType?s.parentNode:s,o.contains(i)){let e=!0;for(n=i;n.parentNode&&n.parentNode!==o;)n=n.parentNode,e=!1;e&&i===s&&(n=n.nextSibling)}else n=null;else r.isWysiwygDiv(i)&&!r.isFormatElement(t)?(o=i.appendChild(r.createElement(l.defaultTag)),n=null):o=(n=p?y:i===s?i.nextSibling:i)&&n.parentNode?n.parentNode:m;for(;n&&!r.isFormatElement(n)&&n.parentNode!==m;)n=n.parentNode}}try{if(!u){if((r.isWysiwygDiv(n)||o===e.element.wysiwyg.parentNode)&&(o=e.element.wysiwyg,n=null),r.isFormatElement(t)||r.isRangeFormatElement(t)||!r.isListCell(o)&&r.isComponent(t)){const e=o;if(r.isList(n))o=n,n=null;else if(r.isListCell(n))o=n.previousElementSibling||n;else if(!s&&!n){const e=this.removeNode(),t=3===e.container.nodeType?r.isListCell(r.getFormatElement(e.container,null))?e.container:r.getFormatElement(e.container,null)||e.container.parentNode:e.container,i=r.isWysiwygDiv(t)||r.isRangeFormatElement(t);o=i?t:t.parentNode,n=i?null:t.nextSibling}0===e.childNodes.length&&o!==e&&r.removeItem(e)}if(!p||g||r.isRangeFormatElement(o)||r.isListCell(o)||r.isWysiwygDiv(o)||(n=o.nextElementSibling,o=o.parentNode),r.isWysiwygDiv(o)&&(3===t.nodeType||r.isBreak(t))){const e=r.createElement(l.defaultTag);e.appendChild(t),t=e}}if(u?h.parentNode?(o=h,n=a):(o=e.element.wysiwyg,n=null):n=o===n?o.lastChild:n,r.isListCell(t)&&!r.isList(o)){if(r.isListCell(o))n=o.nextElementSibling,o=o.parentNode;else{const e=r.createElement("ol");o.insertBefore(e,n),o=e,n=null}u=!0}if(this._checkDuplicateNode(t,o),o.insertBefore(t,n),u)if(r.onlyZeroWidthSpace(d.textContent.trim()))r.removeItem(d),t=t.lastChild;else{const e=r.getArrayItem(d.children,r.isList);e&&(t!==e?(t.appendChild(e),t=e.previousSibling):(o.appendChild(t),t=o),r.onlyZeroWidthSpace(d.textContent.trim())&&r.removeItem(d))}}catch(e){o.appendChild(t),console.warn("[SUNEDITOR.insertNode.warn] "+e)}finally{const e=o.querySelectorAll("[data-se-duple]");if(e.length>0)for(let n,i,l,o,s=0,a=e.length;s<a;s++){for(n=e[s],l=n.childNodes,o=n.parentNode;l[0];)i=l[0],o.insertBefore(i,n);n===t&&(t=i),r.removeItem(n)}if((r.isFormatElement(t)||r.isComponent(t))&&v===y){const e=r.getFormatElement(m,null);e&&1===e.nodeType&&r.isEmptyLine(e)&&r.removeItem(e)}if(g&&(r.isFormatElement(t)||r.isRangeFormatElement(t))&&(t=this._setIntoFreeFormat(t)),!r.isComponent(t)){let e=1;if(3===t.nodeType){const e=t.previousSibling,n=t.nextSibling,i=!e||1===e.nodeType||r.onlyZeroWidthSpace(e)?"":e.textContent,l=!n||1===n.nodeType||r.onlyZeroWidthSpace(n)?"":n.textContent;e&&i.length>0&&(t.textContent=i+t.textContent,r.removeItem(e)),n&&n.length>0&&(t.textContent+=l,r.removeItem(n));const o={container:t,startOffset:i.length,endOffset:t.textContent.length-l.length};return this.setRange(t,o.startOffset,t,o.endOffset),o}if(!r.isBreak(t)&&!r.isListCell(t)&&r.isFormatElement(o)){let n=null;t.previousSibling&&!r.isBreak(t.previousSibling)||(n=r.createTextNode(r.zeroWidthSpace),t.parentNode.insertBefore(n,t)),t.nextSibling&&!r.isBreak(t.nextSibling)||(n=r.createTextNode(r.zeroWidthSpace),t.parentNode.insertBefore(n,t.nextSibling)),r._isIgnoreNodeChange(t)&&(t=t.nextSibling,e=0)}this.setRange(t,e,t,e)}return this.history.push(!0),t}},_setIntoFreeFormat:function(e){const t=e.parentNode;let n,i;for(;r.isFormatElement(e)||r.isRangeFormatElement(e);){for(n=e.childNodes,i=null;n[0];)if(i=n[0],r.isFormatElement(i)||r.isRangeFormatElement(i)){if(this._setIntoFreeFormat(i),!e.parentNode)break;n=e.childNodes}else t.insertBefore(i,e);0===e.childNodes.length&&r.removeItem(e),e=r.createElement("BR"),t.insertBefore(e,i.nextSibling)}return e},removeNode:function(){this._resetRangeToTextNode();const t=this.getRange();if(t.startContainer===t.endContainer){const e=r.getParentElement(t.startContainer,r.isMediaComponent);if(e){const t=r.createElement("BR"),n=r.createElement(l.defaultTag);return n.appendChild(t),r.changeElement(e,n),d.setRange(n,0,n,0),this.history.push(!0),{container:n,offset:0,prevContainer:null}}}const n=0===t.startOffset,i=d.isEdgePoint(t.endContainer,t.endOffset,"end");let o=null,s=null,a=null;n&&(s=r.getFormatElement(t.startContainer),s&&(o=s.previousElementSibling,s=o)),i&&(a=r.getFormatElement(t.endContainer),a=a?a.nextElementSibling:a);let c,u=0,h=t.startContainer,g=t.endContainer,p=t.startOffset,m=t.endOffset;const f=3===t.commonAncestorContainer.nodeType&&t.commonAncestorContainer.parentNode===h.parentNode?h.parentNode:t.commonAncestorContainer;if(f===h&&f===g&&(h=f.children[p],g=f.children[m],p=m=0),!h||!g)return{container:f,offset:0};if(h===g&&t.collapsed&&h.textContent&&r.onlyZeroWidthSpace(h.textContent.substr(p)))return{container:h,offset:p,prevContainer:h&&h.parentNode?h:null};let _=null,b=null;const v=r.getListChildNodes(f,null);let y=r.getArrayIndex(v,h),C=r.getArrayIndex(v,g);if(v.length>0&&y>-1&&C>-1){for(let e=y+1,t=h;e>=0;e--)v[e]===t.parentNode&&v[e].firstChild===t&&0===p&&(y=e,t=t.parentNode);for(let e=C-1,t=g;e>y;e--)v[e]===t.parentNode&&1===v[e].nodeType&&(v.splice(e,1),t=t.parentNode,--C)}else{if(0===v.length){if(r.isFormatElement(f)||r.isRangeFormatElement(f)||r.isWysiwygDiv(f)||r.isBreak(f)||r.isMedia(f))return{container:f,offset:0};if(3===f.nodeType)return{container:f,offset:m};v.push(f),h=g=f}else if(h=g=v[0],r.isBreak(h)||r.onlyZeroWidthSpace(h))return{container:r.isMedia(f)?f:h,offset:0};y=C=0}for(let e=y;e<=C;e++){const t=v[e];if(0===t.length||3===t.nodeType&&void 0===t.data)this._nodeRemoveListItem(t);else if(t!==h)if(t!==g)this._nodeRemoveListItem(t);else{if(1===g.nodeType){if(r.isComponent(g))continue;b=r.createTextNode(g.textContent)}else b=r.createTextNode(g.substringData(m,g.length-m));b.length>0?g.data=b.data:this._nodeRemoveListItem(g)}else{if(1===h.nodeType){if(r.isComponent(h))continue;_=r.createTextNode(h.textContent)}else t===g?(_=r.createTextNode(h.substringData(0,p)+g.substringData(m,g.length-m)),u=p):_=r.createTextNode(h.substringData(0,p));if(_.length>0?h.data=_.data:this._nodeRemoveListItem(h),t===g)break}}const w=r.getParentElement(g,"ul"),x=r.getParentElement(h,"li");if(w&&x&&x.contains(w)?(c=w.previousSibling,u=c.textContent.length):(c=g&&g.parentNode?g:h&&h.parentNode?h:t.endContainer||t.startContainer,u=n||i?i?c.textContent.length:0:u),!r.isWysiwygDiv(c)&&0===c.childNodes.length){const t=r.removeItemAllParents(c,null,null);t&&(c=t.sc||t.ec||e.element.wysiwyg)}return r.getFormatElement(c)||h&&h.parentNode||(a?(c=a,u=0):s&&(c=s,u=1)),this.setRange(c,u,c,u),this.history.push(!0),{container:c,offset:u,prevContainer:o}},_nodeRemoveListItem:function(e){const t=r.getFormatElement(e,null);r.removeItem(e),r.isListCell(t)&&(r.removeItemAllParents(t,null,null),t&&r.isList(t.firstChild)&&t.insertBefore(r.createTextNode(r.zeroWidthSpace),t.firstChild))},applyRangeFormatElement:function(e){this.getRange_addLine(this.getRange(),null);const t=this.getSelectedElementsAndComponents(!1);if(!t||0===t.length)return;e:for(let e,n,i,l,o,s,a=0,c=t.length;a<c;a++)if(e=t[a],r.isListCell(e))if(n=e.lastElementChild,n&&r.isListCell(e.nextElementSibling)&&t.indexOf(e.nextElementSibling)>-1&&(l=n.lastElementChild,t.indexOf(l)>-1)){let e=null;for(;e=l.lastElementChild;)if(r.isList(e)){if(!(t.indexOf(e.lastElementChild)>-1))continue e;l=e.lastElementChild}i=n.firstElementChild,o=t.indexOf(i),s=t.indexOf(l),t.splice(o,s-o+1),c=t.length}else;let n,i,l,o=t[t.length-1];n=r.isRangeFormatElement(o)||r.isFormatElement(o)?o:r.getRangeFormatElement(o,null)||r.getFormatElement(o,null),r.isCell(n)?(i=null,l=n):(i=n.nextSibling,l=n.parentNode);let s=r.getElementDepth(n),a=null;const c=[],d=function(e,t,n){let i=null;if(e!==t&&!r.isTable(t)){if(t&&r.getElementDepth(e)===r.getElementDepth(t))return n;i=r.removeItemAllParents(t,null,e)}return i?i.ec:n};for(let n,o,u,h,g,p,m,f=0,_=t.length;f<_;f++)if(n=t[f],o=n.parentNode,o&&!e.contains(o))if(u=r.getElementDepth(n),r.isList(o)){if(null===a&&(p?(a=p,m=!0,p=null):a=o.cloneNode(!1)),c.push(n),g=t[f+1],f===_-1||g&&g.parentNode!==o){g&&n.contains(g.parentNode)&&(p=g.parentNode.cloneNode(!1));let t,f=o.parentNode;for(;r.isList(f);)t=r.createElement(f.nodeName),t.appendChild(a),a=t,f=f.parentNode;const _=this.detachRangeFormatElement(o,c,null,!0,!0);s>=u?(s=u,l=_.cc,i=d(l,o,_.ec),i&&(l=i.parentNode)):l===_.cc&&(i=_.ec),l!==_.cc&&(h=d(l,_.cc,h),i=void 0!==h?h:_.cc);for(let e=0,t=_.removeArray.length;e<t;e++)a.appendChild(_.removeArray[e]);m||e.appendChild(a),p&&_.removeArray[_.removeArray.length-1].appendChild(p),a=null,m=!1}}else s>=u&&(s=u,l=o,i=n.nextSibling),e.appendChild(n),l!==o&&(h=d(l,o),void 0!==h&&(i=h));if(this.effectNode=null,r.mergeSameTags(e,null,!1),r.mergeNestedTags(e,function(e){return this.isList(e)}.bind(r)),i&&r.getElementDepth(i)>0&&(r.isList(i.parentNode)||r.isList(i.parentNode.parentNode))){const t=r.getParentElement(i,function(e){return this.isRangeFormatElement(e)&&!this.isList(e)}.bind(r)),n=r.splitElement(i,null,t?r.getElementDepth(t)+1:0);n.parentNode.insertBefore(e,n)}else l.insertBefore(e,i),d(e,i);const u=r.getEdgeChildNodes(e.firstElementChild,e.lastElementChild);t.length>1?this.setRange(u.sc,0,u.ec,u.ec.textContent.length):this.setRange(u.ec,u.ec.textContent.length,u.ec,u.ec.textContent.length),this.history.push(!1)},detachRangeFormatElement:function(e,t,n,i,o){const s=this.getRange();let a=s.startOffset,c=s.endOffset,d=r.getListChildNodes(e,(function(t){return t.parentNode===e})),u=e.parentNode,h=null,g=null,p=e.cloneNode(!1);const m=[],f=r.isList(n);let _=!1,b=!1,v=!1;function y(t,n,i,l){if(r.onlyZeroWidthSpace(n)&&(n.innerHTML=r.zeroWidthSpace,a=c=1),3===n.nodeType)return t.insertBefore(n,i),n;const o=(v?n:l).childNodes;let s=n.cloneNode(!1),d=null,u=null;for(;o[0];)u=o[0],!r._notTextNode(u)||r.isBreak(u)||r.isListCell(s)?s.appendChild(u):(s.childNodes.length>0&&(d||(d=s),t.insertBefore(s,i),s=n.cloneNode(!1)),t.insertBefore(u,i),d||(d=u));if(s.childNodes.length>0){if(r.isListCell(t)&&r.isListCell(s)&&r.isList(i))if(f){for(d=i;i;)s.appendChild(i),i=i.nextSibling;t.parentNode.insertBefore(s,t.nextElementSibling)}else{const t=l.nextElementSibling,n=r.detachNestedList(l,!1);if(e!==n||t!==l.nextElementSibling){const t=s.childNodes;for(;t[0];)l.appendChild(t[0]);e=n,b=!0}}else t.insertBefore(s,i);d||(d=s)}return d}for(let o,s,a,c=0,C=d.length;c<C;c++)if(o=d[c],3!==o.nodeType||!r.isList(p))if(v=!1,i&&0===c&&(h=t&&t.length!==C&&t[0]!==o?p:e.previousSibling),t&&(s=t.indexOf(o)),t&&-1===s)p||(p=e.cloneNode(!1)),p.appendChild(o);else{if(t&&(a=t[s+1]),p&&p.children.length>0&&(u.insertBefore(p,e),p=null),!f&&r.isListCell(o))if(a&&r.getElementDepth(o)!==r.getElementDepth(a)&&(r.isListCell(u)||r.getArrayItem(o.children,r.isList,!1))){const t=o.nextElementSibling,n=r.detachNestedList(o,!1);e===n&&t===o.nextElementSibling||(e=n,b=!0)}else{const t=o;o=r.createElement(i?t.nodeName:r.isList(e.parentNode)||r.isListCell(e.parentNode)?"LI":r.isCell(e.parentNode)?"DIV":l.defaultTag);const n=r.isListCell(o),s=t.childNodes;for(;s[0]&&(!r.isList(s[0])||n);)o.appendChild(s[0]);r.copyFormatAttributes(o,t),v=!0}else o=o.cloneNode(!1);if(!b&&(i?(m.push(o),r.removeItem(d[c])):(n?(_||(u.insertBefore(n,e),_=!0),o=y(n,o,null,d[c])):o=y(u,o,e,d[c]),b||(t?(g=o,h||(h=o)):h||(h=g=o))),b)){b=v=!1,d=r.getListChildNodes(e,(function(t){return t.parentNode===e})),p=e.cloneNode(!1),u=e.parentNode,c=-1,C=d.length;continue}}const C=e.parentNode;let w=e.nextSibling;p&&p.children.length>0&&C.insertBefore(p,w),n?h=n.previousSibling:h||(h=e.previousSibling),w=e.nextSibling!==p?e.nextSibling:p?p.nextSibling:null,0===e.children.length||0===e.textContent.length?r.removeItem(e):r.removeEmptyNode(e,null,!1);let x=null;if(i)x={cc:C,sc:h,so:a,ec:w,eo:c,removeArray:m};else{h||(h=g),g||(g=h);const e=r.getEdgeChildNodes(h,g.parentNode?h:g);x={cc:(e.sc||e.ec).parentNode,sc:e.sc,so:a,ec:e.ec,eo:c,removeArray:null}}if(this.effectNode=null,o)return x;!i&&x&&(t?this.setRange(x.sc,a,x.ec,c):this.setRange(x.sc,0,x.sc,0)),this.history.push(!1)},detachList:function(e,t){let n={},i=!1,l=!1,o=null,s=null;const a=function(e){return!this.isComponent(e)}.bind(r);for(let c,d,u,h,g=0,p=e.length;g<p;g++){if(u=g===p-1,d=r.getRangeFormatElement(e[g],a),h=r.isList(d),!c&&h)c=d,n={r:c,f:[r.getParentElement(e[g],"LI")]},0===g&&(i=!0);else if(c&&h)if(c!==d){const a=this.detachRangeFormatElement(n.f[0].parentNode,n.f,null,t,!0);d=e[g].parentNode,i&&(o=a.sc,i=!1),u&&(s=a.ec),h?(c=d,n={r:c,f:[r.getParentElement(e[g],"LI")]},u&&(l=!0)):c=null}else n.f.push(r.getParentElement(e[g],"LI")),u&&(l=!0);if(u&&r.isList(c)){const e=this.detachRangeFormatElement(n.f[0].parentNode,n.f,null,t,!0);(l||1===p)&&(s=e.ec),i&&(o=e.sc||s)}}return{sc:o,ec:s}},nodeChange:function(e,t,n,i){this._resetRangeToTextNode();let l=this.getRange_addLine(this.getRange(),null);t=!!(t&&t.length>0)&&t,n=!!(n&&n.length>0)&&n;const o=!e,s=o&&!n&&!t;let c=l.startContainer,d=l.startOffset,u=l.endContainer,h=l.endOffset;if(s&&l.collapsed&&r.isFormatElement(c.parentNode)||c===u&&1===c.nodeType&&r.isNonEditable(c)){const e=c.parentNode;if(!r.isListCell(e)||!r.getValues(e.style).some(function(e){return this._listKebab.indexOf(e)>-1}.bind(this)))return}if(l.collapsed&&!s&&1===c.nodeType&&!r.isBreak(c)&&!r.isComponent(c)){let e=null;const t=c.childNodes[d];t&&(e=t.nextSibling?r.isBreak(t)?t:t.nextSibling:null);const n=r.createTextNode(r.zeroWidthSpace);c.insertBefore(n,e),this.setRange(n,1,n,1),l=this.getRange(),c=l.startContainer,d=l.startOffset,u=l.endContainer,h=l.endOffset}r.isFormatElement(c)&&(c=c.childNodes[d]||c.firstChild,d=0),r.isFormatElement(u)&&(u=u.childNodes[h]||u.lastChild,h=u.textContent.length),o&&(e=r.createElement("DIV"));const g=a.RegExp,p=e.nodeName;if(!s&&c===u&&!n&&e){let t=c,n=0;const i=[],l=e.style;for(let e=0,t=l.length;e<t;e++)i.push(l[e]);const s=e.classList;for(let e=0,t=s.length;e<t;e++)i.push("."+s[e]);if(i.length>0){for(;!r.isFormatElement(t)&&!r.isWysiwygDiv(t);){for(let l=0;l<i.length;l++)if(1===t.nodeType){const s=i[l],a=!!/^\./.test(s)&&new g("\\s*"+s.replace(/^\./,"")+"(\\s+|$)","ig"),r=o?!!t.style[s]:!!t.style[s]&&!!e.style[s]&&t.style[s]===e.style[s],c=!1!==a&&(o?!!t.className.match(a):!!t.className.match(a)&&!!e.className.match(a));(r||c)&&n++}t=t.parentNode}if(n>=i.length)return}}let m,f={},_={},b="",v="",y="";if(t){for(let e,n=0,i=t.length;n<i;n++)e=t[n],/^\./.test(e)?v+=(v?"|":"\\s*(?:")+e.replace(/^\./,""):b+=(b?"|":"(?:;|^|\\s)(?:")+e;b&&(b+=")\\s*:[^;]*\\s*(?:;|$)",b=new g(b,"ig")),v&&(v+=")(?=\\s+|$)",v=new g(v,"ig"))}if(n){y="^(?:"+n[0];for(let e=1;e<n.length;e++)y+="|"+n[e];y+=")$",y=new g(y,"i")}const C=a.Boolean,w={v:!1},x=function(e){const t=e.cloneNode(!1);if(3===t.nodeType||r.isBreak(t))return t;if(s)return null;const n=!y&&o||y&&y.test(t.nodeName);if(n&&!i)return w.v=!0,null;const l=t.style.cssText;let a="";b&&l.length>0&&(a=l.replace(b,"").trim(),a!==l&&(w.v=!0));const c=t.className;let d="";return v&&c.length>0&&(d=c.replace(v,"").trim(),d!==c&&(w.v=!0)),(!o||!v&&c||!b&&l||a||d||!n)&&(a||d||t.nodeName!==p||C(b)!==C(l)||C(v)!==C(c))?(b&&l.length>0&&(t.style.cssText=a),t.style.cssText||t.removeAttribute("style"),v&&c.length>0&&(t.className=d.trim()),t.className.trim()||t.removeAttribute("class"),t.style.cssText||t.className||t.nodeName!==p&&!n?t:(w.v=!0,null)):(w.v=!0,null)},E=this.getSelectedElements(null);l=this.getRange(),c=l.startContainer,d=l.startOffset,u=l.endContainer,h=l.endOffset,r.getFormatElement(c,null)||(c=r.getChildElement(E[0],(function(e){return 3===e.nodeType}),!1),d=0),r.getFormatElement(u,null)||(u=r.getChildElement(E[E.length-1],(function(e){return 3===e.nodeType}),!1),h=u.textContent.length);const S=r.getFormatElement(c,null)===r.getFormatElement(u,null),N=E.length-(S?0:1);m=e.cloneNode(!1);const T=s||o&&function(e){for(let t=0,n=e.length;t<n;t++)if(r._isMaintainedNode(e[t])||r._isSizeNode(e[t]))return!0;return!1}(n),k=o||r._isSizeNode(m),L=this._util_getMaintainedNode.bind(r,T,k),B=this._util_isMaintainedNode.bind(r,T,k);if(S){this._resetCommonListCell(E[0],t)&&(l=this.setRange(c,d,u,h));const e=this._nodeChange_oneLine(E[0],m,x,c,d,u,h,s,o,l.collapsed,w,L,B);f.container=e.startContainer,f.offset=e.startOffset,_.container=e.endContainer,_.offset=e.endOffset,f.container===_.container&&r.onlyZeroWidthSpace(f.container)&&(f.offset=_.offset=1),this._setCommonListStyle(e.ancestor,null)}else{let n=!1;N>0&&this._resetCommonListCell(E[N],t)&&(n=!0),this._resetCommonListCell(E[0],t)&&(n=!0),n&&this.setRange(c,d,u,h),N>0&&(m=e.cloneNode(!1),_=this._nodeChange_endLine(E[N],m,x,u,h,s,o,w,L,B));for(let n,i=N-1;i>0;i--)this._resetCommonListCell(E[i],t),m=e.cloneNode(!1),n=this._nodeChange_middleLine(E[i],m,x,s,o,w,_.container),n.endContainer&&n.ancestor.contains(n.endContainer)&&(_.ancestor=null,_.container=n.endContainer),this._setCommonListStyle(n.ancestor,null);m=e.cloneNode(!1),f=this._nodeChange_startLine(E[0],m,x,c,d,s,o,w,L,B,_.container),f.endContainer&&(_.ancestor=null,_.container=f.endContainer),N<=0?_=f:_.container||(_.ancestor=null,_.container=f.container,_.offset=f.container.textContent.length),this._setCommonListStyle(f.ancestor,null),this._setCommonListStyle(_.ancestor||r.getFormatElement(_.container),null)}this.controllersOff(),this.setRange(f.container,f.offset,_.container,_.offset),this.history.push(!1)},_resetCommonListCell:function(e,t){if(!r.isListCell(e))return;t||(t=this._listKebab);const n=r.getArrayItem(e.childNodes,(function(e){return!r.isBreak(e)}),!0),i=e.style,o=[],s=[],a=r.getValues(i);for(let e=0,n=this._listKebab.length;e<n;e++)a.indexOf(this._listKebab[e])>-1&&t.indexOf(this._listKebab[e])>-1&&(o.push(this._listCamel[e]),s.push(this._listKebab[e]));if(!o.length)return;const c=r.createElement("SPAN");for(let e=0,t=o.length;e<t;e++)c.style[o[e]]=i[s[e]],i.removeProperty(s[e]);let d=c.cloneNode(!1),u=null,h=!1;for(let t,i,s=0,a=n.length;s<a;s++)t=n[s],l._textTagsMap[t.nodeName.toLowerCase()]||(i=r.getValues(t.style),0===i.length||o.some((function(e){return-1===i.indexOf(e)}))&&i.some((function(e){o.indexOf(e)}))?(u=t.nextSibling,d.appendChild(t)):d.childNodes.length>0&&(e.insertBefore(d,u),d=c.cloneNode(!1),u=null,h=!0));return d.childNodes.length>0&&(e.insertBefore(d,u),h=!0),i.length||e.removeAttribute("style"),h},_setCommonListStyle:function(e,t){if(!r.isListCell(e))return;const n=r.getArrayItem((t||e).childNodes,(function(e){return!r.isBreak(e)}),!0);if(!(t=n[0])||n.length>1||1!==t.nodeType)return;const i=t.style,o=e.style,s=t.nodeName.toLowerCase();let a=!1;l._textTagsMap[s]===l._defaultCommand.bold.toLowerCase()&&(o.fontWeight="bold"),l._textTagsMap[s]===l._defaultCommand.italic.toLowerCase()&&(o.fontStyle="italic");const c=r.getValues(i);if(c.length>0)for(let e=0,t=this._listCamel.length;e<t;e++)c.indexOf(this._listKebab[e])>-1&&(o[this._listCamel[e]]=i[this._listCamel[e]],i.removeProperty(this._listKebab[e]),a=!0);if(this._setCommonListStyle(e,t),a&&!i.length){const e=t.childNodes,n=t.parentNode,i=t.nextSibling;for(;e.length>0;)n.insertBefore(e[0],i);r.removeItem(t)}},_stripRemoveNode:function(e){const t=e.parentNode;if(!e||3===e.nodeType||!t)return;const n=e.childNodes;for(;n[0];)t.insertBefore(n[0],e);t.removeChild(e)},_util_getMaintainedNode:function(e,t,n){return!n||e?null:this.getParentElement(n,this._isMaintainedNode.bind(this))||(t?null:this.getParentElement(n,this._isSizeNode.bind(this)))},_util_isMaintainedNode:function(e,t,n){if(!n||e||1!==n.nodeType)return!1;const i=this._isMaintainedNode(n);return this.getParentElement(n,this._isMaintainedNode.bind(this))?i:i||!t&&this._isSizeNode(n)},_nodeChange_oneLine:function(e,t,n,i,l,o,s,c,d,u,h,g,p){let m=i.parentNode;for(;!(m.nextSibling||m.previousSibling||r.isFormatElement(m.parentNode)||r.isWysiwygDiv(m.parentNode))&&m.nodeName!==t.nodeName;)m=m.parentNode;if(!d&&m===o.parentNode&&m.nodeName===t.nodeName&&r.onlyZeroWidthSpace(i.textContent.slice(0,l))&&r.onlyZeroWidthSpace(o.textContent.slice(s))){const n=m.childNodes;let a=!0;for(let e,t,l,s,c=0,d=n.length;c<d;c++)if(e=n[c],s=!r.onlyZeroWidthSpace(e),e!==i)if(e!==o){if(!t&&s||t&&l&&s){a=!1;break}}else l=!0;else t=!0;if(a)return r.copyTagAttributes(m,t),{ancestor:e,startContainer:i,startOffset:l,endContainer:o,endOffset:s}}h.v=!1;const f=e,_=[t],b=e.cloneNode(!1),v=i===o;let y,C,w,x,E,S=i,N=l,T=o,k=s,L=!1,B=!1;const A=a.RegExp;function z(e){const t=new A("(?:;|^|\\s)(?:"+x+"null)\\s*:[^;]*\\s*(?:;|$)","ig");let n="";return t&&e.style.cssText.length>0&&(n=t.test(e.style.cssText)),!n}if(function e(i,l){const o=i.childNodes;for(let i,s=0,a=o.length;s<a;s++){let a=o[s];if(!a)continue;let d,h=l;if(!L&&a===S){let e=b;E=g(a);const o=r.createTextNode(1===S.nodeType?"":S.substringData(0,N)),s=r.createTextNode(1===S.nodeType?"":S.substringData(N,v&&k>=N?k-N:S.data.length-N));if(E){const t=g(l);if(t&&t.parentNode!==e){let n=t,i=null;for(;n.parentNode!==e;){for(l=i=n.parentNode.cloneNode(!1);n.childNodes[0];)i.appendChild(n.childNodes[0]);n.appendChild(i),n=n.parentNode}n.parentNode.appendChild(t)}E=E.cloneNode(!1)}r.onlyZeroWidthSpace(o)||l.appendChild(o);const c=g(l);for(c&&(E=c),E&&(e=E),C=a,y=[],x="";C!==e&&C!==f&&null!==C;)i=p(C)?null:n(C),i&&1===C.nodeType&&z(C)&&(y.push(i),x+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;const d=y.pop()||s;for(w=C=d;y.length>0;)C=y.pop(),w.appendChild(C),w=C;if(t.appendChild(d),e.appendChild(t),E&&!g(T)&&(t=t.cloneNode(!1),b.appendChild(t),_.push(t)),S=s,N=0,L=!0,C!==s&&C.appendChild(S),!v)continue}if(B||a!==T){if(L){if(1===a.nodeType&&!r.isBreak(a)){r._isIgnoreNodeChange(a)?(b.appendChild(a.cloneNode(!0)),u||(t=t.cloneNode(!1),b.appendChild(t),_.push(t))):e(a,a);continue}C=a,y=[],x="";const o=[];for(;null!==C.parentNode&&C!==f&&C!==t;)i=B?C.cloneNode(!1):n(C),1===C.nodeType&&!r.isBreak(a)&&i&&z(C)&&(p(C)?E||o.push(i):y.push(i),x+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;y=y.concat(o);const s=y.pop()||a;for(w=C=s;y.length>0;)C=y.pop(),w.appendChild(C),w=C;if(!p(t.parentNode)||p(s)||r.onlyZeroWidthSpace(t)||(t=t.cloneNode(!1),b.appendChild(t),_.push(t)),B||E||!p(s))s===a?l=B?b:t:B?(b.appendChild(s),l=C):(t.appendChild(s),l=C);else{t=t.cloneNode(!1);const e=s.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);s.appendChild(t),b.appendChild(s),_.push(t),l=t.children.length>0?C:t}if(E&&3===a.nodeType)if(g(a)){const e=r.getParentElement(l,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===b}.bind(r));E.appendChild(e),t=e.cloneNode(!1),_.push(t),b.appendChild(t)}else E=null}d=a.cloneNode(!1),l.appendChild(d),1!==a.nodeType||r.isBreak(a)||(h=d),e(a,h)}else{E=g(a);const e=r.createTextNode(1===T.nodeType?"":T.substringData(k,T.length-k)),l=r.createTextNode(v||1===T.nodeType?"":T.substringData(0,k));if(E?E=E.cloneNode(!1):p(t.parentNode)&&!E&&(t=t.cloneNode(!1),b.appendChild(t),_.push(t)),!r.onlyZeroWidthSpace(e)){C=a,x="",y=[];const t=[];for(;C!==b&&C!==f&&null!==C;)1===C.nodeType&&z(C)&&(p(C)?t.push(C.cloneNode(!1)):y.push(C.cloneNode(!1)),x+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;for(y=y.concat(t),d=w=C=y.pop()||e;y.length>0;)C=y.pop(),w.appendChild(C),w=C;b.appendChild(d),C.textContent=e.data}if(E&&d){const e=g(d);e&&(E=e)}for(C=a,y=[],x="";C!==b&&C!==f&&null!==C;)i=p(C)?null:n(C),i&&1===C.nodeType&&z(C)&&(y.push(i),x+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;const o=y.pop()||l;for(w=C=o;y.length>0;)C=y.pop(),w.appendChild(C),w=C;E?((t=t.cloneNode(!1)).appendChild(o),E.insertBefore(t,E.firstChild),b.appendChild(E),_.push(t),E=null):t.appendChild(o),T=l,k=l.data.length,B=!0,!c&&u&&(t=l,l.textContent=r.zeroWidthSpace),C!==l&&C.appendChild(T)}}}(e,b),d&&!c&&!h.v)return{ancestor:e,startContainer:i,startOffset:l,endContainer:o,endOffset:s};if(c=c&&d)for(let e=0;e<_.length;e++){let t,n,i,l=_[e];if(u)t=r.createTextNode(r.zeroWidthSpace),b.replaceChild(t,l);else{const e=l.childNodes;for(n=e[0];e[0];)i=e[0],b.insertBefore(i,l);r.removeItem(l)}0===e&&(u?S=T=t:(S=n,T=i))}else{if(d)for(let e=0;e<_.length;e++)this._stripRemoveNode(_[e]);u&&(S=T=t)}r.removeEmptyNode(b,t,!1),u&&(N=S.textContent.length,k=T.textContent.length);const M=c||0===T.textContent.length;r.isBreak(T)||0!==T.textContent.length||(r.removeItem(T),T=S),k=M?T.textContent.length:k;const I={s:0,e:0},H=r.getNodePath(S,b,I),R=!T.parentNode;R&&(T=S);const O={s:0,e:0},D=r.getNodePath(T,b,R||M?null:O);N+=I.s,k=u?N:R?S.textContent.length:M?k+I.s:k+O.s;const F=r.mergeSameTags(b,[H,D],!0);return e.parentNode.replaceChild(b,e),S=r.getNodeFromPath(H,b),T=r.getNodeFromPath(D,b),{ancestor:b,startContainer:S,startOffset:N+F[0],endContainer:T,endOffset:k+F[1]}},_nodeChange_startLine:function(e,t,n,i,l,o,s,a,c,d,u){let h=i.parentNode;for(;!(h.nextSibling||h.previousSibling||r.isFormatElement(h.parentNode)||r.isWysiwygDiv(h.parentNode))&&h.nodeName!==t.nodeName;)h=h.parentNode;if(!s&&h.nodeName===t.nodeName&&!r.isFormatElement(h)&&!h.nextSibling&&r.onlyZeroWidthSpace(i.textContent.slice(0,l))){let n=!0,o=i.previousSibling;for(;o;){if(!r.onlyZeroWidthSpace(o)){n=!1;break}o=o.previousSibling}if(n)return r.copyTagAttributes(h,t),{ancestor:e,container:i,offset:l}}a.v=!1;const g=e,p=[t],m=e.cloneNode(!1);let f,_,b,v,y=i,C=l,w=!1;if(function e(i,l){const o=i.childNodes;for(let i,s,a=0,h=o.length;a<h;a++){const h=o[a];if(!h)continue;let x=l;if(w&&!r.isBreak(h)){if(1===h.nodeType){if(r._isIgnoreNodeChange(h)){if(t=t.cloneNode(!1),s=h.cloneNode(!0),m.appendChild(s),m.appendChild(t),p.push(t),u&&h.contains(u)){const e=r.getNodePath(u,h);u=r.getNodeFromPath(e,s)}}else e(h,h);continue}_=h,f=[];const o=[];for(;null!==_.parentNode&&_!==g&&_!==t;)i=n(_),1===_.nodeType&&i&&(d(_)?v||o.push(i):f.push(i)),_=_.parentNode;f=f.concat(o);const a=f.length>0,y=f.pop()||h;for(b=_=y;f.length>0;)_=f.pop(),b.appendChild(_),b=_;if(d(t.parentNode)&&!d(y)&&(t=t.cloneNode(!1),m.appendChild(t),p.push(t)),!v&&d(y)){t=t.cloneNode(!1);const e=y.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);y.appendChild(t),m.appendChild(y),l=d(_)?t:_,p.push(t)}else a?(t.appendChild(y),l=_):l=t;if(v&&3===h.nodeType)if(c(h)){const e=r.getParentElement(l,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===m}.bind(r));v.appendChild(e),t=e.cloneNode(!1),p.push(t),m.appendChild(t)}else v=null}if(w||h!==y)i=w?n(h):h.cloneNode(!1),i&&(l.appendChild(i),1!==h.nodeType||r.isBreak(h)||(x=i)),e(h,x);else{let e=m;v=c(h);const o=r.createTextNode(1===y.nodeType?"":y.substringData(0,C)),s=r.createTextNode(1===y.nodeType?"":y.substringData(C,y.length-C));if(v){const t=c(l);if(t&&t.parentNode!==e){let n=t,i=null;for(;n.parentNode!==e;){for(l=i=n.parentNode.cloneNode(!1);n.childNodes[0];)i.appendChild(n.childNodes[0]);n.appendChild(i),n=n.parentNode}n.parentNode.appendChild(t)}v=v.cloneNode(!1)}r.onlyZeroWidthSpace(o)||l.appendChild(o);const a=c(l);for(a&&(v=a),v&&(e=v),_=l,f=[];_!==e&&null!==_;)i=n(_),1===_.nodeType&&i&&f.push(i),_=_.parentNode;const d=f.pop()||l;for(b=_=d;f.length>0;)_=f.pop(),b.appendChild(_),b=_;d!==l?(t.appendChild(d),l=_):l=t,r.isBreak(h)&&t.appendChild(h.cloneNode(!1)),e.appendChild(t),y=s,C=0,w=!0,l.appendChild(y)}}}(e,m),s&&!o&&!a.v)return{ancestor:e,container:i,offset:l,endContainer:u};if(o=o&&s)for(let e=0;e<p.length;e++){let t=p[e];const n=t.childNodes,i=n[0];for(;n[0];)m.insertBefore(n[0],t);r.removeItem(t),0===e&&(y=i)}else if(s){t=t.firstChild;for(let e=0;e<p.length;e++)this._stripRemoveNode(p[e])}if(o||0!==m.childNodes.length){r.removeEmptyNode(m,t,!1),r.onlyZeroWidthSpace(m.textContent)&&(y=m.firstChild,C=0);const n={s:0,e:0},i=r.getNodePath(y,m,n);C+=n.s;const l=r.mergeSameTags(m,[i],!0);e.parentNode.replaceChild(m,e),y=r.getNodeFromPath(i,m),C+=l[0]}else e.childNodes?y=e.childNodes[0]:(y=r.createTextNode(r.zeroWidthSpace),e.appendChild(y));return{ancestor:m,container:y,offset:C,endContainer:u}},_nodeChange_middleLine:function(e,t,n,i,l,o,s){if(!l){let n=null;s&&e.contains(s)&&(n=r.getNodePath(s,e));const i=e.cloneNode(!0),l=t.nodeName,o=t.style.cssText,a=t.className;let c,d=i.childNodes,u=0,h=d.length;for(;u<h&&(c=d[u],3!==c.nodeType);u++){if(c.nodeName!==l){if(!r.isBreak(c)&&r._isIgnoreNodeChange(c))continue;if(1===h){d=c.childNodes,h=d.length,u=-1;continue}break}c.style.cssText+=o,r.addClass(c,a)}if(h>0&&u===h)return e.innerHTML=i.innerHTML,{ancestor:e,endContainer:n?r.getNodeFromPath(n,e):null}}o.v=!1;const a=e.cloneNode(!1),c=[t];let d=!0;if(function e(i,l){const o=i.childNodes;for(let i,u,h=0,g=o.length;h<g;h++){let g=o[h];if(!g)continue;let p=l;if(r.isBreak(g)||!r._isIgnoreNodeChange(g))i=n(g),i&&(d=!1,l.appendChild(i),1===g.nodeType&&(p=i)),r.isBreak(g)||e(g,p);else if(t.childNodes.length>0&&(a.appendChild(t),t=t.cloneNode(!1)),u=g.cloneNode(!0),a.appendChild(u),a.appendChild(t),c.push(t),l=t,s&&g.contains(s)){const e=r.getNodePath(s,g);s=r.getNodeFromPath(e,u)}}}(e,t),d||l&&!i&&!o.v)return{ancestor:e,endContainer:s};if(a.appendChild(t),i&&l)for(let e=0;e<c.length;e++){let t=c[e];const n=t.childNodes;for(;n[0];)a.insertBefore(n[0],t);r.removeItem(t)}else if(l){t=t.firstChild;for(let e=0;e<c.length;e++)this._stripRemoveNode(c[e])}return r.removeEmptyNode(a,t,!1),r.mergeSameTags(a,null,!0),e.parentNode.replaceChild(a,e),{ancestor:a,endContainer:s}},_nodeChange_endLine:function(e,t,n,i,l,o,s,a,c,d){let u=i.parentNode;for(;!(u.nextSibling||u.previousSibling||r.isFormatElement(u.parentNode)||r.isWysiwygDiv(u.parentNode))&&u.nodeName!==t.nodeName;)u=u.parentNode;if(!s&&u.nodeName===t.nodeName&&!r.isFormatElement(u)&&!u.previousSibling&&r.onlyZeroWidthSpace(i.textContent.slice(l))){let n=!0,o=i.nextSibling;for(;o;){if(!r.onlyZeroWidthSpace(o)){n=!1;break}o=o.nextSibling}if(n)return r.copyTagAttributes(u,t),{ancestor:e,container:i,offset:l}}a.v=!1;const h=e,g=[t],p=e.cloneNode(!1);let m,f,_,b,v=i,y=l,C=!1;if(function e(i,l){const o=i.childNodes;for(let i,s=o.length-1;0<=s;s--){const a=o[s];if(!a)continue;let u=l;if(C&&!r.isBreak(a)){if(1===a.nodeType){if(r._isIgnoreNodeChange(a)){t=t.cloneNode(!1);const e=a.cloneNode(!0);p.insertBefore(e,l),p.insertBefore(t,e),g.push(t)}else e(a,a);continue}f=a,m=[];const o=[];for(;null!==f.parentNode&&f!==h&&f!==t;)i=n(f),i&&1===f.nodeType&&(d(f)?b||o.push(i):m.push(i)),f=f.parentNode;m=m.concat(o);const s=m.length>0,u=m.pop()||a;for(_=f=u;m.length>0;)f=m.pop(),_.appendChild(f),_=f;if(d(t.parentNode)&&!d(u)&&(t=t.cloneNode(!1),p.insertBefore(t,p.firstChild),g.push(t)),!b&&d(u)){t=t.cloneNode(!1);const e=u.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);u.appendChild(t),p.insertBefore(u,p.firstChild),g.push(t),l=t.children.length>0?f:t}else s?(t.insertBefore(u,t.firstChild),l=f):l=t;if(b&&3===a.nodeType)if(c(a)){const e=r.getParentElement(l,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===p}.bind(r));b.appendChild(e),t=e.cloneNode(!1),g.push(t),p.insertBefore(t,p.firstChild)}else b=null}if(C||a!==v)i=C?n(a):a.cloneNode(!1),i&&(l.insertBefore(i,l.firstChild),1!==a.nodeType||r.isBreak(a)||(u=i)),e(a,u);else{b=c(a);const e=r.createTextNode(1===v.nodeType?"":v.substringData(y,v.length-y)),o=r.createTextNode(1===v.nodeType?"":v.substringData(0,y));if(b){b=b.cloneNode(!1);const e=c(l);if(e&&e.parentNode!==p){let t=e,n=null;for(;t.parentNode!==p;){for(l=n=t.parentNode.cloneNode(!1);t.childNodes[0];)n.appendChild(t.childNodes[0]);t.appendChild(n),t=t.parentNode}t.parentNode.insertBefore(e,t.parentNode.firstChild)}b=b.cloneNode(!1)}else d(t.parentNode)&&!b&&(t=t.cloneNode(!1),p.appendChild(t),g.push(t));for(r.onlyZeroWidthSpace(e)||l.insertBefore(e,l.firstChild),f=l,m=[];f!==p&&null!==f;)i=d(f)?null:n(f),i&&1===f.nodeType&&m.push(i),f=f.parentNode;const s=m.pop()||l;for(_=f=s;m.length>0;)f=m.pop(),_.appendChild(f),_=f;s!==l?(t.insertBefore(s,t.firstChild),l=f):l=t,r.isBreak(a)&&t.appendChild(a.cloneNode(!1)),b?(b.insertBefore(t,b.firstChild),p.insertBefore(b,p.firstChild),b=null):p.insertBefore(t,p.firstChild),v=o,y=o.data.length,C=!0,l.insertBefore(v,l.firstChild)}}}(e,p),s&&!o&&!a.v)return{ancestor:e,container:i,offset:l};if(o=o&&s)for(let e=0;e<g.length;e++){let t=g[e];const n=t.childNodes;let i=null;for(;n[0];)i=n[0],p.insertBefore(i,t);r.removeItem(t),e===g.length-1&&(v=i,y=i.textContent.length)}else if(s){t=t.firstChild;for(let e=0;e<g.length;e++)this._stripRemoveNode(g[e])}if(o||0!==p.childNodes.length){if(!s&&0===t.textContent.length)return r.removeEmptyNode(p,null,!1),{ancestor:null,container:null,offset:0};r.removeEmptyNode(p,t,!1),r.onlyZeroWidthSpace(p.textContent)?(v=p.firstChild,y=v.textContent.length):r.onlyZeroWidthSpace(v)&&(v=t,y=1);const n={s:0,e:0},i=r.getNodePath(v,p,n);y+=n.s;const l=r.mergeSameTags(p,[i],!0);e.parentNode.replaceChild(p,e),v=r.getNodeFromPath(i,p),y+=l[0]}else e.childNodes?v=e.childNodes[0]:(v=r.createTextNode(r.zeroWidthSpace),e.appendChild(v));return{ancestor:p,container:v,offset:1===v.nodeType&&1===y?v.childNodes.length:y}},actionCall:function(t,n,i){if(n){if(/more/i.test(n)){if(i!==this._moreLayerActiveButton){const n=e.element.toolbar.querySelector("."+t);n&&(this._moreLayerActiveButton&&this.moreLayerOff(),this._moreLayerActiveButton=i,n.style.display="block",u._showToolbarBalloon(),u._showToolbarInline()),r.addClass(i,"on")}else{e.element.toolbar.querySelector("."+this._moreLayerActiveButton.getAttribute("data-command"))&&(this.moreLayerOff(),u._showToolbarBalloon(),u._showToolbarInline())}return}if(/container/.test(n)&&(null===this._menuTray[t]||i!==this.containerActiveButton))return void this.callPlugin(t,this.containerOn.bind(this,i),i);if(this.isReadOnly&&r.arrayIncludes(this.resizingDisabledButtons,i))return;if(/submenu/.test(n)&&(null===this._menuTray[t]||i!==this.submenuActiveButton))return void this.callPlugin(t,this.submenuOn.bind(this,i),i);if(/dialog/.test(n))return void this.callPlugin(t,this.plugins[t].open.bind(this),i);/command/.test(n)?this.callPlugin(t,this.plugins[t].action.bind(this),i):/fileBrowser/.test(n)&&this.callPlugin(t,this.plugins[t].open.bind(this,null),i)}else t&&this.commandHandler(i,t);/submenu/.test(n)?this.submenuOff():/command/.test(n)||(this.submenuOff(),this.containerOff())},commandHandler:function(t,n){if(!d.isReadOnly||/copy|cut|selectAll|codeView|fullScreen|print|preview|showBlocks/.test(n))switch(n){case"copy":case"cut":this.execCommand(n);break;case"paste":break;case"selectAll":this.containerOff();const i=e.element.wysiwyg;let o=r.getChildElement(i.firstChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1)||i.firstChild,s=r.getChildElement(i.lastChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0)||i.lastChild;if(!o||!s)return;if(r.isMedia(o)){const e=this.getFileComponent(o),t=r.createElement("BR"),n=r.createElement(l.defaultTag);n.appendChild(t),o=e?e.component:o,o.parentNode.insertBefore(n,o),o=t}if(r.isMedia(s)){const e=r.createElement("BR"),t=r.createElement(l.defaultTag);t.appendChild(e),i.appendChild(t),s=e}u._showToolbarBalloon(this.setRange(o,0,s,s.textContent.length));break;case"codeView":this.toggleCodeView();break;case"fullScreen":this.toggleFullScreen(t);break;case"indent":case"outdent":this.indent(n);break;case"undo":this.history.undo();break;case"redo":this.history.redo();break;case"removeFormat":this.removeFormat(),this.focus();break;case"print":this.print();break;case"preview":this.preview();break;case"showBlocks":this.toggleDisplayBlocks();break;case"dir":this.setDir(l.rtl?"ltr":"rtl");break;case"dir_ltr":this.setDir("ltr");break;case"dir_rtl":this.setDir("rtl");break;case"save":if("function"==typeof l.callBackSave)l.callBackSave(this.getContents(!1),this._variable.isChanged);else{if(!this._variable.isChanged||"function"!=typeof h.save)throw Error("[SUNEDITOR.core.commandHandler.fail] Please register call back function in creation option. (callBackSave : Function)");h.save()}this._variable.isChanged=!1,e.tool.save&&e.tool.save.setAttribute("disabled",!0);break;default:n=l._defaultCommand[n.toLowerCase()]||n,this.commandMap[n]||(this.commandMap[n]=t);const a=this._variable.currentNodesMap,c=a.indexOf(n)>-1?null:r.createElement(n);let d=n;/^SUB$/i.test(n)&&a.indexOf("SUP")>-1?d="SUP":/^SUP$/i.test(n)&&a.indexOf("SUB")>-1&&(d="SUB"),this.nodeChange(c,this._commandMapStyles[n]||null,[d],!1),this.focus()}},removeFormat:function(){this.nodeChange(null,null,null,null)},indent:function(e){const t=this.getRange(),n=this.getSelectedElements(null),i=[],o="indent"!==e,s=l.rtl?"marginRight":"marginLeft";let a=t.startContainer,c=t.endContainer,d=t.startOffset,u=t.endOffset;for(let e,t,l=0,a=n.length;l<a;l++)e=n[l],r.isListCell(e)&&this.plugins.list?(o||e.previousElementSibling)&&i.push(e):(t=/\d+/.test(e.style[s])?r.getNumber(e.style[s],0):0,o?t-=25:t+=25,r.setStyle(e,s,t<=0?"":t+"px"));i.length>0&&this.plugins.list.editInsideList.call(this,o,i),this.effectNode=null,this.setRange(a,d,c,u),this.history.push(!1)},toggleDisplayBlocks:function(){const t=e.element.wysiwyg;r.toggleClass(t,"se-show-block"),r.hasClass(t,"se-show-block")?r.addClass(this._styleCommandMap.showBlocks,"active"):r.removeClass(this._styleCommandMap.showBlocks,"active"),this._resourcesStateChange()},toggleCodeView:function(){const t=this._variable.isCodeView;this.controllersOff(),r.setDisabledButtons(!t,this.codeViewDisabledButtons),t?(r.isNonEditable(e.element.wysiwygFrame)||this._setCodeDataToEditor(),e.element.wysiwygFrame.scrollTop=0,e.element.code.style.display="none",e.element.wysiwygFrame.style.display="block",this._variable._codeOriginCssText=this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: none"),this._variable._wysiwygOriginCssText=this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: block"),"auto"!==l.height||l.codeMirrorEditor||(e.element.code.style.height="0px"),this._variable.isCodeView=!1,this._variable.isFullScreen||(this._notHideToolbar=!1,/balloon|balloon-always/i.test(l.mode)&&(e.element._arrow.style.display="",this._isInline=!1,this._isBalloon=!0,u._hideToolbar())),this.nativeFocus(),r.removeClass(this._styleCommandMap.codeView,"active"),r.isNonEditable(e.element.wysiwygFrame)||(this.history.push(!1),this.history._resetCachingButton())):(this._setEditorDataToCodeView(),this._variable._codeOriginCssText=this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: block"),this._variable._wysiwygOriginCssText=this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: none"),this._variable.isFullScreen?e.element.code.style.height="100%":"auto"!==l.height||l.codeMirrorEditor||(e.element.code.style.height=e.element.code.scrollHeight>0?e.element.code.scrollHeight+"px":"auto"),l.codeMirrorEditor&&l.codeMirrorEditor.refresh(),this._variable.isCodeView=!0,this._variable.isFullScreen||(this._notHideToolbar=!0,this._isBalloon&&(e.element._arrow.style.display="none",e.element.toolbar.style.left="",this._isInline=!0,this._isBalloon=!1,u._showToolbarInline())),this._variable._range=null,e.element.code.focus(),r.addClass(this._styleCommandMap.codeView,"active")),this._checkPlaceholder(),this.isReadOnly&&r.setDisabledButtons(!0,this.resizingDisabledButtons),"function"==typeof h.toggleCodeView&&h.toggleCodeView(this._variable.isCodeView,this)},_setCodeDataToEditor:function(){const t=this._getCodeView();if(l.fullPage){const e=this._parser.parseFromString(t,"text/html");if(!this.options.__allowedScriptTag){const t=e.head.children;for(let n=0,i=t.length;n<i;n++)/^script$/i.test(t[n].tagName)&&(e.head.removeChild(t[n]),n--,i--)}let n=e.head.innerHTML;e.head.querySelector('link[rel="stylesheet"]')&&("auto"!==this.options.height||e.head.querySelector("style"))||(n+=r._setIframeCssTags(this.options)),this._wd.head.innerHTML=n,this._wd.body.innerHTML=this.convertContentsForEditor(e.body.innerHTML);const i=e.body.attributes;for(let e=0,t=i.length;e<t;e++)"contenteditable"!==i[e].name&&this._wd.body.setAttribute(i[e].name,i[e].value);if(!r.hasClass(this._wd.body,"sun-editor-editable")){const e=l._editableClass.split(" ");for(let t=0;t<e.length;t++)r.addClass(this._wd.body,l._editableClass[t])}}else e.element.wysiwyg.innerHTML=t.length>0?this.convertContentsForEditor(t):"<"+l.defaultTag+"><br></"+l.defaultTag+">"},_setEditorDataToCodeView:function(){const t=this.convertHTMLForCodeView(e.element.wysiwyg,!1);let n="";if(l.fullPage){const e=r.getAttributesToString(this._wd.body,null);n="<!DOCTYPE html>\n<html>\n"+this._wd.head.outerHTML.replace(/>(?!\n)/g,">\n")+"<body "+e+">\n"+t+"</body>\n</html>"}else n=t;e.element.code.style.display="block",e.element.wysiwygFrame.style.display="none",this._setCodeView(n)},toggleFullScreen:function(t){const n=e.element.topArea,i=e.element.toolbar,o=e.element.editorArea,d=e.element.wysiwygFrame,g=e.element.code,p=this._variable;this.controllersOff();const m="none"===i.style.display||this._isInline&&!this._inlineToolbarAttr.isShow;p.isFullScreen?(p.isFullScreen=!1,d.style.cssText=p._wysiwygOriginCssText,g.style.cssText=p._codeOriginCssText,i.style.cssText="",o.style.cssText=p._editorAreaOriginCssText,n.style.cssText=p._originCssText,s.body.style.overflow=p._bodyOverflow,"auto"!==l.height||l.codeMirrorEditor||u._codeViewAutoHeight(),l.toolbarContainer&&l.toolbarContainer.appendChild(i),l.stickyToolbar>-1&&r.removeClass(i,"se-toolbar-sticky"),p._fullScreenAttrs.sticky&&!l.toolbarContainer&&(p._fullScreenAttrs.sticky=!1,e.element._stickyDummy.style.display="block",r.addClass(i,"se-toolbar-sticky")),this._isInline=p._fullScreenAttrs.inline,this._isBalloon=p._fullScreenAttrs.balloon,this._isInline&&u._showToolbarInline(),l.toolbarContainer&&r.removeClass(i,"se-toolbar-balloon"),u.onScroll_window(),t&&r.changeElement(t.firstElementChild,c.expansion),e.element.topArea.style.marginTop="",r.removeClass(this._styleCommandMap.fullScreen,"active")):(p.isFullScreen=!0,p._fullScreenAttrs.inline=this._isInline,p._fullScreenAttrs.balloon=this._isBalloon,(this._isInline||this._isBalloon)&&(this._isInline=!1,this._isBalloon=!1),l.toolbarContainer&&e.element.relative.insertBefore(i,o),n.style.position="fixed",n.style.top="0",n.style.left="0",n.style.width="100%",n.style.maxWidth="100%",n.style.height="100%",n.style.zIndex="2147483647",""!==e.element._stickyDummy.style.display&&(p._fullScreenAttrs.sticky=!0,e.element._stickyDummy.style.display="none",r.removeClass(i,"se-toolbar-sticky")),p._bodyOverflow=s.body.style.overflow,s.body.style.overflow="hidden",p._editorAreaOriginCssText=o.style.cssText,p._wysiwygOriginCssText=d.style.cssText,p._codeOriginCssText=g.style.cssText,o.style.cssText=i.style.cssText="",d.style.cssText=(d.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)||[""])[0]+l._editorStyles.editor,g.style.cssText=(g.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)||[""])[0],i.style.width=d.style.height=g.style.height="100%",i.style.position="relative",i.style.display="block",p.innerHeight_fullScreen=a.innerHeight-i.offsetHeight,o.style.height=p.innerHeight_fullScreen-l.fullScreenOffset+"px",t&&r.changeElement(t.firstElementChild,c.reduction),l.iframe&&"auto"===l.height&&(o.style.overflow="auto",this._iframeAutoHeight()),e.element.topArea.style.marginTop=l.fullScreenOffset+"px",r.addClass(this._styleCommandMap.fullScreen,"active")),m&&h.toolbar.hide(),"function"==typeof h.toggleFullScreen&&h.toggleFullScreen(this._variable.isFullScreen,this)},print:function(){const e=r.createElement("IFRAME");e.style.display="none",s.body.appendChild(e);const t=l.printTemplate?l.printTemplate.replace(/\{\{\s*contents\s*\}\}/i,this.getContents(!0)):this.getContents(!0),n=r.getIframeDocument(e),i=this._wd;if(l.iframe){const e=null!==l._printClass?'class="'+l._printClass+'"':l.fullPage?r.getAttributesToString(i.body,["contenteditable"]):'class="'+l._editableClass+'"';n.write("<!DOCTYPE html><html><head>"+i.head.innerHTML+"</head><body "+e+">"+t+"</body></html>")}else{const e=s.head.getElementsByTagName("link"),i=s.head.getElementsByTagName("style");let o="";for(let t=0,n=e.length;t<n;t++)o+=e[t].outerHTML;for(let e=0,t=i.length;e<t;e++)o+=i[e].outerHTML;n.write("<!DOCTYPE html><html><head>"+o+'</head><body class="'+(null!==l._printClass?l._printClass:l._editableClass)+'">'+t+"</body></html>")}this.showLoading(),a.setTimeout((function(){try{if(e.focus(),r.isIE_Edge||r.isChromium||s.documentMode||a.StyleMedia)try{e.contentWindow.document.execCommand("print",!1,null)}catch(t){e.contentWindow.print()}else e.contentWindow.print()}catch(e){throw Error("[SUNEDITOR.core.print.fail] error: "+e)}finally{d.closeLoading(),r.removeItem(e)}}),1e3)},preview:function(){d.submenuOff(),d.containerOff(),d.controllersOff();const e=l.previewTemplate?l.previewTemplate.replace(/\{\{\s*contents\s*\}\}/i,this.getContents(!0)):this.getContents(!0),t=a.open("","_blank");t.mimeType="text/html";const n=this._wd;if(l.iframe){const i=null!==l._printClass?'class="'+l._printClass+'"':l.fullPage?r.getAttributesToString(n.body,["contenteditable"]):'class="'+l._editableClass+'"';t.document.write("<!DOCTYPE html><html><head>"+n.head.innerHTML+"<style>body {overflow:auto !important; margin: 10px auto !important; height:auto !important; outline:1px dashed #ccc;}</style></head><body "+i+">"+e+"</body></html>")}else{const n=s.head.getElementsByTagName("link"),o=s.head.getElementsByTagName("style");let a="";for(let e=0,t=n.length;e<t;e++)a+=n[e].outerHTML;for(let e=0,t=o.length;e<t;e++)a+=o[e].outerHTML;t.document.write('<!DOCTYPE html><html><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><title>'+i.toolbar.preview+"</title>"+a+'</head><body class="'+(null!==l._printClass?l._printClass:l._editableClass)+'" style="margin:10px auto !important; height:auto !important; outline:1px dashed #ccc;">'+e+"</body></html>")}},setDir:function(t){const n="rtl"===t,o=this._prevRtl!==n;this._prevRtl=l.rtl=n,o&&(this.plugins.align&&this.plugins.align.exchangeDir.call(this),e.tool.indent&&r.changeElement(e.tool.indent.firstElementChild,c.indent),e.tool.outdent&&r.changeElement(e.tool.outdent.firstElementChild,c.outdent));const s=e.element;n?(r.addClass(s.topArea,"se-rtl"),r.addClass(s.wysiwygFrame,"se-rtl")):(r.removeClass(s.topArea,"se-rtl"),r.removeClass(s.wysiwygFrame,"se-rtl"));const a=r.getListChildren(s.wysiwyg,(function(e){return r.isFormatElement(e)&&(e.style.marginRight||e.style.marginLeft||e.style.textAlign)}));for(let e,t,n,i=0,l=a.length;i<l;i++)e=a[i],n=e.style.marginRight,t=e.style.marginLeft,(n||t)&&(e.style.marginRight=t,e.style.marginLeft=n),n=e.style.textAlign,"left"===n?e.style.textAlign="right":"right"===n&&(e.style.textAlign="left");const d=e.tool;d.dir&&(r.changeTxt(d.dir.querySelector(".se-tooltip-text"),i.toolbar[l.rtl?"dir_ltr":"dir_rtl"]),r.changeElement(d.dir.firstElementChild,c[l.rtl?"dir_ltr":"dir_rtl"])),d.dir_ltr&&(n?r.removeClass(d.dir_ltr,"active"):r.addClass(d.dir_ltr,"active")),d.dir_rtl&&(n?r.addClass(d.dir_rtl,"active"):r.removeClass(d.dir_rtl,"active"))},setContents:function(t){this.removeRange();const n=null==t?"":this.convertContentsForEditor(t,null,null);if(this._variable.isCodeView){const e=this.convertHTMLForCodeView(n,!1);this._setCodeView(e)}else e.element.wysiwyg.innerHTML=n,this._resetComponents(),this.history.push(!1)},setIframeContents:function(e){if(!l.iframe)return!1;e.head&&(this._wd.head.innerHTML=this.options.__allowedScriptTag?e.head:e.head.replace(this.__scriptTagRegExp,"")),e.body&&(this._wd.body.innerHTML=this.convertContentsForEditor(e.body)),this._resetComponents()},getContents:function(t){const n=this.cleanHTML(e.element.wysiwyg.innerHTML,null,null),i=r.createElement("DIV");i.innerHTML=n;const o=r.getListChildren(i,(function(e){return e.hasAttribute("contenteditable")}));for(let e=0,t=o.length;e<t;e++)o[e].removeAttribute("contenteditable");if(l.fullPage&&!t){const e=r.getAttributesToString(this._wd.body,["contenteditable"]);return"<!DOCTYPE html><html>"+this._wd.head.outerHTML+"<body "+e+">"+i.innerHTML+"</body></html>"}return i.innerHTML},getFullContents:function(e){return'<div class="sun-editor-editable'+(l.rtl?" se-rtl":"")+'">'+this.getContents(e)+"</div>"},_makeLine:function(e,t){const n=l.defaultTag;if(1===e.nodeType){if(this.__disallowedTagNameRegExp.test(e.nodeName))return"";if(/__se__tag/.test(e.className))return e.outerHTML;const i=r.getListChildNodes(e,(function(e){return r.isSpanWithoutAttr(e)&&!r.getParentElement(e,r.isNotCheckingNode)}))||[];for(let e=i.length-1;e>=0;e--)i[e].outerHTML=i[e].innerHTML;return!t||r.isFormatElement(e)||r.isRangeFormatElement(e)||r.isComponent(e)||r.isFigures(e)||r.isAnchor(e)&&r.isMedia(e.firstElementChild)?r.isSpanWithoutAttr(e)?e.innerHTML:e.outerHTML:"<"+n+">"+(r.isSpanWithoutAttr(e)?e.innerHTML:e.outerHTML)+"</"+n+">"}if(3===e.nodeType){if(!t)return r._HTMLConvertor(e.textContent);const i=e.textContent.split(/\n/g);let l="";for(let e,t=0,o=i.length;t<o;t++)e=i[t].trim(),e.length>0&&(l+="<"+n+">"+r._HTMLConvertor(e)+"</"+n+">");return l}return 8===e.nodeType&&this._allowHTMLComments?"\x3c!--"+e.textContent.trim()+"--\x3e":""},_tagConvertor:function(e){if(!this._disallowedTextTagsRegExp)return e;const t=l._textTagsMap;return e.replace(this._disallowedTextTagsRegExp,(function(e,n,i,l){return n+("string"==typeof t[i]?t[i]:i)+(l?" "+l:"")}))},_deleteDisallowedTags:function(e){return e=e.replace(this.__disallowedTagsRegExp,"").replace(/<[a-z0-9]+\:[a-z0-9]+[^>^\/]*>[^>]*<\/[a-z0-9]+\:[a-z0-9]+>/gi,""),/\bfont\b/i.test(this.options._editorTagsWhitelist)||(e=e.replace(/(<\/?)font(\s?)/gi,"$1span$2")),e.replace(this.editorTagsWhitelistRegExp,"").replace(this.editorTagsBlacklistRegExp,"")},_convertFontSize:function(e,t){const n=this._w.Math,i=t.match(/(\d+(?:\.\d+)?)(.+)/),l=i?1*i[1]:r.fontValueMap[t],o=i?i[2]:"rem";let s=l;switch(/em/.test(o)?s=n.round(l/.0625):"pt"===o?s=n.round(1.333*l):"%"===o&&(s=l/100),e){case"em":case"rem":case"%":return(.0625*s).toFixed(2)+e;case"pt":return n.floor(s/1.333)+e;default:return s+e}},_cleanStyle:function(e,t,n){let i=(e.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/)||[])[0];if(/span/i.test(n)&&!i&&(e.match(/<[^\s]+\s(.+)/)||[])[1]){const t=(e.match(/\ssize="([^"]+)"/i)||[])[1],n=(e.match(/\sface="([^"]+)"/i)||[])[1],l=(e.match(/\scolor="([^"]+)"/i)||[])[1];(t||n||l)&&(i='style="'+(t?"font-size:"+this.util.getNumber(t/3.333,1)+"rem;":"")+(n?"font-family:"+n+";":"")+(l?"color:"+l+";":"")+'"')}if(i){t||(t=[]);const e=i.replace(/&quot;/g,"").match(this._cleanStyleRegExp[n]);if(e){const n=[];for(let t,i=0,o=e.length;i<o;i++)if(t=e[i].match(/([a-zA-Z0-9-]+)(:)([^"']+)/),t&&!/inherit|initial|revert|unset/i.test(t[3])){const e=r.kebabToCamelCase(t[1].trim()),i=this.wwComputedStyle[e].replace(/"/g,""),o=t[3].trim();switch(e){case"fontFamily":if(!l.plugins.font||-1===l.font.indexOf(o))continue;break;case"fontSize":if(!l.plugins.fontSize)continue;this._cleanStyleRegExp.fontSizeUnit.test(t[0])||(t[0]=t[0].replace((t[0].match(/:\s*([^;]+)/)||[])[1],this._convertFontSize.bind(this,l.fontSizeUnit)));break;case"color":if(!l.plugins.fontColor||/rgba\(([0-9]+\s*,\s*){3}0\)|windowtext/i.test(o))continue;break;case"backgroundColor":if(!l.plugins.hiliteColor||/rgba\(([0-9]+\s*,\s*){3}0\)|windowtext/i.test(o))continue}i!==o&&n.push(t[0])}n.length>0&&t.push('style="'+n.join(";")+'"')}}return t},_cleanTags:function(e,t,n){if(/^<[a-z0-9]+\:[a-z0-9]+/i.test(t))return t;let i=null;const l=n.match(/(?!<)[a-zA-Z0-9\-]+/)[0].toLowerCase(),o=this._attributesTagsBlacklist[l];t=t.replace(/\s(?:on[a-z]+)\s*=\s*(")[^"]*\1/gi,""),t=o?t.replace(o,""):t.replace(this._attributesBlacklistRegExp,"");const s=this._attributesTagsWhitelist[l];if(i=s?t.match(s):t.match(e?this._attributesWhitelistRegExp:this._attributesWhitelistRegExp_all_data),e||"span"===l||"li"===l||this._cleanStyleRegExp[l])if("a"===l){const e=t.match(/(?:(?:id|name)\s*=\s*(?:"|')[^"']*(?:"|'))/g);e&&(i||(i=[]),i.push(e[0]))}else i&&/style=/i.test(i.toString())||("span"!==l&&"li"!==l||(i=this._cleanStyle(t,i,"span")),this._cleanStyleRegExp[l]?i=this._cleanStyle(t,i,l):/^(P|DIV|H[1-6]|PRE)$/i.test(l)&&(i=this._cleanStyle(t,i,"format")));else{const e=t.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);e&&!i?i=[e[0]]:e&&!i.some((function(e){return/^style/.test(e.trim())}))&&i.push(e[0])}if(r.isFigures(l)){const e=t.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);i||(i=[]),e&&i.push(e[0])}if(i)for(let e,t=0,l=i.length;t<l;t++)e=/^(?:href|src)\s*=\s*('|"|\s)*javascript\s*\:/i.test(i[t].trim())?"":i[t],n+=(/^\s/.test(e)?"":" ")+e;return n},_editFormat:function(e){let t,n="";const i=e.childNodes;for(let e,o=0,s=i.length;o<s;o++)e=i[o],8===e.nodeType?n+="\x3c!-- "+e.textContent+" --\x3e":r.isFormatElement(e)||r.isRangeFormatElement(e)||r.isComponent(e)||/meta/i.test(e.nodeName)?(t&&(n+=t.outerHTML,t=null),n+=e.outerHTML):(t||(t=r.createElement(l.defaultTag)),t.appendChild(e),o--,s--);return t&&(n+=t.outerHTML),s.createRange().createContextualFragment(n)},_convertListCell:function(e){let t="";for(let n,i=0,l=e.length;i<l;i++)n=e[i],1===n.nodeType?r.isList(n)?t+=n.innerHTML:r.isListCell(n)?t+=n.outerHTML:r.isFormatElement(n)?t+="<li>"+(n.innerHTML.trim()||"<br>")+"</li>":r.isRangeFormatElement(n)&&!r.isTable(n)?t+=this._convertListCell(n):t+="<li>"+n.outerHTML+"</li>":t+="<li>"+(n.textContent||"<br>")+"</li>";return t},_isFormatData:function(e){let t=!1;for(let n,i=0,l=e.length;i<l;i++)if(n=e[i],1===n.nodeType&&!r.isTextStyleElement(n)&&!r.isBreak(n)&&!this.__disallowedTagNameRegExp.test(n.nodeName)){t=!0;break}return t},cleanHTML:function(e,t,n){if(!l.strictMode)return e;e=this._deleteDisallowedTags(this._parser.parseFromString(r.htmlCompress(e),"text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g,this._cleanTags.bind(this,!0)).replace(/<br\/?>$/i,"");const i=s.createRange().createContextualFragment(e);try{r._consistencyCheckOfHTML(i,this._htmlCheckWhitelistRegExp,this._htmlCheckBlacklistRegExp,this._classNameFilter)}catch(e){console.warn("[SUNEDITOR.cleanHTML.consistencyCheck.fail] "+e)}if(this.managedTagsInfo&&this.managedTagsInfo.query){const e=i.querySelectorAll(this.managedTagsInfo.query);for(let t,n,i=0,l=e.length;i<l;i++){n=[].slice.call(e[i].classList);for(let l=0,o=n.length;l<o;l++)if(t=this.managedTagsInfo.map[n[l]],t){t(e[i]);break}}}let o=i.childNodes,a="";const c=this._isFormatData(o);c&&(o=this._editFormat(i).childNodes);for(let e,t=0,n=o.length;t<n;t++)e=o[t],this.__allowedScriptRegExp.test(e.nodeName)?a+=e.outerHTML:a+=this._makeLine(e,c);return a=r.htmlRemoveWhiteSpace(a),a?(t&&(a=a.replace("string"==typeof t?r.createTagsWhitelist(t):t,"")),n&&(a=a.replace("string"==typeof n?r.createTagsBlacklist(n):n,""))):a=e,this._tagConvertor(a)},convertContentsForEditor:function(e){if(!l.strictMode)return e;e=this._deleteDisallowedTags(this._parser.parseFromString(r.htmlCompress(e),"text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g,this._cleanTags.bind(this,!0));const t=s.createRange().createContextualFragment(e);try{r._consistencyCheckOfHTML(t,this._htmlCheckWhitelistRegExp,this._htmlCheckBlacklistRegExp,this._classNameFilter)}catch(e){console.warn("[SUNEDITOR.convertContentsForEditor.consistencyCheck.fail] "+e)}if(this.managedTagsInfo&&this.managedTagsInfo.query){const e=t.querySelectorAll(this.managedTagsInfo.query);for(let t,n,i=0,l=e.length;i<l;i++){n=[].slice.call(e[i].classList);for(let l=0,o=n.length;l<o;l++)if(t=this.managedTagsInfo.map[n[l]],t){t(e[i]);break}}}const n=t.childNodes;let i="",o=null;for(let e,t=0;t<n.length;t++)if(e=n[t],this.__allowedScriptRegExp.test(e.nodeName))i+=e.outerHTML;else{if(!(r.isFormatElement(e)||r.isRangeFormatElement(e)||r.isComponent(e)||r.isFigures(e)||8===e.nodeType||/__se__tag/.test(e.className))){if(o||(o=r.createElement(l.defaultTag)),o.appendChild(e),t--,n[t+1]&&!r.isFormatElement(n[t+1]))continue;e=o,o=null}o&&(i+=this._makeLine(o,!0),o=null),i+=this._makeLine(e,!0)}return o&&(i+=this._makeLine(o,!0)),0===i.length?"<"+l.defaultTag+"><br></"+l.defaultTag+">":(i=r.htmlRemoveWhiteSpace(i),this._tagConvertor(i))},convertHTMLForCodeView:function(e,t){let n="";const i=a.RegExp,l=new i("^(BLOCKQUOTE|PRE|TABLE|THEAD|TBODY|TR|TH|TD|OL|UL|IMG|IFRAME|VIDEO|AUDIO|FIGURE|FIGCAPTION|HR|BR|CANVAS|SELECT)$","i"),o="string"==typeof e?s.createRange().createContextualFragment(e):e,c=function(e){return this.isFormatElement(e)||this.isComponent(e)}.bind(r),d=t?"":"\n";let u=t?0:1*this._variable.codeIndent;return u=u>0?new a.Array(u+1).join(" "):"",function e(t,o){const s=t.childNodes,h=l.test(t.nodeName),g=h?o:"";for(let p,m,f,_,b,v,y=0,C=s.length;y<C;y++)p=s[y],_=l.test(p.nodeName),m=_?d:"",f=!c(p)||h||/^(TH|TD)$/i.test(t.nodeName)?"":d,8!==p.nodeType?3!==p.nodeType?0!==p.childNodes.length?p.outerHTML?(b=p.nodeName.toLowerCase(),v=g||_?o:"",n+=(f||(h?"":m))+v+p.outerHTML.match(i("<"+b+"[^>]*>","i"))[0]+m,e(p,o+u),n+=(/\n$/.test(n)?v:"")+"</"+b+">"+(f||m||h||/^(TH|TD)$/i.test(p.nodeName)?d:"")):n+=(new a.XMLSerializer).serializeToString(p):n+=(/^HR$/i.test(p.nodeName)?d:"")+(/^PRE$/i.test(p.parentElement.nodeName)&&/^BR$/i.test(p.nodeName)?"":g)+p.outerHTML+m:r.isList(p.parentElement)||(n+=r._HTMLConvertor(/^\n+$/.test(p.data)?"":p.data)):n+="\n\x3c!-- "+p.textContent.trim()+" --\x3e"+m}(o,""),n.trim()+d},addDocEvent:function(e,t,n){s.addEventListener(e,t,n),l.iframe&&this._wd.addEventListener(e,t)},removeDocEvent:function(e,t){s.removeEventListener(e,t),l.iframe&&this._wd.removeEventListener(e,t)},_charCount:function(e){const t=l.maxCharCount,n=l.charCounterType;let i=0;if(e&&(i=this.getCharLength(e,n)),this._setCharCount(),t>0){let e=!1;const l=h.getCharCount(n);if(l>t){if(e=!0,i>0){this._editorRange();const e=this.getRange(),n=e.endOffset-1,i=this.getSelectionNode().textContent,o=e.endOffset-(l-t);this.getSelectionNode().textContent=i.slice(0,o<0?0:o)+i.slice(e.endOffset,i.length),this.setRange(e.endContainer,n,e.endContainer,n)}}else l+i>t&&(e=!0);if(e&&(this._callCounterBlink(),i>0))return!1}return!0},checkCharCount:function(e,t){if(l.maxCharCount){const n=t||l.charCounterType,i=this.getCharLength("string"==typeof e?e:this._charTypeHTML&&1===e.nodeType?e.outerHTML:e.textContent,n);if(i>0&&i+h.getCharCount(n)>l.maxCharCount)return this._callCounterBlink(),!1}return!0},getCharLength:function(e,t){return/byte/.test(t)?r.getByteLength(e):e.length},resetResponsiveToolbar:function(){d.controllersOff();const t=u._responsiveButtonSize;if(t){let n=0;n=(d._isBalloon||d._isInline)&&"auto"===l.toolbarWidth?e.element.topArea.offsetWidth:e.element.toolbar.offsetWidth;let i="default";for(let e=1,l=t.length;e<l;e++)if(n<t[e]){i=t[e]+"";break}u._responsiveCurrentSize!==i&&(u._responsiveCurrentSize=i,h.setToolbarButtons(u._responsiveButtons[i]))}},_setCharCount:function(){e.element.charCounter&&a.setTimeout(function(e,t){this.textContent&&e&&(this.textContent=e.getCharCount(t.charCounterType))}.bind(e.element.charCounter,h,l),0)},_callCounterBlink:function(){const t=e.element.charWrapper;t&&!r.hasClass(t,"se-blink")&&(r.addClass(t,"se-blink"),a.setTimeout((function(){r.removeClass(t,"se-blink")}),600))},_checkComponents:function(){for(let e=0,t=this._fileInfoPluginsCheck.length;e<t;e++)this._fileInfoPluginsCheck[e]()},_resetComponents:function(){for(let e=0,t=this._fileInfoPluginsReset.length;e<t;e++)this._fileInfoPluginsReset[e]()},_setCodeView:function(t){l.codeMirrorEditor?l.codeMirrorEditor.getDoc().setValue(t):e.element.code.value=t},_getCodeView:function(){return l.codeMirrorEditor?l.codeMirrorEditor.getDoc().getValue():e.element.code.value},_setKeyEffect:function(e){const t=this.commandMap,i=this.activePlugins;for(let l in t)e.indexOf(l)>-1||!r.hasOwn(t,l)||(i.indexOf(l)>-1?n[l].active.call(this,null):t.OUTDENT&&/^OUTDENT$/i.test(l)?r.isImportantDisabled(t.OUTDENT)||t.OUTDENT.setAttribute("disabled",!0):t.INDENT&&/^INDENT$/i.test(l)?r.isImportantDisabled(t.INDENT)||t.INDENT.removeAttribute("disabled"):r.removeClass(t[l],"active"))},_init:function(i,o){const c=a.RegExp;this._ww=l.iframe?e.element.wysiwygFrame.contentWindow:a,this._wd=s,this._charTypeHTML="byte-html"===l.charCounterType,this.wwComputedStyle=a.getComputedStyle(e.element.wysiwyg),this._editorHeight=e.element.wysiwygFrame.offsetHeight,this._editorHeightPadding=r.getNumber(this.wwComputedStyle.getPropertyValue("padding-top"))+r.getNumber(this.wwComputedStyle.getPropertyValue("padding-bottom")),this._classNameFilter=function(e){return this.test(e)?e:""}.bind(l.allowedClassNames);const d=l.__allowedScriptTag?"":"script|";if(this.__scriptTagRegExp=new c("<(script)[^>]*>([\\s\\S]*?)<\\/\\1>|<script[^>]*\\/?>","gi"),this.__disallowedTagsRegExp=new c("<("+d+"style)[^>]*>([\\s\\S]*?)<\\/\\1>|<("+d+"style)[^>]*\\/?>","gi"),this.__disallowedTagNameRegExp=new c("^("+d+"meta|link|style|[a-z]+:[a-z]+)$","i"),this.__allowedScriptRegExp=new c("^"+(l.__allowedScriptTag?"script":"")+"$","i"),!l.iframe&&"function"==typeof a.ShadowRoot){let t=e.element.wysiwygFrame;for(;t;){if(t.shadowRoot){this._shadowRoot=t.shadowRoot;break}if(t instanceof a.ShadowRoot){this._shadowRoot=t;break}t=t.parentNode}this._shadowRoot&&(this._shadowRootControllerEventTarget=[])}const u=a.Object.keys(l._textTagsMap),h=l.addTagsWhitelist?l.addTagsWhitelist.split("|").filter((function(e){return/b|i|ins|s|strike/i.test(e)})):[];for(let e=0;e<h.length;e++)u.splice(u.indexOf(h[e].toLowerCase()),1);this._disallowedTextTagsRegExp=0===u.length?null:new c("(<\\/?)("+u.join("|")+")\\b\\s*([^>^<]+)?\\s*(?=>)","gi");const g=function(e,t){return e?"*"===e?"[a-z-]+":t?e+"|"+t:e:"^"},p="contenteditable|colspan|rowspan|target|href|download|rel|src|alt|class|type|controls|origin-size";this._allowHTMLComments=l._editorTagsWhitelist.indexOf("//")>-1||"*"===l._editorTagsWhitelist,this._htmlCheckWhitelistRegExp=new c("^("+g(l._editorTagsWhitelist.replace("|//",""),"")+")$","i"),this._htmlCheckBlacklistRegExp=new c("^("+(l.tagsBlacklist||"^")+")$","i"),this.editorTagsWhitelistRegExp=r.createTagsWhitelist(g(l._editorTagsWhitelist.replace("|//","|\x3c!--|--\x3e"),"")),this.editorTagsBlacklistRegExp=r.createTagsBlacklist(l.tagsBlacklist.replace("|//","|\x3c!--|--\x3e")),this.pasteTagsWhitelistRegExp=r.createTagsWhitelist(g(l.pasteTagsWhitelist,"")),this.pasteTagsBlacklistRegExp=r.createTagsBlacklist(l.pasteTagsBlacklist);const m='\\s*=\\s*(")[^"]*\\1',f=l.attributesWhitelist;let _={},b="";if(f)for(let e in f)r.hasOwn(f,e)&&!/^on[a-z]+$/i.test(f[e])&&("all"===e?b=g(f[e],p):_[e]=new c("\\s(?:"+g(f[e],"")+")"+m,"ig"));this._attributesWhitelistRegExp=new c("\\s(?:"+(b||p+"|data-format|data-size|data-file-size|data-file-name|data-origin|data-align|data-image-link|data-rotate|data-proportion|data-percentage|data-exp|data-font-size")+")"+m,"ig"),this._attributesWhitelistRegExp_all_data=new c("\\s(?:"+(b||p)+"|data-[a-z0-9\\-]+)"+m,"ig"),this._attributesTagsWhitelist=_;const v=l.attributesBlacklist;if(_={},b="",v)for(let e in v)r.hasOwn(v,e)&&("all"===e?b=g(v[e],""):_[e]=new c("\\s(?:"+g(v[e],"")+")"+m,"ig"));this._attributesBlacklistRegExp=new c("\\s(?:"+(b||"^")+")"+m,"ig"),this._attributesTagsBlacklist=_,this._isInline=/inline/i.test(l.mode),this._isBalloon=/balloon|balloon-always/i.test(l.mode),this._isBalloonAlways=/balloon-always/i.test(l.mode),this._cachingButtons(),this._fileInfoPluginsCheck=[],this._fileInfoPluginsReset=[],this.managedTagsInfo={query:"",map:{}};const y=[];this.activePlugins=[],this._fileManager.tags=[],this._fileManager.pluginMap={};let C,w,x=[];for(let e in n)if(r.hasOwn(n,e)){if(C=n[e],w=t[e],(C.active||C.action)&&w&&this.callPlugin(e,null,w),"function"==typeof C.checkFileInfo&&"function"==typeof C.resetFileInfo&&(this.callPlugin(e,null,w),this._fileInfoPluginsCheck.push(C.checkFileInfo.bind(this)),this._fileInfoPluginsReset.push(C.resetFileInfo.bind(this))),a.Array.isArray(C.fileTags)){const t=C.fileTags;this.callPlugin(e,null,w),this._fileManager.tags=this._fileManager.tags.concat(t),x.push(e);for(let n=0,i=t.length;n<i;n++)this._fileManager.pluginMap[t[n].toLowerCase()]=e}if(C.managedTags){const e=C.managedTags();y.push("."+e.className),this.managedTagsInfo.map[e.className]=e.method.bind(this)}}this.managedTagsInfo.query=y.toString(),this._fileManager.queryString=this._fileManager.tags.join(","),this._fileManager.regExp=new c("^("+(this._fileManager.tags.join("|")||"^")+")$","i"),this._fileManager.pluginRegExp=new c("^("+(0===x.length?"^":x.join("|"))+")$","i"),this._variable._originCssText=e.element.topArea.style.cssText,this._placeholder=e.element.placeholder,this._lineBreaker=e.element.lineBreaker,this._lineBreakerButton=this._lineBreaker.querySelector("button"),this.history=function(e,t){const n=e._w,i=e.util,l=e.options.historyStackDelayTime;let o=e.context.element,s=e.context.tool.undo,a=e.context.tool.redo,r=null,c=0,d=[];function u(){const n=d[c];o.wysiwyg.innerHTML=n.contents,e.setRange(i.getNodeFromPath(n.s.path,o.wysiwyg),n.s.offset,i.getNodeFromPath(n.e.path,o.wysiwyg),n.e.offset),e.focus(),d.length<=1?(s&&s.setAttribute("disabled",!0),a&&a.setAttribute("disabled",!0)):0===c?(s&&s.setAttribute("disabled",!0),a&&a.removeAttribute("disabled")):c===d.length-1?(s&&s.removeAttribute("disabled"),a&&a.setAttribute("disabled",!0)):(s&&s.removeAttribute("disabled"),a&&a.removeAttribute("disabled")),e.controllersOff(),e._checkComponents(),e._setCharCount(),e._resourcesStateChange(),t()}function h(){e._checkComponents();const n=o.wysiwyg.innerHTML;if(!n||d[c]&&n===d[c].contents)return;c++;const l=e._variable._range;d.length>c&&(d=d.slice(0,c),a&&a.setAttribute("disabled",!0)),d[c]=l?{contents:n,s:{path:i.getNodePath(l.startContainer,null,null),offset:l.startOffset},e:{path:i.getNodePath(l.endContainer,null,null),offset:l.endOffset}}:{contents:n,s:{path:[0,0],offset:[0,0]},e:{path:0,offset:0}},1===c&&s&&s.removeAttribute("disabled"),e._setCharCount(),t()}return{stack:d,push:function(t){n.setTimeout(e._resourcesStateChange.bind(e));const i="number"==typeof t?t>0?t:0:t?l:0;i&&!r||(n.clearTimeout(r),i)?r=n.setTimeout((function(){n.clearTimeout(r),r=null,h()}),i):h()},undo:function(){c>0&&(c--,u())},redo:function(){d.length-1>c&&(c++,u())},go:function(e){c=e<0?d.length-1:e,u()},getCurrentIndex:function(){return c},reset:function(n){s&&s.setAttribute("disabled",!0),a&&a.setAttribute("disabled",!0),e._variable.isChanged=!1,e.context.tool.save&&e.context.tool.save.setAttribute("disabled",!0),d.splice(0),c=0,d[c]={contents:e.getContents(!0),s:{path:[0,0],offset:0},e:{path:[0,0],offset:0}},n||t()},_resetCachingButton:function(){o=e.context.element,s=e.context.tool.undo,a=e.context.tool.redo,0===c?(s&&s.setAttribute("disabled",!0),a&&c===d.length-1&&a.setAttribute("disabled",!0),e._variable.isChanged=!1,e.context.tool.save&&e.context.tool.save.setAttribute("disabled",!0)):c===d.length-1&&a&&a.setAttribute("disabled",!0)},_destroy:function(){r&&n.clearTimeout(r),d=null}}}(this,this._onChange_historyStack.bind(this)),this.addModule([z]),l.iframe&&(this._wd=e.element.wysiwygFrame.contentDocument,e.element.wysiwyg=this._wd.body,l._editorStyles.editor&&(e.element.wysiwyg.style.cssText=l._editorStyles.editor),"auto"===l.height&&(this._iframeAuto=this._wd.body)),this._initWysiwygArea(i,o)},_cachingButtons:function(){this.codeViewDisabledButtons=e.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~="se-code-view-enabled"]):not([data-display="MORE"])'),this.resizingDisabledButtons=e.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~="se-resizing-enabled"]):not([data-display="MORE"])');const t=e.tool,n=this.commandMap;n.INDENT=t.indent,n.OUTDENT=t.outdent,n[l.textTags.bold.toUpperCase()]=t.bold,n[l.textTags.underline.toUpperCase()]=t.underline,n[l.textTags.italic.toUpperCase()]=t.italic,n[l.textTags.strike.toUpperCase()]=t.strike,n[l.textTags.sub.toUpperCase()]=t.subscript,n[l.textTags.sup.toUpperCase()]=t.superscript,this._styleCommandMap={fullScreen:t.fullScreen,showBlocks:t.showBlocks,codeView:t.codeView},this._saveButtonStates()},_initWysiwygArea:function(t,n){e.element.wysiwyg.innerHTML=t?n:this.convertContentsForEditor(("string"==typeof n?n:/^TEXTAREA$/i.test(e.element.originElement.nodeName)?e.element.originElement.value:e.element.originElement.innerHTML)||"")},_resourcesStateChange:function(){this._iframeAutoHeight(),this._checkPlaceholder()},_onChange_historyStack:function(){this.hasFocus&&u._applyTagEffects(),this._variable.isChanged=!0,e.tool.save&&e.tool.save.removeAttribute("disabled"),h.onChange&&h.onChange(this.getContents(!0),this),"block"===e.element.toolbar.style.display&&u._showToolbarBalloon()},_iframeAutoHeight:function(){this._iframeAuto?a.setTimeout((function(){const t=d._iframeAuto.offsetHeight;e.element.wysiwygFrame.style.height=t+"px",r.isResizeObserverSupported||d.__callResizeFunction(t,null)})):r.isResizeObserverSupported||d.__callResizeFunction(e.element.wysiwygFrame.offsetHeight,null)},__callResizeFunction:function(e,t){e=-1===e?t.borderBoxSize&&t.borderBoxSize[0]?t.borderBoxSize[0].blockSize:t.contentRect.height+this._editorHeightPadding:e,this._editorHeight!==e&&("function"==typeof h.onResizeEditor&&h.onResizeEditor(e,this._editorHeight,d,t),this._editorHeight=e)},_checkPlaceholder:function(){if(this._placeholder){if(this._variable.isCodeView)return void(this._placeholder.style.display="none");const t=e.element.wysiwyg;!r.onlyZeroWidthSpace(t.textContent)||t.querySelector(r._allowedEmptyNodeList)||(t.innerText.match(/\n/g)||"").length>1?this._placeholder.style.display="none":this._placeholder.style.display="block"}},_setDefaultFormat:function(e){if(this._fileManager.pluginRegExp.test(this.currentControllerName))return;const t=this.getRange(),n=t.commonAncestorContainer,i=t.startContainer,o=r.getRangeFormatElement(n,null);let s,a,c;const d=r.getParentElement(n,r.isComponent);if(!d||r.isTable(d)){if(1===n.nodeType&&"true"===n.getAttribute("data-se-embed")){let e=n.nextElementSibling;return r.isFormatElement(e)||(e=this.appendFormatTag(n,l.defaultTag)),void this.setRange(e.firstChild,0,e.firstChild,0)}if(!r.isRangeFormatElement(i)&&!r.isWysiwygDiv(i)||!r.isComponent(i.children[t.startOffset])&&!r.isComponent(i.children[t.startOffset-1])){if(r.getParentElement(n,r.isNotCheckingNode))return null;if(o)return c=r.createElement(e||l.defaultTag),c.innerHTML=o.innerHTML,0===c.childNodes.length&&(c.innerHTML=r.zeroWidthSpace),o.innerHTML=c.outerHTML,c=o.firstChild,s=r.getEdgeChildNodes(c,null).sc,s||(s=r.createTextNode(r.zeroWidthSpace),c.insertBefore(s,c.firstChild)),a=s.textContent.length,void this.setRange(s,a,s,a);if(r.isRangeFormatElement(n)&&n.childNodes.length<=1){let e=null;return 1===n.childNodes.length&&r.isBreak(n.firstChild)?e=n.firstChild:(e=r.createTextNode(r.zeroWidthSpace),n.appendChild(e)),void this.setRange(e,1,e,1)}try{if(3===n.nodeType&&(c=r.createElement(e||l.defaultTag),n.parentNode.insertBefore(c,n),c.appendChild(n)),r.isBreak(c.nextSibling)&&r.removeItem(c.nextSibling),r.isBreak(c.previousSibling)&&r.removeItem(c.previousSibling),r.isBreak(s)){const e=r.createTextNode(r.zeroWidthSpace);s.parentNode.insertBefore(e,s),s=e}}catch(t){this.execCommand("formatBlock",!1,e||l.defaultTag),this.removeRange(),this._editorRange()}if(r.isBreak(c.nextSibling)&&r.removeItem(c.nextSibling),r.isBreak(c.previousSibling)&&r.removeItem(c.previousSibling),r.isBreak(s)){const e=r.createTextNode(r.zeroWidthSpace);s.parentNode.insertBefore(e,s),s=e}this.effectNode=null,this.nativeFocus()}}},_setOptionsInit:function(t,n){this.context=e=A(t.originElement,this._getConstructed(t),l),this._componentsInfoReset=!0,this._editorInit(!0,n)},_editorInit:function(t,n){this._init(t,n),u._addEvent(),this._setCharCount(),u._offStickyToolbar(),u.onResize_window(),e.element.toolbar.style.visibility="";const i=l.frameAttrbutes;for(let t in i)e.element.wysiwyg.setAttribute(t,i[t]);this._checkComponents(),this._componentsInfoInit=!1,this._componentsInfoReset=!1,this.history.reset(!0),a.setTimeout((function(){"function"==typeof d._resourcesStateChange&&(u._resizeObserver&&u._resizeObserver.observe(e.element.wysiwygFrame),u._toolbarObserver&&u._toolbarObserver.observe(e.element._toolbarShadow),d._resourcesStateChange(),"function"==typeof h.onload&&h.onload(d,t))}))},_getConstructed:function(e){return{_top:e.topArea,_relative:e.relative,_toolBar:e.toolbar,_toolbarShadow:e._toolbarShadow,_menuTray:e._menuTray,_editorArea:e.editorArea,_wysiwygArea:e.wysiwygFrame,_codeArea:e.code,_placeholder:e.placeholder,_resizingBar:e.resizingBar,_navigation:e.navigation,_charCounter:e.charCounter,_charWrapper:e.charWrapper,_loading:e.loading,_lineBreaker:e.lineBreaker,_lineBreaker_t:e.lineBreaker_t,_lineBreaker_b:e.lineBreaker_b,_resizeBack:e.resizeBackground,_stickyDummy:e._stickyDummy,_arrow:e._arrow}}},u={_IEisComposing:!1,_lineBreakerBind:null,_responsiveCurrentSize:"default",_responsiveButtonSize:null,_responsiveButtons:null,_cursorMoveKeyCode:new a.RegExp("^(8|3[2-9]|40|46)$"),_directionKeyCode:new a.RegExp("^(8|13|3[2-9]|40|46)$"),_nonTextKeyCode:new a.RegExp("^(8|13|1[6-9]|20|27|3[3-9]|40|45|46|11[2-9]|12[0-3]|144|145)$"),_historyIgnoreKeyCode:new a.RegExp("^(1[6-9]|20|27|3[3-9]|40|45|11[2-9]|12[0-3]|144|145)$"),_onButtonsCheck:new a.RegExp("^("+a.Object.keys(l._textTagsMap).join("|")+")$","i"),_frontZeroWidthReg:new a.RegExp(r.zeroWidthSpace+"+",""),_keyCodeShortcut:{65:"A",66:"B",83:"S",85:"U",73:"I",89:"Y",90:"Z",219:"[",221:"]"},_shortcutCommand:function(e,t){let n=null;const i=u._keyCodeShortcut[e];switch(i){case"A":n="selectAll";break;case"B":-1===l.shortcutsDisable.indexOf("bold")&&(n="bold");break;case"S":t&&-1===l.shortcutsDisable.indexOf("strike")?n="strike":t||-1!==l.shortcutsDisable.indexOf("save")||(n="save");break;case"U":-1===l.shortcutsDisable.indexOf("underline")&&(n="underline");break;case"I":-1===l.shortcutsDisable.indexOf("italic")&&(n="italic");break;case"Z":-1===l.shortcutsDisable.indexOf("undo")&&(n=t?"redo":"undo");break;case"Y":-1===l.shortcutsDisable.indexOf("undo")&&(n="redo");break;case"[":-1===l.shortcutsDisable.indexOf("indent")&&(n=l.rtl?"indent":"outdent");break;case"]":-1===l.shortcutsDisable.indexOf("indent")&&(n=l.rtl?"outdent":"indent")}return n?(d.commandHandler(d.commandMap[n],n),!0):!!i},_applyTagEffects:function(){let t=d.getSelectionNode();if(t===d.effectNode)return;d.effectNode=t;const i=l.rtl?"marginRight":"marginLeft",o=d.commandMap,s=u._onButtonsCheck,a=[],c=[],h=d.activePlugins,g=h.length;let p="";for(;t.firstChild;)t=t.firstChild;for(let e=t;!r.isWysiwygDiv(e)&&e;e=e.parentNode)if(1===e.nodeType&&!r.isBreak(e)){if(p=e.nodeName.toUpperCase(),c.push(p),!d.isReadOnly)for(let t,i=0;i<g;i++)t=h[i],-1===a.indexOf(t)&&n[t].active.call(d,e)&&a.push(t);r.isFormatElement(e)?(-1===a.indexOf("OUTDENT")&&o.OUTDENT&&!r.isImportantDisabled(o.OUTDENT)&&(r.isListCell(e)||e.style[i]&&r.getNumber(e.style[i],0)>0)&&(a.push("OUTDENT"),o.OUTDENT.removeAttribute("disabled")),-1===a.indexOf("INDENT")&&o.INDENT&&!r.isImportantDisabled(o.INDENT)&&(a.push("INDENT"),r.isListCell(e)&&!e.previousElementSibling?o.INDENT.setAttribute("disabled",!0):o.INDENT.removeAttribute("disabled"))):s&&s.test(p)&&(a.push(p),r.addClass(o[p],"active"))}d._setKeyEffect(a),d._variable.currentNodes=c.reverse(),d._variable.currentNodesMap=a,l.showPathLabel&&(e.element.navigation.textContent=d._variable.currentNodes.join(" > "))},_buttonsEventHandler:function(e){let t=e.target;if(d._bindControllersOff&&e.stopPropagation(),/^(input|textarea|select|option)$/i.test(t.nodeName)?d._antiBlur=!1:e.preventDefault(),r.getParentElement(t,".se-submenu"))e.stopPropagation(),d._notHideToolbar=!0;else{let n=t.getAttribute("data-command"),i=t.className;for(;!n&&!/se-menu-list/.test(i)&&!/sun-editor-common/.test(i);)t=t.parentNode,n=t.getAttribute("data-command"),i=t.className;n!==d._submenuName&&n!==d._containerName||e.stopPropagation()}},addGlobalEvent:(e,t,n)=>(l.iframe&&d._ww.addEventListener(e,t,n),d._w.addEventListener(e,t,n),{type:e,listener:t,useCapture:n}),removeGlobalEvent(e,t,n){e&&("object"==typeof e&&(t=e.listener,n=e.useCapture,e=e.type),l.iframe&&d._ww.removeEventListener(e,t,n),d._w.removeEventListener(e,t,n))},onClick_toolbar:function(e){let t=e.target,n=t.getAttribute("data-display"),i=t.getAttribute("data-command"),l=t.className;for(d.controllersOff();t.parentNode&&!i&&!/se-menu-list/.test(l)&&!/se-toolbar/.test(l);)t=t.parentNode,i=t.getAttribute("data-command"),n=t.getAttribute("data-display"),l=t.className;(i||n)&&(t.disabled||d.actionCall(i,n,t))},__selectionSyncEvent:null,onMouseDown_wysiwyg:function(t){if(d.isReadOnly||r.isNonEditable(e.element.wysiwyg))return;if(r._isExcludeSelectionElement(t.target))return void t.preventDefault();if(u.removeGlobalEvent(u.__selectionSyncEvent),u.__selectionSyncEvent=u.addGlobalEvent("mouseup",(function(){d._editorRange(),u.removeGlobalEvent(u.__selectionSyncEvent)})),"function"==typeof h.onMouseDown&&!1===h.onMouseDown(t,d))return;const n=r.getParentElement(t.target,r.isCell);if(n){const e=d.plugins.table;e&&n!==e._fixedCell&&!e._shift&&d.callPlugin("table",(function(){e.onTableCellMultiSelect.call(d,n,!1)}),null)}d._isBalloon&&u._hideToolbar()},onClick_wysiwyg:function(t){const n=t.target;if(d.isReadOnly)return t.preventDefault(),r.isAnchor(n)&&a.open(n.href,n.target),!1;if(r.isNonEditable(e.element.wysiwyg))return;if("function"==typeof h.onClick&&!1===h.onClick(t,d))return;const i=d.getFileComponent(n);if(i)return t.preventDefault(),void d.selectComponent(i.target,i.pluginName);const o=r.getParentElement(n,"FIGCAPTION");if(o&&r.isNonEditable(o)&&(t.preventDefault(),o.focus(),d._isInline&&!d._inlineToolbarAttr.isShow)){u._showToolbarInline();const e=function(){u._hideToolbar(),o.removeEventListener("blur",e)};o.addEventListener("blur",e)}if(d._editorRange(),3===t.detail){let e=d.getRange();r.isFormatElement(e.endContainer)&&0===e.endOffset&&(e=d.setRange(e.startContainer,e.startOffset,e.startContainer,e.startContainer.length),d._rangeInfo(e,d.getSelection()))}const s=d.getSelectionNode(),c=r.getFormatElement(s,null),g=r.getRangeFormatElement(s,null);let p=s;for(;p.firstChild;)p=p.firstChild;const m=d.getFileComponent(p);if(m){const e=d.getRange();g||e.startContainer!==e.endContainer||d.selectComponent(m.target,m.pluginName)}else d.currentFileComponentInfo&&d.controllersOff();if(c||r.isNonEditable(n)||r.isList(g))u._applyTagEffects();else{const e=d.getRange();if(r.getFormatElement(e.startContainer)===r.getFormatElement(e.endContainer))if(r.isList(g)){t.preventDefault();const e=r.createElement("LI"),n=s.nextElementSibling;e.appendChild(s),g.insertBefore(e,n),d.focus()}else r.isWysiwygDiv(s)||r.isComponent(s)||r.isTable(s)&&!r.isCell(s)||null===d._setDefaultFormat(r.isRangeFormatElement(g)?"DIV":l.defaultTag)?u._applyTagEffects():(t.preventDefault(),d.focus())}d._isBalloon&&a.setTimeout(u._toggleToolbarBalloon)},_balloonDelay:null,_showToolbarBalloonDelay:function(){u._balloonDelay&&a.clearTimeout(u._balloonDelay),u._balloonDelay=a.setTimeout(function(){a.clearTimeout(this._balloonDelay),this._balloonDelay=null,this._showToolbarBalloon()}.bind(u),350)},_toggleToolbarBalloon:function(){d._editorRange();const e=d.getRange();d._bindControllersOff||!d._isBalloonAlways&&e.collapsed?u._hideToolbar():u._showToolbarBalloon(e)},_showToolbarBalloon:function(t){if(!d._isBalloon)return;const n=t||d.getRange(),i=e.element.toolbar,o=e.element.topArea,s=d.getSelection();let c;if(d._isBalloonAlways&&n.collapsed)c=!0;else if(s.focusNode===s.anchorNode)c=s.focusOffset<s.anchorOffset;else{const e=r.getListChildNodes(n.commonAncestorContainer,null);c=r.getArrayIndex(e,s.focusNode)<r.getArrayIndex(e,s.anchorNode)}let h=n.getClientRects();h=h[c?0:h.length-1];const g=d.getGlobalScrollOffset();let p=g.left,m=g.top;const f=o.offsetWidth,_=u._getEditorOffsets(null),b=_.top,v=_.left;if(i.style.top="-10000px",i.style.visibility="hidden",i.style.display="block",!h){const t=d.getSelectionNode();if(r.isFormatElement(t)){const e=r.createTextNode(r.zeroWidthSpace);d.insertNode(e,null,!1),d.setRange(e,1,e,1),d._editorRange(),h=d.getRange().getClientRects(),h=h[c?0:h.length-1]}if(!h){const n=r.getOffset(t,e.element.wysiwygFrame);h={left:n.left,top:n.top,right:n.left,bottom:n.top+t.offsetHeight,noText:!0},p=0,m=0}c=!0}const y=a.Math.round(e.element._arrow.offsetWidth/2),C=i.offsetWidth,w=i.offsetHeight,x=/iframe/i.test(e.element.wysiwygFrame.nodeName)?e.element.wysiwygFrame.getClientRects()[0]:null;if(x&&(h={left:h.left+x.left,top:h.top+x.top,right:h.right+x.right-x.width,bottom:h.bottom+x.bottom-x.height}),u._setToolbarOffset(c,h,i,v,f,p,m,b,y),C===i.offsetWidth&&w===i.offsetHeight||u._setToolbarOffset(c,h,i,v,f,p,m,b,y),l.toolbarContainer){const e=o.parentElement;let t=l.toolbarContainer,n=t.offsetLeft,s=t.offsetTop;for(;!t.parentElement.contains(e)||!/^(BODY|HTML)$/i.test(t.parentElement.nodeName);)t=t.offsetParent,n+=t.offsetLeft,s+=t.offsetTop;i.style.left=i.offsetLeft-n+o.offsetLeft+"px",i.style.top=i.offsetTop-s+o.offsetTop+"px"}i.style.visibility=""},_setToolbarOffset:function(t,n,i,l,o,c,d,h,g){const p=i.offsetWidth,m=n.noText&&!t?0:i.offsetHeight,f=(t?n.left:n.right)-l-p/2+c,_=f+p-o;let b=(t?n.top-m-g:n.bottom+g)-(n.noText?0:h)+d,v=f<0?1:_<0?f:f-_-1-1,y=!1;const C=b+(t?u._getEditorOffsets(null).top:i.offsetHeight-e.element.wysiwyg.offsetHeight);!t&&C>0&&u._getPageBottomSpace()<C?(t=!0,y=!0):t&&s.documentElement.offsetTop>C&&(t=!1,y=!0),y&&(b=(t?n.top-m-g:n.bottom+g)-(n.noText?0:h)+d),i.style.left=a.Math.floor(v)+"px",i.style.top=a.Math.floor(b)+"px",t?(r.removeClass(e.element._arrow,"se-arrow-up"),r.addClass(e.element._arrow,"se-arrow-down"),e.element._arrow.style.top=m+"px"):(r.removeClass(e.element._arrow,"se-arrow-down"),r.addClass(e.element._arrow,"se-arrow-up"),e.element._arrow.style.top=-g+"px");const w=a.Math.floor(p/2+(f-v));e.element._arrow.style.left=(w+g>i.offsetWidth?i.offsetWidth-g:w<g?g:w)+"px"},_showToolbarInline:function(){if(!d._isInline)return;const t=e.element.toolbar;l.toolbarContainer?t.style.position="relative":t.style.position="absolute",t.style.visibility="hidden",t.style.display="block",d._inlineToolbarAttr.width=t.style.width=l.toolbarWidth,d._inlineToolbarAttr.top=t.style.top=(l.toolbarContainer?0:-1-t.offsetHeight)+"px","function"==typeof h.showInline&&h.showInline(t,e,d),u.onScroll_window(),d._inlineToolbarAttr.isShow=!0,t.style.visibility=""},_hideToolbar:function(){d._notHideToolbar||d._variable.isFullScreen||(e.element.toolbar.style.display="none",d._inlineToolbarAttr.isShow=!1)},onInput_wysiwyg:function(e){if(/AUDIO/.test(e.target.nodeName))return!1;if(d.isReadOnly||d.isDisabled)return e.preventDefault(),e.stopPropagation(),d.history.go(d.history.getCurrentIndex()),!1;d._editorRange();const t=(null===e.data?"":void 0===e.data?" ":e.data)||"";if(!d._charCount(t))return e.preventDefault(),e.stopPropagation(),!1;"function"==typeof h.onInput&&!1===h.onInput(e,d)||d.history.push(!0)},_isUneditableNode:function(e,t){const n=t?e.startContainer:e.endContainer,i=t?e.startOffset:e.endOffset,l=t?"previousSibling":"nextSibling";let o;return 1===n.nodeType?(o=u._isUneditableNode_getSibling(n.childNodes[i],l,n),o&&1===o.nodeType&&"false"===o.getAttribute("contenteditable")):(o=u._isUneditableNode_getSibling(n,l,n),d.isEdgePoint(n,i,t?"front":"end")&&o&&1===o.nodeType&&"false"===o.getAttribute("contenteditable"))},_isUneditableNode_getSibling:function(e,t,n){if(!e)return null;let i=e[t];if(!i){if(i=r.getFormatElement(n),i=i?i[t]:null,!i||r.isComponent(i))return null;i="previousSibling"===t?i.firstChild:i.lastChild}return i},_onShortcutKey:!1,onKeyDown_wysiwyg:function(t){let n=d.getSelectionNode();if(r.isInputElement(n))return;const i=t.keyCode,o=t.shiftKey,s=t.ctrlKey||t.metaKey||91===i||92===i||224===i,c=t.altKey;if(u._IEisComposing=229===i,!s&&d.isReadOnly&&!u._cursorMoveKeyCode.test(i))return t.preventDefault(),!1;if(d.submenuOff(),d._isBalloon&&u._hideToolbar(),"function"==typeof h.onKeyDown&&!1===h.onKeyDown(t,d))return;if(s&&u._shortcutCommand(i,o))return u._onShortcutKey=!0,t.preventDefault(),t.stopPropagation(),!1;u._onShortcutKey&&(u._onShortcutKey=!1);const g=d.getRange(),p=!g.collapsed||g.startContainer!==g.endContainer,m=d._fileManager.pluginRegExp.test(d.currentControllerName)?d.currentControllerName:"";let f=r.getFormatElement(n,null)||n,_=r.getRangeFormatElement(f,null);if(!/37|38|39|40/.test(t.keyCode)||!1!==u._onKeyDown_wysiwyg_arrowKey(t)){switch(i){case 8:if(!p&&m){t.preventDefault(),t.stopPropagation(),d.plugins[m].destroy.call(d);break}if(p&&u._hardDelete()){t.preventDefault(),t.stopPropagation();break}if(!r.isFormatElement(f)&&!e.element.wysiwyg.firstElementChild&&!r.isComponent(n)&&null!==d._setDefaultFormat(l.defaultTag))return t.preventDefault(),t.stopPropagation(),!1;if(!p&&!f.previousElementSibling&&0===g.startOffset&&!n.previousSibling&&!r.isListCell(f)&&r.isFormatElement(f)&&(!r.isFreeFormatElement(f)||r.isClosureFreeFormatElement(f))){if(r.isClosureRangeFormatElement(f.parentNode))return t.preventDefault(),t.stopPropagation(),!1;if(r.isWysiwygDiv(f.parentNode)&&f.childNodes.length<=1&&(!f.firstChild||r.onlyZeroWidthSpace(f.textContent))){if(t.preventDefault(),t.stopPropagation(),f.nodeName.toUpperCase()===l.defaultTag.toUpperCase()){f.innerHTML="<br>";const e=f.attributes;for(;e[0];)f.removeAttribute(e[0].name)}else{const e=r.createElement(l.defaultTag);e.innerHTML="<br>",f.parentElement.replaceChild(e,f)}return d.nativeFocus(),!1}}const i=g.startContainer;if(f&&!f.previousElementSibling&&0===g.startOffset&&3===i.nodeType&&!r.isFormatElement(i.parentNode)){let e=i.parentNode.previousSibling;const t=i.parentNode.nextSibling;e||(t?e=t:(e=r.createElement("BR"),f.appendChild(e)));let n=i;for(;f.contains(n)&&!n.previousSibling;)n=n.parentNode;if(!f.contains(n)){i.textContent="",r.removeItemAllParents(i,null,f);break}}if(u._isUneditableNode(g,!0)){t.preventDefault(),t.stopPropagation();break}!p&&d._isEdgeFormat(g.startContainer,g.startOffset,"start")&&r.isFormatElement(f.previousElementSibling)&&(d._formatAttrsTemp=f.previousElementSibling.attributes);const b=g.commonAncestorContainer;if(f=r.getFormatElement(g.startContainer,null),_=r.getRangeFormatElement(f,null),_&&f&&!r.isCell(_)&&!/^FIGCAPTION$/i.test(_.nodeName)){if(r.isListCell(f)&&r.isList(_)&&(r.isListCell(_.parentNode)||f.previousElementSibling)&&(n===f||3===n.nodeType&&(!n.previousSibling||r.isList(n.previousSibling)))&&(r.getFormatElement(g.startContainer,null)!==r.getFormatElement(g.endContainer,null)?_.contains(g.startContainer):0===g.startOffset&&g.collapsed)){if(g.startContainer!==g.endContainer)t.preventDefault(),d.removeNode(),3===g.startContainer.nodeType&&d.setRange(g.startContainer,g.startContainer.textContent.length,g.startContainer,g.startContainer.textContent.length),d.history.push(!0);else{let e=f.previousElementSibling||_.parentNode;if(r.isListCell(e)){t.preventDefault();let n=e;if(!e.contains(f)&&r.isListCell(n)&&r.isList(n.lastElementChild)){for(n=n.lastElementChild.lastElementChild;r.isListCell(n)&&r.isList(n.lastElementChild);)n=n.lastElementChild&&n.lastElementChild.lastElementChild;e=n}let i=e===_.parentNode?_.previousSibling:e.lastChild;i||(i=r.createTextNode(r.zeroWidthSpace),_.parentNode.insertBefore(i,_.parentNode.firstChild));const l=3===i.nodeType?i.textContent.length:1,o=f.childNodes;let s=i,a=o[0];for(;a=o[0];)e.insertBefore(a,s.nextSibling),s=a;r.removeItem(f),0===_.children.length&&r.removeItem(_),d.setRange(i,l,i,l),d.history.push(!0)}}break}if(!p&&0===g.startOffset){let e=!0,n=b;for(;n&&n!==_&&!r.isWysiwygDiv(n);){if(n.previousSibling&&(1===n.previousSibling.nodeType||!r.onlyZeroWidthSpace(n.previousSibling.textContent.trim()))){e=!1;break}n=n.parentNode}if(e&&_.parentNode){t.preventDefault(),d.detachRangeFormatElement(_,r.isListCell(f)?[f]:null,null,!1,!1),d.history.push(!0);break}}}if(!p&&f&&(0===g.startOffset||n===f&&f.childNodes[g.startOffset])){const e=n===f?f.childNodes[g.startOffset]:n,i=f.previousSibling,l=(3===b.nodeType||r.isBreak(b))&&!b.previousSibling&&0===g.startOffset;if(e&&!e.previousSibling&&(b&&r.isComponent(b.previousSibling)||l&&r.isComponent(i))){const e=d.getFileComponent(i);e?(t.preventDefault(),t.stopPropagation(),0===f.textContent.length&&r.removeItem(f),!1===d.selectComponent(e.target,e.pluginName)&&d.blur()):r.isComponent(i)&&(t.preventDefault(),t.stopPropagation(),r.removeItem(i));break}if(e&&r.isNonEditable(e.previousSibling)){t.preventDefault(),t.stopPropagation(),r.removeItem(e.previousSibling);break}}break;case 46:if(m){t.preventDefault(),t.stopPropagation(),d.plugins[m].destroy.call(d);break}if(p&&u._hardDelete()){t.preventDefault(),t.stopPropagation();break}if(u._isUneditableNode(g,!1)){t.preventDefault(),t.stopPropagation();break}if((r.isFormatElement(n)||null===n.nextSibling||r.onlyZeroWidthSpace(n.nextSibling)&&null===n.nextSibling.nextSibling)&&g.startOffset===n.textContent.length){const e=f.nextElementSibling;if(!e)break;if(r.isComponent(e)){if(t.preventDefault(),r.onlyZeroWidthSpace(f)&&(r.removeItem(f),r.isTable(e))){let t=r.getChildElement(e,r.isCell,!1);t=t.firstElementChild||t,d.setRange(t,0,t,0);break}const n=d.getFileComponent(e);n?(t.stopPropagation(),!1===d.selectComponent(n.target,n.pluginName)&&d.blur()):r.isComponent(e)&&(t.stopPropagation(),r.removeItem(e));break}}if(!p&&(d.isEdgePoint(g.endContainer,g.endOffset)||n===f&&f.childNodes[g.startOffset])){const e=n===f&&f.childNodes[g.startOffset]||n;if(e&&r.isNonEditable(e.nextSibling)){t.preventDefault(),t.stopPropagation(),r.removeItem(e.nextSibling);break}if(r.isComponent(e)){t.preventDefault(),t.stopPropagation(),r.removeItem(e);break}}if(!p&&d._isEdgeFormat(g.endContainer,g.endOffset,"end")&&r.isFormatElement(f.nextElementSibling)&&(d._formatAttrsTemp=f.attributes),f=r.getFormatElement(g.startContainer,null),_=r.getRangeFormatElement(f,null),r.isListCell(f)&&r.isList(_)&&(n===f||3===n.nodeType&&(!n.nextSibling||r.isList(n.nextSibling))&&(r.getFormatElement(g.startContainer,null)!==r.getFormatElement(g.endContainer,null)?_.contains(g.endContainer):g.endOffset===n.textContent.length&&g.collapsed))){g.startContainer!==g.endContainer&&d.removeNode();let e=r.getArrayItem(f.children,r.isList,!1);if(e=e||f.nextElementSibling||_.parentNode.nextElementSibling,e&&(r.isList(e)||r.getArrayItem(e.children,r.isList,!1))){let n,i;if(t.preventDefault(),r.isList(e)){const t=e.firstElementChild;for(i=t.childNodes,n=i[0];i[0];)f.insertBefore(i[0],e);r.removeItem(t)}else{for(n=e.firstChild,i=e.childNodes;i[0];)f.appendChild(i[0]);r.removeItem(e)}d.setRange(n,0,n,0),d.history.push(!0)}break}break;case 9:if(m||l.tabDisable)break;if(t.preventDefault(),s||c||r.isWysiwygDiv(n))break;const v=!g.collapsed||d.isEdgePoint(g.startContainer,g.startOffset),y=d.getSelectedElements(null);n=d.getSelectionNode();const C=[];let w=[],x=r.isListCell(y[0]),E=r.isListCell(y[y.length-1]),S={sc:g.startContainer,so:g.startOffset,ec:g.endContainer,eo:g.endOffset};for(let e,t=0,n=y.length;t<n;t++)if(e=y[t],r.isListCell(e)){if(!e.previousElementSibling&&!o)continue;C.push(e)}else w.push(e);if(C.length>0&&v&&d.plugins.list)S=d.plugins.list.editInsideList.call(d,o,C);else{const e=r.getParentElement(n,r.isCell);if(e&&v){const t=r.getParentElement(e,"table"),n=r.getListChildren(t,r.isCell);let i=o?r.prevIdx(n,e):r.nextIdx(n,e);i!==n.length||o||(i=0),-1===i&&o&&(i=n.length-1);let l=n[i];if(!l)break;l=l.firstElementChild||l,d.setRange(l,0,l,0);break}w=w.concat(C),x=E=null}if(w.length>0)if(o){const e=w.length-1;for(let t,n=0;n<=e;n++){t=w[n].childNodes;for(let e,n=0,i=t.length;n<i&&(e=t[n],e);n++)if(!r.onlyZeroWidthSpace(e)){/^\s{1,4}$/.test(e.textContent)?r.removeItem(e):/^\s{1,4}/.test(e.textContent)&&(e.textContent=e.textContent.replace(/^\s{1,4}/,""));break}}const t=r.getChildElement(w[0],"text",!1),n=r.getChildElement(w[e],"text",!0);!x&&t&&(S.sc=t,S.so=0),!E&&n&&(S.ec=n,S.eo=n.textContent.length)}else{const e=r.createTextNode(new a.Array(d._variable.tabSize+1).join(" "));if(1===w.length){const t=d.insertNode(e,null,!0);if(!t)return!1;x||(S.sc=e,S.so=t.endOffset),E||(S.ec=e,S.eo=t.endOffset)}else{const t=w.length-1;for(let n,i=0;i<=t;i++)n=w[i].firstChild,n&&(r.isBreak(n)?w[i].insertBefore(e.cloneNode(!1),n):n.textContent=e.textContent+n.textContent);const n=r.getChildElement(w[0],"text",!1),i=r.getChildElement(w[t],"text",!0);!x&&n&&(S.sc=n,S.so=0),!E&&i&&(S.ec=i,S.eo=i.textContent.length)}}d.setRange(S.sc,S.so,S.ec,S.eo),d.history.push(!1);break;case 13:const N=r.getFreeFormatElement(n,null);if(d._charTypeHTML){let e="";if(e=!o&&N||o?"<br>":"<"+f.nodeName+"><br></"+f.nodeName+">",!d.checkCharCount(e,"byte-html"))return t.preventDefault(),!1}if(!o&&!m){const i=d._isEdgeFormat(g.endContainer,g.endOffset,"end"),o=d._isEdgeFormat(g.startContainer,g.startOffset,"start");if(i&&(/^H[1-6]$/i.test(f.nodeName)||/^HR$/i.test(f.nodeName))){u._enterPrevent(t);let e=null;const n=d.appendFormatTag(f,l.defaultTag);if(i&&i.length>0){e=i.pop();const t=e;for(;i.length>0;)e=e.appendChild(i.pop());n.appendChild(t)}if(e=e?e.appendChild(n.firstChild):n.firstChild,r.isBreak(e)){const t=r.createTextNode(r.zeroWidthSpace);e.parentNode.insertBefore(t,e),d.setRange(t,1,t,1)}else d.setRange(e,0,e,0);break}if(_&&f&&!r.isCell(_)&&!/^FIGCAPTION$/i.test(_.nodeName)){const e=d.getRange();if(d.isEdgePoint(e.endContainer,e.endOffset)&&r.isList(n.nextSibling)){u._enterPrevent(t);const e=r.createElement("LI"),i=r.createElement("BR");e.appendChild(i),f.parentNode.insertBefore(e,f.nextElementSibling),e.appendChild(n.nextSibling),d.setRange(i,1,i,1);break}if((3!==e.commonAncestorContainer.nodeType||!e.commonAncestorContainer.nextElementSibling)&&r.onlyZeroWidthSpace(f.innerText.trim())&&!r.isListCell(f.nextElementSibling)){u._enterPrevent(t);let e=null;if(r.isListCell(_.parentNode)){const t=f.parentNode.parentNode;_=t.parentNode;const n=r.createElement("LI");n.innerHTML="<br>",r.copyTagAttributes(n,f,l.lineAttrReset),e=n,_.insertBefore(e,t.nextElementSibling)}else{const t=r.isCell(_.parentNode)?"DIV":r.isList(_.parentNode)?"LI":r.isFormatElement(_.nextElementSibling)&&!r.isRangeFormatElement(_.nextElementSibling)?_.nextElementSibling.nodeName:r.isFormatElement(_.previousElementSibling)&&!r.isRangeFormatElement(_.previousElementSibling)?_.previousElementSibling.nodeName:l.defaultTag;e=r.createElement(t),r.copyTagAttributes(e,f,l.lineAttrReset);const n=d.detachRangeFormatElement(_,[f],null,!0,!0);n.cc.insertBefore(e,n.ec)}e.innerHTML="<br>",r.removeItemAllParents(f,null,null),d.setRange(e,1,e,1);break}}if(N){u._enterPrevent(t);const e=n===N,i=d.getSelection(),l=n.childNodes,o=i.focusOffset,s=n.previousElementSibling,a=n.nextSibling;if(!r.isClosureFreeFormatElement(N)&&l&&(e&&g.collapsed&&l.length-1<=o+1&&r.isBreak(l[o])&&(!l[o+1]||(!l[o+2]||r.onlyZeroWidthSpace(l[o+2].textContent))&&3===l[o+1].nodeType&&r.onlyZeroWidthSpace(l[o+1].textContent))&&o>0&&r.isBreak(l[o-1])||!e&&r.onlyZeroWidthSpace(n.textContent)&&r.isBreak(s)&&(r.isBreak(s.previousSibling)||!r.onlyZeroWidthSpace(s.previousSibling.textContent))&&(!a||!r.isBreak(a)&&r.onlyZeroWidthSpace(a.textContent)))){e?r.removeItem(l[o-1]):r.removeItem(n);const t=d.appendFormatTag(N,r.isFormatElement(N.nextElementSibling)&&!r.isRangeFormatElement(N.nextElementSibling)?N.nextElementSibling:null);r.copyFormatAttributes(t,N),d.setRange(t,1,t,1);break}if(e){h.insertHTML(g.collapsed&&r.isBreak(g.startContainer.childNodes[g.startOffset-1])?"<br>":"<br><br>",!0,!1);let e=i.focusNode;const t=i.focusOffset;N===e&&(e=e.childNodes[t-o>1?t-1:t]),d.setRange(e,1,e,1)}else{const e=i.focusNode.nextSibling,t=r.createElement("BR");d.insertNode(t,null,!1);const n=t.previousSibling,l=t.nextSibling;r.isBreak(e)||r.isBreak(n)||l&&!r.onlyZeroWidthSpace(l)?d.setRange(l,0,l,0):(t.parentNode.insertBefore(t.cloneNode(!1),t),d.setRange(t,1,t,1))}u._onShortcutKey=!0;break}if(g.collapsed&&(o||i)){u._enterPrevent(t);const e=r.createElement("BR"),s=r.createElement(f.nodeName);r.copyTagAttributes(s,f,l.lineAttrReset);let a=e;do{if(!r.isBreak(n)&&1===n.nodeType){const e=n.cloneNode(!1);e.appendChild(a),a=e}n=n.parentNode}while(f!==n&&f.contains(n));s.appendChild(a),f.parentNode.insertBefore(s,o&&!i?f:f.nextElementSibling),i&&d.setRange(e,1,e,1);break}if(f){let n;t.stopPropagation();let s=0;if(g.collapsed)n=r.onlyZeroWidthSpace(f)?d.appendFormatTag(f,f.cloneNode(!1)):r.splitElement(g.endContainer,g.endOffset,r.getElementDepth(f));else{const a=r.getFormatElement(g.startContainer,null)!==r.getFormatElement(g.endContainer,null),c=f.cloneNode(!1);c.innerHTML="<br>";const h=d.removeNode();if(n=r.getFormatElement(h.container,null),!n){r.isWysiwygDiv(h.container)&&(u._enterPrevent(t),e.element.wysiwyg.appendChild(c),n=c,r.copyTagAttributes(n,f,l.lineAttrReset),d.setRange(n,s,n,s));break}const p=r.getRangeFormatElement(h.container);if(n=n.contains(p)?r.getChildElement(p,r.getFormatElement.bind(r)):n,a){if(i&&!o)n.parentNode.insertBefore(c,h.prevContainer&&h.container!==h.prevContainer?n:n.nextElementSibling),n=c,s=0;else if(s=h.offset,o){const e=n.parentNode.insertBefore(c,n);i&&(n=e,s=0)}}else i&&o?(n.parentNode.insertBefore(c,h.prevContainer&&h.container===h.prevContainer?n.nextElementSibling:n),n=c,s=0):n=r.splitElement(h.container,h.offset,r.getElementDepth(f))}u._enterPrevent(t),r.copyTagAttributes(n,f,l.lineAttrReset),d.setRange(n,s,n,s);break}}if(p)break;if(_&&r.getParentElement(_,"FIGCAPTION")&&r.getParentElement(_,r.isList)&&(u._enterPrevent(t),f=d.appendFormatTag(f,null),d.setRange(f,0,f,0)),m){t.preventDefault(),t.stopPropagation(),d.containerOff(),d.controllersOff();const n=e[m],i=n._container,s=i.previousElementSibling||i.nextElementSibling;let a=null;r.isListCell(i.parentNode)?a=r.createElement("BR"):(a=r.createElement(r.isFormatElement(s)&&!r.isRangeFormatElement(s)?s.nodeName:l.defaultTag),a.innerHTML="<br>"),o?i.parentNode.insertBefore(a,i):i.parentNode.insertBefore(a,i.nextElementSibling),d.callPlugin(m,(function(){!1===d.selectComponent(n._element,m)&&d.blur()}),null)}break;case 27:if(m)return t.preventDefault(),t.stopPropagation(),d.controllersOff(),!1}if(o&&16===i){t.preventDefault(),t.stopPropagation();const e=d.plugins.table;if(e&&!e._shift&&!e._ref){const t=r.getParentElement(f,r.isCell);if(t)return void e.onTableCellMultiSelect.call(d,t,!0)}}else if(o&&(r.isOSX_IOS?c:s)&&32===i){t.preventDefault(),t.stopPropagation();const e=d.insertNode(r.createTextNode(" "));if(e&&e.container)return void d.setRange(e.container,e.endOffset,e.container,e.endOffset)}if(r.isIE&&!s&&!c&&!p&&!u._nonTextKeyCode.test(i)&&r.isBreak(g.commonAncestorContainer)){const e=r.createTextNode(r.zeroWidthSpace);d.insertNode(e,null,!1),d.setRange(e,1,e,1)}u._directionKeyCode.test(i)&&(d._editorRange(),u._applyTagEffects())}},_onKeyDown_wysiwyg_arrowKey:function(e){if(e.shiftKey)return;let t=d.getSelectionNode();const n=function(t,n=0){if(e.preventDefault(),e.stopPropagation(),!t)return;let i=d.getFileComponent(t);i?d.selectComponent(i.target,i.pluginName):(d.setRange(t,n,t,n),d.controllersOff())},i=r.getParentElement(t,"table");if(i){const l=r.getParentElement(t,"tr"),o=r.getParentElement(t,"td");let s=o,a=o;if(o){for(;s.firstChild;)s=s.firstChild;for(;a.lastChild;)a=a.lastChild}let c=t;for(;c.firstChild;)c=c.firstChild;const u=c===s,h=c===a;let g=null,p=0;if(38===e.keyCode&&u){const e=l&&l.previousElementSibling;for(g=e?e.children[o.cellIndex]:r.getPreviousDeepestNode(i,d.context.element.wysiwyg);g.lastChild;)g=g.lastChild;g&&(p=g.textContent.length)}else if(40===e.keyCode&&h){const e=l&&l.nextElementSibling;for(g=e?e.children[o.cellIndex]:r.getNextDeepestNode(i,d.context.element.wysiwyg);g.firstChild;)g=g.firstChild}if(g)return n(g,p),!1}const l=d.getFileComponent(t);if(l){const t=/37|38/.test(e.keyCode),i=/39|40/.test(e.keyCode);if(t){const e=r.getPreviousDeepestNode(l.target,d.context.element.wysiwyg);n(e,e&&e.textContent.length)}else if(i){n(r.getNextDeepestNode(l.target,d.context.element.wysiwyg))}}},onKeyUp_wysiwyg:function(e){if(u._onShortcutKey)return;d._editorRange();const t=e.keyCode,n=e.ctrlKey||e.metaKey||91===t||92===t||224===t,i=e.altKey;if(d.isReadOnly)return void(!n&&u._cursorMoveKeyCode.test(t)&&u._applyTagEffects());const o=d.getRange();let s=d.getSelectionNode();if(d._isBalloon&&(d._isBalloonAlways&&27!==t||!o.collapsed)){if(!d._isBalloonAlways)return void u._showToolbarBalloon();27!==t&&u._showToolbarBalloonDelay()}let a=s;for(;a.firstChild;)a=a.firstChild;const c=d.getFileComponent(a);if(16!==e.keyCode&&!e.shiftKey&&c?d.selectComponent(c.target,c.pluginName):d.currentFileComponentInfo&&d.controllersOff(),8===t&&r.isWysiwygDiv(s)&&""===s.textContent&&0===s.children.length){e.preventDefault(),e.stopPropagation(),s.innerHTML="";const t=r.createElement(r.isFormatElement(d._variable.currentNodes[0])?d._variable.currentNodes[0]:l.defaultTag);return t.innerHTML="<br>",s.appendChild(t),d.setRange(t,0,t,0),u._applyTagEffects(),void d.history.push(!1)}const g=r.getFormatElement(s,null),p=r.getRangeFormatElement(s,null),m=d._formatAttrsTemp;if(m){for(let e=0,n=m.length;e<n;e++)13===t&&/^id$/i.test(m[e].name)?g.removeAttribute("id"):g.setAttribute(m[e].name,m[e].value);d._formatAttrsTemp=null}g||!o.collapsed||r.isComponent(s)||r.isList(s)||null===d._setDefaultFormat(r.isRangeFormatElement(p)?"DIV":l.defaultTag)||(s=d.getSelectionNode());if(!n&&!i&&!u._nonTextKeyCode.test(t)&&3===s.nodeType&&r.zeroWidthRegExp.test(s.textContent)&&!(void 0!==e.isComposing?e.isComposing:u._IEisComposing)){let e=o.startOffset,t=o.endOffset;const n=(s.textContent.substring(0,t).match(u._frontZeroWidthReg)||"").length;e=o.startOffset-n,t=o.endOffset-n,s.textContent=s.textContent.replace(r.zeroWidthRegExp,""),d.setRange(s,e<0?0:e,s,t<0?0:t)}d._charCount(""),"function"==typeof h.onKeyUp&&!1===h.onKeyUp(e,d)||n||i||u._historyIgnoreKeyCode.test(t)||d.history.push(!0)},onScroll_wysiwyg:function(e){d.controllersOff(),d._isBalloon&&u._hideToolbar(),"function"==typeof h.onScroll&&h.onScroll(e,d)},onFocus_wysiwyg:function(e){d._antiBlur||(d.hasFocus=!0,a.setTimeout(u._applyTagEffects),d._isInline&&u._showToolbarInline(),"function"==typeof h.onFocus&&h.onFocus(e,d))},onBlur_wysiwyg:function(t){d._antiBlur||d._variable.isCodeView||(d.hasFocus=!1,d.effectNode=null,d.controllersOff(),(d._isInline||d._isBalloon)&&u._hideToolbar(),d._setKeyEffect([]),d._variable.currentNodes=[],d._variable.currentNodesMap=[],l.showPathLabel&&(e.element.navigation.textContent=""),"function"==typeof h.onBlur&&h.onBlur(t,d,this))},onMouseDown_resizingBar:function(t){t.stopPropagation(),d.submenuOff(),d.controllersOff(),d._variable.resizeClientY=t.clientY,e.element.resizeBackground.style.display="block",s.addEventListener("mousemove",u._resize_editor),s.addEventListener("mouseup",(function t(){e.element.resizeBackground.style.display="none",s.removeEventListener("mousemove",u._resize_editor),s.removeEventListener("mouseup",t)}))},_resize_editor:function(t){const n=e.element.editorArea.offsetHeight+(t.clientY-d._variable.resizeClientY),i=n<d._variable.minResizingSize?d._variable.minResizingSize:n;e.element.wysiwygFrame.style.height=e.element.code.style.height=i+"px",d._variable.resizeClientY=t.clientY,r.isResizeObserverSupported||d.__callResizeFunction(i,null)},onResize_window:function(){r.isResizeObserverSupported||d.resetResponsiveToolbar();const t=e.element.toolbar,n="none"===t.style.display||d._isInline&&!d._inlineToolbarAttr.isShow;if(0!==t.offsetWidth||n){if(e.fileBrowser&&"block"===e.fileBrowser.area.style.display&&(e.fileBrowser.body.style.maxHeight=a.innerHeight-e.fileBrowser.header.offsetHeight-50+"px"),d.submenuActiveButton&&d.submenu&&d._setMenuPosition(d.submenuActiveButton,d.submenu),d._variable.isFullScreen)return d._variable.innerHeight_fullScreen+=a.innerHeight-t.offsetHeight-d._variable.innerHeight_fullScreen,void(e.element.editorArea.style.height=d._variable.innerHeight_fullScreen+"px");d._variable.isCodeView&&d._isInline?u._showToolbarInline():(d._iframeAutoHeight(),d._sticky&&(t.style.width=e.element.topArea.offsetWidth-2+"px",u.onScroll_window()))}},onScroll_window:function(){if(d._variable.isFullScreen||0===e.element.toolbar.offsetWidth||l.stickyToolbar<0)return;const t=e.element,n=t.editorArea.offsetHeight,i=(this.scrollY||s.documentElement.scrollTop)+l.stickyToolbar,o=u._getEditorOffsets(l.toolbarContainer).top-(d._isInline?t.toolbar.offsetHeight:0),a=d._isInline&&i-o>0?i-o-e.element.toolbar.offsetHeight:0;i<o?u._offStickyToolbar():i+d._variable.minResizingSize>=n+o?(d._sticky||u._onStickyToolbar(a),t.toolbar.style.top=a+n+o+l.stickyToolbar-i-d._variable.minResizingSize+"px"):i>=o&&u._onStickyToolbar(a)},_getEditorOffsets:function(t){let n=t||e.element.topArea,i=0,l=0,o=0;for(;n;)i+=n.offsetTop,l+=n.offsetLeft,o+=n.scrollTop,n=n.offsetParent;return{top:i,left:l,scroll:o}},_getPageBottomSpace:function(){return s.documentElement.scrollHeight-(u._getEditorOffsets(null).top+e.element.topArea.offsetHeight)},_onStickyToolbar:function(t){const n=e.element;d._isInline||l.toolbarContainer||(n._stickyDummy.style.height=n.toolbar.offsetHeight+"px",n._stickyDummy.style.display="block"),n.toolbar.style.top=l.stickyToolbar+t+"px",n.toolbar.style.width=d._isInline?d._inlineToolbarAttr.width:n.toolbar.offsetWidth+"px",r.addClass(n.toolbar,"se-toolbar-sticky"),d._sticky=!0},_offStickyToolbar:function(){const t=e.element;t._stickyDummy.style.display="none",t.toolbar.style.top=d._isInline?d._inlineToolbarAttr.top:"",t.toolbar.style.width=d._isInline?d._inlineToolbarAttr.width:"",t.editorArea.style.marginTop="",r.removeClass(t.toolbar,"se-toolbar-sticky"),d._sticky=!1},_codeViewAutoHeight:function(){d._variable.isFullScreen||(e.element.code.style.height=e.element.code.scrollHeight+"px")},_hardDelete:function(){const e=d.getRange(),t=e.startContainer,n=e.endContainer,i=r.getRangeFormatElement(t),l=r.getRangeFormatElement(n),o=r.isCell(i),s=r.isCell(l),a=e.commonAncestorContainer;if((o&&!i.previousElementSibling&&!i.parentElement.previousElementSibling||s&&!l.nextElementSibling&&!l.parentElement.nextElementSibling)&&i!==l)if(o){if(s)return r.removeItem(r.getParentElement(i,(function(e){return a===e.parentNode}))),d.nativeFocus(),!0;r.removeItem(r.getParentElement(i,(function(e){return a===e.parentNode})))}else r.removeItem(r.getParentElement(l,(function(e){return a===e.parentNode})));const c=1===t.nodeType?r.getParentElement(t,".se-component"):null,u=1===n.nodeType?r.getParentElement(n,".se-component"):null;return c&&r.removeItem(c),u&&r.removeItem(u),!1},onPaste_wysiwyg:function(e){const t=r.isIE?a.clipboardData:e.clipboardData;return!t||u._dataTransferAction("paste",e,t)},_setClipboardComponent:function(e,t,n){e.preventDefault(),e.stopPropagation(),n.setData("text/html",t.component.outerHTML)},onCopy_wysiwyg:function(e){const t=r.isIE?a.clipboardData:e.clipboardData;if("function"==typeof h.onCopy&&!1===h.onCopy(e,t,d))return e.preventDefault(),e.stopPropagation(),!1;const n=d.currentFileComponentInfo;n&&!r.isIE&&(u._setClipboardComponent(e,n,t),r.addClass(n.component,"se-component-copy"),a.setTimeout((function(){r.removeClass(n.component,"se-component-copy")}),150))},onSave_wysiwyg:function(e){"function"!=typeof h.onSave||h.onSave(e,d)},onCut_wysiwyg:function(e){const t=r.isIE?a.clipboardData:e.clipboardData;if("function"==typeof h.onCut&&!1===h.onCut(e,t,d))return e.preventDefault(),e.stopPropagation(),!1;const n=d.currentFileComponentInfo;n&&!r.isIE&&(u._setClipboardComponent(e,n,t),r.removeItem(n.component),d.controllersOff()),a.setTimeout((function(){d.history.push(!1)}))},onDrop_wysiwyg:function(e){if(d.isReadOnly||r.isIE)return e.preventDefault(),e.stopPropagation(),!1;const t=e.dataTransfer;return!t||(u._setDropLocationSelection(e),d.removeNode(),document.body.contains(d.currentControllerTarget)||d.controllersOff(),u._dataTransferAction("drop",e,t))},_setDropLocationSelection:function(e){const t={startContainer:null,startOffset:null,endContainer:null,endOffset:null};let n=null;if(e.rangeParent?(t.startContainer=e.rangeParent,t.startOffset=e.rangeOffset,t.endContainer=e.rangeParent,t.endOffset=e.rangeOffset):n=d._wd.caretRangeFromPoint?d._wd.caretRangeFromPoint(e.clientX,e.clientY):d.getRange(),n&&(t.startContainer=n.startContainer,t.startOffset=n.startOffset,t.endContainer=n.endContainer,t.endOffset=n.endOffset),t.startContainer===t.endContainer){const e=r.getParentElement(t.startContainer,r.isComponent);e&&(t.startContainer=e,t.startOffset=0,t.endContainer=e,t.endOffset=0)}d.setRange(t.startContainer,t.startOffset,t.endContainer,t.endOffset)},_dataTransferAction:function(t,n,i){let l,o;if(r.isIE){l=i.getData("Text");const s=d.getRange(),c=r.createElement("DIV"),h={sc:s.startContainer,so:s.startOffset,ec:s.endContainer,eo:s.endOffset};return c.setAttribute("contenteditable",!0),c.style.cssText="position:absolute; top:0; left:0; width:1px; height:1px; overflow:hidden;",e.element.relative.appendChild(c),c.focus(),a.setTimeout((function(){o=c.innerHTML,r.removeItem(c),d.setRange(h.sc,h.so,h.ec,h.eo),u._setClipboardData(t,n,l,o,i)})),!0}if(l=i.getData("text/plain"),o=i.getData("text/html"),!1===u._setClipboardData(t,n,l,o,i))return n.preventDefault(),n.stopPropagation(),!1},_setClipboardData:function(e,t,n,i,l){const o=/class=["']*Mso(Normal|List)/i.test(i)||/content=["']*Word.Document/i.test(i)||/content=["']*OneNote.File/i.test(i)||/content=["']*Excel.Sheet/i.test(i);!i?i=r._HTMLConvertor(n).replace(/\n/g,"<br>"):(i=i.replace(/^<html>\r?\n?<body>\r?\n?\x3C!--StartFragment--\>|\x3C!--EndFragment-->\r?\n?<\/body\>\r?\n?<\/html>$/g,""),o&&(i=i.replace(/\n/g," "),n=n.replace(/\n/g," ")),i=d.cleanHTML(i,d.pasteTagsWhitelistRegExp,d.pasteTagsBlacklistRegExp));const s=d._charCount(d._charTypeHTML?i:n);if("paste"===e&&"function"==typeof h.onPaste){const e=h.onPaste(t,i,s,d);if(!1===e)return!1;if("string"==typeof e){if(!e)return!1;i=e}}if("drop"===e&&"function"==typeof h.onDrop){const e=h.onDrop(t,i,s,d);if(!1===e)return!1;if("string"==typeof e){if(!e)return!1;i=e}}const a=l.files;return a.length>0&&!o?(/^image/.test(a[0].type)&&d.plugins.image&&h.insertImage(a),!1):!!s&&(i?(h.insertHTML(i,!0,!1),!1):void 0)},onMouseMove_wysiwyg:function(t){if(d.isDisabled||d.isReadOnly)return!1;const n=r.getParentElement(t.target,r.isComponent),i=d._lineBreaker.style;if(n&&!d.currentControllerName){const o=e.element;let s=0,a=o.wysiwyg;do{s+=a.scrollTop,a=a.parentElement}while(a&&!/^(BODY|HTML)$/i.test(a.nodeName));const c=o.wysiwyg.scrollTop,h=u._getEditorOffsets(null),g=r.getOffset(n,o.wysiwygFrame).top+c,p=t.pageY+s+(l.iframe&&!l.toolbarContainer?o.toolbar.offsetHeight:0),m=g+(l.iframe?s:h.top),f=r.isListCell(n.parentNode);let _="",b="";if((f?!n.previousSibling:!r.isFormatElement(n.previousElementSibling))&&p<m+20)b=g,_="t";else{if((f?n.nextSibling:r.isFormatElement(n.nextElementSibling))||!(p>m+n.offsetHeight-20))return void(i.display="none");b=g+n.offsetHeight,_="b"}d._variable._lineBreakComp=n,d._variable._lineBreakDir=_,i.top=b-c+"px",d._lineBreakerButton.style.left=r.getOffset(n).left+n.offsetWidth/2-15+"px",i.display="block"}else"none"!==i.display&&(i.display="none")},_enterPrevent(e){e.preventDefault(),r.isMobile&&d.__focusTemp.focus()},_onMouseDown_lineBreak:function(e){e.preventDefault()},_onLineBreak:function(e){e.preventDefault();const t=d._variable._lineBreakComp,n=this?this:d._variable._lineBreakDir,i=r.isListCell(t.parentNode),o=r.createElement(i?"BR":r.isCell(t.parentNode)?"DIV":l.defaultTag);if(i||(o.innerHTML="<br>"),d._charTypeHTML&&!d.checkCharCount(o.outerHTML,"byte-html"))return;t.parentNode.insertBefore(o,"t"===n?t:t.nextSibling),d._lineBreaker.style.display="none",d._variable._lineBreakComp=null;const s=i?o:o.firstChild;d.setRange(s,1,s,1),d.history.push(!1)},_resizeObserver:null,_toolbarObserver:null,_addEvent:function(){const t=l.iframe?d._ww:e.element.wysiwyg;r.isResizeObserverSupported&&(this._resizeObserver=new a.ResizeObserver((function(e){d.__callResizeFunction(-1,e[0])}))),e.element.toolbar.addEventListener("mousedown",u._buttonsEventHandler,!1),e.element._menuTray.addEventListener("mousedown",u._buttonsEventHandler,!1),e.element.toolbar.addEventListener("click",u.onClick_toolbar,!1),t.addEventListener("mousedown",u.onMouseDown_wysiwyg,!1),t.addEventListener("click",u.onClick_wysiwyg,!1),t.addEventListener(r.isIE?"textinput":"input",u.onInput_wysiwyg,!1),t.addEventListener("keydown",u.onKeyDown_wysiwyg,!1),t.addEventListener("keyup",u.onKeyUp_wysiwyg,!1),t.addEventListener("paste",u.onPaste_wysiwyg,!1),t.addEventListener("copy",u.onCopy_wysiwyg,!1),t.addEventListener("cut",u.onCut_wysiwyg,!1),t.addEventListener("drop",u.onDrop_wysiwyg,!1),t.addEventListener("scroll",u.onScroll_wysiwyg,!1),t.addEventListener("focus",u.onFocus_wysiwyg,!1),t.addEventListener("blur",u.onBlur_wysiwyg,!1),u._lineBreakerBind={a:u._onLineBreak.bind(""),t:u._onLineBreak.bind("t"),b:u._onLineBreak.bind("b")},t.addEventListener("mousemove",u.onMouseMove_wysiwyg,!1),d._lineBreakerButton.addEventListener("mousedown",u._onMouseDown_lineBreak,!1),d._lineBreakerButton.addEventListener("click",u._lineBreakerBind.a,!1),e.element.lineBreaker_t.addEventListener("mousedown",u._lineBreakerBind.t,!1),e.element.lineBreaker_b.addEventListener("mousedown",u._lineBreakerBind.b,!1),t.addEventListener("touchstart",u.onMouseDown_wysiwyg,{passive:!0,useCapture:!1}),t.addEventListener("touchend",u.onClick_wysiwyg,{passive:!0,useCapture:!1}),"auto"!==l.height||l.codeMirrorEditor||(e.element.code.addEventListener("keydown",u._codeViewAutoHeight,!1),e.element.code.addEventListener("keyup",u._codeViewAutoHeight,!1),e.element.code.addEventListener("paste",u._codeViewAutoHeight,!1)),e.element.resizingBar&&(/\d+/.test(l.height)&&l.resizeEnable?e.element.resizingBar.addEventListener("mousedown",u.onMouseDown_resizingBar,!1):r.addClass(e.element.resizingBar,"se-resizing-none")),u._setResponsiveToolbar(),r.isResizeObserverSupported&&(this._toolbarObserver=new a.ResizeObserver(d.resetResponsiveToolbar)),a.addEventListener("resize",u.onResize_window,!1),l.stickyToolbar>-1&&a.addEventListener("scroll",u.onScroll_window,!1)},_removeEvent:function(){const t=l.iframe?d._ww:e.element.wysiwyg;e.element.toolbar.removeEventListener("mousedown",u._buttonsEventHandler),e.element._menuTray.removeEventListener("mousedown",u._buttonsEventHandler),e.element.toolbar.removeEventListener("click",u.onClick_toolbar),t.removeEventListener("mousedown",u.onMouseDown_wysiwyg),t.removeEventListener("click",u.onClick_wysiwyg),t.removeEventListener(r.isIE?"textinput":"input",u.onInput_wysiwyg),t.removeEventListener("keydown",u.onKeyDown_wysiwyg),t.removeEventListener("keyup",u.onKeyUp_wysiwyg),t.removeEventListener("paste",u.onPaste_wysiwyg),t.removeEventListener("copy",u.onCopy_wysiwyg),t.removeEventListener("cut",u.onCut_wysiwyg),t.removeEventListener("drop",u.onDrop_wysiwyg),t.removeEventListener("scroll",u.onScroll_wysiwyg),t.removeEventListener("mousemove",u.onMouseMove_wysiwyg),d._lineBreakerButton.removeEventListener("mousedown",u._onMouseDown_lineBreak),d._lineBreakerButton.removeEventListener("click",u._lineBreakerBind.a),e.element.lineBreaker_t.removeEventListener("mousedown",u._lineBreakerBind.t),e.element.lineBreaker_b.removeEventListener("mousedown",u._lineBreakerBind.b),u._lineBreakerBind=null,t.removeEventListener("touchstart",u.onMouseDown_wysiwyg,{passive:!0,useCapture:!1}),t.removeEventListener("touchend",u.onClick_wysiwyg,{passive:!0,useCapture:!1}),t.removeEventListener("focus",u.onFocus_wysiwyg),t.removeEventListener("blur",u.onBlur_wysiwyg),e.element.code.removeEventListener("keydown",u._codeViewAutoHeight),e.element.code.removeEventListener("keyup",u._codeViewAutoHeight),e.element.code.removeEventListener("paste",u._codeViewAutoHeight),e.element.resizingBar&&e.element.resizingBar.removeEventListener("mousedown",u.onMouseDown_resizingBar),u._resizeObserver&&(u._resizeObserver.unobserve(e.element.wysiwygFrame),u._resizeObserver=null),u._toolbarObserver&&(u._toolbarObserver.unobserve(e.element._toolbarShadow),u._toolbarObserver=null),a.removeEventListener("resize",u.onResize_window),a.removeEventListener("scroll",u.onScroll_window)},_setResponsiveToolbar:function(){if(0===o.length)return void(o=null);u._responsiveCurrentSize="default";const e=u._responsiveButtonSize=[],t=u._responsiveButtons={default:o[0]};for(let n,i,l=1,s=o.length;l<s;l++)i=o[l],n=1*i[0],e.push(n),t[n]=i[1];e.sort((function(e,t){return e-t})).unshift("default")}},h={core:d,util:r,onload:null,onScroll:null,onMouseDown:null,onClick:null,onInput:null,onKeyDown:null,onKeyUp:null,onCopy:null,onCut:null,onFocus:null,onBlur:null,onChange:null,onSave:null,onDrop:null,onPaste:null,showInline:null,showController:null,toggleCodeView:null,toggleFullScreen:null,imageUploadHandler:null,videoUploadHandler:null,audioUploadHandler:null,onImageUploadBefore:null,onVideoUploadBefore:null,onAudioUploadBefore:null,onImageUpload:null,onVideoUpload:null,onAudioUpload:null,onImageUploadError:null,onVideoUploadError:null,onAudioUploadError:null,onResizeEditor:null,onSetToolbarButtons:null,setToolbarButtons:function(t){d.submenuOff(),d.containerOff(),d.moreLayerOff();const n=B._createToolBar(s,t,d.plugins,l);o=n.responsiveButtons,u._setResponsiveToolbar(),e.element.toolbar.replaceChild(n._buttonTray,e.element._buttonTray);const i=A(e.element.originElement,d._getConstructed(e.element),l);e.element=i.element,e.tool=i.tool,l.iframe&&(e.element.wysiwyg=d._wd.body),d._recoverButtonStates(),d._cachingButtons(),d.history._resetCachingButton(),d.effectNode=null,d.hasFocus&&u._applyTagEffects(),d.isReadOnly&&r.setDisabledButtons(!0,d.resizingDisabledButtons),"function"==typeof h.onSetToolbarButtons&&h.onSetToolbarButtons(n._buttonTray.querySelectorAll("button"),d)},setOptions:function(s){u._removeEvent(),d._resetComponents(),r.removeClass(d._styleCommandMap.showBlocks,"active"),r.removeClass(d._styleCommandMap.codeView,"active"),d._variable.isCodeView=!1,d._iframeAuto=null,d.plugins=s.plugins||d.plugins;const c=[l,s].reduce((function(e,t){for(let n in t)if(r.hasOwn(t,n))if("plugins"===n&&t[n]&&e[n]){let i=e[n],l=t[n];i=i.length?i:a.Object.keys(i).map((function(e){return i[e]})),l=l.length?l:a.Object.keys(l).map((function(e){return l[e]})),e[n]=l.filter((function(e){return-1===i.indexOf(e)})).concat(i)}else e[n]=t[n];return e}),{}),h=e.element,g=h.wysiwyg.innerHTML,p=B._setOptions(c,e,l);p.callButtons&&(t=p.callButtons,d.initPlugins={}),p.plugins&&(d.plugins=n=p.plugins),0===h._menuTray.children.length&&(this._menuTray={}),o=p.toolbar.responsiveButtons,d.options=l=c,d.lang=i=l.lang,l.iframe&&h.wysiwygFrame.addEventListener("load",(function(){r._setIframeDocument(this,l),d._setOptionsInit(h,g)})),h.editorArea.appendChild(h.wysiwygFrame),l.iframe||d._setOptionsInit(h,g)},setDefaultStyle:function(t){const n=l._editorStyles=r._setDefaultOptionStyle(l,t),i=e.element;i.topArea.style.cssText=n.top,i.code.style.cssText=l._editorStyles.frame,i.code.style.display="none","auto"===l.height?i.code.style.overflow="hidden":i.code.style.overflow="",l.iframe?(i.wysiwygFrame.style.cssText=n.frame,i.wysiwyg.style.cssText=n.editor):i.wysiwygFrame.style.cssText=n.frame+n.editor},noticeOpen:function(e){d.notice.open.call(d,e)},noticeClose:function(){d.notice.close.call(d)},save:function(){const t=d.getContents(!1);e.element.originElement.value=t,u.onSave_wysiwyg(t,d)},getContext:function(){return e},getContents:function(e){return d.getContents(e)},getText:function(){return e.element.wysiwyg.textContent},getCharCount:function(t){return t="string"==typeof t?t:l.charCounterType,d.getCharLength(d._charTypeHTML?e.element.wysiwyg.innerHTML:e.element.wysiwyg.textContent,t)},getImagesInfo:function(){return e.image?e.image._infoList:[]},getFilesInfo:function(t){return e[t]?e[t]._infoList:[]},insertImage:function(e){d.plugins.image&&e&&(d.initPlugins.image?d.plugins.image.submitAction.call(d,e):d.callPlugin("image",d.plugins.image.submitAction.bind(d,e),null),d.focus())},insertHTML:function(t,n,i,l){if(e.element.wysiwygFrame.contains(d.getSelection().focusNode)||d.focus(),"string"==typeof t){n||(t=d.cleanHTML(t,null,null));try{if(r.isListCell(r.getFormatElement(d.getSelectionNode(),null))){const e=s.createRange().createContextualFragment(t).childNodes;d._isFormatData(e)&&(t=d._convertListCell(e))}const e=s.createRange().createContextualFragment(t).childNodes;if(i){const t=d._charTypeHTML?"outerHTML":"textContent";let n="";for(let i=0,l=e.length;i<l;i++)n+=e[i][t];if(!d.checkCharCount(n,null))return}let n,o,a,c,u;for(;n=e[0];)c&&3===c.nodeType&&o&&1===o.nodeType&&r.isBreak(n)?(c=n,r.removeItem(n)):(a=d.insertNode(n,o,!1),o=a.container||a,u||(u=a),c=n);3===c.nodeType&&1===o.nodeType&&(o=c);const h=3===o.nodeType?a.endOffset||o.textContent.length:o.childNodes.length;l?d.setRange(u.container||u,u.startOffset||0,o,h):d.setRange(o,h,o,h)}catch(e){if(d.isDisabled||d.isReadOnly)return;console.warn("[SUNEDITOR.insertHTML.fail] "+e),d.execCommand("insertHTML",!1,t)}}else if(r.isComponent(t))d.insertComponent(t,!1,i,!1);else{let e=null;(r.isFormatElement(t)||r.isMedia(t))&&(e=r.getFormatElement(d.getSelectionNode(),null)),d.insertNode(t,e,i)}d.effectNode=null,d.focus(),d.history.push(!1)},setContents:function(e){d.setContents(e)},appendContents:function(t){const n=d.convertContentsForEditor(t);if(d._variable.isCodeView)d._setCodeView(d._getCodeView()+"\n"+d.convertHTMLForCodeView(n,!1));else{const t=r.createElement("DIV");t.innerHTML=n;const i=e.element.wysiwyg,l=t.children;for(let e=0,t=l.length;e<t;e++)l[e]&&i.appendChild(l[e])}d.history.push(!1)},readOnly:function(t){d.isReadOnly=t,r.setDisabledButtons(!!t,d.resizingDisabledButtons),t?(d.controllersOff(),d.submenuActiveButton&&d.submenuActiveButton.disabled&&d.submenuOff(),d._moreLayerActiveButton&&d._moreLayerActiveButton.disabled&&d.moreLayerOff(),d.containerActiveButton&&d.containerActiveButton.disabled&&d.containerOff(),d.modalForm&&d.plugins.dialog.close.call(d),e.element.code.setAttribute("readOnly","true"),r.addClass(e.element.wysiwygFrame,"se-read-only")):(e.element.code.removeAttribute("readOnly"),r.removeClass(e.element.wysiwygFrame,"se-read-only")),l.codeMirrorEditor&&l.codeMirrorEditor.setOption("readOnly",!!t)},disable:function(){this.toolbar.disable(),this.wysiwyg.disable()},disabled:function(){this.disable()},enable:function(){this.toolbar.enable(),this.wysiwyg.enable()},enabled:function(){this.enable()},show:function(){const t=e.element.topArea.style;"none"===t.display&&(t.display=l.display)},hide:function(){e.element.topArea.style.display="none"},destroy:function(){d.submenuOff(),d.containerOff(),d.controllersOff(),d.notice&&d.notice.close.call(d),d.modalForm&&d.plugins.dialog.close.call(d),d.history._destroy(),u._removeEvent(),r.removeItem(e.element.toolbar),r.removeItem(e.element.topArea);for(let e in d.functions)r.hasOwn(d,e)&&delete d.functions[e];for(let e in d)r.hasOwn(d,e)&&delete d[e];for(let e in u)r.hasOwn(u,e)&&delete u[e];for(let t in e)r.hasOwn(e,t)&&delete e[t];for(let e in t)r.hasOwn(t,e)&&delete t[e];for(let e in this)r.hasOwn(this,e)&&delete this[e]},toolbar:{disable:function(){d.submenuOff(),d.moreLayerOff(),d.containerOff(),e.tool.cover.style.display="block"},disabled:function(){this.disable()},enable:function(){e.tool.cover.style.display="none"},enabled:function(){this.enable()},show:function(){d._isInline?u._showToolbarInline():(e.element.toolbar.style.display="",e.element._stickyDummy.style.display=""),u.onResize_window()},hide:function(){d._isInline?u._hideToolbar():(e.element.toolbar.style.display="none",e.element._stickyDummy.style.display="none"),u.onResize_window()}},wysiwyg:{disable:function(){d.controllersOff(),d.modalForm&&d.plugins.dialog.close.call(d),e.element.wysiwyg.setAttribute("contenteditable",!1),d.isDisabled=!0,l.codeMirrorEditor?l.codeMirrorEditor.setOption("readOnly",!0):e.element.code.setAttribute("disabled","disabled")},enable:function(){e.element.wysiwyg.setAttribute("contenteditable",!0),d.isDisabled=!1,l.codeMirrorEditor?l.codeMirrorEditor.setOption("readOnly",!1):e.element.code.removeAttribute("disabled")}}};d.functions=h,d.options=l;let g=e.element,p=g.originElement,m=g.topArea;return p.style.display="none",m.style.display="block",l.iframe&&g.wysiwygFrame.addEventListener("load",(function(){r._setIframeDocument(this,l),d._editorInit(!1,l.value),l.value=null})),"object"==typeof p.nextElementSibling?p.parentNode.insertBefore(m,p.nextElementSibling):p.parentNode.appendChild(m),g.editorArea.appendChild(g.wysiwygFrame),g=p=m=null,l.iframe||(d._editorInit(!1,l.value),l.value=null),h}(A(i,l.constructed,l.options),l.pluginCallButtons,l.plugins,l.options.lang,t,l._responsiveButtons)}};window.SUNEDITOR||Object.defineProperty(window,"SUNEDITOR",{enumerable:!0,writable:!1,configurable:!1,value:M.init({plugins:E})})},ZED3:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"component",set_container:function(e,t){const n=this.util.createElement("DIV");return n.className="se-component "+t,n.appendChild(e),n},set_cover:function(e){const t=this.util.createElement("FIGURE");return t.appendChild(e),t},create_caption:function(){const e=this.util.createElement("FIGCAPTION");return e.innerHTML="<div>"+this.lang.dialogBox.caption+"</div>",e}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"component",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},ee5k:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"resizing",add:function(e){const t=e.icons,n=e.context;n.resizing={_resizeClientX:0,_resizeClientY:0,_resize_plugin:"",_resize_w:0,_resize_h:0,_origin_w:0,_origin_h:0,_rotateVertical:!1,_resize_direction:"",_move_path:null,_isChange:!1,alignIcons:{basic:t.align_justify,left:t.align_left,right:t.align_right,center:t.align_center}};let i=this.setController_resize(e);n.resizing.resizeContainer=i,n.resizing.resizeDiv=i.querySelector(".se-modal-resize"),n.resizing.resizeDot=i.querySelector(".se-resize-dot"),n.resizing.resizeDisplay=i.querySelector(".se-resize-display");let l=this.setController_button(e);n.resizing.resizeButton=l;let o=n.resizing.resizeHandles=n.resizing.resizeDot.querySelectorAll("span");n.resizing.resizeButtonGroup=l.querySelector("._se_resizing_btn_group"),n.resizing.rotationButtons=l.querySelectorAll("._se_resizing_btn_group ._se_rotation"),n.resizing.percentageButtons=l.querySelectorAll("._se_resizing_btn_group ._se_percentage"),n.resizing.alignMenu=l.querySelector(".se-resizing-align-list"),n.resizing.alignMenuList=n.resizing.alignMenu.querySelectorAll("button"),n.resizing.alignButton=l.querySelector("._se_resizing_align_button"),n.resizing.autoSizeButton=l.querySelector("._se_resizing_btn_group ._se_auto_size"),n.resizing.captionButton=l.querySelector("._se_resizing_caption_button"),i.addEventListener("mousedown",(function(e){e.preventDefault()})),o[0].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o[1].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o[2].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o[3].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o[4].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o[5].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o[6].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),o[7].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l.addEventListener("click",this.onClick_resizeButton.bind(e)),n.element.relative.appendChild(i),n.element.relative.appendChild(l),i=null,l=null,o=null},setController_resize:function(e){const t=e.util.createElement("DIV");return t.className="se-controller se-resizing-container",t.style.display="none",t.innerHTML='<div class="se-modal-resize"></div><div class="se-resize-dot"><span class="tl"></span><span class="tr"></span><span class="bl"></span><span class="br"></span><span class="lw"></span><span class="th"></span><span class="rw"></span><span class="bh"></span><div class="se-resize-display"></div></div>',t},setController_button:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-resizing",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="se-btn-group _se_resizing_btn_group"><button type="button" data-command="percent" data-value="1" class="se-tooltip _se_percentage"><span>100%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize100+'</span></span></button><button type="button" data-command="percent" data-value="0.75" class="se-tooltip _se_percentage"><span>75%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize75+'</span></span></button><button type="button" data-command="percent" data-value="0.5" class="se-tooltip _se_percentage"><span>50%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize50+'</span></span></button><button type="button" data-command="auto" class="se-btn se-tooltip _se_auto_size">'+n.auto_size+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.autoSize+'</span></span></button><button type="button" data-command="rotate" data-value="-90" class="se-btn se-tooltip _se_rotation">'+n.rotate_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.rotateLeft+'</span></span></button><button type="button" data-command="rotate" data-value="90" class="se-btn se-tooltip _se_rotation">'+n.rotate_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.rotateRight+'</span></span></button></div><div class="se-btn-group" style="padding-top: 0;"><button type="button" data-command="mirror" data-value="h" class="se-btn se-tooltip">'+n.mirror_horizontal+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.mirrorHorizontal+'</span></span></button><button type="button" data-command="mirror" data-value="v" class="se-btn se-tooltip">'+n.mirror_vertical+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.mirrorVertical+'</span></span></button><button type="button" data-command="onalign" class="se-btn se-tooltip _se_resizing_align_button">'+n.align_justify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.toolbar.align+'</span></span></button><div class="se-btn-group-sub sun-editor-common se-list-layer se-resizing-align-list"><div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="basic">'+n.align_justify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.basic+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="left">'+n.align_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.left+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="center">'+n.align_center+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.center+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="right">'+n.align_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.right+'</span></span></button></li></ul></div></div><button type="button" data-command="caption" class="se-btn se-tooltip _se_resizing_caption_button">'+n.caption+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.caption+'</span></span></button><button type="button" data-command="revert" class="se-btn se-tooltip">'+n.revert+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.revertButton+'</span></span></button><button type="button" data-command="update" class="se-btn se-tooltip">'+n.modify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div>",i},_module_getSizeX:function(e,t,n,i){return t||(t=e._element),n||(n=e._cover),i||(i=e._container),t?/%$/.test(t.style.width)?(i&&this.util.getNumber(i.style.width,2)||100)+"%":t.style.width:""},_module_getSizeY:function(e,t,n,i){return t||(t=e._element),n||(n=e._cover),i||(i=e._container),i&&n?this.util.getNumber(n.style.paddingBottom,0)>0&&!this.context.resizing._rotateVertical?n.style.height:/%$/.test(t.style.height)&&/%$/.test(t.style.width)?(i&&this.util.getNumber(i.style.height,2)||100)+"%":t.style.height:t&&t.style.height||""},_module_setModifyInputSize:function(e,t){const n=e._onlyPercentage&&this.context.resizing._rotateVertical;e.proportion.checked=e._proportionChecked="false"!==e._element.getAttribute("data-proportion");let i=n?"":this.plugins.resizing._module_getSizeX.call(this,e);if(i===e._defaultSizeX&&(i=""),e._onlyPercentage&&(i=this.util.getNumber(i,2)),e.inputX.value=i,t.setInputSize.call(this,"x"),!e._onlyPercentage){let t=n?"":this.plugins.resizing._module_getSizeY.call(this,e);t===e._defaultSizeY&&(t=""),e._onlyPercentage&&(t=this.util.getNumber(t,2)),e.inputY.value=t}e.inputX.disabled=!!n,e.inputY.disabled=!!n,e.proportion.disabled=!!n,t.setRatio.call(this)},_module_setInputSize:function(e,t){if(e._onlyPercentage)"x"===t&&e.inputX.value>100&&(e.inputX.value=100);else if(e.proportion.checked&&e._ratio&&/\d/.test(e.inputX.value)&&/\d/.test(e.inputY.value)){const n=e.inputX.value.replace(/\d+|\./g,"")||e.sizeUnit,i=e.inputY.value.replace(/\d+|\./g,"")||e.sizeUnit;if(n!==i)return;const l="%"===n?2:0;"x"===t?e.inputY.value=this.util.getNumber(e._ratioY*this.util.getNumber(e.inputX.value,l),l)+i:e.inputX.value=this.util.getNumber(e._ratioX*this.util.getNumber(e.inputY.value,l),l)+n}},_module_setRatio:function(e){const t=e.inputX.value,n=e.inputY.value;if(e.proportion.checked&&/\d+/.test(t)&&/\d+/.test(n)){if((t.replace(/\d+|\./g,"")||e.sizeUnit)!==(n.replace(/\d+|\./g,"")||e.sizeUnit))e._ratio=!1;else if(!e._ratio){const i=this.util.getNumber(t,0),l=this.util.getNumber(n,0);e._ratio=!0,e._ratioX=i/l,e._ratioY=l/i}}else e._ratio=!1},_module_sizeRevert:function(e){e._onlyPercentage?e.inputX.value=e._origin_w>100?100:e._origin_w:(e.inputX.value=e._origin_w,e.inputY.value=e._origin_h)},_module_saveCurrentSize:function(e){const t=this.plugins.resizing._module_getSizeX.call(this,e),n=this.plugins.resizing._module_getSizeY.call(this,e);e._element.setAttribute("width",t.replace("px","")),e._element.setAttribute("height",n.replace("px","")),e._element.setAttribute("data-size",t+","+n),e._videoRatio&&(e._videoRatio=n)},call_controller_resize:function(e,t){const n=this.context.resizing,i=this.context[t];n._resize_plugin=t;const l=n.resizeContainer,o=n.resizeDiv,s=this.util.getOffset(e,this.context.element.wysiwygFrame),a=n._rotateVertical=/^(90|270)$/.test(Math.abs(e.getAttribute("data-rotate")).toString()),r=a?e.offsetHeight:e.offsetWidth,c=a?e.offsetWidth:e.offsetHeight,d=s.top,u=s.left-this.context.element.wysiwygFrame.scrollLeft;l.style.top=d+"px",l.style.left=u+"px",l.style.width=r+"px",l.style.height=c+"px",o.style.top="0px",o.style.left="0px",o.style.width=r+"px",o.style.height=c+"px";let h=e.getAttribute("data-align")||"basic";h="none"===h?"basic":h;const g=this.util.getParentElement(e,this.util.isComponent),p=this.util.getParentElement(e,"FIGURE"),m=this.plugins.resizing._module_getSizeX.call(this,i,e,p,g)||"auto",f=i._onlyPercentage&&"image"===t?"":", "+(this.plugins.resizing._module_getSizeY.call(this,i,e,p,g)||"auto");this.util.changeTxt(n.resizeDisplay,this.lang.dialogBox[h]+" ("+m+f+")"),n.resizeButtonGroup.style.display=i._resizing?"":"none";const _=!i._resizing||i._resizeDotHide||i._onlyPercentage?"none":"flex",b=n.resizeHandles;for(let e=0,t=b.length;e<t;e++)b[e].style.display=_;if(i._resizing){const e=n.rotationButtons;e[0].style.display=e[1].style.display=i._rotation?"":"none"}if(i._alignHide)n.alignButton.style.display="none";else{n.alignButton.style.display="";const e=n.alignMenuList;this.util.changeElement(n.alignButton.firstElementChild,n.alignIcons[h]);for(let t=0,n=e.length;t<n;t++)e[t].getAttribute("data-value")===h?this.util.addClass(e[t],"on"):this.util.removeClass(e[t],"on")}const v=n.percentageButtons,y=/%$/.test(e.style.width)&&/%$/.test(g.style.width)?this.util.getNumber(g.style.width,0)/100+"":"";for(let e=0,t=v.length;e<t;e++)v[e].getAttribute("data-value")===y?this.util.addClass(v[e],"active"):this.util.removeClass(v[e],"active");i._captionShow?(n.captionButton.style.display="",this.util.getChildElement(e.parentNode,"figcaption")?(this.util.addClass(n.captionButton,"active"),i._captionChecked=!0):(this.util.removeClass(n.captionButton,"active"),i._captionChecked=!1)):n.captionButton.style.display="none",l.style.display="block";const C={left:0,top:50};this.options.iframe&&(C.left-=this.context.element.wysiwygFrame.parentElement.offsetLeft,C.top-=this.context.element.wysiwygFrame.parentElement.offsetTop),this.setControllerPosition(n.resizeButton,l,"bottom",C),this.controllersOn(l,n.resizeButton,function(){this.util.setDisabledButtons.call(this.util,!1,this.resizingDisabledButtons),this.history._resetCachingButton()}.bind(this),e,t),this.util.setDisabledButtons(!0,this.resizingDisabledButtons),n._resize_w=r,n._resize_h=c;const w=(e.getAttribute("origin-size")||"").split(",");return n._origin_w=w[0]||e.naturalWidth,n._origin_h=w[1]||e.naturalHeight,{w:r,h:c,t:d,l:u}},_closeAlignMenu:null,openAlignMenu:function(){const e=this.context.resizing.alignButton;this.util.addClass(e,"on"),this.context.resizing.alignMenu.style.top=e.offsetTop+e.offsetHeight+"px",this.context.resizing.alignMenu.style.left=e.offsetLeft-e.offsetWidth/2+"px",this.context.resizing.alignMenu.style.display="block",this.plugins.resizing._closeAlignMenu=function(){this.util.removeClass(this.context.resizing.alignButton,"on"),this.context.resizing.alignMenu.style.display="none",this.removeDocEvent("click",this.plugins.resizing._closeAlignMenu),this.plugins.resizing._closeAlignMenu=null}.bind(this),this.addDocEvent("click",this.plugins.resizing._closeAlignMenu)},onClick_resizeButton:function(e){e.stopPropagation();const t=e.target,n=t.getAttribute("data-command")||t.parentNode.getAttribute("data-command");if(!n)return;const i=t.getAttribute("data-value")||t.parentNode.getAttribute("data-value"),l=this.context.resizing._resize_plugin,o=this.context[l],s=o._element,a=this.plugins[l];if(e.preventDefault(),"function"!=typeof this.plugins.resizing._closeAlignMenu||(this.plugins.resizing._closeAlignMenu(),"onalign"!==n)){switch(n){case"auto":this.plugins.resizing.resetTransform.call(this,s),a.setAutoSize.call(this),this.selectComponent(s,l);break;case"percent":let e=this.plugins.resizing._module_getSizeY.call(this,o);if(this.context.resizing._rotateVertical){const t=s.getAttribute("data-percentage");t&&(e=t.split(",")[1])}this.plugins.resizing.resetTransform.call(this,s),a.setPercentSize.call(this,100*i,null!==this.util.getNumber(e,0)&&/%$/.test(e)?e:""),this.selectComponent(s,l);break;case"mirror":const t=s.getAttribute("data-rotate")||"0";let n=s.getAttribute("data-rotateX")||"",r=s.getAttribute("data-rotateY")||"";"h"===i&&!this.context.resizing._rotateVertical||"v"===i&&this.context.resizing._rotateVertical?r=r?"":"180":n=n?"":"180",s.setAttribute("data-rotateX",n),s.setAttribute("data-rotateY",r),this.plugins.resizing._setTransForm(s,t,n,r);break;case"rotate":const c=this.context.resizing,d=1*s.getAttribute("data-rotate")+1*i,u=this._w.Math.abs(d)>=360?0:d;s.setAttribute("data-rotate",u),c._rotateVertical=/^(90|270)$/.test(this._w.Math.abs(u).toString()),this.plugins.resizing.setTransformSize.call(this,s,null,null),this.selectComponent(s,l);break;case"onalign":return void this.plugins.resizing.openAlignMenu.call(this);case"align":const h="basic"===i?"none":i;a.setAlign.call(this,h,null,null,null),this.selectComponent(s,l);break;case"caption":const g=!o._captionChecked;if(a.openModify.call(this,!0),o._captionChecked=o.captionCheckEl.checked=g,a.update_image.call(this,!1,!1,!1),g){const e=this.util.getChildElement(o._caption,(function(e){return 3===e.nodeType}));e?this.setRange(e,0,e,e.textContent.length):o._caption.focus(),this.controllersOff()}else this.selectComponent(s,l),a.openModify.call(this,!0);break;case"revert":a.setOriginSize.call(this),this.selectComponent(s,l);break;case"update":a.openModify.call(this),this.controllersOff();break;case"delete":a.destroy.call(this)}this.history.push(!1)}},resetTransform:function(e){const t=(e.getAttribute("data-size")||e.getAttribute("data-origin")||"").split(",");this.context.resizing._rotateVertical=!1,e.style.maxWidth="",e.style.transform="",e.style.transformOrigin="",e.setAttribute("data-rotate",""),e.setAttribute("data-rotateX",""),e.setAttribute("data-rotateY",""),this.plugins[this.context.resizing._resize_plugin].setSize.call(this,t[0]?t[0]:"auto",t[1]?t[1]:"",!0)},setTransformSize:function(e,t,n){let i=e.getAttribute("data-percentage");const l=this.context.resizing._rotateVertical,o=1*e.getAttribute("data-rotate");let s="";if(i&&!l)i=i.split(","),"auto"===i[0]&&"auto"===i[1]?this.plugins[this.context.resizing._resize_plugin].setAutoSize.call(this):this.plugins[this.context.resizing._resize_plugin].setPercentSize.call(this,i[0],i[1]);else{const i=this.util.getParentElement(e,"FIGURE"),a=t||e.offsetWidth,r=n||e.offsetHeight,c=(l?r:a)+"px",d=(l?a:r)+"px";if(this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this),this.plugins[this.context.resizing._resize_plugin].setSize.call(this,a+"px",r+"px",!0),i.style.width=c,i.style.height=this.context[this.context.resizing._resize_plugin]._caption?"":d,l){let e=a/2+"px "+a/2+"px 0",t=r/2+"px "+r/2+"px 0";s=90===o||-270===o?t:e}}e.style.transformOrigin=s,this.plugins.resizing._setTransForm(e,o.toString(),e.getAttribute("data-rotateX")||"",e.getAttribute("data-rotateY")||""),e.style.maxWidth=l?"none":"",this.plugins.resizing.setCaptionPosition.call(this,e)},_setTransForm:function(e,t,n,i){let l=(e.offsetWidth-e.offsetHeight)*(/-/.test(t)?1:-1),o="";if(/[1-9]/.test(t)&&(n||i))switch(o=n?"Y":"X",t){case"90":o=n&&i?"X":i?o:"";break;case"270":l*=-1,o=n&&i?"Y":n?o:"";break;case"-90":o=n&&i?"Y":n?o:"";break;case"-270":l*=-1,o=n&&i?"X":i?o:"";break;default:o=""}t%180==0&&(e.style.maxWidth=""),e.style.transform="rotate("+t+"deg)"+(n?" rotateX("+n+"deg)":"")+(i?" rotateY("+i+"deg)":"")+(o?" translate"+o+"("+l+"px)":"")},setCaptionPosition:function(e){const t=this.util.getChildElement(this.util.getParentElement(e,"FIGURE"),"FIGCAPTION");t&&(t.style.marginTop=(this.context.resizing._rotateVertical?e.offsetWidth-e.offsetHeight:0)+"px")},onMouseDown_resize_handle:function(e){e.stopPropagation(),e.preventDefault();const t=this.context.resizing,n=t._resize_direction=e.target.classList[0];t._resizeClientX=e.clientX,t._resizeClientY=e.clientY,this.context.element.resizeBackground.style.display="block",t.resizeButton.style.display="none",t.resizeDiv.style.float=/l/.test(n)?"right":/r/.test(n)?"left":"none";const i=function(e){if("keydown"===e.type&&27!==e.keyCode)return;const o=t._isChange;t._isChange=!1,this.removeDocEvent("mousemove",l),this.removeDocEvent("mouseup",i),this.removeDocEvent("keydown",i),"keydown"===e.type?(this.controllersOff(),this.context.element.resizeBackground.style.display="none",this.plugins[this.context.resizing._resize_plugin].init.call(this)):(this.plugins.resizing.cancel_controller_resize.call(this,n),o&&this.history.push(!1))}.bind(this),l=this.plugins.resizing.resizing_element.bind(this,t,n,this.context[t._resize_plugin]);this.addDocEvent("mousemove",l),this.addDocEvent("mouseup",i),this.addDocEvent("keydown",i)},resizing_element:function(e,t,n,i){const l=i.clientX,o=i.clientY;let s=n._element_w,a=n._element_h;const r=n._element_w+(/r/.test(t)?l-e._resizeClientX:e._resizeClientX-l),c=n._element_h+(/b/.test(t)?o-e._resizeClientY:e._resizeClientY-o),d=n._element_h/n._element_w*r;/t/.test(t)&&(e.resizeDiv.style.top=n._element_h-(/h/.test(t)?c:d)+"px"),/l/.test(t)&&(e.resizeDiv.style.left=n._element_w-r+"px"),/r|l/.test(t)&&(e.resizeDiv.style.width=r+"px",s=r),/^(t|b)[^h]$/.test(t)?(e.resizeDiv.style.height=d+"px",a=d):/^(t|b)h$/.test(t)&&(e.resizeDiv.style.height=c+"px",a=c),e._resize_w=s,e._resize_h=a,this.util.changeTxt(e.resizeDisplay,this._w.Math.round(s)+" x "+this._w.Math.round(a)),e._isChange=!0},cancel_controller_resize:function(e){const t=this.context.resizing._rotateVertical;this.controllersOff(),this.context.element.resizeBackground.style.display="none";let n=this._w.Math.round(t?this.context.resizing._resize_h:this.context.resizing._resize_w),i=this._w.Math.round(t?this.context.resizing._resize_w:this.context.resizing._resize_h);if(!t&&!/%$/.test(n)){const e=16,t=this.context.element.wysiwygFrame.clientWidth-2*e-2;this.util.getNumber(n,0)>t&&(i=this._w.Math.round(i/n*t),n=t)}const l=this.context.resizing._resize_plugin;this.plugins[l].setSize.call(this,n,i,!1,e),t&&this.plugins.resizing.setTransformSize.call(this,this.context[this.context.resizing._resize_plugin]._element,n,i),this.selectComponent(this.context[l]._element,l)}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"resizing",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},"gjS+":function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"fileManager",_xmlHttp:null,_checkMediaComponent:function(e){return!/IMG/i.test(e)||!/FIGURE/i.test(e.parentElement.nodeName)||!/FIGURE/i.test(e.parentElement.parentElement.nodeName)},upload:function(e,t,n,i,l){this.showLoading();const o=this.plugins.fileManager,s=o._xmlHttp=this.util.getXMLHttpRequest();if(s.onreadystatechange=o._callBackUpload.bind(this,s,i,l),s.open("post",e,!0),null!==t&&"object"==typeof t&&this._w.Object.keys(t).length>0)for(let e in t)s.setRequestHeader(e,t[e]);s.send(n)},_callBackUpload:function(e,t,n){if(4===e.readyState)if(200===e.status)try{t(e)}catch(e){throw Error('[SUNEDITOR.fileManager.upload.callBack.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}else{this.closeLoading();const t=e.responseText?JSON.parse(e.responseText):e;if("function"!=typeof n||n("",t,this)){const n="[SUNEDITOR.fileManager.upload.serverException] status: "+e.status+", response: "+(t.errorMessage||e.responseText);throw this.functions.noticeOpen(n),Error(n)}}},checkInfo:function(e,t,n,i,l){let o=[];for(let e=0,n=t.length;e<n;e++)o=o.concat([].slice.call(this.context.element.wysiwyg.querySelectorAll(t[e]+':not([data-se-embed="true"])')));const s=this.plugins.fileManager,a=this.context[e],r=a._infoList,c=s.setInfo.bind(this);if(o.length===r.length){if(this._componentsInfoReset){for(let t=0,i=o.length;t<i;t++)c(e,o[t],n,null,l);return}{let e=!1;for(let t,n=0,i=r.length;n<i;n++)if(t=r[n],0===o.filter((function(e){return t.src===e.src&&t.index.toString()===e.getAttribute("data-index")})).length){e=!0;break}if(!e)return}}const d=l?this.context.resizing._resize_plugin:"";l&&(this.context.resizing._resize_plugin=e);const u=[],h=[];for(let e=0,t=r.length;e<t;e++)h[e]=r[e].index;for(a.__updateTags=o;o.length>0;){const t=o.shift();this.util.getParentElement(t,this.util.isMediaComponent)&&s._checkMediaComponent(t)?!t.getAttribute("data-index")||h.indexOf(1*t.getAttribute("data-index"))<0?(u.push(a._infoIndex),t.removeAttribute("data-index"),c(e,t,n,null,l)):u.push(1*t.getAttribute("data-index")):(u.push(a._infoIndex),i(t))}for(let e,t=0;t<r.length;t++)e=r[t].index,u.indexOf(e)>-1||(r.splice(t,1),"function"==typeof n&&n(null,e,"delete",null,0,this),t--);l&&(this.context.resizing._resize_plugin=d)},setInfo:function(e,t,n,i,l){const o=l?this.context.resizing._resize_plugin:"";l&&(this.context.resizing._resize_plugin=e);const s=this.plugins[e],a=this.context[e],r=a._infoList;let c=t.getAttribute("data-index"),d=null,u="";if(i||(i={name:t.getAttribute("data-file-name")||("string"==typeof t.src?t.src.split("/").pop():""),size:t.getAttribute("data-file-size")||0}),!c||this._componentsInfoInit)u="create",c=a._infoIndex++,t.setAttribute("data-index",c),t.setAttribute("data-file-name",i.name),t.setAttribute("data-file-size",i.size),d={src:t.src,index:1*c,name:i.name,size:i.size},r.push(d);else{u="update",c*=1;for(let e=0,t=r.length;e<t;e++)if(c===r[e].index){d=r[e];break}d||(c=a._infoIndex++,d={index:c},r.push(d)),d.src=t.src,d.name=t.getAttribute("data-file-name"),d.size=1*t.getAttribute("data-file-size")}if(d.element=t,d.delete=s.destroy.bind(this,t),d.select=function(e){e.scrollIntoView(!0),this._w.setTimeout(s.select.bind(this,e))}.bind(this,t),l){if(!t.getAttribute("origin-size")&&t.naturalWidth&&t.setAttribute("origin-size",t.naturalWidth+","+t.naturalHeight),!t.getAttribute("data-origin")){const e=this.util.getParentElement(t,this.util.isMediaComponent),n=this.util.getParentElement(t,"FIGURE"),i=this.plugins.resizing._module_getSizeX.call(this,a,t,n,e),l=this.plugins.resizing._module_getSizeY.call(this,a,t,n,e);t.setAttribute("data-origin",i+","+l),t.setAttribute("data-size",i+","+l)}if(!t.style.width){const e=(t.getAttribute("data-size")||t.getAttribute("data-origin")||"").split(",");s.onModifyMode.call(this,t,null),s.applySize.call(this,e[0],e[1])}this.context.resizing._resize_plugin=o}"function"==typeof n&&n(t,c,u,d,--a._uploadFileLength<0?0:a._uploadFileLength,this)},deleteInfo:function(e,t,n){if(t>=0){const i=this.context[e]._infoList;for(let e=0,l=i.length;e<l;e++)if(t===i[e].index)return i.splice(e,1),void("function"==typeof n&&n(null,t,"delete",null,0,this))}},resetInfo:function(e,t){const n=this.context[e];if("function"==typeof t){const e=n._infoList;for(let n=0,i=e.length;n<i;n++)t(null,e[n].index,"delete",null,0,this)}n._infoList=[],n._infoIndex=0}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"fileManager",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9maWxlQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFuZy9lbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9tb2R1bGVzL19jb2xvclBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L2ZvbnRDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L2hpbGl0ZUNvbG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvdGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9fc2VsZWN0TWVudS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9tb2R1bGVzL19hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvZGlhbG9nL2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvZGlhbG9nL2ltYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2RpYWxvZy92aWRlby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9kaWFsb2cvYXVkaW8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvZGlhbG9nL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvY29tbWFuZC9ibG9ja3F1b3RlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvYWxpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS9mb250LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvZm9udFNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS9ob3Jpem9udGFsUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS90YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L2Zvcm1hdEJsb2NrLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvbGluZUhlaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L3BhcmFncmFwaFN0eWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvdGV4dFN0eWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2ZpbGVCcm93c2VyL2ltYWdlR2FsbGVyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2RlZmF1bHRJY29ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9fbm90aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdW5lZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9jb3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9saWIvaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3VuZWRpdG9yX2J1aWxkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL21vZHVsZXMvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL21vZHVsZXMvcmVzaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9maWxlTWFuYWdlci5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImZhY3RvcnkiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJkaWFsb2ciLCJhZGQiLCJjb3JlIiwiY29udGV4dCIsImtpbmQiLCJ1cGRhdGVNb2RhbCIsIl9jbG9zZVNpZ25hbCIsImRpYWxvZ19kaXYiLCJ1dGlsIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImRpYWxvZ19iYWNrIiwic3R5bGUiLCJkaXNwbGF5IiwiZGlhbG9nX2FyZWEiLCJhcHBlbmRDaGlsZCIsIm1vZGFsQXJlYSIsImJhY2siLCJtb2RhbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfb25Nb3VzZURvd25fZGlhbG9nIiwiX29uQ2xpY2tfZGlhbG9nIiwiZWxlbWVudCIsInJlbGF0aXZlIiwiZSIsInRlc3QiLCJ0YXJnZXQiLCJnZXRBdHRyaWJ1dGUiLCJwbHVnaW5zIiwiY2xvc2UiLCJvcGVuIiwidXBkYXRlIiwibW9kYWxGb3JtIiwiX2JpbmRDbG9zZSIsIl9kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImtleUNvZGUiLCJvcHRpb25zIiwicG9wdXBEaXNwbGF5IiwicG9zaXRpb24iLCJmb2N1c0VsZW1lbnQiLCJvbiIsImZvY3VzIiwiaW5pdCIsIlNVTkVESVRPUl9NT0RVTEVTIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJkb2N1bWVudCIsInciLCJFcnJvciIsImZpbGVCcm93c2VyIiwiX3htbEh0dHAiLCJfbG9hZGluZyIsImFyZWEiLCJoZWFkZXIiLCJ0YWdBcmVhIiwiYm9keSIsImxpc3QiLCJ0YWdFbGVtZW50cyIsIml0ZW1zIiwic2VsZWN0ZWRUYWdzIiwic2VsZWN0b3JIYW5kbGVyIiwiY29udGV4dFBsdWdpbiIsImNvbHVtblNpemUiLCJicm93c2VyX2RpdiIsImNvbnRlbnQiLCJpbm5lckhUTUwiLCJzZXRfYnJvd3NlciIsInF1ZXJ5U2VsZWN0b3IiLCJ0aXRsZUFyZWEiLCJvbkNsaWNrVGFnIiwib25DbGlja0ZpbGUiLCJfb25Nb3VzZURvd25fYnJvd3NlciIsIl9vbkNsaWNrX2Jyb3dzZXIiLCJsYW5nIiwiZGlhbG9nQm94IiwiaWNvbnMiLCJjYW5jZWwiLCJzdG9wUHJvcGFnYXRpb24iLCJwbHVnaW5OYW1lIiwiZmlsZUJyb3dzZXJDb250ZXh0IiwicGx1Z2luQ29udGV4dCIsImxpc3RDbGFzc05hbWUiLCJsaXN0Q2xhc3MiLCJoYXNDbGFzcyIsInRleHRDb250ZW50IiwidGl0bGUiLCJfZHJhd0ZpbGVMaXN0IiwidXJsIiwiZmlsZUJyb3dzZXJQbHVnaW4iLCJhYm9ydCIsInNob3dCcm93c2VyTG9hZGluZyIsImNsb3NlQnJvd3NlckxvYWRpbmciLCJicm93c2VySGVhZGVyIiwieG1sSHR0cCIsImdldFhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiX2NhbGxCYWNrR2V0IiwiX3ciLCJrZXlzIiwibGVuZ3RoIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwicmVzdWx0IiwiX2RyYXdMaXN0SXRlbSIsIm51bGxNZXNzYWdlIiwibWVzc2FnZSIsIm1heEhlaWdodCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiZXJyIiwiZXJyb3JNZXNzYWdlIiwiX3RhZ3MiLCJsZW4iLCJzcGxpdFNpemUiLCJNYXRoIiwicm91bmQiLCJkcmF3SXRlbUhhbmRsZXIiLCJpdGVtVGVtcGxhdGVIYW5kbGVyIiwidGFnc0hUTUwiLCJsaXN0SFRNTCIsImNvbHVtbnMiLCJpdGVtIiwidGFncyIsInRhZyIsInNwbGl0IiwibWFwIiwidiIsInRyaW0iLCJ0TGVuIiwiaW5kZXhPZiIsInB1c2giLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXNBbmNob3IiLCJ0YWdOYW1lIiwic2VsZWN0VGFnIiwic1RhZ0luZGV4Iiwic3BsaWNlIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImZpbHRlciIsInNvbWUiLCJwcmV2ZW50RGVmYXVsdCIsImxpc3RFbCIsImNvbW1hbmQiLCJwYXJlbnROb2RlIiwiY29kZSIsInRvb2xiYXIiLCJkZWZhdWx0Iiwic2F2ZSIsImZvbnQiLCJmb3JtYXRzIiwiZm9udFNpemUiLCJib2xkIiwidW5kZXJsaW5lIiwiaXRhbGljIiwic3RyaWtlIiwic3Vic2NyaXB0Iiwic3VwZXJzY3JpcHQiLCJyZW1vdmVGb3JtYXQiLCJmb250Q29sb3IiLCJoaWxpdGVDb2xvciIsImluZGVudCIsIm91dGRlbnQiLCJhbGlnbiIsImFsaWduTGVmdCIsImFsaWduUmlnaHQiLCJhbGlnbkNlbnRlciIsImFsaWduSnVzdGlmeSIsIm9yZGVyTGlzdCIsInVub3JkZXJMaXN0IiwiaG9yaXpvbnRhbFJ1bGUiLCJocl9zb2xpZCIsImhyX2RvdHRlZCIsImhyX2Rhc2hlZCIsInRhYmxlIiwibGluayIsIm1hdGgiLCJpbWFnZSIsInZpZGVvIiwiYXVkaW8iLCJmdWxsU2NyZWVuIiwic2hvd0Jsb2NrcyIsImNvZGVWaWV3IiwidW5kbyIsInJlZG8iLCJwcmV2aWV3IiwicHJpbnQiLCJ0YWdfcCIsInRhZ19kaXYiLCJ0YWdfaCIsInRhZ19ibG9ja3F1b3RlIiwidGFnX3ByZSIsInRlbXBsYXRlIiwibGluZUhlaWdodCIsInBhcmFncmFwaFN0eWxlIiwidGV4dFN0eWxlIiwiaW1hZ2VHYWxsZXJ5IiwiZGlyX2x0ciIsImRpcl9ydGwiLCJtZW50aW9uIiwibGlua0JveCIsInRleHQiLCJuZXdXaW5kb3dDaGVjayIsImRvd25sb2FkTGlua0NoZWNrIiwiYm9va21hcmsiLCJtYXRoQm94IiwiaW5wdXRMYWJlbCIsImZvbnRTaXplTGFiZWwiLCJwcmV2aWV3TGFiZWwiLCJpbWFnZUJveCIsImZpbGUiLCJhbHRUZXh0IiwidmlkZW9Cb3giLCJhdWRpb0JveCIsImJyb3dzZXIiLCJzZWFyY2giLCJjYXB0aW9uIiwic3VibWl0QnV0dG9uIiwicmV2ZXJ0QnV0dG9uIiwicHJvcG9ydGlvbiIsImJhc2ljIiwibGVmdCIsInJpZ2h0IiwiY2VudGVyIiwid2lkdGgiLCJoZWlnaHQiLCJzaXplIiwicmF0aW8iLCJjb250cm9sbGVyIiwiZWRpdCIsInVubGluayIsInJlbW92ZSIsImluc2VydFJvd0Fib3ZlIiwiaW5zZXJ0Um93QmVsb3ciLCJkZWxldGVSb3ciLCJpbnNlcnRDb2x1bW5CZWZvcmUiLCJpbnNlcnRDb2x1bW5BZnRlciIsImRlbGV0ZUNvbHVtbiIsImZpeGVkQ29sdW1uV2lkdGgiLCJyZXNpemUxMDAiLCJyZXNpemU3NSIsInJlc2l6ZTUwIiwicmVzaXplMjUiLCJhdXRvU2l6ZSIsIm1pcnJvckhvcml6b250YWwiLCJtaXJyb3JWZXJ0aWNhbCIsInJvdGF0ZUxlZnQiLCJyb3RhdGVSaWdodCIsIm1heFNpemUiLCJtaW5TaXplIiwidGFibGVIZWFkZXIiLCJtZXJnZUNlbGxzIiwic3BsaXRDZWxscyIsIkhvcml6b250YWxTcGxpdCIsIlZlcnRpY2FsU3BsaXQiLCJtZW51Iiwic3BhY2VkIiwiYm9yZGVyZWQiLCJuZW9uIiwidHJhbnNsdWNlbnQiLCJzaGFkb3ciLCJTVU5FRElUT1JfTEFORyIsImNvbG9yUGlja2VyIiwiY29sb3JMaXN0SFRNTCIsIl9jb2xvcklucHV0IiwiX2RlZmF1bHRDb2xvciIsIl9zdHlsZVByb3BlcnR5IiwiX2N1cnJlbnRDb2xvciIsIl9jb2xvckxpc3QiLCJjcmVhdGVDb2xvckxpc3QiLCJfbWFrZUNvbG9yTGlzdCIsIm1ha2VDb2xvciIsIm9wdGlvbiIsImNvbG9yTGlzdCIsImNvbG9yQXJyIiwiY29sb3IiLCJjaGVja2VkIiwiZXJhc2UiLCJub2RlIiwiZmlsbENvbG9yIiwiZ2V0Q29sb3JJbk5vZGUiLCJpc0hleENvbG9yIiwicmdiMmhleCIsInRvTG93ZXJDYXNlIiwic2V0SW5wdXRUZXh0IiwiY29sb3JOYW1lMmhleCIsInNldEN1cnJlbnRDb2xvciIsImhleENvbG9yU3RyIiwiYm9yZGVyQ29sb3IiLCJmaW5kQ29sb3IiLCJzdHlsZVByb3BlcnR5IiwiaXNXeXNpd3lnRGl2Iiwibm9kZVR5cGUiLCJzdHIiLCJyZ2IiLCJyZ2JNYXRjaCIsIm1hdGNoIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29sb3JOYW1lIiwidGVtcCIsImNvbG9ycyIsImdldENvbXB1dGVkU3R5bGUiLCJhIiwicmVtb3ZlSXRlbSIsInN1YnN0ciIsInRhcmdldEVsZW1lbnQiLCJhZGRNb2R1bGUiLCJwcmV2aWV3RWwiLCJjb2xvcklucHV0IiwibGlzdERpdiIsInNldFN1Ym1lbnUiLCJvbkNoYW5nZUlucHV0Iiwic3VibWl0IiwicGlja3VwIiwiaW5pdE1lbnVUYXJnZXQiLCJjb2xvckFyZWEiLCJjb250ZXh0UGlja2VyIiwiY29udGV4dEZvbnRDb2xvciIsInd3Q29tcHV0ZWRTdHlsZSIsImdldFNlbGVjdGlvbk5vZGUiLCJhcHBseUNvbG9yIiwibm9kZUNoYW5nZSIsInN1Ym1lbnVPZmYiLCJuZXdOb2RlIiwiY29udGV4dEhpbGl0ZUNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwic2VsZWN0ZWRJbmRleCIsInRlbXBsYXRlRGl2IiwidGVtcGxhdGVMaXN0IiwidGVtcGxhdGVzIiwiaHRtbCIsInNldENvbnRlbnRzIiwic2VsZWN0TWVudSIsImNhbGxlciIsImNhbGxlckNvbnRleHQiLCJzZXRGb3JtIiwiY3JlYXRlTGlzdCIsImxpc3RDb250ZXh0IiwiZm9ybSIsIm1lbnVzIiwiaW5pdEV2ZW50IiwiZm9ybXMiLCJpbmRleCIsImNsaWNrTWV0aG9kIiwiY2FsbGVyTmFtZSIsIm9uTW91c2Vkb3duX2xpc3QiLCJvbk1vdXNlTW92ZV9saXN0Iiwib25DbGlja19saXN0IiwibW92ZUl0ZW0iLCJudW0iLCJzZWxlY3RJbmRleCIsImdldEl0ZW0iLCJwb3NpdGlvbkhhbmRsZXIiLCJ2aXNpYmlsaXR5IiwiYW5jaG9yIiwic2V0RGlhbG9nRm9ybSIsImhvc3QiLCJsb2NhdGlvbiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicmVwbGFjZSIsInJlbExpc3QiLCJsaW5rUmVsIiwiZGVmYXVsdFJlbCIsImxpbmtSZWxEZWZhdWx0IiwicHJvdG9jb2wiLCJkb3dubG9hZCIsInJlbCIsImFuY2hvclBsdWdpbiIsInVybElucHV0IiwibGlua0RlZmF1bHRSZWwiLCJjdXJyZW50UmVsIiwibGlua0FuY2hvciIsImxpbmtWYWx1ZSIsIl9jaGFuZ2UiLCJjaGVja19uZXdfd2luZG93IiwiY2hlY2tfYm9va21hcmsiLCJhbmNob3JUZXh0IiwiZG93bmxvYWRDaGVjayIsImJvb2ttYXJrQnV0dG9uIiwicmVsQnV0dG9uIiwicmVsUHJldmlldyIsIm9uQ2xpY2tfcmVsQnV0dG9uIiwib25DbGlja19yZWxMaXN0Iiwib25DaGFuZ2VfbmV3V2luZG93Q2hlY2siLCJvbkNoYW5nZV9kb3dubG9hZENoZWNrIiwib25DaGFuZ2VBbmNob3JUZXh0Iiwib25DaGFuZ2VVcmxJbnB1dCIsIm9uS2V5RG93blVybElucHV0Iiwib25Gb2N1c1VybElucHV0Iiwib25CbHVyVXJsSW5wdXQiLCJvbkNsaWNrX2Jvb2ttYXJrQnV0dG9uIiwiY29udGV4dEFuY2hvciIsImhyZWYiLCJzZWxmUGF0aEJvb2ttYXJrIiwibGFzdEluZGV4T2YiLCJnZXRTZWxlY3Rpb24iLCJsaW5rVGFyZ2V0TmV3V2luZG93Iiwic2V0UmVsIiwic2V0TGlua1ByZXZpZXciLCJzZXRIZWFkZXJCb29rbWFyayIsInBhdGgiLCJfY2xvc2VSZWxNZW51IiwidG9nZ2xlUmVsTGlzdCIsInNob3ciLCJydGwiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0V2lkdGgiLCJ0b3AiLCJvZmZzZXRUb3AiLCJjb250YWlucyIsImNtZCIsImN1cnJlbnQiLCJ0b2dnbGVDbGFzcyIsImpvaW4iLCJyZWxBdHRyIiwicmVsTGlzdEVsIiwicmVscyIsImNoZWNrZWRSZWwiLCJjcmVhdGVIZWFkZXJMaXN0IiwiY29udGV4dExpc3QiLCJ1cmxWYWx1ZSIsImhlYWRlcnMiLCJnZXRMaXN0Q2hpbGRyZW4iLCJ3eXNpd3lnIiwibm9kZU5hbWUiLCJ2YWx1ZVJlZ0V4cCIsIlJlZ0V4cCIsImgiLCJfc2V0TWVudUxpc3RQb3NpdGlvbiIsImlkIiwicmFuZG9tIiwiY29udGV4dExpbmsiLCJsaW5rUHJvdG9jb2wiLCJub1ByZWZpeCIsImxpbmtOb1ByZWZpeCIsInJlc2VydmVkUHJvdG9jb2wiLCJzYW1lUHJvdG9jb2wiLCJlc2NhcGVTdHJpbmdSZWdleHAiLCJzZXRDdHgiLCJ1cGRhdGVBbmNob3IiLCJkaXNwbGF5VGV4dCIsIm5vdFRleHQiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjaGlsZHJlbiIsImNyZWF0ZUFuY2hvciIsIm9BIiwiX3JlbE1lcmdlIiwiX3JlbERlbGV0ZSIsIl9saW5rQW5jaG9yIiwiYW5jaG9yQ3R4IiwibGlua19kaWFsb2ciLCJzZXREaWFsb2ciLCJsaW5rX2NvbnRyb2xsZXIiLCJzZXRDb250cm9sbGVyX0xpbmtCdXR0b24iLCJsaW5rQ29udHJvbGxlciIsIm9uQ2xpY2tfbGlua0NvbnRyb2xsZXIiLCJsaW5rX2J0biIsImRlbGV0ZSIsImN1cnJlbnRDb250cm9sbGVyTmFtZSIsInNob3dMb2FkaW5nIiwidGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwic2V0UmFuZ2UiLCJzZWxlY3RlZEZvcm1hdHMiLCJnZXRTZWxlY3RlZEVsZW1lbnRzIiwib0Zvcm1hdCIsImluc2VydE5vZGUiLCJjbG9zZUxvYWRpbmciLCJoaXN0b3J5IiwiYWN0aXZlIiwiY29udHJvbGxlckFycmF5IiwiY2FsbF9jb250cm9sbGVyIiwiY29udHJvbGxlcnNPZmYiLCJzZWxlY3Rpb25BVGFnIiwiZWRpdExpbmsiLCJsaW5rQnRuIiwic2V0Q29udHJvbGxlclBvc2l0aW9uIiwiY29udHJvbGxlcnNPbiIsInNjIiwiZ2V0Q2hpbGRFbGVtZW50IiwiZWMiLCJjb21wb25lbnQiLCJyZXNpemluZyIsImZpbGVNYW5hZ2VyIiwiY29udGV4dEltYWdlIiwiX2luZm9MaXN0IiwiX2luZm9JbmRleCIsIl91cGxvYWRGaWxlTGVuZ3RoIiwic2l6ZVVuaXQiLCJfaW1hZ2VTaXplVW5pdCIsIl9saW5rRWxlbWVudCIsIl9hbHRUZXh0IiwiX2FsaWduIiwiX2Zsb2F0Q2xhc3NSZWdFeHAiLCJfdl9zcmMiLCJfbGlua1ZhbHVlIiwic3ZnRGVmYXVsdFNpemUiLCJiYXNlNjRSZW5kZXJJbmRleCIsIl9lbGVtZW50IiwiX2NvdmVyIiwiX2NvbnRhaW5lciIsImlucHV0WCIsImlucHV0WSIsIl9lbGVtZW50X3ciLCJfZWxlbWVudF9oIiwiX2VsZW1lbnRfbCIsIl9lbGVtZW50X3QiLCJfZGVmYXVsdFNpemVYIiwiX2RlZmF1bHRTaXplWSIsIl9vcmlnaW5fdyIsImltYWdlV2lkdGgiLCJfb3JpZ2luX2giLCJpbWFnZUhlaWdodCIsIl9wcm9wb3J0aW9uQ2hlY2tlZCIsIl9yZXNpemluZyIsImltYWdlUmVzaXppbmciLCJfcmVzaXplRG90SGlkZSIsImltYWdlSGVpZ2h0U2hvdyIsIl9yb3RhdGlvbiIsImltYWdlUm90YXRpb24iLCJfYWxpZ25IaWRlIiwiaW1hZ2VBbGlnblNob3ciLCJfb25seVBlcmNlbnRhZ2UiLCJpbWFnZVNpemVPbmx5UGVyY2VudGFnZSIsIl9yYXRpbyIsIl9yYXRpb1giLCJfcmF0aW9ZIiwiX2NhcHRpb25TaG93IiwiX2NhcHRpb25DaGVja2VkIiwiX2NhcHRpb24iLCJjYXB0aW9uQ2hlY2tFbCIsImltYWdlX2RpYWxvZyIsImltZ0lucHV0RmlsZSIsImltZ1VybEZpbGUiLCJwcmV2aWV3U3JjIiwib3BlblRhYiIsIl9yZW1vdmVTZWxlY3RlZEZpbGVzIiwiX29uTGlua1ByZXZpZXciLCJfZmlsZUlucHV0Q2hhbmdlIiwiaW1hZ2VHYWxsZXJ5QnV0dG9uIiwiX29wZW5HYWxsZXJ5Iiwic2V0SW5wdXRTaXplIiwic2V0UmF0aW8iLCJzaXplUmV2ZXJ0IiwiaW1hZ2VGaWxlSW5wdXQiLCJpbWFnZUFjY2VwdCIsImltYWdlTXVsdGlwbGVGaWxlIiwiaW1hZ2VVcmxJbnB1dCIsImltYWdlR2FsbGVyeVVybCIsImltYWdlX2dhbGxlcnkiLCJvbmx5UGVyY2VudGFnZSIsIm9ubHlQZXJjZW50RGlzcGxheSIsImhlaWdodERpc3BsYXkiLCJyZXZlcnQiLCJ0ZXh0RGVjb3JhdGlvbiIsImNhbGxQbHVnaW4iLCJfc2V0VXJsSW5wdXQiLCJhbHQiLCJzcmMiLCJmaWxlVGFncyIsInNlbGVjdCIsIm9uTW9kaWZ5TW9kZSIsImNhbGxfY29udHJvbGxlcl9yZXNpemUiLCJkZXN0cm95IiwiaW1hZ2VFbCIsImltYWdlQ29udGFpbmVyIiwiZ2V0UGFyZW50RWxlbWVudCIsImlzTWVkaWFDb21wb25lbnQiLCJkYXRhSW5kZXgiLCJmdW5jdGlvbnMiLCJvbkltYWdlRGVsZXRlQmVmb3JlIiwiZm9jdXNFbCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJuZXh0RWxlbWVudFNpYmxpbmciLCJlbXB0eURpdiIsInJlbW92ZUl0ZW1BbGxQYXJlbnRzIiwiZm9jdXNFZGdlIiwiZGVsZXRlSW5mbyIsIm9uSW1hZ2VVcGxvYWQiLCJ0YWJOYW1lIiwidGFiQ29udGVudCIsInRhYkxpbmtzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImltYWdlUGx1Z2luIiwidXBkYXRlX2ltYWdlIiwiZmlsZXMiLCJzdWJtaXRBY3Rpb24iLCJvblJlbmRlcl9pbWdVcmwiLCJlcnJvciIsImZpbGVMaXN0IiwiZmlsZVNpemUiLCJ0eXBlIiwibGltaXRTaXplIiwiaW1hZ2VVcGxvYWRTaXplTGltaXQiLCJpbmZvU2l6ZSIsImltYWdlc0luZm8iLCJvbkltYWdlVXBsb2FkRXJyb3IiLCJub3RpY2VPcGVuIiwiaW5mbyIsImlucHV0V2lkdGgiLCJpbnB1dEhlaWdodCIsImlzVXBkYXRlIiwib25JbWFnZVVwbG9hZEJlZm9yZSIsImRhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJyZWdpc3RlciIsInVwbG9hZCIsInJlc3BvbnNlIiwiaW1hZ2VVcGxvYWRVcmwiLCJmaWxlc0xlbiIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJpbWFnZVVwbG9hZEhlYWRlciIsImNhbGxCYWNrX2ltZ1VwbG9hZCIsInNldHVwX3JlYWRlciIsImltYWdlVXBsb2FkSGFuZGxlciIsInVwZGF0ZV9zcmMiLCJjcmVhdGVfaW1hZ2UiLCJjb25zb2xlIiwid2FybiIsIndGaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsImZpbGVzU3RhY2siLCJyZWFkZXIiLCJvbmxvYWQiLCJ1cGRhdGVFbGVtZW50Iiwib25SZW5kZXJfaW1nQmFzZTY0IiwicmVhZEFzRGF0YVVSTCIsInVwZGF0ZU1ldGhvZCIsImNyZWF0ZU1ldGhvZCIsInBvcCIsIm9uUmVuZGVyX2xpbmsiLCJpbWdUYWciLCJ4eSIsIl9tb2R1bGVfc2V0SW5wdXRTaXplIiwiX21vZHVsZV9zZXRSYXRpbyIsImNoZWNrRmlsZUluZm8iLCJtb2RpZnlIYW5kbGVyIiwib3Blbk1vZGlmeSIsImZvcm1hdCIsImdldEZvcm1hdEVsZW1lbnQiLCJ0ZXh0QWxpZ24iLCJmbG9hdCIsImNoZWNrSW5mbyIsInJlc2V0RmlsZUluZm8iLCJyZXNldEluZm8iLCJfcmVzaXplX3BsdWdpbiIsIm9JbWciLCJjbG9uZU5vZGUiLCJjb3ZlciIsInNldF9jb3ZlciIsImNvbnRhaW5lciIsInNldF9jb250YWluZXIiLCJjcmVhdGVfY2FwdGlvbiIsImFwcGx5U2l6ZSIsInNldEFsaWduIiwiX2ltYWdlX2NyZWF0ZV9vbmxvYWQiLCJpbnNlcnRDb21wb25lbnQiLCJzZXRJbmZvIiwibWVkaWFBdXRvU2VsZWN0Iiwic2VsZWN0Q29tcG9uZW50IiwibGluZSIsImFwcGVuZEZvcm1hdFRhZyIsIm9wZW5Db250cm9sbGVyIiwibm90SGlzdG9yeVB1c2giLCJjaGFuZ2VTaXplIiwiaXNOZXdDb250YWluZXIiLCJ4IiwiaXNOdW1iZXIiLCJ5IiwibW9kaWZpZWRDYXB0aW9uIiwiaXNOZXdBbmNob3IiLCJpbnNlcnRCZWZvcmUiLCJpbWFnZUVsZW1lbnQiLCJuZXdFbCIsInJlbW92ZUNoaWxkIiwiZXhpc3RFbGVtZW50IiwiaXNSYW5nZUZvcm1hdEVsZW1lbnQiLCJpc05vdENoZWNraW5nTm9kZSIsInJlcGxhY2VDaGlsZCIsImlzTGlzdENlbGwiLCJyZWZlciIsInJlbW92ZUVtcHR5Tm9kZSIsImlzRm9ybWF0RWxlbWVudCIsInNwbGl0RWxlbWVudCIsImh0bWxSZW1vdmVXaGl0ZVNwYWNlIiwicHJldmlvdXNTaWJsaW5nIiwiX191cGRhdGVUYWdzIiwiaXNGaWd1cmVzIiwiX3JvdGF0ZVZlcnRpY2FsIiwicmVzZXRUcmFuc2Zvcm0iLCJzZXRUcmFuc2Zvcm1TaXplIiwiZ2V0TnVtYmVyIiwic2V0VGltZW91dCIsInVzZXJTaXplIiwibm90T3BlbiIsIl9tb2R1bGVfc2V0TW9kaWZ5SW5wdXRTaXplIiwic2V0UGVyY2VudFNpemUiLCJzZXRTaXplIiwic2V0QXV0b1NpemUiLCJfbW9kdWxlX3NpemVSZXZlcnQiLCJub3RSZXNldFBlcmNlbnRhZ2UiLCJkaXJlY3Rpb24iLCJvbmx5VyIsImNhbmNlbFBlcmNlbnRBdHRyIiwiX21vZHVsZV9zYXZlQ3VycmVudFNpemUiLCJtYXJnaW5Ub3AiLCJtYXhXaWR0aCIsInNldE9yaWdpblNpemUiLCJvcmlnaW5TaXplIiwiaGVpZ2h0UGVyY2VudGFnZSIsInNldENhcHRpb25Qb3NpdGlvbiIsIm1pbldpZHRoIiwiY29udGV4dFZpZGVvIiwiX3ZpZGVvU2l6ZVVuaXQiLCJfeW91dHViZVF1ZXJ5IiwieW91dHViZVF1ZXJ5IiwiX3ZpZGVvUmF0aW8iLCJ2aWRlb1JhdGlvIiwiX2RlZmF1bHRSYXRpbyIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsInZpZGVvUmVzaXppbmciLCJ2aWRlb0hlaWdodFNob3ciLCJ2aWRlb1JvdGF0aW9uIiwidmlkZW9BbGlnblNob3ciLCJ2aWRlb1NpemVPbmx5UGVyY2VudGFnZSIsInZpZGVvX2RpYWxvZyIsInZpZGVvSW5wdXRGaWxlIiwidmlkZW9VcmxGaWxlIiwidmlkZW9SYXRpb09wdGlvbiIsInNldFZpZGVvUmF0aW8iLCJ2aWRlb0ZpbGVJbnB1dCIsInZpZGVvQWNjZXB0IiwidmlkZW9NdWx0aXBsZUZpbGUiLCJ2aWRlb1VybElucHV0IiwicmF0aW9MaXN0IiwidmlkZW9SYXRpb0xpc3QiLCJyYXRpb0Rpc3BsYXkiLCJ2aWRlb1JhdGlvU2hvdyIsIm9ubHlXaWR0aERpc3BsYXkiLCJfc2V0VGFnQXR0cnMiLCJhdHRycyIsInZpZGVvVGFnQXR0cnMiLCJoYXNPd24iLCJjcmVhdGVWaWRlb1RhZyIsInZpZGVvVGFnIiwiX3NldElmcmFtZUF0dHJzIiwiZnJhbWVCb3JkZXIiLCJhbGxvd0Z1bGxzY3JlZW4iLCJ2aWRlb0lmcmFtZUF0dHJzIiwiY3JlYXRlSWZyYW1lVGFnIiwiaWZyYW1lVGFnIiwiZnJhbWUiLCJvblZpZGVvRGVsZXRlQmVmb3JlIiwib25WaWRlb1VwbG9hZCIsImRpc2FibGVkIiwic2V0VmlkZW9SYXRpb1NlbGVjdCIsInBsYWNlaG9sZGVyIiwidmlkZW9QbHVnaW4iLCJzZXR1cF91cmwiLCJ2aWRlb1VwbG9hZFNpemVMaW1pdCIsInZpZGVvc0luZm8iLCJvblZpZGVvVXBsb2FkRXJyb3IiLCJvblZpZGVvVXBsb2FkQmVmb3JlIiwidmlkZW9VcGxvYWRVcmwiLCJ2aWRlb1VwbG9hZEhlYWRlciIsImNhbGxCYWNrX3ZpZGVvVXBsb2FkIiwidmlkZW9VcGxvYWRIYW5kbGVyIiwiY3JlYXRlX3ZpZGVvIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwic3BsaXRVcmwiLCJlbmRzV2l0aCIsIm9GcmFtZSIsImlzWW91dHViZSIsImlzVmltZW8iLCJuZXdUYWciLCJpbnB1dFVwZGF0ZSIsIl9tb2R1bGVfZ2V0U2l6ZVgiLCJfbW9kdWxlX2dldFNpemVZIiwiaXNQZXJjZW50IiwiY2hhbmdlZCIsIl91cGRhdGVfdmlkZW9Db3ZlciIsInByZXZGcmFtZSIsImZpZ2NhcHRpb24iLCJyYXRpb1NlbGVjdGVkIiwicmF0aW9PcHRpb25zIiwic2VsZWN0ZWQiLCJvbmx5SCIsInBhZGRpbmdCb3R0b20iLCJkYXRhU2l6ZSIsImNvbnRleHRBdWRpbyIsInRhcmdldFNlbGVjdCIsImF1ZGlvV2lkdGgiLCJhdWRpb0hlaWdodCIsImF1ZGlvX2RpYWxvZyIsImF1ZGlvSW5wdXRGaWxlIiwiYXVkaW9VcmxGaWxlIiwiYXVkaW9fY29udHJvbGxlciIsInNldENvbnRyb2xsZXIiLCJvbkNsaWNrX2NvbnRyb2xsZXIiLCJhdWRpb0ZpbGVJbnB1dCIsImF1ZGlvQWNjZXB0IiwiYXVkaW9NdWx0aXBsZUZpbGUiLCJhdWRpb1VybElucHV0IiwiX2NyZWF0ZUF1ZGlvVGFnIiwib0F1ZGlvIiwiY3NzVGV4dCIsImF1ZGlvVGFnQXR0cnMiLCJpc0NvbXBvbmVudCIsIm9uQXVkaW9EZWxldGVCZWZvcmUiLCJvbkF1ZGlvVXBsb2FkIiwidXBkYXRlQ292ZXIiLCJzZXR1cFVybCIsImF1ZGlvVXBsb2FkU2l6ZUxpbWl0IiwiYXVkaW9zSW5mbyIsIm9uQXVkaW9VcGxvYWRFcnJvciIsIm9uQXVkaW9VcGxvYWRCZWZvcmUiLCJhdWRpb1VwbG9hZFVybCIsImF1ZGlvVXBsb2FkSGVhZGVyIiwiY2FsbEJhY2tfdXBsb2FkIiwiYXVkaW9VcGxvYWRIYW5kbGVyIiwiY3JlYXRlX2F1ZGlvIiwicHJldkVsZW1lbnQiLCJzZWxlY3Rpb25UYWciLCJvbkNvbnRyb2xsZXJPZmYiLCJwcmV2aWV3RWxlbWVudCIsImZvbnRTaXplRWxlbWVudCIsImRlZmF1bHRGb250U2l6ZSIsIl9tYXRoRXhwIiwibWF0aF9kaWFsb2ciLCJpc0lFIiwiX3JlbmRlck1hdGhFeHAiLCJtYXRoX2NvbnRyb2xsZXIiLCJzZXRDb250cm9sbGVyX01hdGhCdXR0b24iLCJtYXRoQ29udHJvbGxlciIsIm9uQ2xpY2tfbWF0aENvbnRyb2xsZXIiLCJtYXRoRm9udFNpemUiLCJmIiwibWF0aF9idG4iLCJtYW5hZ2VkVGFncyIsIm1ldGhvZCIsImthdGV4IiwiZG9tIiwiY3JlYXRlUmFuZ2UiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJfcmVuZGVyZXIiLCJIVE1MRGVjb2RlciIsImV4cCIsInJlbmRlclRvU3RyaW5nIiwidGhyb3dPbkVycm9yIiwiZGlzcGxheU1vZGUiLCJjb250ZXh0TWF0aCIsIm1hdGhFeHAiLCJrYXRleEVsIiwiSFRNTEVuY29kZXIiLCJjb250YWluZXJFbCIsImVtcHR5IiwiY3JlYXRlVGV4dE5vZGUiLCJ6ZXJvV2lkdGhTcGFjZSIsIm5leHRTaWJsaW5nIiwibWF0aFRhZyIsIm1hdGhCdG4iLCJibG9ja3F1b3RlIiwidGFyZ2V0QnV0dG9uIiwiYWN0aW9uIiwiY3VycmVudEJsb2NrcXVvdGUiLCJkZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQiLCJhcHBseVJhbmdlRm9ybWF0RWxlbWVudCIsIl9pdGVtTWVudSIsIl9hbGlnbkxpc3QiLCJjdXJyZW50QWxpZ24iLCJkZWZhdWx0RGlyIiwianVzdGlmeSIsImFsaWduX2p1c3RpZnkiLCJhbGlnbl9sZWZ0IiwiYWxpZ25fcmlnaHQiLCJhbGlnbl9jZW50ZXIiLCJsaXN0VWwiLCJhbGlnbkl0ZW1zIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJhbGlnbkNvbnRleHQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNoYW5nZUVsZW1lbnQiLCJhbGlnbkxpc3QiLCJleGNoYW5nZURpciIsImRpciIsImxlZnRCdG4iLCJyaWdodEJ0biIsImxwIiwicGFyZW50RWxlbWVudCIsInJwIiwic2VsZWN0ZWRGb3Jtc3RzIiwic2V0U3R5bGUiLCJlZmZlY3ROb2RlIiwidGFyZ2V0VGV4dCIsInRhcmdldFRvb2x0aXAiLCJfZm9udExpc3QiLCJjdXJyZW50Rm9udCIsImZvbnRMaXN0IiwidG9vbHRpcCIsImZvbnRGYW1pbHkiLCJzZWxlY3RGb250IiwiY2hhbmdlVHh0IiwiaGFzRm9jdXMiLCJmb250Q29udGV4dCIsIl9zaXplTGlzdCIsImN1cnJlbnRTaXplIiwic2l6ZUxpc3QiLCJ1bml0IiwiZm9udFNpemVVbml0IiwiX2NvbnZlcnRGb250U2l6ZSIsImZvbnRTaXplQ29udGV4dCIsImN1cnJlbnRIUiIsImhvcml6b250YWxSdWxlUGljayIsImhySXRlbXMiLCJjbGFzcyIsImFwcGVuZEhyIiwiaHJUZW1wIiwib05vZGUiLCJfbGlzdCIsImN1cnJlbnRMaXN0IiwiYnVsbGV0cyIsImxpc3RfYnVsbGV0cyIsIm51bWJlciIsImxpc3RfbnVtYmVyIiwiYnV0dG9uIiwiaWNvbiIsImlzTGlzdCIsImVkaXRMaXN0Iiwic2VsZWN0ZWRDZWxscyIsImRldGFjaCIsInJhbmdlIiwiZ2V0UmFuZ2UiLCJnZXRTZWxlY3RlZEVsZW1lbnRzQW5kQ29tcG9uZW50cyIsImdldFJhbmdlX2FkZExpbmUiLCJzb3J0QnlEZXB0aCIsImZpcnN0U2VsIiwibGFzdFNlbCIsInRvcEVsIiwiYm90dG9tRWwiLCJpc0NvbGxhcHNlZCIsImNvbGxhcHNlZCIsIm9yaWdpblJhbmdlIiwic3RhcnRDb250YWluZXIiLCJzbyIsImVuZENvbnRhaW5lciIsIm9ubHlaZXJvV2lkdGhTcGFjZSIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZW8iLCJhZnRlclJhbmdlIiwiaXNSZW1vdmUiLCJnZXRSYW5nZUZvcm1hdEVsZW1lbnQiLCJ0b3BFbFBhcmVudCIsImJvdHRvbUVsUGFyZW50IiwibWVyZ2VUb3AiLCJtZXJnZUJvdHRvbSIsImZpcnN0TGlzdCIsImxhc3RMaXN0IiwidG9wTnVtYmVyIiwiYm90dG9tTnVtYmVyIiwicGFzc0NvbXBvbmVudCIsIm5ld0NlbGwiLCJmVGFnIiwiaXNDZWxsIiwibmV4dCIsIm9yaWdpblBhcmVudCIsIm5leHRQYXJlbnQiLCJwYXJlbnRUYWciLCJzaWJsaW5nVGFnIiwicmFuZ2VUYWciLCJfaXNJZ25vcmVOb2RlQ2hhbmdlIiwiY29weUZvcm1hdEF0dHJpYnV0ZXMiLCJpc0hSIiwib3V0ZXJIVE1MIiwiZkNoaWxkcmVuIiwiZ2V0RWxlbWVudERlcHRoIiwiaiIsImN1cnJlbnRGb3JtYXQiLCJyYW5nZUFyciIsInRlbXBMaXN0IiwiX2RldGFjaE5lc3RlZCIsImNlbGxzIiwiZmlyc3QiLCJsYXN0Iiwib3JpZ2luTGlzdCIsInNpYmxpbmciLCJjTGVuIiwibmV3TGlzdCIsImdldFBvc2l0aW9uSW5kZXgiLCJtZXJnZVNhbWVUYWdzIiwiZWRnZSIsImdldEVkZ2VDaGlsZE5vZGVzIiwiY2MiLCJlZGl0SW5zaWRlTGlzdCIsImNlbGxzTGVuIiwiZWwiLCJsYXN0Q2VsbCIsImlubmVyTGlzdCIsInByZXYiLCJub2RlUGF0aCIsInNsIiwiX2luc2llZExpc3QiLCJnZXROb2RlRnJvbVBhdGgiLCJpbnNlcnRQcmV2IiwiZ2V0Tm9kZVBhdGgiLCJmaXJzdENoaWxkIiwic2xQYXRoIiwibGFzdEVsZW1lbnRDaGlsZCIsIm1lcmdlTmVzdGVkVGFncyIsImNvbnRleHRUYWJsZSIsIl90ZEVsZW1lbnQiLCJfdHJFbGVtZW50IiwiX3RyRWxlbWVudHMiLCJfdGFibGVYWSIsIl9tYXhXaWR0aCIsIl9maXhlZENvbHVtbiIsIl9ydGwiLCJjZWxsQ29udHJvbGxlclRvcCIsInRhYmxlQ2VsbENvbnRyb2xsZXJQb3NpdGlvbiIsInJlc2l6ZVRleHQiLCJoZWFkZXJCdXR0b24iLCJtZXJnZUJ1dHRvbiIsInNwbGl0QnV0dG9uIiwic3BsaXRNZW51IiwibWF4VGV4dCIsIm1pblRleHQiLCJfcGh5c2ljYWxfY2VsbENudCIsIl9sb2dpY2FsX2NlbGxDbnQiLCJfcm93Q250IiwiX3Jvd0luZGV4IiwiX3BoeXNpY2FsX2NlbGxJbmRleCIsIl9sb2dpY2FsX2NlbGxJbmRleCIsIl9jdXJyZW50X2NvbFNwYW4iLCJfY3VycmVudF9yb3dTcGFuIiwiZXhwYW5zaW9uIiwicmVkdWN0aW9uIiwidGFibGVQaWNrZXIiLCJ0YWJsZUhpZ2hsaWdodCIsInRhYmxlVW5IaWdobGlnaHQiLCJ0YWJsZURpc3BsYXkiLCJ0YWJsZUNvbnRyb2xsZXIiLCJzZXRDb250cm9sbGVyX3RhYmxlIiwicmVzaXplQnV0dG9uIiwiY29sdW1uRml4ZWRCdXR0b24iLCJyZXNpemVEaXYiLCJzZXRDb250cm9sbGVyX3RhYmxlRWRpdG9yIiwiaW5zZXJ0Um93QWJvdmVCdXR0b24iLCJpbnNlcnRSb3dCZWxvd0J1dHRvbiIsIm9uTW91c2VNb3ZlX3RhYmxlUGlja2VyIiwiYXBwZW5kVGFibGUiLCJvbkNsaWNrX3RhYmxlQ29udHJvbGxlciIsInRhYmxlUmVzaXplIiwiZml4ZWRfY29sdW1uX3dpZHRoIiwidGFibGVfaGVhZGVyIiwiaW5zZXJ0X3Jvd19hYm92ZSIsImluc2VydF9yb3dfYmVsb3ciLCJkZWxldGVfcm93IiwibWVyZ2VfY2VsbCIsImluc2VydF9jb2x1bW5fbGVmdCIsImluc2VydF9jb2x1bW5fcmlnaHQiLCJkZWxldGVfY29sdW1uIiwic3BsaXRfY2VsbCIsIm9UYWJsZSIsImNyZWF0ZUNlbGxzIiwidGFibGVIVE1MIiwiZmlyc3RUZCIsInJlc2V0X3RhYmxlX3BpY2tlciIsImNudCIsInJldHVybkVsZW1lbnQiLCJjZWxsIiwiY2VsbHNIVE1MIiwiY2VpbCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaGlnaGxpZ2h0IiwidW5IaWdobGlnaHQiLCJ0YWJsZVBsdWdpbiIsIl9yZW1vdmVFdmVudHMiLCJfc2VsZWN0ZWRUYWJsZSIsIl90b2dnbGVFZGl0b3IiLCJfc2hpZnQiLCJfc2VsZWN0ZWRDZWxscyIsIl9yZWYiLCJfZml4ZWRDZWxsIiwiX3NlbGVjdGVkQ2VsbCIsIl9maXhlZENlbGxOYW1lIiwiY2FsbF9jb250cm9sbGVyX3RhYmxlRWRpdCIsInRkRWxlbWVudCIsInRhYmxlRWxlbWVudCIsInRhYmxlTGF5b3V0Iiwic2V0VGFibGVTdHlsZSIsInNldFBvc2l0aW9uQ29udHJvbGxlclRvcCIsInNldFBvc2l0aW9uQ29udHJvbGxlckRpdiIsInJlc2V0Iiwic2V0Q2VsbEluZm8iLCJyb3dzIiwiY2VsbEluZGV4IiwiY2VsbENudCIsImNvbFNwYW4iLCJyb3dJbmRleCIsInJvd1NwYW4iLCJyb3dTcGFuQXJyIiwic3BhbkluZGV4IiwiY3MiLCJycyIsImxvZ2NhbEluZGV4IiwiYXJyIiwicm93IiwiY29uY2F0Iiwic29ydCIsImIiLCJlZGl0VGFibGUiLCJpc1JvdyIsInRhYmxlQXR0ciIsInBvc2l0aW9uQ2VsbCIsImVkaXRSb3ciLCJyZW1vdmVDZWxscyIsImZpcnN0Um93IiwicmlnaHRDZWxsIiwiZWRpdENlbGwiLCJwb3NpdGlvblJlc2V0RWxlbWVudCIsInVwIiwib3JpZ2luUm93SW5kZXgiLCJzaWduIiwic3BhbkNlbGxzIiwic3BhbkNlbGwiLCJzaGlmdCIsImluc2VydFJvdyIsInBhc3NDZWxsIiwicmVtb3ZlQ2VsbCIsInJlbW92ZVNwYW5BcnIiLCJpbnNlcnRJbmRleCIsImFwcGx5U3BhbiIsImNlbGxDb2xTcGFuIiwicmVtb3ZlSW5kZXgiLCJnZXRPdmVybGFwUmFuZ2VBdEluZGV4IiwicmVtb3ZlRmlyc3QiLCJyZW1vdmVFbmQiLCJyTGVuIiwiZ2V0QXJyYXlJbmRleCIsInJvd1NwYW5DZWxsIiwiX2Nsb3NlU3BsaXRNZW51Iiwib3BlblNwbGl0TWVudSIsInJlbW92ZURvY0V2ZW50IiwiYWRkRG9jRXZlbnQiLCJ2ZXJ0aWNhbCIsImN1cnJlbnRDZWxsIiwiY3VycmVudFJvdyIsImN1cnJlbnRDb2xTcGFuIiwiZmxvb3IiLCJjdXJyZW50Um93U3BhbiIsIm5ld1Jvd1NwYW4iLCJuZXh0Um93SW5kZXgiLCJuZXh0Um93IiwibmV4dENlbGxzIiwibmV3Um93IiwicGh5c2ljYWxJbmRleCIsInJlZiIsIm1lcmdlQ2VsbCIsImVtcHR5Um93Rmlyc3QiLCJlbXB0eVJvd0xhc3QiLCJjZSIsInJlIiwibWVyZ2VIVE1MIiwiY2giLCJyb3dJbmRleEZpcnN0Iiwicm93SW5kZXhMYXN0IiwicmVtb3ZlUm93cyIsInNldEFjdGl2ZUJ1dHRvbiIsInRvZ2dsZUhlYWRlciIsInN0eWxlcyIsInNwYW4iLCJzaXplSWNvbiIsImZpeGVkQ2VsbCIsInNlbGVjdGVkQ2VsbCIsIl9iaW5kT25TZWxlY3QiLCJfYmluZE9mZlNlbGVjdCIsIl9iaW5kT2ZmU2hpZnQiLCJlbmFibGVkIiwiX29mZkNlbGxNdWx0aVNlbGVjdCIsIl9pbml0QmluZCIsIl93ZCIsIl9vbkNlbGxNdWx0aVNlbGVjdCIsIl9hbnRpQmx1ciIsIl9zZXRNdWx0aUNlbGxzIiwic3RhcnRDZWxsIiwiZW5kQ2VsbCIsImZpbmRTZWxlY3RlZENlbGwiLCJfaSIsIm5ld0NzIiwibmV3Q2UiLCJuZXdScyIsIm5ld1JlIiwib25UYWJsZUNlbGxNdWx0aVNlbGVjdCIsImZvcm1hdEJsb2NrIiwiX2Zvcm1hdExpc3QiLCJwaWNrVXAiLCJsYW5nX3Rvb2xiYXIiLCJkZWZhdWx0Rm9ybWF0cyIsImZvcm1hdExpc3QiLCJmb3JtYXRUaXRsZSIsImZvcm1hdENvbnRleHQiLCJyYW5nZUVsZW1lbnQiLCJmaXJzdFBhdGgiLCJsYXN0UGF0aCIsInJsaXN0IiwiZGV0YWNoTGlzdCIsIm1vZGlmaWVkRm9ybXN0cyIsImZyZWVFbGVtZW50IiwiYmVmb3JlIiwiaW5uZXIiLCJpc0NvbXAiLCJpc1NhbWVBdHRyaWJ1dGVzIiwibmV3Rm9ybWF0IiwibGluZUhlaWdodHMiLCJsaW5lSGVpZ2h0Q29udGV4dCIsIl9jbGFzc0xpc3QiLCJtZW51TGFuZyIsImRlZmF1bHRMaXN0IiwiX2NsYXNzIiwicGFyYWdyYXBoU3R5bGVzIiwiZGVmYXVsdFN0eWxlIiwicGFyYWdyYXBoTGlzdCIsIl9zdHlsZUxpc3QiLCJzdHlsZUxpc3QiLCJ0ZXh0U3R5bGVzIiwic3R5bGVCdXR0b25MaXN0Iiwic2VsZWN0aW9uTm9kZSIsImJ0biIsImNoZWNrU3R5bGVzIiwiY2xhc3NlcyIsImNsYXNzTGlzdCIsInJlbW92ZU5vZGVzIiwiaW1hZ2VHYWxsZXJ5SGVhZGVyIiwiZHJhd0l0ZW1zIiwic2V0SW1hZ2UiLCJzcmNOYW1lIiwidGh1bWJuYWlsIiwiZmlsZU5hbWUiLCJjb2RlX3ZpZXciLCJsaW5lX2hlaWdodCIsInBhcmFncmFwaF9zdHlsZSIsInRleHRfc3R5bGUiLCJhcnJvd19kb3duIiwiZm9udF9jb2xvciIsImhpZ2hsaWdodF9jb2xvciIsImhvcml6b250YWxfcnVsZSIsInNob3dfYmxvY2tzIiwibW9kaWZ5IiwiYXV0b19zaXplIiwicm90YXRlX2xlZnQiLCJyb3RhdGVfcmlnaHQiLCJtaXJyb3JfaG9yaXpvbnRhbCIsIm1pcnJvcl92ZXJ0aWNhbCIsImxpbmVfYnJlYWsiLCJhbGVydF9vdXRsaW5lIiwibW9yZV90ZXh0IiwibW9yZV9wYXJhZ3JhcGgiLCJtb3JlX3BsdXMiLCJtb3JlX2hvcml6b250YWwiLCJtb3JlX3ZlcnRpY2FsIiwiYXR0YWNobWVudCIsIm1hZ2ljX3N0aWNrIiwiZW1wdHlfZmlsZSIsImlzSUVfRWRnZSIsImlzT1NYX0lPUyIsImlzQ2hyb21pdW0iLCJpc01vYmlsZSIsImlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQiLCJfcHJvcGVydGllc0luaXQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJhcHBWZXJzaW9uIiwicGxhdGZvcm0iLCJjaHJvbWUiLCJSZXNpemVPYnNlcnZlciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsIl9hbGxvd2VkRW1wdHlOb2RlTGlzdCIsIl9IVE1MQ29udmVydG9yIiwiY29udGVudHMiLCInIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiemVyb1dpZHRoUmVnRXhwIiwib25seVplcm9XaWR0aFJlZ0V4cCIsImZvbnRWYWx1ZU1hcCIsIkFjdGl2ZVhPYmplY3QiLCJYTUxIdHRwUmVxdWVzdCIsImUxIiwiZ2V0VmFsdWVzIiwib2JqIiwiY2FtZWxUb0tlYmFiQ2FzZSIsInBhcmFtIiwibGV0dGVyIiwia2ViYWJUb0NhbWVsQ2FzZSIsImVsZW1lbnROYW1lIiwiX2hhc093biIsImdldEluY2x1ZGVQYXRoIiwibmFtZUFycmF5IiwiZXh0ZW5zaW9uIiwicGF0aExpc3QiLCJyZWdFeHAiLCJleHRSZWdFeHAiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImVkaXRvclRhZyIsImdldFBhZ2VTdHlsZSIsImRvYyIsInNoZWV0cyIsInN0eWxlU2hlZXRzIiwicnVsZXMiLCJjc3NSdWxlcyIsImdldElmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid0RvY3VtZW50IiwiY29udGVudFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsImdldEF0dHJpYnV0ZXNUb1N0cmluZyIsImV4Y2VwdEF0dHJzIiwiYXR0cmlidXRlcyIsImF0dHJTdHJpbmciLCJnZXRCeXRlTGVuZ3RoIiwiZW5jb2RlciIsImVuY29kZVVSSUNvbXBvbmVudCIsImNyIiwiY2wiLCJ1bmVzY2FwZSIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiaXNOb25FZGl0YWJsZSIsImlzVGV4dFN0eWxlRWxlbWVudCIsImlzSW5wdXRFbGVtZW50IiwiaXNDbG9zdXJlUmFuZ2VGb3JtYXRFbGVtZW50IiwiaXNGcmVlRm9ybWF0RWxlbWVudCIsImlzQ2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50IiwiaXNVbmVkaXRhYmxlQ29tcG9uZW50IiwidmFsaWRhdGlvbiIsImdldEZyZWVGb3JtYXRFbGVtZW50IiwiZ2V0Q2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50IiwiY29weVRhZ0F0dHJpYnV0ZXMiLCJvcmlnaW5FbCIsImNvcHlFbCIsImJsYWNrbGlzdCIsImNvcHlTdHlsZXMiLCJnZXRBcnJheUl0ZW0iLCJhcnJheSIsIm11bHRpIiwiYXJyYXlJbmNsdWRlcyIsImlkeCIsIm5leHRJZHgiLCJwcmV2SWR4IiwiX25ld09mZnNldHMiLCJmaW5kcyIsInRlbXBUZXh0IiwicHJldmlvdXMiLCJyZXZlcnNlIiwib2Zmc2V0cyIsIm5vZGVzIiwic3R5bGVfYSIsInN0eWxlX2IiLCJjb21wU3R5bGUiLCJjbGFzc19hIiwiY2xhc3NfYiIsInJlZyIsImNvbXBDbGFzcyIsImlzRW1wdHlMaW5lIiwiaXNTcGFuV2l0aG91dEF0dHIiLCJpc1RhYmxlIiwiaXNCcmVhayIsImlzTWVkaWEiLCJtYXhEZWMiLCJ0b0ZpeGVkIiwicmVjdXJzaW9uRnVuYyIsImdldExpc3RDaGlsZE5vZGVzIiwiZGVwdGgiLCJjb21wYXJlRWxlbWVudHMiLCJhTm9kZSIsImJOb2RlIiwiYW5jZXN0b3IiLCJhSW5kZXgiLCJiSW5kZXgiLCJxdWVyeSIsImNoZWNrIiwiYXR0ciIsImdldFByZXZpb3VzRGVlcGVzdE5vZGUiLCJjZWlsaW5nIiwicHJldmlvdXNOb2RlIiwibGFzdENoaWxkIiwiZ2V0TmV4dERlZXBlc3ROb2RlIiwibmV4dE5vZGUiLCJjaGlsZExpc3QiLCJnZXRPZmZzZXQiLCJ3eXNpd3lnRnJhbWUiLCJvZmZzZXRFbGVtZW50Iiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG9wIiwiYVN0YXJ0IiwiYUVuZCIsImJTdGFydCIsImJFbmQiLCJvdmVybGFwIiwidHh0IiwibmV3RWxlbWVudCIsInN0eWxlTmFtZSIsImlzSW1wb3J0YW50RGlzYWJsZWQiLCJoYXNBdHRyaWJ1dGUiLCJzZXREaXNhYmxlZEJ1dHRvbnMiLCJidXR0b25MaXN0IiwiaW1wb3J0YW50Iiwic3RvcFBhcmVudCIsInBhcmVudCIsImRldGFjaE5lc3RlZExpc3QiLCJiYXNlTm9kZSIsImFsbCIsInJOb2RlIiwiX2RlbGV0ZU5lc3RlZExpc3QiLCJjTm9kZXMiLCJyQ2hpbGRyZW4iLCJiYXNlUGFyZW50IiwibGlTaWJsaW5nIiwibGlQYXJlbnQiLCJjaGlsZCIsIm9mZnNldCIsImJwIiwic3VmZml4SW5kZXgiLCJzcGxpdFRleHQiLCJhZnRlciIsImRlcHRoRWwiLCJwRWxlbWVudCIsIm5vZGVQYXRoQXJyYXkiLCJvbmx5VGV4dCIsImluc3QiLCJub2RlUGF0aExlbiIsImFwcGx5IiwiTnVtYmVyIiwidmFsdWVPZiIsImRlcHRoSW5kZXgiLCJjRGVwdGgiLCJzcGxpY2VEZXB0aCIsImNoaWxkcyIsImNoaWxkTGVuZ3RoIiwibkxlbiIsImFkZE9mZnNldCIsInRleHRPZmZzZXQiLCJ0ZW1wTCIsIm5vdFJlbW92ZU5vZGUiLCJmb3JjZURlbGV0ZSIsIl9ub3RUZXh0Tm9kZSIsImh0bWxDb21wcmVzcyIsImRlcyIsInN0cmluZyIsIlR5cGVFcnJvciIsIl9pc0V4Y2x1ZGVTZWxlY3Rpb25FbGVtZW50IiwiX2lzTWFpbnRhaW5lZE5vZGUiLCJfaXNTaXplTm9kZSIsIl9kaXNhbGxvd2VkVGFncyIsImNyZWF0ZVRhZ3NXaGl0ZWxpc3QiLCJjcmVhdGVUYWdzQmxhY2tsaXN0IiwiX2NvbnNpc3RlbmN5Q2hlY2tPZkhUTUwiLCJkb2N1bWVudEZyYWdtZW50IiwiaHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwIiwiaHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwIiwiY2xhc3NOYW1lRmlsdGVyIiwicmVtb3ZlVGFncyIsImVtcHR5VGFncyIsIndyb25nTGlzdCIsIndpdGhvdXRGb3JtYXRDZWxscyIsIndyb25nVGFncyIsIm5ydGFnIiwiZmVsIiwiY2hlY2tUYWdzIiwiY2VsbENoaWxkcmVuIiwidHAiLCJfc2V0RGVmYXVsdE9wdGlvblN0eWxlIiwib3B0aW9uU3R5bGUiLCJtaW5IZWlnaHQiLCJlZGl0b3IiLCJzdHlsZUFyciIsIl9zZXRJZnJhbWVEb2N1bWVudCIsImhlYWQiLCJfc2V0SWZyYW1lQ3NzVGFncyIsIl9lZGl0YWJsZUNsYXNzIiwibGlua05hbWVzIiwiaWZyYW1lQ1NTRmlsZU5hbWUiLCJ3UmVnRXhwIiwidGFnU3RyaW5nIiwiQ1NTRmlsZU5hbWUiLCJzdHlsZVRhZyIsIl9pbml0T3B0aW9ucyIsInRvcF9kaXYiLCJ0b29sX2JhciIsIl9jcmVhdGVUb29sQmFyIiwidG9vbGJhclNoYWRvdyIsInBsdWdpbkNhbGxCdXR0b25zIiwiX2NoZWNrS2F0ZXhNYXRoIiwiYXJyb3ciLCJzdGlja3lfZHVtbXkiLCJlZGl0b3JfZGl2IiwiaW5pdEVsZW1lbnRzIiwiX2luaXRFbGVtZW50cyIsImJvdHRvbUJhciIsInd5c2l3eWdfZGl2IiwicGxhY2Vob2xkZXJfc3BhbiIsInRleHRhcmVhIiwicmVzaXppbmdfYmFyIiwicmVzaXppbmdCYXIiLCJuYXZpZ2F0aW9uIiwiY2hhcl93cmFwcGVyIiwiY2hhcldyYXBwZXIiLCJjaGFyX2NvdW50ZXIiLCJjaGFyQ291bnRlciIsImxvYWRpbmdfYm94IiwibGluZV9icmVha2VyIiwibGluZV9icmVha2VyX3QiLCJsaW5lX2JyZWFrZXJfYiIsInJlc2l6ZV9iYWNrIiwiZm9jdXNUZW1wIiwidGFiSW5kZXgiLCJ0b29sYmFyQ29udGFpbmVyIiwicmVzaXppbmdCYXJDb250YWluZXIiLCJfY2hlY2tDb2RlTWlycm9yIiwiY29uc3RydWN0ZWQiLCJfdG9wIiwiX3JlbGF0aXZlIiwiX3Rvb2xCYXIiLCJfdG9vbGJhclNoYWRvdyIsIl9tZW51VHJheSIsIl9lZGl0b3JBcmVhIiwiX3d5c2l3eWdBcmVhIiwiX2NvZGVBcmVhIiwiX3BsYWNlaG9sZGVyIiwiX3Jlc2l6aW5nQmFyIiwiX25hdmlnYXRpb24iLCJfY2hhcldyYXBwZXIiLCJfY2hhckNvdW50ZXIiLCJfbGluZUJyZWFrZXIiLCJfbGluZUJyZWFrZXJfdCIsIl9saW5lQnJlYWtlcl9iIiwiX3Jlc2l6ZUJhY2siLCJfc3RpY2t5RHVtbXkiLCJfYXJyb3ciLCJfZm9jdXNUZW1wIiwiX3Jlc3BvbnNpdmVCdXR0b25zIiwicmVzcG9uc2l2ZUJ1dHRvbnMiLCJjb2RlTWlycm9yIiwiY21PcHRpb25zIiwiaHRtbE1vZGUiLCJsaW5lTnVtYmVycyIsImxpbmVXcmFwcGluZyIsInJlZHVjZSIsInZpZXdwb3J0TWFyZ2luIiwiSW5maW5pdHkiLCJjbSIsImZyb21UZXh0QXJlYSIsIndyYXBwZXIiLCJjb2RlTWlycm9yRWRpdG9yIiwia2F0ZXhPcHRpb25zIiwiX3NldE9wdGlvbnMiLCJtZXJnZU9wdGlvbnMiLCJvcmlnaW5PcHRpb25zIiwib3JpZ2luRWxlbWVudCIsImVkaXRvckFyZWEiLCJpc05ld1Rvb2xiYXJDb250YWluZXIiLCJpc05ld1Rvb2xiYXIiLCJ0b3BBcmVhIiwiY2FsbEJ1dHRvbnMiLCJ0b3BEaXYiLCJ0b29sQmFyIiwidG9vbEJhckFycm93IiwiX2VkaXRvclN0eWxlcyIsInRvb2xiYXJXaWR0aCIsInd5c2l3eWdEaXYiLCJpZnJhbWVBdHRyaWJ1dGVzIiwib3ZlcmZsb3ciLCJjaGFyQ291bnRlckxhYmVsIiwiY2hhckxhYmVsIiwibWF4Q2hhckNvdW50IiwiY2hhcl9tYXgiLCJpbm5lclRleHQiLCJfcGx1Z2lucyIsInBsdWdpbnNWYWx1ZXMiLCJzdHJpY3RNb2RlIiwiX2RlZmF1bHRMYW5nIiwiYWxsb3dlZENsYXNzTmFtZXMiLCJoaXN0b3J5U3RhY2tEZWxheVRpbWUiLCJmcmFtZUF0dHJidXRlcyIsImRlZmF1bHRUYWciLCJ0ZXh0VGFncyIsInN1YiIsInN1cCIsIl9kZWZhdWx0IiwiX25ldyIsIl90ZXh0VGFnc01hcCIsIl9kZWZhdWx0Q29tbWFuZCIsIl9fYWxsb3dlZFNjcmlwdFRhZyIsInRhZ3NCbGFja2xpc3QiLCJfZGVmYXVsdFRhZ3NXaGl0ZWxpc3QiLCJfZWRpdG9yVGFnc1doaXRlbGlzdCIsImFkZFRhZ3NXaGl0ZWxpc3QiLCJfc2V0V2hpdGVsaXN0IiwicGFzdGVUYWdzQmxhY2tsaXN0IiwicGFzdGVUYWdzV2hpdGVsaXN0IiwiYXR0cmlidXRlc1doaXRlbGlzdCIsImF0dHJpYnV0ZXNCbGFja2xpc3QiLCJsaW5lQXR0clJlc2V0IiwiX3ByaW50Q2xhc3MiLCJzdGlja3lUb29sYmFyIiwidW5kZWZpbmVkIiwiaGlkZVRvb2xiYXIiLCJmdWxsU2NyZWVuT2Zmc2V0IiwiZnVsbFBhZ2UiLCJwcmV2aWV3VGVtcGxhdGUiLCJwcmludFRlbXBsYXRlIiwic2hvd1BhdGhMYWJlbCIsInJlc2l6ZUVuYWJsZSIsImNoYXJDb3VudGVyVHlwZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwidGFiRGlzYWJsZSIsInNob3J0Y3V0c0Rpc2FibGUiLCJzaG9ydGN1dHNIaW50IiwiY2FsbEJhY2tTYXZlIiwiX2ljb25zIiwiX19saXN0Q29tbW9uU3R5bGUiLCJ3aGl0ZWxpc3QiLCJfZGVmYXVsdEJ1dHRvbnMiLCJhZGRTaGlmdCIsImluZGVudEtleSIsImluZGVudEljb24iLCJfY3JlYXRlTW9kdWxlR3JvdXAiLCJvRGl2Iiwib1VsIiwiX2NyZWF0ZUJ1dHRvbiIsImJ1dHRvbkNsYXNzIiwiZGF0YUNvbW1hbmQiLCJkYXRhRGlzcGxheSIsIl9kaXNhYmxlZCIsIm9MaSIsIm9CdXR0b24iLCJsYWJlbCIsInNlcGFyYXRvcl92ZXJ0aWNhbCIsIl9idXR0b25UcmF5Iiwic3RyaW5naWZ5IiwiZGVmYXVsdEJ1dHRvbkxpc3QiLCJtb2R1bGVFbGVtZW50IiwiYnV0dG9uRWxlbWVudCIsIm1vcmVMYXllciIsImJ1dHRvbkdyb3VwTG9vcCIsIm1vcmUiLCJtb3JlQ29udGFpbmVyIiwibW9yZUNvbW1hbmQiLCJidXR0b25Hcm91cCIsIm1vcmVCdXR0b24iLCJkaXYiLCJ1bCIsIm1hdGNoZWQiLCJjdXN0b20iLCJsaSIsInN2IiwiZW50ZXJEaXYiLCJ1bnNoaWZ0IiwidG9vbF9jb3ZlciIsIl9Db250ZXh0IiwiY29ucyIsImxvYWRpbmciLCJsaW5lQnJlYWtlciIsImxpbmVCcmVha2VyX3QiLCJsaW5lQnJlYWtlcl9iIiwicmVzaXplQmFja2dyb3VuZCIsInRvb2wiLCJub3RpY2UiLCJub3RpY2VfZGl2Iiwibm90aWNlX3NwYW4iLCJub3RpY2VfYnV0dG9uIiwib25DbGlja19jYW5jZWwiLCJpbml0X29wdGlvbnMiLCJpZE9yRWxlbWVudCIsIl9pbml0X29wdGlvbnMiLCJ2YWwiLCJnZXRFbGVtZW50QnlJZCIsIl9Db25zdHJ1Y3RvciIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIl91dGlsIiwiX3BhcnNlciIsIl9wcmV2UnRsIiwiX2VkaXRvckhlaWdodCIsIl9lZGl0b3JIZWlnaHRQYWRkaW5nIiwiX2xpc3RDYW1lbCIsIl9saXN0S2ViYWIiLCJfX2ZvY3VzVGVtcCIsIl93dyIsIl9zaGFkb3dSb290IiwiX3NoYWRvd1Jvb3RDb250cm9sbGVyRXZlbnRUYXJnZXQiLCJfbm90aWNlIiwiaW5pdFBsdWdpbnMiLCJfdGFyZ2V0UGx1Z2lucyIsInN1Ym1lbnUiLCJfc3VibWVudU5hbWUiLCJfYmluZGVkU3VibWVudU9mZiIsIl9iaW5kZWRDb250YWluZXJPZmYiLCJzdWJtZW51QWN0aXZlQnV0dG9uIiwiY29udGFpbmVyQWN0aXZlQnV0dG9uIiwiY3VycmVudENvbnRyb2xsZXJUYXJnZXQiLCJjdXJyZW50RmlsZUNvbXBvbmVudEluZm8iLCJjb2RlVmlld0Rpc2FibGVkQnV0dG9ucyIsInJlc2l6aW5nRGlzYWJsZWRCdXR0b25zIiwiX21vcmVMYXllckFjdGl2ZUJ1dHRvbiIsIl9odG1sQ2hlY2tXaGl0ZWxpc3RSZWdFeHAiLCJfaHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwIiwiX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCIsImVkaXRvclRhZ3NXaGl0ZWxpc3RSZWdFeHAiLCJlZGl0b3JUYWdzQmxhY2tsaXN0UmVnRXhwIiwicGFzdGVUYWdzV2hpdGVsaXN0UmVnRXhwIiwicGFzdGVUYWdzQmxhY2tsaXN0UmVnRXhwIiwiaXNEaXNhYmxlZCIsImlzUmVhZE9ubHkiLCJfYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cCIsIl9hdHRyaWJ1dGVzV2hpdGVsaXN0UmVnRXhwX2FsbF9kYXRhIiwiX2F0dHJpYnV0ZXNCbGFja2xpc3RSZWdFeHAiLCJfYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3QiLCJfYXR0cmlidXRlc1RhZ3NCbGFja2xpc3QiLCJfYmluZENvbnRyb2xsZXJzT2ZmIiwiX2lzSW5saW5lIiwiX2lzQmFsbG9vbiIsIl9pc0JhbGxvb25BbHdheXMiLCJfaW5saW5lVG9vbGJhckF0dHIiLCJpc1Nob3ciLCJfbm90SGlkZVRvb2xiYXIiLCJfc3RpY2t5IiwiX2xpbmVCcmVha2VyQnV0dG9uIiwiX2NvbXBvbmVudHNJbmZvSW5pdCIsIl9jb21wb25lbnRzSW5mb1Jlc2V0IiwiYWN0aXZlUGx1Z2lucyIsIm1hbmFnZWRUYWdzSW5mbyIsIl9jaGFyVHlwZUhUTUwiLCJfZmlsZUluZm9QbHVnaW5zQ2hlY2siLCJfZmlsZUluZm9QbHVnaW5zUmVzZXQiLCJfZmlsZU1hbmFnZXIiLCJxdWVyeVN0cmluZyIsInBsdWdpblJlZ0V4cCIsInBsdWdpbk1hcCIsImNvbW1hbmRNYXAiLCJfY29tbWFuZE1hcFN0eWxlcyIsIlNUUk9ORyIsIlUiLCJFTSIsIkRFTCIsIl9zdHlsZUNvbW1hbmRNYXAiLCJfY2xlYW5TdHlsZVJlZ0V4cCIsIl92YXJpYWJsZSIsImlzQ2hhbmdlZCIsImlzQ29kZVZpZXciLCJpc0Z1bGxTY3JlZW4iLCJpbm5lckhlaWdodF9mdWxsU2NyZWVuIiwicmVzaXplQ2xpZW50WSIsInRhYlNpemUiLCJjb2RlSW5kZW50IiwibWluUmVzaXppbmdTaXplIiwiY3VycmVudE5vZGVzIiwiY3VycmVudE5vZGVzTWFwIiwiX3JhbmdlIiwiX3NlbGVjdGlvbk5vZGUiLCJfb3JpZ2luQ3NzVGV4dCIsIl9ib2R5T3ZlcmZsb3ciLCJfZWRpdG9yQXJlYU9yaWdpbkNzc1RleHQiLCJfd3lzaXd5Z09yaWdpbkNzc1RleHQiLCJfY29kZU9yaWdpbkNzc1RleHQiLCJfZnVsbFNjcmVlbkF0dHJzIiwic3RpY2t5IiwiYmFsbG9vbiIsImlubGluZSIsIl9saW5lQnJlYWtDb21wIiwiX2xpbmVCcmVha0RpciIsIl9mb3JtYXRBdHRyc1RlbXAiLCJfc2F2ZUJ1dHRvblN0YXRlcyIsImFsbENvbW1hbmRCdXR0b25zIiwiY3VycmVudEJ1dHRvbnMiLCJfcmVjb3ZlckJ1dHRvblN0YXRlcyIsIm9sZEJ1dHRvbiIsImNhbGxCYWNrRnVuY3Rpb24iLCJfdGFyZ2V0IiwibW9kdWxlQXJyYXkiLCJtb2R1bGVOYW1lIiwiZ2V0R2xvYmFsU2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsInN1Ym1lbnVPbiIsInN1Ym1lbnVOYW1lIiwiX3NldE1lbnVQb3NpdGlvbiIsIm1vcmVMYXllck9mZiIsImNvbnRhaW5lck9uIiwiY29udGFpbmVyTmFtZSIsIl9jb250YWluZXJOYW1lIiwiY29udGFpbmVyT2ZmIiwidG9vbGJhclciLCJ0b29sYmFyT2Zmc2V0IiwiZXZlbnQiLCJfZ2V0RWRpdG9yT2Zmc2V0cyIsIm1lbnVXIiwiZWxlbWVudFciLCJydGxXIiwicnRsTCIsIm92ZXJMZWZ0Iiwib2Zmc2V0RWwiLCJidCIsInRvb2xiYXJUb3AiLCJtZW51SGVpZ2h0IiwibWVudUhlaWdodF9ib3R0b20iLCJtZW51VG9wIiwiaW5zVG9wIiwibWVudUhlaWdodF90b3AiLCJhcmciLCJhcmd1bWVudHMiLCJnZXRGaWxlQ29tcG9uZW50Iiwic2hvd0NvbnRyb2xsZXIiLCJyZWZlckVsIiwidG9wTWFyZ2luIiwiY29udHJvbGxlclciLCJyZWZlckVsVyIsImFsbG93Iiwib3ZlclNpemUiLCJleGVjQ29tbWFuZCIsInNob3dEZWZhdWx0VUkiLCJuYXRpdmVGb2N1cyIsIl9fZm9jdXMiLCJfZWRpdG9yUmFuZ2UiLCJjdXJyZW50Tm9kZSIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiYnIiLCJfYXBwbHlUYWdFZmZlY3RzIiwiX3RvZ2dsZVRvb2xiYXJCYWxsb29uIiwiZmlsZUNvbXBvbmVudEluZm8iLCJibHVyIiwic3RhcnRDb24iLCJzdGFydE9mZiIsImVuZENvbiIsImVuZE9mZiIsInNldFN0YXJ0Iiwic2V0RW5kIiwic2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJfcmFuZ2VJbmZvIiwicmVtb3ZlUmFuZ2UiLCJfc2V0S2V5RWZmZWN0IiwiX2NyZWF0ZURlZmF1bHRSYW5nZSIsImZvY3VzTm9kZSIsInJhbmdlQ291bnQiLCJnZXRSYW5nZUF0IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzT2Zmc2V0IiwiY29tcGFyZVZhbHVlIiwicmlnaHREaXIiLCJfc2VsZWN0aW9uVm9pZCIsIm9wIiwiYWN0aXZlRWwiLCJhY3RpdmVFbGVtZW50IiwiZXh0ZW50Tm9kZSIsImZpcnN0Rm9ybWF0IiwiY29tbSIsIl9yZXNldFJhbmdlVG9UZXh0Tm9kZSIsInRlbXBDb24iLCJ0ZW1wT2Zmc2V0IiwidGVtcENoaWxkIiwib25seUJyZWFrIiwiZW1wdHlUZXh0IiwiY29tbW9uQ29uIiwibGluZU5vZGVzIiwic3RhcnRMaW5lIiwiZW5kTGluZSIsInN0YXJ0SWR4IiwiZW5kSWR4Iiwib25seVRhYmxlIiwic3RhcnRSYW5nZUVsIiwiZW5kUmFuZ2VFbCIsInNhbWVSYW5nZSIsInJlbW92ZUR1cGxpY2F0ZSIsIm15Q29tcG9uZW50Iiwic2VsZWN0ZWRMaW5lcyIsImlzRWRnZVBvaW50Iiwibm9kZVZhbHVlIiwiX2lzRWRnZUZvcm1hdCIsImZvcm1hdE5vZGUiLCJjdXJyZW50Rm9ybWF0RWwiLCJvRm9ybWF0TmFtZSIsImNoZWNrQ2hhckNvdW50Iiwibm90U2VsZWN0IiwicmVtb3ZlTm9kZSIsImZvcm1hdEVsIiwiZGVwdGhGb3JtYXQiLCJwbHVnaW4iLCJfc2V0Q29tcG9uZW50TGluZUJyZWFrZXIiLCJ0X3N0eWxlIiwiYl9zdHlsZSIsInJlc2l6ZUNvbnRhaW5lciIsImNvbXBvbmVudFRvcCIsIndTY3JvbGwiLCJfY2hlY2tEdXBsaWNhdGVOb2RlIiwiX2R1cGxlQ2hlY2siLCJvU3R5bGVzIiwiZHVwbGUiLCJhZnRlck5vZGUiLCJvcmlnaW5BZnRlciIsInRlbXBBZnRlck5vZGUiLCJpbnNlcnRMaXN0Q2VsbCIsInRlbXBQYXJlbnROb2RlIiwiZnJlZUZvcm1hdCIsImlzRm9ybWF0cyIsImlzRWRnZSIsInByZXZDb250YWluZXIiLCJzYW1lUGFyZW50Iiwic3ViTGlzdCIsImZvcm1hdFJhbmdlIiwicmVtb3ZlZFRhZyIsIm9sZFBhcmVudCIsInJhbmdlQ29uIiwiZk5vZGUiLCJjaExpc3QiLCJkdXBsZU5vZGVzIiwiY0l0ZW0iLCJfc2V0SW50b0ZyZWVGb3JtYXQiLCJwcmV2aW91c1RleHQiLCJuZXh0VGV4dCIsIm5ld1JhbmdlIiwiemVyb1dpZHRoIiwib05vZGVDaGlsZHJlbiIsImxhc3RPTm9kZSIsImZpbGVDb21wb25lbnQiLCJpc1N0YXJ0RWRnZSIsImlzRW5kRWRnZSIsInN0YXJ0UHJldkVsIiwiZW5kTmV4dEVsIiwiYmVmb3JlTm9kZSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInN0YXJ0Tm9kZSIsImVuZE5vZGUiLCJfbm9kZVJlbW92ZUxpc3RJdGVtIiwic3Vic3RyaW5nRGF0YSIsImVuZFVsIiwic3RhcnRMaSIsInJjIiwicmFuZ2VMaW5lcyIsImxpbmVzTG9vcCIsIm5lc3RlZCIsImZFbCIsImxFbCIsInN0YW5kVGFnIiwiYmVmb3JlVGFnIiwicGFyZW50RGVwdGgiLCJsaXN0UGFyZW50IiwibGluZUFyciIsInJlbW92ZUl0ZW1zIiwibmV4dExpbmUiLCJuZXh0TGlzdCIsInJlbW92ZUFycmF5Iiwic3BsaXRSYW5nZSIsIm5ld1JhbmdlRWxlbWVudCIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwicmFuZ2VFbCIsImluc2VydGVkTmV3IiwibW92ZUNvbXBsZXRlIiwiYXBwZW5kTm9kZSIsImluc05vZGUiLCJvcmlnaW5Ob2RlIiwiaW5zQ2hpbGRyZW4iLCJvcmlnaW5OZXh0IiwiZGV0YWNoUmFuZ2UiLCJsaW5lSW5kZXgiLCJpbnNOZXh0IiwiaW5uZXJDaGlsZHJlbiIsInJhbmdlUGFyZW50IiwicmFuZ2VSaWdodCIsImNoaWxkRWRnZSIsImxpc3RGaXJzdCIsImxpc3RMYXN0IiwibGFzdEluZGV4Iiwic3R5bGVBcnJheSIsInJlbW92ZU5vZGVBcnJheSIsInN0cmljdFJlbW92ZSIsImlzUmVtb3ZlTm9kZSIsImlzUmVtb3ZlRm9ybWF0IiwiayIsIm5ld05vZGVOYW1lIiwic05vZGUiLCJjaGVja0NudCIsImNoZWNrQXR0cnMiLCJja2Vja0NsYXNzZXMiLCJjbGFzc1JlZyIsInN0eWxlQ2hlY2siLCJjbGFzc0NoZWNrIiwic3RhcnQiLCJlbmQiLCJzdHlsZVJlZ0V4cCIsImNsYXNzUmVnRXhwIiwicmVtb3ZlTm9kZVJlZ0V4cCIsIndCb29sZWFuIiwiQm9vbGVhbiIsIl9yZW1vdmVDaGVjayIsImNoZWNrTm9kZSIsInZOb2RlIiwidGFnUmVtb3ZlIiwib3JpZ2luU3R5bGUiLCJvcmlnaW5DbGFzc2VzIiwib25lTGluZSIsImVuZExlbmd0aCIsImlzUmVtb3ZlQW5jaG9yIiwiaXNTaXplTm9kZSIsIl9nZXRNYWludGFpbmVkTm9kZSIsIl91dGlsX2dldE1haW50YWluZWROb2RlIiwiX3V0aWxfaXNNYWludGFpbmVkTm9kZSIsIl9yZXNldENvbW1vbkxpc3RDZWxsIiwiX25vZGVDaGFuZ2Vfb25lTGluZSIsIl9zZXRDb21tb25MaXN0U3R5bGUiLCJhcHBsaWVkQ29tbW9uTGlzdCIsIl9ub2RlQ2hhbmdlX2VuZExpbmUiLCJfbm9kZUNoYW5nZV9taWRkbGVMaW5lIiwiX25vZGVDaGFuZ2Vfc3RhcnRMaW5lIiwiZWxTdHlsZXMiLCJlayIsImVsS2V5cyIsInJlbW92ZVByb3BlcnR5Iiwic2VsIiwiYXBwbGllZEVsIiwiY2hpbGRTdHlsZSIsImVsU3R5bGUiLCJmb250V2VpZ2h0IiwiZm9udFN0eWxlIiwiY0tleXMiLCJfc3RyaXBSZW1vdmVOb2RlIiwiX2lzUmVtb3ZlIiwibmV3SW5uZXJOb2RlIiwicGFyZW50Q29uIiwic2FtZVRhZyIsInoiLCJuTm9kZUFycmF5IiwicE5vZGUiLCJpc1NhbWVOb2RlIiwicEN1cnJlbnQiLCJzdGFydFBhc3MiLCJlbmRQYXNzIiwiY2hlY2tDc3MiLCJjb3Zlck5vZGUiLCJwcmV2Tm9kZSIsInByZXZBbmNob3JOb2RlIiwiY2hpbGROb2RlIiwiYW5jaG9ycyIsImFDaGlsZHJlbiIsImFMZW4iLCJhbmNlc3RvckFuY2hvck5vZGUiLCJhZnRlckFuY2hvck5vZGUiLCJ0ZXh0Tm9kZV9zIiwidGV4dE5vZGVfZSIsImVuZENvblJlc2V0IiwibmV3U3RhcnRPZmZzZXQiLCJzdGFydFBhdGgiLCJtZXJnZUVuZENvbiIsIm5ld0VuZE9mZnNldCIsImVuZFBhdGgiLCJuZXdPZmZzZXRzIiwiX2VuZENvbnRhaW5lciIsInBhc3NOb2RlIiwiY2xvbmVDaGlsZCIsImlzVG9wTm9kZSIsInRlbXBOb2RlIiwibmV3Q3NzVGV4dCIsIm5ld0NsYXNzIiwibm9uZUNoYW5nZSIsImFjdGlvbkNhbGwiLCJsYXllciIsIl9zaG93VG9vbGJhckJhbGxvb24iLCJfc2hvd1Rvb2xiYXJJbmxpbmUiLCJjb21tYW5kSGFuZGxlciIsInRvZ2dsZUNvZGVWaWV3IiwidG9nZ2xlRnVsbFNjcmVlbiIsInRvZ2dsZURpc3BsYXlCbG9ja3MiLCJzZXREaXIiLCJnZXRDb250ZW50cyIsIm5vZGVzTWFwIiwibWFyZ2luRGlyIiwibWFyZ2luIiwiX3Jlc291cmNlc1N0YXRlQ2hhbmdlIiwiX3NldENvZGVEYXRhVG9FZGl0b3IiLCJfaGlkZVRvb2xiYXIiLCJfcmVzZXRDYWNoaW5nQnV0dG9uIiwiX3NldEVkaXRvckRhdGFUb0NvZGVWaWV3Iiwic2Nyb2xsSGVpZ2h0IiwicmVmcmVzaCIsIl9jaGVja1BsYWNlaG9sZGVyIiwiY29kZV9odG1sIiwiX2dldENvZGVWaWV3IiwicGFyc2VEb2N1bWVudCIsImhlYWRDaGlsZHJlbiIsImNvbnZlcnRDb250ZW50c0ZvckVkaXRvciIsImVkaXRhYmxlQ2xhc3NlcyIsImNvZGVDb250ZW50cyIsImNvbnZlcnRIVE1MRm9yQ29kZVZpZXciLCJjb2RlVmFsdWUiLCJfc2V0Q29kZVZpZXciLCJfdmFyIiwid2FzVG9vbGJhckhpZGRlbiIsIl9jb2RlVmlld0F1dG9IZWlnaHQiLCJvblNjcm9sbF93aW5kb3ciLCJ6SW5kZXgiLCJfaWZyYW1lQXV0b0hlaWdodCIsImhpZGUiLCJjb250ZW50c0hUTUwiLCJwcmludERvY3VtZW50Iiwid0RvYyIsImFycnRzIiwid3JpdGUiLCJsaW5rcyIsImxpbmtIVE1MIiwiZG9jdW1lbnRNb2RlIiwiU3R5bGVNZWRpYSIsIndpbmRvd09iamVjdCIsIm1pbWVUeXBlIiwiY2hhbmdlRGlyIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5MZWZ0IiwiY29udmVydFZhbHVlIiwiX3Jlc2V0Q29tcG9uZW50cyIsInNldElmcmFtZUNvbnRlbnRzIiwiY3R4IiwiX19zY3JpcHRUYWdSZWdFeHAiLCJvbmx5Q29udGVudHMiLCJjbGVhbkhUTUwiLCJyZW5kZXJIVE1MIiwiZWRpdGFibGVFbHMiLCJnZXRGdWxsQ29udGVudHMiLCJfbWFrZUxpbmUiLCJyZXF1aXJlRm9ybWF0IiwiX19kaXNhbGxvd2VkVGFnTmFtZVJlZ0V4cCIsInRleHRBcnJheSIsIl9hbGxvd0hUTUxDb21tZW50cyIsIl90YWdDb252ZXJ0b3IiLCJfZGVsZXRlRGlzYWxsb3dlZFRhZ3MiLCJfX2Rpc2FsbG93ZWRUYWdzUmVnRXhwIiwidG8iLCJzaXplTnVtIiwiZnJvbSIsInB4U2l6ZSIsIl9jbGVhblN0eWxlIiwiZmFjZSIsImFsbG93ZWRTdHlsZSIsIl9jbGVhblRhZ3MiLCJsb3dMZXZlbENoZWNrIiwiYkF0dHIiLCJ3QXR0ciIsIl9lZGl0Rm9ybWF0IiwidGVtcFRyZWUiLCJfY29udmVydExpc3RDZWxsIiwiZG9tVHJlZSIsIl9pc0Zvcm1hdERhdGEiLCJfY2xhc3NOYW1lRmlsdGVyIiwidGV4dENvbXBMaXN0IiwiaW5pdE1ldGhvZCIsIl9fYWxsb3dlZFNjcmlwdFJlZ0V4cCIsImNvbXAiLCJyZXR1cm5IVE1MIiwiYnJSZWciLCJpc0Zvcm1hdCIsImJyQ2hhciIsImluZGVudFNpemUiLCJlbGVtZW50UmVnVGVzdCIsImVsZW1lbnRJbmRlbnQiLCJsaW5lQlIiLCJub2RlUmVnVGVzdCIsInRhZ0luZGVudCIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsImxpc3RlbmVyIiwidXNlQ2FwdHVyZSIsIl9jaGFyQ291bnQiLCJpbnB1dFRleHQiLCJjb3VudFR5cGUiLCJuZXh0Q2hhckNvdW50IiwiZ2V0Q2hhckxlbmd0aCIsIl9zZXRDaGFyQ291bnQiLCJvdmVyIiwiY291bnQiLCJnZXRDaGFyQ291bnQiLCJzbGljZVBvc2l0aW9uIiwiX2NhbGxDb3VudGVyQmxpbmsiLCJyZXNldFJlc3BvbnNpdmVUb29sYmFyIiwicmVzcG9uc2l2ZVNpemUiLCJfcmVzcG9uc2l2ZUJ1dHRvblNpemUiLCJyZXNwb25zaXZlV2lkdGgiLCJfcmVzcG9uc2l2ZUN1cnJlbnRTaXplIiwic2V0VG9vbGJhckJ1dHRvbnMiLCJfY2hlY2tDb21wb25lbnRzIiwiZ2V0RG9jIiwic2V0VmFsdWUiLCJnZXRWYWx1ZSIsImlnbm9yZWRMaXN0IiwiT1VUREVOVCIsIklOREVOVCIsIl9pbml0IiwicmVsb2FkIiwiX2luaXRIVE1MIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInNQcmVmaXgiLCJTaGFkb3dSb290Iiwic2hhZG93Um9vdCIsImRpc2FsbG93VGV4dFRhZ3MiLCJhbGxvd1RleHRUYWdzIiwiZ2V0UmVnTGlzdCIsInN0cjIiLCJkZWZhdWx0QXR0ciIsInJlZ0VuZFN0ciIsIl93QXR0ciIsInRhZ3NBdHRyIiwiYWxsQXR0ciIsIl9iQXR0ciIsIl9jYWNoaW5nQnV0dG9ucyIsIm1hbmFnZWRDbGFzcyIsImZpbGVQbHVnaW5SZWdFeHAiLCJjaGFuZ2UiLCJkZWxheVRpbWUiLCJwdXNoRGVsYXkiLCJzdGFja0luZGV4Iiwic3RhY2siLCJzZXRDb250ZW50c0Zyb21TdGFjayIsInB1c2hTdGFjayIsImRlbGF5IiwidGltZSIsImNsZWFyVGltZW91dCIsImdvIiwiZ2V0Q3VycmVudEluZGV4IiwiaWdub3JlQ2hhbmdlRXZlbnQiLCJfZGVzdHJveSIsIl9oaXN0b3J5IiwiX29uQ2hhbmdlX2hpc3RvcnlTdGFjayIsIl9pZnJhbWVBdXRvIiwiX2luaXRXeXNpd3lnQXJlYSIsIm9uQ2hhbmdlIiwiX19jYWxsUmVzaXplRnVuY3Rpb24iLCJyZXNpemVPYnNlcnZlckVudHJ5IiwiYm9yZGVyQm94U2l6ZSIsImJsb2NrU2l6ZSIsImNvbnRlbnRSZWN0Iiwib25SZXNpemVFZGl0b3IiLCJfc2V0RGVmYXVsdEZvcm1hdCIsImZvcm1hdE5hbWUiLCJfc2V0T3B0aW9uc0luaXQiLCJfZ2V0Q29uc3RydWN0ZWQiLCJfZWRpdG9ySW5pdCIsIl9hZGRFdmVudCIsIl9vZmZTdGlja3lUb29sYmFyIiwib25SZXNpemVfd2luZG93IiwiX3Jlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsIl90b29sYmFyT2JzZXJ2ZXIiLCJjb250ZXh0RWwiLCJfSUVpc0NvbXBvc2luZyIsIl9saW5lQnJlYWtlckJpbmQiLCJfY3Vyc29yTW92ZUtleUNvZGUiLCJfZGlyZWN0aW9uS2V5Q29kZSIsIl9ub25UZXh0S2V5Q29kZSIsIl9oaXN0b3J5SWdub3JlS2V5Q29kZSIsIl9vbkJ1dHRvbnNDaGVjayIsIl9mcm9udFplcm9XaWR0aFJlZyIsIl9rZXlDb2RlU2hvcnRjdXQiLCI2NSIsIjY2IiwiODMiLCI4NSIsIjczIiwiODkiLCI5MCIsIjIxOSIsIjIyMSIsIl9zaG9ydGN1dENvbW1hbmQiLCJrZXlTdHIiLCJjbGFzc09uQ2hlY2siLCJjb21tYW5kTWFwTm9kZXMiLCJfYnV0dG9uc0V2ZW50SGFuZGxlciIsImFkZEdsb2JhbEV2ZW50IiwicmVtb3ZlR2xvYmFsRXZlbnQiLCJvbkNsaWNrX3Rvb2xiYXIiLCJfX3NlbGVjdGlvblN5bmNFdmVudCIsIm9uTW91c2VEb3duX3d5c2l3eWciLCJvbk1vdXNlRG93biIsInRhYmxlQ2VsbCIsIm9uQ2xpY2tfd3lzaXd5ZyIsIm9uQ2xpY2siLCJkZXRhaWwiLCJzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQiLCJzZWxlY3RlZENvbXBvbmVudEluZm8iLCJwcmV2TGkiLCJfYmFsbG9vbkRlbGF5IiwiX3Nob3dUb29sYmFyQmFsbG9vbkRlbGF5IiwicmFuZ2VPYmoiLCJpc0RpclRvcCIsInJlY3RzIiwiZ2V0Q2xpZW50UmVjdHMiLCJnbG9iYWxTY3JvbGwiLCJlZGl0b3JXaWR0aCIsInN0aWNreVRvcCIsImVkaXRvckxlZnQiLCJub2RlT2Zmc2V0IiwiYm90dG9tIiwibm9UZXh0IiwiYXJyb3dNYXJnaW4iLCJ0b29sYmFySGVpZ2h0IiwiaWZyYW1lUmVjdHMiLCJfc2V0VG9vbGJhck9mZnNldCIsImVkaXRvclBhcmVudCIsImFic29sdXRlTGVmdCIsIm92ZXJSaWdodCIsInJlc2V0VG9wIiwic3BhY2UiLCJfZ2V0UGFnZUJvdHRvbVNwYWNlIiwiZG9jdW1lbnRFbGVtZW50IiwiYXJyb3dfbGVmdCIsInNob3dJbmxpbmUiLCJvbklucHV0X3d5c2l3eWciLCJvbklucHV0IiwiX2lzVW5lZGl0YWJsZU5vZGUiLCJpc0Zyb250Iiwic2libGluZ0tleSIsInNpYmxpbmdOb2RlIiwiX2lzVW5lZGl0YWJsZU5vZGVfZ2V0U2libGluZyIsInNlbGVjdE5vZGUiLCJfb25TaG9ydGN1dEtleSIsIm9uS2V5RG93bl93eXNpd3lnIiwic2hpZnRLZXkiLCJjdHJsIiwiY3RybEtleSIsIm1ldGFLZXkiLCJhbHRLZXkiLCJvbktleURvd24iLCJzZWxlY3RSYW5nZSIsImZpbGVDb21wb25lbnROYW1lIiwiX29uS2V5RG93bl93eXNpd3lnX2Fycm93S2V5IiwiX2hhcmREZWxldGUiLCJkZWZhdWx0Rm9ybWF0IiwiY29uIiwicHJldkxhc3QiLCJpZ25vcmVaV1MiLCJuZXh0RWwiLCJsaW5lcyIsImZjIiwibGMiLCJtb3ZlQ2VsbCIsImVuZENoaWxkIiwidGFiVGV4dCIsInRleHRSYW5nZSIsImZyZWVGb3JtYXRFbCIsImVudGVySFRNTCIsImZvcm1hdEVuZEVkZ2UiLCJmb3JtYXRTdGFydEVkZ2UiLCJfZW50ZXJQcmV2ZW50IiwiaW5uZXJOb2RlIiwicGFyZW50TGkiLCJuZXdMaXN0Q2VsbCIsInNlbGVjdGlvbkZvcm1hdCIsIndTZWxlY3Rpb24iLCJpbnNlcnRIVE1MIiwid09mZnNldCIsImZvY3VzTmV4dCIsImJyUHJldiIsImJyTmV4dCIsImZvY3VzQlIiLCJpc011bHRpTGluZSIsImlubmVyUmFuZ2UiLCJ0ZW1wRWwiLCJjb21wQ29udGV4dCIsIm5ic3AiLCJjb21wb25lbnRJbmZvIiwiY3VycmVudENlbGxGaXJzdE5vZGUiLCJjdXJyZW50Q2VsbExhc3ROb2RlIiwiaXNDZWxsRmlyc3ROb2RlIiwiaXNDZWxsTGFzdE5vZGUiLCJzaWJsaW5nVG9TZXQiLCJwcmV2aW91c1JvdyIsInNlbGVjdFByZXZpb3VzIiwic2VsZWN0TmV4dCIsInByZXZpb3VzRGVlcGVzdE5vZGUiLCJvbktleVVwX3d5c2l3eWciLCJvRm9ybWF0VGFnIiwiaXNDb21wb3NpbmciLCJmcm9udFplcm9XaWR0aENudCIsInN1YnN0cmluZyIsIm9uS2V5VXAiLCJvblNjcm9sbF93eXNpd3lnIiwib25TY3JvbGwiLCJvbkZvY3VzX3d5c2l3eWciLCJvbkZvY3VzIiwib25CbHVyX3d5c2l3eWciLCJvbkJsdXIiLCJvbk1vdXNlRG93bl9yZXNpemluZ0JhciIsImNsaWVudFkiLCJfcmVzaXplX2VkaXRvciIsImNsb3N1cmVGdW5jIiwicmVzaXplSW50ZXJ2YWwiLCJpc1Rvb2xiYXJIaWRkZW4iLCJlZGl0b3JIZWlnaHQiLCJzY3JvbGxZIiwiZWRpdG9yVG9wIiwiaW5saW5lT2Zmc2V0IiwiX29uU3RpY2t5VG9vbGJhciIsInNjcm9sbCIsInNDZWxsIiwiZUNlbGwiLCJzSXNDZWxsIiwiZUlzQ2VsbCIsInNDb21wIiwiZUNvbXAiLCJvblBhc3RlX3d5c2l3eWciLCJjbGlwYm9hcmREYXRhIiwiX2RhdGFUcmFuc2ZlckFjdGlvbiIsIl9zZXRDbGlwYm9hcmRDb21wb25lbnQiLCJzZXREYXRhIiwib25Db3B5X3d5c2l3eWciLCJvbkNvcHkiLCJvblNhdmVfd3lzaXd5ZyIsIm9uU2F2ZSIsIm9uQ3V0X3d5c2l3eWciLCJvbkN1dCIsIm9uRHJvcF93eXNpd3lnIiwiZGF0YVRyYW5zZmVyIiwiX3NldERyb3BMb2NhdGlvblNlbGVjdGlvbiIsInJhbmdlT2Zmc2V0IiwiY2FyZXRSYW5nZUZyb21Qb2ludCIsImNsaWVudFgiLCJwbGFpblRleHQiLCJjbGVhbkRhdGEiLCJnZXREYXRhIiwidGVtcERpdiIsInRlbXBSYW5nZSIsIl9zZXRDbGlwYm9hcmREYXRhIiwiTVNEYXRhIiwib25QYXN0ZSIsIm9uRHJvcCIsImluc2VydEltYWdlIiwib25Nb3VzZU1vdmVfd3lzaXd5ZyIsImxpbmVCcmVha2VyU3R5bGUiLCJjdHhFbCIsInBhZ2VZIiwiX29uTW91c2VEb3duX2xpbmVCcmVhayIsIl9vbkxpbmVCcmVhayIsImV2ZW50V3lzaXd5ZyIsImVudHJpZXMiLCJwYXNzaXZlIiwiX3NldFJlc3BvbnNpdmVUb29sYmFyIiwiX3JlbW92ZUV2ZW50IiwidW5vYnNlcnZlIiwic2l6ZUFycmF5IiwiYnV0dG9uc09iaiIsIm9uU2V0VG9vbGJhckJ1dHRvbnMiLCJuZXdUb29sYmFyIiwibmV3Q29udGV4dCIsInNldE9wdGlvbnMiLCJfb3B0aW9ucyIsInNldERlZmF1bHRTdHlsZSIsIm5ld1N0eWxlcyIsIm5vdGljZUNsb3NlIiwiZ2V0Q29udGV4dCIsImdldFRleHQiLCJnZXRJbWFnZXNJbmZvIiwiZ2V0RmlsZXNJbmZvIiwibm90Q2xlYW5pbmdEYXRhIiwicmFuZ2VTZWxlY3Rpb24iLCJjaGVja0hUTUwiLCJmaXJzdENvbiIsImFwcGVuZENvbnRlbnRzIiwicmVhZE9ubHkiLCJzZXRPcHRpb24iLCJkaXNhYmxlIiwiZW5hYmxlIiwidG9wQXJlYVN0eWxlIiwiU1VORURJVE9SIiwic3VuZWRpdG9yIiwiX3Jlc2l6ZUNsaWVudFgiLCJfcmVzaXplQ2xpZW50WSIsIl9yZXNpemVfdyIsIl9yZXNpemVfaCIsIl9yZXNpemVfZGlyZWN0aW9uIiwiX21vdmVfcGF0aCIsIl9pc0NoYW5nZSIsImFsaWduSWNvbnMiLCJyZXNpemVfZGl2X2NvbnRhaW5lciIsInNldENvbnRyb2xsZXJfcmVzaXplIiwicmVzaXplRG90IiwicmVzaXplRGlzcGxheSIsInJlc2l6ZV9idXR0b24iLCJzZXRDb250cm9sbGVyX2J1dHRvbiIsInJlc2l6ZV9oYW5kbGVzIiwicmVzaXplSGFuZGxlcyIsInJlc2l6ZUJ1dHRvbkdyb3VwIiwicm90YXRpb25CdXR0b25zIiwicGVyY2VudGFnZUJ1dHRvbnMiLCJhbGlnbk1lbnUiLCJhbGlnbk1lbnVMaXN0IiwiYWxpZ25CdXR0b24iLCJhdXRvU2l6ZUJ1dHRvbiIsImNhcHRpb25CdXR0b24iLCJvbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlIiwib25DbGlja19yZXNpemVCdXR0b24iLCJyZXNpemVfY29udGFpbmVyIiwicGx1Z2luT2JqIiwicGVyY2VudGFnZVJvdGF0aW9uIiwieFVuaXQiLCJ5VW5pdCIsImRlYyIsInhWYWx1ZSIsInlWYWx1ZSIsImNvbnRleHRSZXNpemluZyIsImlzVmVydGljYWwiLCJhYnMiLCJkaXNwbGF5WCIsImRpc3BsYXlZIiwicmVzaXplRG90U2hvdyIsInJvdGF0aW9ucyIsInBCdXR0b25zIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsIl9jbG9zZUFsaWduTWVudSIsIm9wZW5BbGlnbk1lbnUiLCJjdXJyZW50Q29udGV4dCIsImN1cnJlbnRNb2R1bGUiLCJwZXJjZW50WSIsInBlcmNlbnRhZ2UiLCJfc2V0VHJhbnNGb3JtIiwic2xvcGUiLCJkZWciLCJhbGlnblZhbHVlIiwiY2FwdGlvblRleHQiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc09yaWdpbiIsIm9mZnNldFciLCJvZmZzZXRIIiwidHJhbnNXIiwidHJhbnNIIiwidHJhbnNsYXRlIiwiY2xvc3VyZUZ1bmNfYmluZCIsInJlc2l6aW5nX2VsZW1lbnRfYmluZCIsImNhbmNlbF9jb250cm9sbGVyX3Jlc2l6ZSIsInJlc2l6aW5nX2VsZW1lbnQiLCJyZXN1bHRXIiwicmVzdWx0SCIsIndoIiwicGFkZGluZyIsImxpbWl0IiwiX2NoZWNrTWVkaWFDb21wb25lbnQiLCJ1cGxvYWRVcmwiLCJ1cGxvYWRIZWFkZXIiLCJjYWxsQmFjayIsImVycm9yQ2FsbEJhY2siLCJmaWxlUGx1Z2luIiwiX2NhbGxCYWNrVXBsb2FkIiwidGFnTmFtZXMiLCJ1cGxvYWRFdmVudEhhbmRsZXIiLCJmaWxlTWFuYWdlclBsdWdpbiIsImluZm9MaXN0Iiwic2V0RmlsZUluZm8iLCJpbmZvVXBkYXRlIiwiY3VycmVudFRhZ3MiLCJpbmZvSW5kZXgiLCJwbGd1aW4iLCJzdGF0ZSIsInNjcm9sbEludG9WaWV3Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gs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bmtCLEVBQVk4N0UsR0FDN0IsTUFBTTFnRixFQUFVTCxLQUFLSyxRQUFRNEUsR0FFN0IsR0FBa0MsbUJBQXZCODdFLEVBQW1DLENBQzFDLE1BQU1FLEVBQVc1Z0YsRUFBUTZlLFVBQ3pCLElBQUssSUFBSXJoQixFQUFJLEVBQUc0SixFQUFNdzVFLEVBQVMzNkUsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDNUNrakYsRUFBbUIsS0FBTUUsRUFBU3BqRixHQUFHb1ksTUFBTyxTQUFVLEtBQU0sRUFBR2pXLE1BSXZFSyxFQUFRNmUsVUFBWSxHQUNwQjdlLEVBQVE4ZSxXQUFhLElBc0I3QixZQWxCd0IsSUFBYmxmLElBQ0ZGLEVBQU8rQyxtQkFDUnZFLE9BQU9DLGVBQWV1QixFQUFRLG9CQUFxQixDQUMvQ3RCLFlBQVksRUFDWnNFLFVBQVUsRUFDVkMsY0FBYyxFQUNkbEUsTUFBTyxLQUlmUCxPQUFPQyxlQUFldUIsRUFBTytDLGtCQUFtQixjQUFlLENBQzNEckUsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPa2dCLEtBSVJBLEdBMVRxRCxpQkFBbkJwaEIsRUFBT0QsUUFDNUNDLEVBQU9ELFFBQVVrQyxFQUFPb0QsU0FDcEJuRCxFQUFRRCxHQUFRLEdBQ2hCLFNBQVVxRCxHQUNOLElBQUtBLEVBQUVELFNBQ0gsTUFBTSxJQUFJRSxNQUFNLDhDQUVwQixPQUFPckQsRUFBUW9ELElBR3ZCcEQsRUFBUUQiLCJmaWxlIjoic3VuZWRpdG9yLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIlhKUjFcIik7XG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xyXG4gICAgICAgICAgICBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOlxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF3LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVU5FRElUT1JfTU9EVUxFUyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGdsb2JhbCk7XHJcbiAgICB9XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xyXG4gICAgY29uc3QgZGlhbG9nID0ge1xyXG4gICAgICAgIG5hbWU6ICdkaWFsb2cnLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb25zdHJ1Y3RvclxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICAgICAgY29udGV4dC5kaWFsb2cgPSB7XHJcbiAgICAgICAgICAgICAgICBraW5kOiAnJyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU1vZGFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIF9jbG9zZVNpZ25hbDogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBkaWFsb2cgKi9cclxuICAgICAgICAgICAgbGV0IGRpYWxvZ19kaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIGRpYWxvZ19kaXYuY2xhc3NOYW1lID0gJ3NlLWRpYWxvZyBzdW4tZWRpdG9yLWNvbW1vbic7XHJcblxyXG4gICAgICAgICAgICBsZXQgZGlhbG9nX2JhY2sgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIGRpYWxvZ19iYWNrLmNsYXNzTmFtZSA9ICdzZS1kaWFsb2ctYmFjayc7XHJcbiAgICAgICAgICAgIGRpYWxvZ19iYWNrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICBsZXQgZGlhbG9nX2FyZWEgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIGRpYWxvZ19hcmVhLmNsYXNzTmFtZSA9ICdzZS1kaWFsb2ctaW5uZXInO1xyXG4gICAgICAgICAgICBkaWFsb2dfYXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgZGlhbG9nX2Rpdi5hcHBlbmRDaGlsZChkaWFsb2dfYmFjayk7XHJcbiAgICAgICAgICAgIGRpYWxvZ19kaXYuYXBwZW5kQ2hpbGQoZGlhbG9nX2FyZWEpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5kaWFsb2cubW9kYWxBcmVhID0gZGlhbG9nX2RpdjtcclxuICAgICAgICAgICAgY29udGV4dC5kaWFsb2cuYmFjayA9IGRpYWxvZ19iYWNrO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRpYWxvZy5tb2RhbCA9IGRpYWxvZ19hcmVhO1xyXG5cclxuICAgICAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICAgICAgY29udGV4dC5kaWFsb2cubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fb25Nb3VzZURvd25fZGlhbG9nLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRpYWxvZy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2tfZGlhbG9nLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5hcHBlbmRDaGlsZChkaWFsb2dfZGl2KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICAgICAgZGlhbG9nX2RpdiA9IG51bGwsIGRpYWxvZ19iYWNrID0gbnVsbCwgZGlhbG9nX2FyZWEgPSBudWxsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCB0byBjb250cm9sIHRoZSBiZWhhdmlvciBvZiBjbG9zaW5nIHRoZSBkaWFsb2dcclxuICAgICAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGUgRXZlbnQgb2JqZWN0XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfb25Nb3VzZURvd25fZGlhbG9nOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoL3NlLWRpYWxvZy1pbm5lci8udGVzdChlLnRhcmdldC5jbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLl9jbG9zZVNpZ25hbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLl9jbG9zZVNpZ25hbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IHRvIGNsb3NlIHRoZSB3aW5kb3cgd2hlbiB0aGUgb3V0c2lkZSBhcmVhIG9mIHRoZSBkaWFsb2cgb3IgY2xvc2UgYnV0dG9uIGlzIGNsaWNrXHJcbiAgICAgICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlIEV2ZW50IG9iamVjdFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX29uQ2xpY2tfZGlhbG9nOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoL2Nsb3NlLy50ZXN0KGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykpIHx8IHRoaXMuY29udGV4dC5kaWFsb2cuX2Nsb3NlU2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiBhIERpYWxvZyBwbHVnaW5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2luZCBEaWFsb2cgcGx1Z2luIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVwZGF0ZSBXaGV0aGVyIGl0IHdpbGwgb3BlbiBmb3IgdXBkYXRlICgnaW1hZ2UnID09PSB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSlcclxuICAgICAgICAgKi9cclxuICAgICAgICBvcGVuOiBmdW5jdGlvbiAoa2luZCwgdXBkYXRlKSAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tb2RhbEZvcm0pIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2lucy5kaWFsb2cuX2JpbmRDbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5wbHVnaW5zLmRpYWxvZy5fYmluZENsb3NlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuX2JpbmRDbG9zZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuX2JpbmRDbG9zZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIS8yNy8udGVzdChlLmtleUNvZGUpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fZC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5wbHVnaW5zLmRpYWxvZy5fYmluZENsb3NlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwgPSB1cGRhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBvcHVwRGlzcGxheSA9PT0gJ2Z1bGwnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLm1vZGFsQXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLm1vZGFsQXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cua2luZCA9IGtpbmQ7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxGb3JtID0gdGhpcy5jb250ZXh0W2tpbmRdLm1vZGFsO1xyXG4gICAgICAgICAgICBjb25zdCBmb2N1c0VsZW1lbnQgPSB0aGlzLmNvbnRleHRba2luZF0uZm9jdXNFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnBsdWdpbnNba2luZF0ub24gPT09ICdmdW5jdGlvbicpIHRoaXMucGx1Z2luc1traW5kXS5vbi5jYWxsKHRoaXMsIHVwZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLm1vZGFsQXJlYS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpYWxvZy5iYWNrLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLm1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGFsRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIGlmIChmb2N1c0VsZW1lbnQpIGZvY3VzRWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kQ2xvc2U6IG51bGwsXHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENsb3NlIGEgRGlhbG9nIHBsdWdpblxyXG4gICAgICAgICAqIFRoZSBwbHVnaW4ncyBcImluaXRcIiBtZXRob2QgaXMgY2FsbGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbnMuZGlhbG9nLl9iaW5kQ2xvc2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2QucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMucGx1Z2lucy5kaWFsb2cuX2JpbmRDbG9zZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLl9iaW5kQ2xvc2UgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBraW5kID0gdGhpcy5jb250ZXh0LmRpYWxvZy5raW5kO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGFsRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLmJhY2suc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpYWxvZy5tb2RhbEFyZWEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMucGx1Z2luc1traW5kXS5pbml0ID09PSAnZnVuY3Rpb24nKSB0aGlzLnBsdWdpbnNba2luZF0uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLmtpbmQgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5tb2RhbEZvcm0gPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG5vR2xvYmFsID09PSB0eXBlb2YgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX01PRFVMRVMpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9NT0RVTEVTJywge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZToge31cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9NT0RVTEVTLCAnZGlhbG9nJywge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiBkaWFsb2dcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGlhbG9nO1xyXG59KSk7IiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cclxuICAgICAgICAgICAgZmFjdG9yeShnbG9iYWwsIHRydWUpIDpcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdy5kb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU1VORURJVE9SX01PRFVMRVMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeSh3KTtcclxuICAgICAgICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmFjdG9yeShnbG9iYWwpO1xyXG4gICAgfVxyXG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKHdpbmRvdywgbm9HbG9iYWwpIHtcclxuICAgIGNvbnN0IGZpbGVCcm93c2VyID0ge1xyXG4gICAgICAgIG5hbWU6ICdmaWxlQnJvd3NlcicsXHJcbiAgICAgICAgX3htbEh0dHA6IG51bGwsXHJcbiAgICAgICAgX2xvYWRpbmc6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb25zdHJ1Y3RvclxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICAgICAgY29udGV4dC5maWxlQnJvd3NlciA9IHtcclxuICAgICAgICAgICAgICAgIF9jbG9zZVNpZ25hbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhcmVhOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgdGFnQXJlYTogbnVsbCxcclxuICAgICAgICAgICAgICAgIGJvZHk6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBsaXN0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgdGFnRWxlbWVudHM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFRhZ3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JIYW5kbGVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY29udGV4dFBsdWdpbjogJycsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplOiA0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKiogZmlsZUJyb3dzZXIgKi9cclxuICAgICAgICAgICAgbGV0IGJyb3dzZXJfZGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICBicm93c2VyX2Rpdi5jbGFzc05hbWUgPSAnc2UtZmlsZS1icm93c2VyIHN1bi1lZGl0b3ItY29tbW9uJztcclxuXHJcbiAgICAgICAgICAgIGxldCBiYWNrID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICBiYWNrLmNsYXNzTmFtZSA9ICdzZS1maWxlLWJyb3dzZXItYmFjayc7XHJcblxyXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgY29udGVudC5jbGFzc05hbWUgPSAnc2UtZmlsZS1icm93c2VyLWlubmVyJztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSB0aGlzLnNldF9icm93c2VyKGNvcmUpO1xyXG5cclxuICAgICAgICAgICAgYnJvd3Nlcl9kaXYuYXBwZW5kQ2hpbGQoYmFjayk7XHJcbiAgICAgICAgICAgIGJyb3dzZXJfZGl2LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLl9sb2FkaW5nID0gYnJvd3Nlcl9kaXYucXVlcnlTZWxlY3RvcignLnNlLWxvYWRpbmctYm94Jyk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGVCcm93c2VyLmFyZWEgPSBicm93c2VyX2RpdjtcclxuICAgICAgICAgICAgY29udGV4dC5maWxlQnJvd3Nlci5oZWFkZXIgPSBjb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZS1maWxlLWJyb3dzZXItaGVhZGVyJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIudGl0bGVBcmVhID0gY29udGVudC5xdWVyeVNlbGVjdG9yKCcuc2UtZmlsZS1icm93c2VyLXRpdGxlJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIudGFnQXJlYSA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcignLnNlLWZpbGUtYnJvd3Nlci10YWdzJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIuYm9keSA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcignLnNlLWZpbGUtYnJvd3Nlci1ib2R5Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIubGlzdCA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcignLnNlLWZpbGUtYnJvd3Nlci1saXN0Jyk7XHJcblxyXG4gICAgICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGVCcm93c2VyLnRhZ0FyZWEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tUYWcuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIubGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja0ZpbGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fb25Nb3VzZURvd25fYnJvd3Nlci5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgY29udGVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2tfYnJvd3Nlci5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVsYXRpdmUuYXBwZW5kQ2hpbGQoYnJvd3Nlcl9kaXYpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgICAgICBicm93c2VyX2RpdiA9IG51bGwsIGJhY2sgPSBudWxsLCBjb250ZW50ID0gbnVsbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRfYnJvd3NlcjogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cInNlLWZpbGUtYnJvd3Nlci1jb250ZW50XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1maWxlLWJyb3dzZXItaGVhZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJjbG9zZVwiIGNsYXNzPVwic2UtYnRuIHNlLWZpbGUtYnJvd3Nlci1jbG9zZVwiIGNsYXNzPVwiY2xvc2VcIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5jbG9zZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmljb25zLmNhbmNlbCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtZmlsZS1icm93c2VyLXRpdGxlXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWZpbGUtYnJvd3Nlci10YWdzXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZmlsZS1icm93c2VyLWJvZHlcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1sb2FkaW5nLWJveCBzdW4tZWRpdG9yLWNvbW1vblwiPjxkaXYgY2xhc3M9XCJzZS1sb2FkaW5nLWVmZmVjdFwiPjwvZGl2PjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWZpbGUtYnJvd3Nlci1saXN0XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IHRvIGNvbnRyb2wgdGhlIGJlaGF2aW9yIG9mIGNsb3NpbmcgdGhlIGJyb3dzZXJcclxuICAgICAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGUgRXZlbnQgb2JqZWN0XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfb25Nb3VzZURvd25fYnJvd3NlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKC9zZS1maWxlLWJyb3dzZXItaW5uZXIvLnRlc3QoZS50YXJnZXQuY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyLl9jbG9zZVNpZ25hbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXIuX2Nsb3NlU2lnbmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXZlbnQgdG8gY2xvc2UgdGhlIHdpbmRvdyB3aGVuIHRoZSBvdXRzaWRlIGFyZWEgb2YgdGhlIGJyb3dzZXIgb3IgY2xvc2UgYnV0dG9uIGlzIGNsaWNrXHJcbiAgICAgICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlIEV2ZW50IG9iamVjdFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX29uQ2xpY2tfYnJvd3NlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgvY2xvc2UvLnRlc3QoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSkgfHwgdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyLl9jbG9zZVNpZ25hbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiBhIGZpbGUgYnJvd3NlciBwbHVnaW5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBQbHVnaW4gbmFtZSB1c2luZyB0aGUgZmlsZSBicm93c2VyXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSBzZWxlY3RvckhhbmRsZXIgV2hlbiB0aGUgZnVuY3Rpb24gY29tZXMgYXMgYW4gYXJndW1lbnQgdmFsdWUsIGl0IHN1YnN0aXR1dGVzIFwiY29udGV4dC5zZWxlY3RvckhhbmRsZXJcIi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBvcGVuOiBmdW5jdGlvbiAocGx1Z2luTmFtZSwgc2VsZWN0b3JIYW5kbGVyKSAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLl9iaW5kQ2xvc2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2QucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5fYmluZENsb3NlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5fYmluZENsb3NlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLl9iaW5kQ2xvc2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEvMjcvLnRlc3QoZS5rZXlDb2RlKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fZC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLl9iaW5kQ2xvc2UpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZUJyb3dzZXJDb250ZXh0ID0gdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyO1xyXG4gICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuY29udGV4dFBsdWdpbiA9IHBsdWdpbk5hbWU7XHJcbiAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5zZWxlY3RvckhhbmRsZXIgPSBzZWxlY3RvckhhbmRsZXI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW5Db250ZXh0ID0gdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0Q2xhc3NOYW1lID0gcGx1Z2luQ29udGV4dC5saXN0Q2xhc3M7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy51dGlsLmhhc0NsYXNzKGZpbGVCcm93c2VyQ29udGV4dC5saXN0LCBsaXN0Q2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0Lmxpc3QuY2xhc3NOYW1lID0gJ3NlLWZpbGUtYnJvd3Nlci1saXN0ICcgKyBsaXN0Q2xhc3NOYW1lO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBvcHVwRGlzcGxheSA9PT0gJ2Z1bGwnKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuYXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuYXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC50aXRsZUFyZWEudGV4dENvbnRlbnQgPSBwbHVnaW5Db250ZXh0LnRpdGxlO1xyXG4gICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuYXJlYS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5fZHJhd0ZpbGVMaXN0LmNhbGwodGhpcywgdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdLnVybCwgdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdLmhlYWRlcik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRDbG9zZTogbnVsbCxcclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xvc2UgYSBmaWxlQnJvd3NlciBwbHVnaW5cclxuICAgICAgICAgKiBUaGUgcGx1Z2luJ3MgXCJpbml0XCIgbWV0aG9kIGlzIGNhbGxlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlQnJvd3NlclBsdWdpbiA9IHRoaXMucGx1Z2lucy5maWxlQnJvd3NlcjtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWxlQnJvd3NlclBsdWdpbi5feG1sSHR0cCkge1xyXG4gICAgICAgICAgICAgICAgZmlsZUJyb3dzZXJQbHVnaW4uX3htbEh0dHAuYWJvcnQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZpbGVCcm93c2VyUGx1Z2luLl9iaW5kQ2xvc2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2QucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZpbGVCcm93c2VyUGx1Z2luLl9iaW5kQ2xvc2UpO1xyXG4gICAgICAgICAgICAgICAgZmlsZUJyb3dzZXJQbHVnaW4uX2JpbmRDbG9zZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVCcm93c2VyQ29udGV4dCA9IHRoaXMuY29udGV4dC5maWxlQnJvd3NlcjtcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LmFyZWEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LnNlbGVjdG9ySGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5zZWxlY3RlZFRhZ3MgPSBbXTtcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0Lml0ZW1zID0gW107XHJcbiAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5saXN0LmlubmVySFRNTCA9IGZpbGVCcm93c2VyQ29udGV4dC50YWdBcmVhLmlubmVySFRNTCA9IGZpbGVCcm93c2VyQ29udGV4dC50aXRsZUFyZWEudGV4dENvbnRlbnQgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wbHVnaW5zW2ZpbGVCcm93c2VyQ29udGV4dC5jb250ZXh0UGx1Z2luXS5pbml0ID09PSAnZnVuY3Rpb24nKSB0aGlzLnBsdWdpbnNbZmlsZUJyb3dzZXJDb250ZXh0LmNvbnRleHRQbHVnaW5dLmluaXQuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LmNvbnRleHRQbHVnaW4gPSAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyBmaWxlIGJyb3dzZXIgbG9hZGluZyBib3hcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93QnJvd3NlckxvYWRpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fbG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xvc2UgZmlsZSBicm93c2VyIGxvYWRpbmcgYm94XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xvc2VCcm93c2VyTG9hZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2RyYXdGaWxlTGlzdDogZnVuY3Rpb24gKHVybCwgYnJvd3NlckhlYWRlcikge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlQnJvd3NlclBsdWdpbiA9IHRoaXMucGx1Z2lucy5maWxlQnJvd3NlcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHhtbEh0dHAgPSBmaWxlQnJvd3NlclBsdWdpbi5feG1sSHR0cCA9IHRoaXMudXRpbC5nZXRYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZpbGVCcm93c2VyUGx1Z2luLl9jYWxsQmFja0dldC5iaW5kKHRoaXMsIHhtbEh0dHApO1xyXG4gICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ2dldCcsIHVybCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmKGJyb3dzZXJIZWFkZXIgIT09IG51bGwgJiYgdHlwZW9mIGJyb3dzZXJIZWFkZXIgPT09ICdvYmplY3QnICYmIHRoaXMuX3cuT2JqZWN0LmtleXMoYnJvd3NlckhlYWRlcikubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGtleSBpbiBicm93c2VySGVhZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBicm93c2VySGVhZGVyW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHhtbEh0dHAuc2VuZChudWxsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5zaG93QnJvd3NlckxvYWRpbmcoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY2FsbEJhY2tHZXQ6IGZ1bmN0aW9uICh4bWxIdHRwKSB7XHJcbiAgICAgICAgICAgIGlmICh4bWxIdHRwLnJlYWR5U3RhdGUgPT09IDQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5feG1sSHR0cCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoeG1sSHR0cC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnJlc3VsdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXIuX2RyYXdMaXN0SXRlbS5jYWxsKHRoaXMsIHJlcy5yZXN1bHQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5udWxsTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyLmxpc3QuaW5uZXJIVE1MID0gcmVzLm51bGxNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5maWxlQnJvd3Nlci5kcmF3TGlzdC5mYWlsXSBjYXVzZSA6IFwiJyArIGUubWVzc2FnZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5jbG9zZUJyb3dzZXJMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxlQnJvd3Nlci5ib2R5LnN0eWxlLm1heEhlaWdodCA9ICh0aGlzLl93LmlubmVySGVpZ2h0IC0gdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyLmhlYWRlci5vZmZzZXRIZWlnaHQgLSA1MCkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGV4Y2VwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5jbG9zZUJyb3dzZXJMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhtbEh0dHAuc3RhdHVzICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9ICF4bWxIdHRwLnJlc3BvbnNlVGV4dCA/IHhtbEh0dHAgOiBKU09OLnBhcnNlKHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gJ1tTVU5FRElUT1IuZmlsZUJyb3dzZXIuZ2V0LnNlcnZlckV4Y2VwdGlvbl0gc3RhdHVzOiAnICsgeG1sSHR0cC5zdGF0dXMgKyAnLCByZXNwb25zZTogJyArIChyZXMuZXJyb3JNZXNzYWdlIHx8IHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZHJhd0xpc3RJdGVtOiBmdW5jdGlvbiAoaXRlbXMsIHVwZGF0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlQnJvd3NlckNvbnRleHQgPSB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbkNvbnRleHQgPSB0aGlzLmNvbnRleHRbZmlsZUJyb3dzZXJDb250ZXh0LmNvbnRleHRQbHVnaW5dO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgX3RhZ3MgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgbGVuID0gaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5TaXplID0gcGx1Z2luQ29udGV4dC5jb2x1bW5TaXplIHx8IGZpbGVCcm93c2VyQ29udGV4dC5jb2x1bW5TaXplO1xyXG4gICAgICAgICAgICBjb25zdCBzcGxpdFNpemUgPSBjb2x1bW5TaXplIDw9IDEgPyAxIDogKE1hdGgucm91bmQobGVuL2NvbHVtblNpemUpIHx8IDEpO1xyXG4gICAgICAgICAgICBjb25zdCBkcmF3SXRlbUhhbmRsZXIgPSBwbHVnaW5Db250ZXh0Lml0ZW1UZW1wbGF0ZUhhbmRsZXI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgdGFnc0hUTUwgPSAnJztcclxuICAgICAgICAgICAgbGV0IGxpc3RIVE1MID0gJzxkaXYgY2xhc3M9XCJzZS1maWxlLWl0ZW0tY29sdW1uXCI+JztcclxuICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSAxO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaXRlbSwgdGFnczsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICB0YWdzID0gIWl0ZW0udGFnID8gW10gOiB0eXBlb2YgaXRlbS50YWcgPT09ICdzdHJpbmcnID8gaXRlbS50YWcuc3BsaXQoJywnKSA6IGl0ZW0udGFnO1xyXG4gICAgICAgICAgICAgICAgdGFncyA9IGl0ZW0udGFnID0gdGFncy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYudHJpbSgpOyB9KTtcclxuICAgICAgICAgICAgICAgIGxpc3RIVE1MICs9IGRyYXdJdGVtSGFuZGxlcihpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKGkgKyAxKSAlIHNwbGl0U2l6ZSA9PT0gMCAmJiBjb2x1bW5zIDwgY29sdW1uU2l6ZSAmJiAoaSArIDEpIDwgbGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucysrO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RIVE1MICs9ICc8L2Rpdj48ZGl2IGNsYXNzPVwic2UtZmlsZS1pdGVtLWNvbHVtblwiPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGUgJiYgdGFncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IDAsIHRMZW4gPSB0YWdzLmxlbmd0aCwgdGFnOyB0IDwgdExlbjsgdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZyA9IHRhZ3NbdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWcgJiYgX3RhZ3MuaW5kZXhPZih0YWcpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RhZ3MucHVzaCh0YWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnc0hUTUwgKz0gJzxhIHRpdGxlPVwiJyArIHRhZyArICdcIiBhcmlhLWxhYmVsPVwiJyArIHRhZyArICdcIj4nICsgdGFnICsgJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxpc3RIVE1MICs9ICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0Lmxpc3QuaW5uZXJIVE1MID0gbGlzdEhUTUw7XHJcblxyXG4gICAgICAgICAgICBpZiAodXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuaXRlbXMgPSBpdGVtcztcclxuICAgICAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC50YWdBcmVhLmlubmVySFRNTCA9IHRhZ3NIVE1MO1xyXG4gICAgICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LnRhZ0VsZW1lbnRzID0gZmlsZUJyb3dzZXJDb250ZXh0LnRhZ0FyZWEucXVlcnlTZWxlY3RvckFsbCgnQScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25DbGlja1RhZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy51dGlsLmlzQW5jaG9yKHRhcmdldCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSB0YXJnZXQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVCcm93c2VyUGx1Z2luID0gdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyO1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlQnJvd3NlckNvbnRleHQgPSB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXI7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RUYWcgPSBmaWxlQnJvd3NlckNvbnRleHQudGFnQXJlYS5xdWVyeVNlbGVjdG9yKCdhW3RpdGxlPVwiJyArIHRhZ05hbWUgKyAnXCJdJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVGFncyA9IGZpbGVCcm93c2VyQ29udGV4dC5zZWxlY3RlZFRhZ3M7XHJcbiAgICAgICAgICAgIGNvbnN0IHNUYWdJbmRleCA9IHNlbGVjdGVkVGFncy5pbmRleE9mKHRhZ05hbWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNUYWdJbmRleCA+IC0xKXtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFncy5zcGxpY2Uoc1RhZ0luZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhzZWxlY3RUYWcsICdvbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWdzLnB1c2godGFnTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3Moc2VsZWN0VGFnLCAnb24nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJQbHVnaW4uX2RyYXdMaXN0SXRlbS5jYWxsKHRoaXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFRhZ3MubGVuZ3RoID09PSAwID9cclxuICAgICAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5pdGVtcyA6XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udGFnLnNvbWUoZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRUYWdzLmluZGV4T2YodGFnKSA+IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSksIGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrRmlsZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZUJyb3dzZXJDb250ZXh0ID0gdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyO1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0RWwgPSBmaWxlQnJvd3NlckNvbnRleHQubGlzdDtcclxuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICBsZXQgY29tbWFuZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBsaXN0RWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChsaXN0RWwgIT09IHRhcmdldC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gKGZpbGVCcm93c2VyQ29udGV4dC5zZWxlY3RvckhhbmRsZXIgfHwgdGhpcy5jb250ZXh0W2ZpbGVCcm93c2VyQ29udGV4dC5jb250ZXh0UGx1Z2luXS5zZWxlY3RvckhhbmRsZXIpO1xyXG4gICAgICAgICAgICBoYW5kbGVyKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLl9fc2VfX2ltZ19uYW1lJykudGV4dENvbnRlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXIuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0eXBlb2Ygbm9HbG9iYWwgPT09IHR5cGVvZiB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5TVU5FRElUT1JfTU9EVUxFUykge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnU1VORURJVE9SX01PRFVMRVMnLCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1VORURJVE9SX01PRFVMRVMsICdmaWxlQnJvd3NlcicsIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB2YWx1ZTogZmlsZUJyb3dzZXJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmlsZUJyb3dzZXI7XHJcbn0pKTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xyXG4gICAgICAgICAgICBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOlxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF3LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVU5FRElUT1JfTEFORyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGdsb2JhbCk7XHJcbiAgICB9XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xyXG4gICAgY29uc3QgbGFuZyA9IHtcclxuICAgICAgICBjb2RlOiAnZW4nLFxyXG4gICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogJ0RlZmF1bHQnLFxyXG4gICAgICAgICAgICBzYXZlOiAnU2F2ZScsXHJcbiAgICAgICAgICAgIGZvbnQ6ICdGb250JyxcclxuICAgICAgICAgICAgZm9ybWF0czogJ0Zvcm1hdHMnLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogJ1NpemUnLFxyXG4gICAgICAgICAgICBib2xkOiAnQm9sZCcsXHJcbiAgICAgICAgICAgIHVuZGVybGluZTogJ1VuZGVybGluZScsXHJcbiAgICAgICAgICAgIGl0YWxpYzogJ0l0YWxpYycsXHJcbiAgICAgICAgICAgIHN0cmlrZTogJ1N0cmlrZScsXHJcbiAgICAgICAgICAgIHN1YnNjcmlwdDogJ1N1YnNjcmlwdCcsXHJcbiAgICAgICAgICAgIHN1cGVyc2NyaXB0OiAnU3VwZXJzY3JpcHQnLFxyXG4gICAgICAgICAgICByZW1vdmVGb3JtYXQ6ICdSZW1vdmUgRm9ybWF0JyxcclxuICAgICAgICAgICAgZm9udENvbG9yOiAnRm9udCBDb2xvcicsXHJcbiAgICAgICAgICAgIGhpbGl0ZUNvbG9yOiAnSGlnaGxpZ2h0IENvbG9yJyxcclxuICAgICAgICAgICAgaW5kZW50OiAnSW5kZW50JyxcclxuICAgICAgICAgICAgb3V0ZGVudDogJ091dGRlbnQnLFxyXG4gICAgICAgICAgICBhbGlnbjogJ0FsaWduJyxcclxuICAgICAgICAgICAgYWxpZ25MZWZ0OiAnQWxpZ24gbGVmdCcsXHJcbiAgICAgICAgICAgIGFsaWduUmlnaHQ6ICdBbGlnbiByaWdodCcsXHJcbiAgICAgICAgICAgIGFsaWduQ2VudGVyOiAnQWxpZ24gY2VudGVyJyxcclxuICAgICAgICAgICAgYWxpZ25KdXN0aWZ5OiAnQWxpZ24ganVzdGlmeScsXHJcbiAgICAgICAgICAgIGxpc3Q6ICdMaXN0JyxcclxuICAgICAgICAgICAgb3JkZXJMaXN0OiAnT3JkZXJlZCBsaXN0JyxcclxuICAgICAgICAgICAgdW5vcmRlckxpc3Q6ICdVbm9yZGVyZWQgbGlzdCcsXHJcbiAgICAgICAgICAgIGhvcml6b250YWxSdWxlOiAnSG9yaXpvbnRhbCBsaW5lJyxcclxuICAgICAgICAgICAgaHJfc29saWQ6ICdTb2xpZCcsXHJcbiAgICAgICAgICAgIGhyX2RvdHRlZDogJ0RvdHRlZCcsXHJcbiAgICAgICAgICAgIGhyX2Rhc2hlZDogJ0Rhc2hlZCcsXHJcbiAgICAgICAgICAgIHRhYmxlOiAnVGFibGUnLFxyXG4gICAgICAgICAgICBsaW5rOiAnTGluaycsXHJcbiAgICAgICAgICAgIG1hdGg6ICdNYXRoJyxcclxuICAgICAgICAgICAgaW1hZ2U6ICdJbWFnZScsXHJcbiAgICAgICAgICAgIHZpZGVvOiAnVmlkZW8nLFxyXG4gICAgICAgICAgICBhdWRpbzogJ0F1ZGlvJyxcclxuICAgICAgICAgICAgZnVsbFNjcmVlbjogJ0Z1bGwgc2NyZWVuJyxcclxuICAgICAgICAgICAgc2hvd0Jsb2NrczogJ1Nob3cgYmxvY2tzJyxcclxuICAgICAgICAgICAgY29kZVZpZXc6ICdDb2RlIHZpZXcnLFxyXG4gICAgICAgICAgICB1bmRvOiAnVW5kbycsXHJcbiAgICAgICAgICAgIHJlZG86ICdSZWRvJyxcclxuICAgICAgICAgICAgcHJldmlldzogJ1ByZXZpZXcnLFxyXG4gICAgICAgICAgICBwcmludDogJ3ByaW50JyxcclxuICAgICAgICAgICAgdGFnX3A6ICdQYXJhZ3JhcGgnLFxyXG4gICAgICAgICAgICB0YWdfZGl2OiAnTm9ybWFsIChESVYpJyxcclxuICAgICAgICAgICAgdGFnX2g6ICdIZWFkZXInLFxyXG4gICAgICAgICAgICB0YWdfYmxvY2txdW90ZTogJ1F1b3RlJyxcclxuICAgICAgICAgICAgdGFnX3ByZTogJ0NvZGUnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ1RlbXBsYXRlJyxcclxuICAgICAgICAgICAgbGluZUhlaWdodDogJ0xpbmUgaGVpZ2h0JyxcclxuICAgICAgICAgICAgcGFyYWdyYXBoU3R5bGU6ICdQYXJhZ3JhcGggc3R5bGUnLFxyXG4gICAgICAgICAgICB0ZXh0U3R5bGU6ICdUZXh0IHN0eWxlJyxcclxuICAgICAgICAgICAgaW1hZ2VHYWxsZXJ5OiAnSW1hZ2UgZ2FsbGVyeScsXHJcbiAgICAgICAgICAgIGRpcl9sdHI6ICdMZWZ0IHRvIHJpZ2h0JyxcclxuICAgICAgICAgICAgZGlyX3J0bDogJ1JpZ2h0IHRvIGxlZnQnLFxyXG4gICAgICAgICAgICBtZW50aW9uOiAnTWVudGlvbidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRpYWxvZ0JveDoge1xyXG4gICAgICAgICAgICBsaW5rQm94OiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0luc2VydCBMaW5rJyxcclxuICAgICAgICAgICAgICAgIHVybDogJ1VSTCB0byBsaW5rJyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdUZXh0IHRvIGRpc3BsYXknLFxyXG4gICAgICAgICAgICAgICAgbmV3V2luZG93Q2hlY2s6ICdPcGVuIGluIG5ldyB3aW5kb3cnLFxyXG4gICAgICAgICAgICAgICAgZG93bmxvYWRMaW5rQ2hlY2s6ICdEb3dubG9hZCBsaW5rJyxcclxuICAgICAgICAgICAgICAgIGJvb2ttYXJrOiAnQm9va21hcmsnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1hdGhCb3g6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnTWF0aCcsXHJcbiAgICAgICAgICAgICAgICBpbnB1dExhYmVsOiAnTWF0aGVtYXRpY2FsIE5vdGF0aW9uJyxcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplTGFiZWw6ICdGb250IFNpemUnLFxyXG4gICAgICAgICAgICAgICAgcHJldmlld0xhYmVsOiAnUHJldmlldydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1hZ2VCb3g6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJ0IGltYWdlJyxcclxuICAgICAgICAgICAgICAgIGZpbGU6ICdTZWxlY3QgZnJvbSBmaWxlcycsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICdJbWFnZSBVUkwnLFxyXG4gICAgICAgICAgICAgICAgYWx0VGV4dDogJ0FsdGVybmF0aXZlIHRleHQnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHZpZGVvQm94OiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0luc2VydCBWaWRlbycsXHJcbiAgICAgICAgICAgICAgICBmaWxlOiAnU2VsZWN0IGZyb20gZmlsZXMnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnTWVkaWEgZW1iZWQgVVJMLCBZb3VUdWJlL1ZpbWVvJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhdWRpb0JveDoge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdJbnNlcnQgQXVkaW8nLFxyXG4gICAgICAgICAgICAgICAgZmlsZTogJ1NlbGVjdCBmcm9tIGZpbGVzJyxcclxuICAgICAgICAgICAgICAgIHVybDogJ0F1ZGlvIFVSTCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYnJvd3Nlcjoge1xyXG4gICAgICAgICAgICAgICAgdGFnczogJ1RhZ3MnLFxyXG4gICAgICAgICAgICAgICAgc2VhcmNoOiAnU2VhcmNoJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2FwdGlvbjogJ0luc2VydCBkZXNjcmlwdGlvbicsXHJcbiAgICAgICAgICAgIGNsb3NlOiAnQ2xvc2UnLFxyXG4gICAgICAgICAgICBzdWJtaXRCdXR0b246ICdTdWJtaXQnLFxyXG4gICAgICAgICAgICByZXZlcnRCdXR0b246ICdSZXZlcnQnLFxyXG4gICAgICAgICAgICBwcm9wb3J0aW9uOiAnQ29uc3RyYWluIHByb3BvcnRpb25zJyxcclxuICAgICAgICAgICAgYmFzaWM6ICdCYXNpYycsXHJcbiAgICAgICAgICAgIGxlZnQ6ICdMZWZ0JyxcclxuICAgICAgICAgICAgcmlnaHQ6ICdSaWdodCcsXHJcbiAgICAgICAgICAgIGNlbnRlcjogJ0NlbnRlcicsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnV2lkdGgnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICdIZWlnaHQnLFxyXG4gICAgICAgICAgICBzaXplOiAnU2l6ZScsXHJcbiAgICAgICAgICAgIHJhdGlvOiAnUmF0aW8nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiB7XHJcbiAgICAgICAgICAgIGVkaXQ6ICdFZGl0JyxcclxuICAgICAgICAgICAgdW5saW5rOiAnVW5saW5rJyxcclxuICAgICAgICAgICAgcmVtb3ZlOiAnUmVtb3ZlJyxcclxuICAgICAgICAgICAgaW5zZXJ0Um93QWJvdmU6ICdJbnNlcnQgcm93IGFib3ZlJyxcclxuICAgICAgICAgICAgaW5zZXJ0Um93QmVsb3c6ICdJbnNlcnQgcm93IGJlbG93JyxcclxuICAgICAgICAgICAgZGVsZXRlUm93OiAnRGVsZXRlIHJvdycsXHJcbiAgICAgICAgICAgIGluc2VydENvbHVtbkJlZm9yZTogJ0luc2VydCBjb2x1bW4gYmVmb3JlJyxcclxuICAgICAgICAgICAgaW5zZXJ0Q29sdW1uQWZ0ZXI6ICdJbnNlcnQgY29sdW1uIGFmdGVyJyxcclxuICAgICAgICAgICAgZGVsZXRlQ29sdW1uOiAnRGVsZXRlIGNvbHVtbicsXHJcbiAgICAgICAgICAgIGZpeGVkQ29sdW1uV2lkdGg6ICdGaXhlZCBjb2x1bW4gd2lkdGgnLFxyXG4gICAgICAgICAgICByZXNpemUxMDA6ICdSZXNpemUgMTAwJScsXHJcbiAgICAgICAgICAgIHJlc2l6ZTc1OiAnUmVzaXplIDc1JScsXHJcbiAgICAgICAgICAgIHJlc2l6ZTUwOiAnUmVzaXplIDUwJScsXHJcbiAgICAgICAgICAgIHJlc2l6ZTI1OiAnUmVzaXplIDI1JScsXHJcbiAgICAgICAgICAgIGF1dG9TaXplOiAnQXV0byBzaXplJyxcclxuICAgICAgICAgICAgbWlycm9ySG9yaXpvbnRhbDogJ01pcnJvciwgSG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgIG1pcnJvclZlcnRpY2FsOiAnTWlycm9yLCBWZXJ0aWNhbCcsXHJcbiAgICAgICAgICAgIHJvdGF0ZUxlZnQ6ICdSb3RhdGUgbGVmdCcsXHJcbiAgICAgICAgICAgIHJvdGF0ZVJpZ2h0OiAnUm90YXRlIHJpZ2h0JyxcclxuICAgICAgICAgICAgbWF4U2l6ZTogJ01heCBzaXplJyxcclxuICAgICAgICAgICAgbWluU2l6ZTogJ01pbiBzaXplJyxcclxuICAgICAgICAgICAgdGFibGVIZWFkZXI6ICdUYWJsZSBoZWFkZXInLFxyXG4gICAgICAgICAgICBtZXJnZUNlbGxzOiAnTWVyZ2UgY2VsbHMnLFxyXG4gICAgICAgICAgICBzcGxpdENlbGxzOiAnU3BsaXQgQ2VsbHMnLFxyXG4gICAgICAgICAgICBIb3Jpem9udGFsU3BsaXQ6ICdIb3Jpem9udGFsIHNwbGl0JyxcclxuICAgICAgICAgICAgVmVydGljYWxTcGxpdDogJ1ZlcnRpY2FsIHNwbGl0J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWVudToge1xyXG4gICAgICAgICAgICBzcGFjZWQ6ICdTcGFjZWQnLFxyXG4gICAgICAgICAgICBib3JkZXJlZDogJ0JvcmRlcmVkJyxcclxuICAgICAgICAgICAgbmVvbjogJ05lb24nLFxyXG4gICAgICAgICAgICB0cmFuc2x1Y2VudDogJ1RyYW5zbHVjZW50JyxcclxuICAgICAgICAgICAgc2hhZG93OiAnU2hhZG93JyxcclxuICAgICAgICAgICAgY29kZTogJ0NvZGUnXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG5vR2xvYmFsID09PSB0eXBlb2YgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX0xBTkcpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9MQU5HJywge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZToge31cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9MQU5HLCAnZW4nLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBsYW5nXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxhbmc7XHJcbn0pKTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE4IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2NvbG9yUGlja2VyJyxcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdCBcclxuICAgICAqL1xyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5jb2xvclBpY2tlciA9IHtcclxuICAgICAgICAgICAgY29sb3JMaXN0SFRNTDogJycsXHJcbiAgICAgICAgICAgIF9jb2xvcklucHV0OiAnJyxcclxuICAgICAgICAgICAgX2RlZmF1bHRDb2xvcjogJyMwMDAnLFxyXG4gICAgICAgICAgICBfc3R5bGVQcm9wZXJ0eTogJ2NvbG9yJyxcclxuICAgICAgICAgICAgX2N1cnJlbnRDb2xvcjogJycsXHJcbiAgICAgICAgICAgIF9jb2xvckxpc3Q6IFtdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgY29udGV4dC5jb2xvclBpY2tlci5jb2xvckxpc3RIVE1MID0gdGhpcy5jcmVhdGVDb2xvckxpc3QoY29yZSwgdGhpcy5fbWFrZUNvbG9yTGlzdCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSBjb2xvciBsaXN0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdCBcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1ha2VDb2xvciB0aGlzLl9tYWtlQ29sb3JMaXN0XHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBIVE1MIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBjcmVhdGVDb2xvckxpc3Q6IGZ1bmN0aW9uIChjb3JlLCBtYWtlQ29sb3IpIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBjb2xvckxpc3QgPSAhb3B0aW9uLmNvbG9yTGlzdCB8fCBvcHRpb24uY29sb3JMaXN0Lmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICcjZmYwMDAwJywgJyNmZjVlMDAnLCAnI2ZmZTQwMCcsICcjYWJmMjAwJywgJyMwMGQ4ZmYnLCAnIzAwNTVmZicsICcjNjYwMGZmJywgJyNmZjAwZGQnLCAnIzAwMDAwMCcsXHJcbiAgICAgICAgICAgICAgICAnI2ZmZDhkOCcsICcjZmFlMGQ0JywgJyNmYWY0YzAnLCAnI2U0ZjdiYScsICcjZDRmNGZhJywgJyNkOWU1ZmYnLCAnI2U4ZDlmZicsICcjZmZkOWZhJywgJyNmMWYxZjEnLFxyXG4gICAgICAgICAgICAgICAgJyNmZmE3YTcnLCAnI2ZmYzE5ZScsICcjZmFlZDdkJywgJyNjZWYyNzknLCAnI2IyZWJmNCcsICcjYjJjY2ZmJywgJyNkMWIyZmYnLCAnI2ZmYjJmNScsICcjYmRiZGJkJyxcclxuICAgICAgICAgICAgICAgICcjZjE1ZjVmJywgJyNmMjk2NjEnLCAnI2U1ZDg1YycsICcjYmNlNTVjJywgJyM1Y2QxZTUnLCAnIzY2OTlmZicsICcjYTM2NmZmJywgJyNmMjYxZGYnLCAnIzhjOGM4YycsXHJcbiAgICAgICAgICAgICAgICAnIzk4MDAwMCcsICcjOTkzODAwJywgJyM5OThhMDAnLCAnIzZiOTkwMCcsICcjMDA4Mjk5JywgJyMwMDMzOTknLCAnIzNkMDA5OScsICcjOTkwMDg1JywgJyMzNTM1MzUnLFxyXG4gICAgICAgICAgICAgICAgJyM2NzAwMDAnLCAnIzY2MjUwMCcsICcjNjY1YzAwJywgJyM0NzY2MDAnLCAnIzAwNTc2NicsICcjMDAyMjY2JywgJyMyOTAwNjYnLCAnIzY2MDA1OCcsICcjMjIyMjIyJ1xyXG4gICAgICAgICAgICBdIDogb3B0aW9uLmNvbG9yTGlzdDtcclxuXHJcbiAgICAgICAgbGV0IGNvbG9yQXJyID0gW107XHJcbiAgICAgICAgbGV0IGxpc3QgPSAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj4nO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY29sb3JMaXN0Lmxlbmd0aCwgY29sb3I7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBjb2xvckxpc3RbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbG9yKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvckFyci5wdXNoKGNvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IGxlbiAtIDEpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbG9yQXJyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ICs9ICc8ZGl2IGNsYXNzPVwic2Utc2VsZWN0b3ItY29sb3JcIj4nICsgbWFrZUNvbG9yKGNvbG9yQXJyKSArICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQXJyID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbG9yID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgKz0gJzxkaXYgY2xhc3M9XCJzZS1zZWxlY3Rvci1jb2xvclwiPicgKyBtYWtlQ29sb3IoY29sb3IpICsgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGlzdCArPSAnJyArXHJcbiAgICAgICAgICAgICc8Zm9ybSBjbGFzcz1cInNlLWZvcm0tZ3JvdXBcIj4nICtcclxuICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInRleHRcIiBtYXhsZW5ndGg9XCI5XCIgY2xhc3M9XCJfc2VfY29sb3JfcGlja2VyX2lucHV0IHNlLWNvbG9yLWlucHV0XCIvPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwic2UtYnRuLXByaW1hcnkgX3NlX2NvbG9yX3BpY2tlcl9zdWJtaXRcIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5jaGVja2VkICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0biBfc2VfY29sb3JfcGlja2VyX3JlbW92ZVwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci5yZW1vdmVGb3JtYXQgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLnRvb2xiYXIucmVtb3ZlRm9ybWF0ICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMuZXJhc2UgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAnPC9mb3JtPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEludGVybmFsIGZ1bmN0aW9uIHVzZWQgYnkgdGhpcy5jcmVhdGVDb2xvckxpc3RcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbG9yTGlzdCBDb2xvciBsaXN0XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbWFrZUNvbG9yTGlzdDogZnVuY3Rpb24gKGNvbG9yTGlzdCkge1xyXG4gICAgICAgIGxldCBsaXN0ID0gJyc7XHJcblxyXG4gICAgICAgIGxpc3QgKz0gJzx1bCBjbGFzcz1cInNlLWNvbG9yLXBhbGxldFwiPic7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNvbG9yTGlzdC5sZW5ndGgsIGNvbG9yOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY29sb3IgPSBjb2xvckxpc3RbaV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0ICs9ICc8bGk+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS12YWx1ZT1cIicgKyBjb2xvciArICdcIiB0aXRsZT1cIicgKyBjb2xvciArICdcIiBhcmlhLWxhYmVsPVwiJyArIGNvbG9yICsgJ1wiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonICsgY29sb3IgKyAnO1wiPjwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9saT4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QgKz0gJzwvdWw+JztcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEaXNwbGF5cyBvciByZXNldHMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBjb2xvciBhdCBjb2xvciBsaXN0LlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIEN1cnJlbnQgU2VsZWN0ZWQgbm9kZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gY29sb3IgQ29sb3IgdmFsdWVcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKG5vZGUsIGNvbG9yKSB7XHJcbiAgICAgICAgY29uc3QgY29sb3JQaWNrZXIgPSB0aGlzLnBsdWdpbnMuY29sb3JQaWNrZXI7XHJcbiAgICAgICAgbGV0IGZpbGxDb2xvciA9IGNvbG9yID8gY29sb3IgOiBjb2xvclBpY2tlci5nZXRDb2xvckluTm9kZS5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXMuY29udGV4dC5jb2xvclBpY2tlci5fZGVmYXVsdENvbG9yO1xyXG4gICAgICAgIGZpbGxDb2xvciA9IGNvbG9yUGlja2VyLmlzSGV4Q29sb3IoZmlsbENvbG9yKSA/IGZpbGxDb2xvciA6IGNvbG9yUGlja2VyLnJnYjJoZXgoZmlsbENvbG9yKSB8fCBmaWxsQ29sb3I7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbG9yTGlzdCA9IHRoaXMuY29udGV4dC5jb2xvclBpY2tlci5fY29sb3JMaXN0O1xyXG4gICAgICAgIGlmIChjb2xvckxpc3QpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNvbG9yTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGxDb2xvci50b0xvd2VyQ2FzZSgpID09PSBjb2xvckxpc3RbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhjb2xvckxpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGNvbG9yTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb2xvclBpY2tlci5zZXRJbnB1dFRleHQuY2FsbCh0aGlzLCBjb2xvclBpY2tlci5jb2xvck5hbWUyaGV4LmNhbGwodGhpcywgZmlsbENvbG9yKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFN0b3JlIGNvbG9yIHZhbHVlc1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGhleENvbG9yU3RyIEhheCBjb2xvciB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRDdXJyZW50Q29sb3I6IGZ1bmN0aW9uIChoZXhDb2xvclN0cikge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5jb2xvclBpY2tlci5fY3VycmVudENvbG9yID0gaGV4Q29sb3JTdHI7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmNvbG9yUGlja2VyLl9jb2xvcklucHV0LnN0eWxlLmJvcmRlckNvbG9yID0gaGV4Q29sb3JTdHI7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFNldCBjb2xvciBhdCBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaGV4Q29sb3JTdHIgSGF4IGNvbG9yIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldElucHV0VGV4dDogZnVuY3Rpb24gKGhleENvbG9yU3RyKSB7XHJcbiAgICAgICAgaGV4Q29sb3JTdHIgPSAvXiMvLnRlc3QoaGV4Q29sb3JTdHIpID8gaGV4Q29sb3JTdHIgOiAnIycgKyBoZXhDb2xvclN0cjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY29sb3JQaWNrZXIuX2NvbG9ySW5wdXQudmFsdWUgPSBoZXhDb2xvclN0cjtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuY29sb3JQaWNrZXIuc2V0Q3VycmVudENvbG9yLmNhbGwodGhpcywgaGV4Q29sb3JTdHIpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIGNvbG9yIHZhbHVlIGF0IGNvbG9yIHByb3BlcnR5IG9mIG5vZGVcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBTZWxlY3RlZCBub2RlIFxyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0Q29sb3JJbk5vZGU6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgbGV0IGZpbmRDb2xvciA9ICcnO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlUHJvcGVydHkgPSB0aGlzLmNvbnRleHQuY29sb3JQaWNrZXIuX3N0eWxlUHJvcGVydHk7XHJcblxyXG4gICAgICAgIHdoaWxlIChub2RlICYmICF0aGlzLnV0aWwuaXNXeXNpd3lnRGl2KG5vZGUpICYmIGZpbmRDb2xvci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgbm9kZS5zdHlsZVtzdHlsZVByb3BlcnR5XSkgZmluZENvbG9yID0gbm9kZS5zdHlsZVtzdHlsZVByb3BlcnR5XTtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaW5kQ29sb3I7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRvIGNoZWNrIGhleCBmb3JtYXQgY29sb3JcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgQ29sb3IgdmFsdWVcclxuICAgICAqL1xyXG4gICAgaXNIZXhDb2xvcjogZnVuY3Rpb24gKHN0cikge1xyXG4gICAgICAgIHJldHVybiAvXiNbMC05YS1mXXszfSg/OlswLTlhLWZdezN9KT8kL2kudGVzdChzdHIpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBGdW5jdGlvbiB0byBjb252ZXJ0IGhleCBmb3JtYXQgdG8gYSByZ2IgY29sb3JcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZ2IgUkdCIGNvbG9yIGZvcm1hdFxyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmdiMmhleDogZnVuY3Rpb24gKHJnYikge1xyXG4gICAgICAgIGNvbnN0IHJnYk1hdGNoID0gcmdiLm1hdGNoKC9ecmdiYT9bXFxzK10/XFwoW1xccytdPyhcXGQrKVtcXHMrXT8sW1xccytdPyhcXGQrKVtcXHMrXT8sW1xccytdPyhcXGQrKVtcXHMrXT8vaSk7XHJcblxyXG4gICAgICAgIHJldHVybiAocmdiTWF0Y2ggJiYgcmdiTWF0Y2gubGVuZ3RoID09PSA0KSA/IFwiI1wiICtcclxuICAgICAgICAgICAgKFwiMFwiICsgcGFyc2VJbnQocmdiTWF0Y2hbMV0sMTApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpICtcclxuICAgICAgICAgICAgKFwiMFwiICsgcGFyc2VJbnQocmdiTWF0Y2hbMl0sMTApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpICtcclxuICAgICAgICAgICAgKFwiMFwiICsgcGFyc2VJbnQocmdiTWF0Y2hbM10sMTApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpIDogJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIGNvbG9yIHZhbHVlcyBvZiBvdGhlciBmb3JtYXRzIHRvIGhleCBjb2xvciB2YWx1ZXMgYW5kIHJldHVybnMuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3JOYW1lIENvbG9yIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBjb2xvck5hbWUyaGV4OiBmdW5jdGlvbiAoY29sb3JOYW1lKSB7XHJcbiAgICAgICAgaWYgKC9eIy8udGVzdChjb2xvck5hbWUpKSByZXR1cm4gY29sb3JOYW1lO1xyXG4gICAgICAgIHZhciB0ZW1wID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRlbXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0ZW1wLnN0eWxlLmNvbG9yID0gY29sb3JOYW1lO1xyXG4gICAgICAgIHZhciBjb2xvcnMgPSB0aGlzLl93LmdldENvbXB1dGVkU3R5bGUodGhpcy5fZC5ib2R5LmFwcGVuZENoaWxkKHRlbXApKS5jb2xvci5tYXRjaCgvXFxkKy9nKS5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHBhcnNlSW50KGEsMTApOyB9KTtcclxuICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbSh0ZW1wKTtcclxuICAgICAgICByZXR1cm4gKGNvbG9ycy5sZW5ndGggPj0gMykgPyAnIycgKyAoKCgxIDw8IDI0KSArIChjb2xvcnNbMF0gPDwgMTYpICsgKGNvbG9yc1sxXSA8PCA4KSArIGNvbG9yc1syXSkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSkgOiBmYWxzZTtcclxuICAgIH1cclxufTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IGNvbG9yUGlja2VyIGZyb20gJy4uL21vZHVsZXMvX2NvbG9yUGlja2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdmb250Q29sb3InLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvcmUuYWRkTW9kdWxlKFtjb2xvclBpY2tlcl0pO1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQuZm9udENvbG9yID0ge1xyXG4gICAgICAgICAgICBwcmV2aWV3RWw6IG51bGwsXHJcbiAgICAgICAgICAgIGNvbG9ySW5wdXQ6IG51bGwsXHJcbiAgICAgICAgICAgIGNvbG9yTGlzdDogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG4gICAgICAgIGNvbnRleHQuZm9udENvbG9yLmNvbG9ySW5wdXQgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJy5fc2VfY29sb3JfcGlja2VyX2lucHV0Jyk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgY29udGV4dC5mb250Q29sb3IuY29sb3JJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25DaGFuZ2VJbnB1dC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJy5fc2VfY29sb3JfcGlja2VyX3N1Ym1pdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zdWJtaXQuYmluZChjb3JlKSk7XHJcbiAgICAgICAgbGlzdERpdi5xdWVyeVNlbGVjdG9yKCcuX3NlX2NvbG9yX3BpY2tlcl9yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucmVtb3ZlLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGxpc3REaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBjb250ZXh0LmZvbnRDb2xvci5jb2xvckxpc3QgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbG9yQXJlYSA9IGNvcmUuY29udGV4dC5jb2xvclBpY2tlci5jb2xvckxpc3RIVE1MO1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllcic7XHJcbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSBjb2xvckFyZWE7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRQaWNrZXIgPSB0aGlzLmNvbnRleHQuY29sb3JQaWNrZXI7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEZvbnRDb2xvciA9IHRoaXMuY29udGV4dC5mb250Q29sb3I7XHJcblxyXG4gICAgICAgIGNvbnRleHRQaWNrZXIuX2NvbG9ySW5wdXQgPSBjb250ZXh0Rm9udENvbG9yLmNvbG9ySW5wdXQ7XHJcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLnd3Q29tcHV0ZWRTdHlsZS5jb2xvcjtcclxuICAgICAgICBjb250ZXh0UGlja2VyLl9kZWZhdWx0Q29sb3IgPSBjb2xvciA/IHRoaXMucGx1Z2lucy5jb2xvclBpY2tlci5pc0hleENvbG9yKGNvbG9yKSA/IGNvbG9yIDogdGhpcy5wbHVnaW5zLmNvbG9yUGlja2VyLnJnYjJoZXgoY29sb3IpIDogXCIjMzMzMzMzXCI7XHJcbiAgICAgICAgY29udGV4dFBpY2tlci5fc3R5bGVQcm9wZXJ0eSA9ICdjb2xvcic7XHJcbiAgICAgICAgY29udGV4dFBpY2tlci5fY29sb3JMaXN0ID0gY29udGV4dEZvbnRDb2xvci5jb2xvckxpc3Q7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmNvbG9yUGlja2VyLmluaXQuY2FsbCh0aGlzLCB0aGlzLmdldFNlbGVjdGlvbk5vZGUoKSwgbnVsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBfY29sb3JQaWNrZXJcclxuICAgICAqL1xyXG4gICAgb25DaGFuZ2VJbnB1dDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuY29sb3JQaWNrZXIuc2V0Q3VycmVudENvbG9yLmNhbGwodGhpcywgZS50YXJnZXQudmFsdWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzdWJtaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZm9udENvbG9yLmFwcGx5Q29sb3IuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuY29sb3JQaWNrZXIuX2N1cnJlbnRDb2xvcik7XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZvbnRDb2xvci5hcHBseUNvbG9yLmNhbGwodGhpcywgZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykpO1xyXG4gICAgfSxcclxuXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm5vZGVDaGFuZ2UobnVsbCwgWydjb2xvciddLCBbJ3NwYW4nXSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFwcGx5Q29sb3I6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgICAgIGlmICghY29sb3IpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XHJcbiAgICAgICAgbmV3Tm9kZS5zdHlsZS5jb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMubm9kZUNoYW5nZShuZXdOb2RlLCBbJ2NvbG9yJ10sIG51bGwsIG51bGwpO1xyXG5cclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBjb2xvclBpY2tlciBmcm9tICcuLi9tb2R1bGVzL19jb2xvclBpY2tlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnaGlsaXRlQ29sb3InLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvcmUuYWRkTW9kdWxlKFtjb2xvclBpY2tlcl0pO1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQuaGlsaXRlQ29sb3IgPSB7XHJcbiAgICAgICAgICAgIHByZXZpZXdFbDogbnVsbCxcclxuICAgICAgICAgICAgY29sb3JJbnB1dDogbnVsbCxcclxuICAgICAgICAgICAgY29sb3JMaXN0OiBudWxsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcbiAgICAgICAgY29udGV4dC5oaWxpdGVDb2xvci5jb2xvcklucHV0ID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yKCcuX3NlX2NvbG9yX3BpY2tlcl9pbnB1dCcpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGNvbnRleHQuaGlsaXRlQ29sb3IuY29sb3JJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25DaGFuZ2VJbnB1dC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJy5fc2VfY29sb3JfcGlja2VyX3N1Ym1pdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zdWJtaXQuYmluZChjb3JlKSk7XHJcbiAgICAgICAgbGlzdERpdi5xdWVyeVNlbGVjdG9yKCcuX3NlX2NvbG9yX3BpY2tlcl9yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucmVtb3ZlLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGxpc3REaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5oaWxpdGVDb2xvci5jb2xvckxpc3QgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbG9yQXJlYSA9IGNvcmUuY29udGV4dC5jb2xvclBpY2tlci5jb2xvckxpc3RIVE1MO1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllcic7XHJcbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSBjb2xvckFyZWE7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRQaWNrZXIgPSB0aGlzLmNvbnRleHQuY29sb3JQaWNrZXI7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEhpbGl0ZUNvbG9yID0gdGhpcy5jb250ZXh0LmhpbGl0ZUNvbG9yO1xyXG5cclxuICAgICAgICBjb250ZXh0UGlja2VyLl9jb2xvcklucHV0ID0gY29udGV4dEhpbGl0ZUNvbG9yLmNvbG9ySW5wdXQ7XHJcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLnd3Q29tcHV0ZWRTdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgY29udGV4dFBpY2tlci5fZGVmYXVsdENvbG9yID0gY29sb3IgPyB0aGlzLnBsdWdpbnMuY29sb3JQaWNrZXIuaXNIZXhDb2xvcihjb2xvcikgPyBjb2xvciA6IHRoaXMucGx1Z2lucy5jb2xvclBpY2tlci5yZ2IyaGV4KGNvbG9yKSA6IFwiI2ZmZmZmZlwiO1xyXG4gICAgICAgIGNvbnRleHRQaWNrZXIuX3N0eWxlUHJvcGVydHkgPSAnYmFja2dyb3VuZENvbG9yJztcclxuICAgICAgICBjb250ZXh0UGlja2VyLl9jb2xvckxpc3QgPSBjb250ZXh0SGlsaXRlQ29sb3IuY29sb3JMaXN0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5jb2xvclBpY2tlci5pbml0LmNhbGwodGhpcywgdGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCksIG51bGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgX2NvbG9yUGlja2VyXHJcbiAgICAgKi9cclxuICAgIG9uQ2hhbmdlSW5wdXQ6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmNvbG9yUGlja2VyLnNldEN1cnJlbnRDb2xvci5jYWxsKHRoaXMsIGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIH0sXHJcblxyXG4gICAgc3VibWl0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmhpbGl0ZUNvbG9yLmFwcGx5Q29sb3IuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuY29sb3JQaWNrZXIuX2N1cnJlbnRDb2xvcik7XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmhpbGl0ZUNvbG9yLmFwcGx5Q29sb3IuY2FsbCh0aGlzLCBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubm9kZUNoYW5nZShudWxsLCBbJ2JhY2tncm91bmQtY29sb3InXSwgWydzcGFuJ10sIHRydWUpO1xyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgfSxcclxuXHJcbiAgICBhcHBseUNvbG9yOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgICAgICBpZiAoIWNvbG9yKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XHJcbiAgICAgICAgbmV3Tm9kZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLm5vZGVDaGFuZ2UobmV3Tm9kZSwgWydiYWNrZ3JvdW5kLWNvbG9yJ10sIG51bGwsIG51bGwpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ3RlbXBsYXRlJyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQudGVtcGxhdGUgPSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IC0xXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IHRlbXBsYXRlRGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIHRlbXBsYXRlRGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgdGVtcGxhdGVEaXYpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgdGVtcGxhdGVEaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlTGlzdCA9IGNvcmUub3B0aW9ucy50ZW1wbGF0ZXM7XHJcbiAgICAgICAgaWYgKCF0ZW1wbGF0ZUxpc3QgfHwgdGVtcGxhdGVMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5wbHVnaW5zLnRlbXBsYXRlLmZhaWxdIFRvIHVzZSB0aGUgXCJ0ZW1wbGF0ZVwiIHBsdWdpbiwgcGxlYXNlIGRlZmluZSB0aGUgXCJ0ZW1wbGF0ZXNcIiBvcHRpb24uJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLWxpc3QtbGF5ZXInO1xyXG5cclxuICAgICAgICBsZXQgbGlzdCA9ICc8ZGl2IGNsYXNzPVwic2Utc3VibWVudSBzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPic7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRlbXBsYXRlTGlzdC5sZW5ndGgsIHQ7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0ID0gdGVtcGxhdGVMaXN0W2ldO1xyXG4gICAgICAgICAgICBsaXN0ICs9ICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdFwiIGRhdGEtdmFsdWU9XCInICsgaSArICdcIiB0aXRsZT1cIicgKyB0Lm5hbWUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyB0Lm5hbWUgKyAnXCI+JyArIHQubmFtZSArICc8L2J1dHRvbj48L2xpPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QgKz0gJzwvdWw+PC9kaXY+JztcclxuXHJcbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSBsaXN0O1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghL15CVVRUT04kL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRlbXBsYXRlLnNlbGVjdGVkSW5kZXggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSAqIDE7XHJcbiAgICAgICAgY29uc3QgdGVtcCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZXNbdGhpcy5jb250ZXh0LnRlbXBsYXRlLnNlbGVjdGVkSW5kZXhdO1xyXG5cclxuICAgICAgICBpZiAodGVtcC5odG1sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udGVudHModGVtcC5odG1sKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IudGVtcGxhdGUuZmFpbF0gY2F1c2UgOiBcInRlbXBsYXRlc1tpXS5odG1sIG5vdCBmb3VuZFwiJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgfVxyXG59OyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTggSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnc2VsZWN0TWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29yZS5jb250ZXh0LnNlbGVjdE1lbnUgPSB7XHJcbiAgICAgICAgICAgIGNhbGxlcjoge30sXHJcbiAgICAgICAgICAgIGNhbGxlckNvbnRleHQ6IG51bGxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRGb3JtOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwic2Utc2VsZWN0LWxpc3RcIj48L2Rpdj4nO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVMaXN0OiBmdW5jdGlvbiAobGlzdENvbnRleHQsIGl0ZW1zLCBodG1sKSB7XHJcbiAgICAgICAgbGlzdENvbnRleHQuZm9ybS5pbm5lckhUTUwgPSAnPHVsPicgKyBodG1sICsgJzwvdWw+JztcclxuICAgICAgICBsaXN0Q29udGV4dC5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgIGxpc3RDb250ZXh0Lm1lbnVzID0gbGlzdENvbnRleHQuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCBmb3Jtcykge1xyXG4gICAgICAgIGNvbnN0IGZvcm0gPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuc2Utc2VsZWN0LWxpc3QnKTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0LnNlbGVjdE1lbnUuY2FsbGVyW3BsdWdpbk5hbWVdID0ge1xyXG4gICAgICAgICAgICBmb3JtOiBmb3JtLFxyXG4gICAgICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgICAgIG1lbnVzOiBbXSxcclxuICAgICAgICAgICAgaW5kZXg6IC0xLFxyXG4gICAgICAgICAgICBpdGVtOiBudWxsLFxyXG4gICAgICAgICAgICBjbGlja01ldGhvZDogbnVsbCxcclxuICAgICAgICAgICAgY2FsbGVyTmFtZTogcGx1Z2luTmFtZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUub25Nb3VzZWRvd25fbGlzdCk7XHJcbiAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5vbk1vdXNlTW92ZV9saXN0LmJpbmQodGhpcywgY29udGV4dCkpO1xyXG4gICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5vbkNsaWNrX2xpc3QuYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uTW91c2Vkb3duX2xpc3Q6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uTW91c2VNb3ZlX2xpc3Q6IGZ1bmN0aW9uIChjb250ZXh0LCBlKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNvbnRleHQuZm9ybSwgJ19fc2Vfc2VsZWN0LW1lbnUtbW91c2UtbW92ZScpO1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XHJcbiAgICAgICAgaWYgKCFpbmRleCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnRleHQuaW5kZXggPSBpbmRleCAqIDE7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tfbGlzdDogZnVuY3Rpb24gKGNvbnRleHQsIGUpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xyXG4gICAgICAgIGlmICghaW5kZXgpIHJldHVybjtcclxuICAgICAgICBjb250ZXh0LmNsaWNrTWV0aG9kLmNhbGwodGhpcywgY29udGV4dC5pdGVtc1tpbmRleF0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb3ZlSXRlbTogZnVuY3Rpb24gKGxpc3RDb250ZXh0LCBudW0pIHtcclxuICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MobGlzdENvbnRleHQuZm9ybSwgJ19fc2Vfc2VsZWN0LW1lbnUtbW91c2UtbW92ZScpO1xyXG4gICAgICAgIG51bSA9IGxpc3RDb250ZXh0LmluZGV4ICsgbnVtO1xyXG4gICAgICAgIGNvbnN0IG1lbnVzID0gbGlzdENvbnRleHQubWVudXM7XHJcbiAgICAgICAgY29uc3QgbGVuID0gbWVudXMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdEluZGV4ID0gbGlzdENvbnRleHQuaW5kZXggPSBudW0gPj0gbGVuID8gMCA6IG51bSA8IDAgPyBsZW4gLSAxIDogbnVtO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IHNlbGVjdEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MobWVudXNbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhtZW51c1tpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsaXN0Q29udGV4dC5pdGVtID0gbGlzdENvbnRleHQuaXRlbXNbc2VsZWN0SW5kZXhdO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRJdGVtOiBmdW5jdGlvbiAobGlzdENvbnRleHQsIGluZGV4KSB7XHJcbiAgICAgICAgaW5kZXggPSAoIWluZGV4IHx8IGluZGV4IDwgMCkgPyBsaXN0Q29udGV4dC5pbmRleCA6IGluZGV4O1xyXG4gICAgICAgIHJldHVybiBsaXN0Q29udGV4dC5pdGVtc1tpbmRleF07XHJcbiAgICB9LFxyXG5cclxuICAgIG9uOiBmdW5jdGlvbiAoY2FsbGVyTmFtZSwgY2xpY2tNZXRob2QpIHtcclxuICAgICAgICBjb25zdCBsaXN0Q29udGV4dCA9IHRoaXMuY29udGV4dC5zZWxlY3RNZW51LmNhbGxlcltjYWxsZXJOYW1lXTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJDb250ZXh0ID0gbGlzdENvbnRleHQ7XHJcbiAgICAgICAgbGlzdENvbnRleHQuY2xpY2tNZXRob2QgPSBjbGlja01ldGhvZDtcclxuICAgICAgICBsaXN0Q29udGV4dC5jYWxsZXJOYW1lID0gY2FsbGVyTmFtZTtcclxuICAgIH0sXHJcblxyXG4gICAgb3BlbjogZnVuY3Rpb24gKGxpc3RDb250ZXh0LCBwb3NpdGlvbkhhbmRsZXIpIHtcclxuICAgICAgICBjb25zdCBmb3JtID0gbGlzdENvbnRleHQuZm9ybTtcclxuICAgICAgICBmb3JtLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIHBvc2l0aW9uSGFuZGxlcihmb3JtKTtcclxuICAgICAgICBmb3JtLnN0eWxlLnZpc2liaWxpdHkgPSAnJztcclxuICAgIH0sXHJcblxyXG4gICAgY2xvc2U6IGZ1bmN0aW9uIChsaXN0Q29udGV4dCkge1xyXG4gICAgICAgIGxpc3RDb250ZXh0LmZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBsaXN0Q29udGV4dC5pdGVtcyA9IFtdO1xyXG4gICAgICAgIGxpc3RDb250ZXh0Lm1lbnVzID0gW107XHJcbiAgICAgICAgbGlzdENvbnRleHQuaW5kZXggPSAtMTtcclxuICAgICAgICBsaXN0Q29udGV4dC5pdGVtID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgaW5pdDogZnVuY3Rpb24gKGxpc3RDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKCFsaXN0Q29udGV4dCkgcmV0dXJuO1xyXG4gICAgICAgIGxpc3RDb250ZXh0Lml0ZW1zID0gW107XHJcbiAgICAgICAgbGlzdENvbnRleHQubWVudXMgPSBbXTtcclxuICAgICAgICBsaXN0Q29udGV4dC5pbmRleCA9IC0xO1xyXG4gICAgICAgIGxpc3RDb250ZXh0Lml0ZW0gPSBudWxsO1xyXG4gICAgICAgIGxpc3RDb250ZXh0LmNhbGxlck5hbWUgPSAnJztcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJDb250ZXh0ID0gbnVsbDtcclxuICAgIH1cclxufTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IHNlbGVjdE1lbnUgZnJvbSAnLi9fc2VsZWN0TWVudSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnYW5jaG9yJyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb3JlLmFkZE1vZHVsZShbc2VsZWN0TWVudV0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvcmUuY29udGV4dC5hbmNob3IgPSB7XHJcbiAgICAgICAgICAgIGNhbGxlcjoge30sXHJcbiAgICAgICAgICAgIGZvcm1zOiB0aGlzLnNldERpYWxvZ0Zvcm0oY29yZSksXHJcbiAgICAgICAgICAgIGhvc3Q6IChjb3JlLl93LmxvY2F0aW9uLm9yaWdpbiArIGNvcmUuX3cubG9jYXRpb24ucGF0aG5hbWUpLnJlcGxhY2UoL1xcLyQvLCAnJyksXHJcbiAgICAgICAgICAgIGNhbGxlckNvbnRleHQ6IG51bGxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKiogZGlhbG9nICovXHJcbiAgICBzZXREaWFsb2dGb3JtOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgcmVsTGlzdCA9IGNvcmUub3B0aW9ucy5saW5rUmVsO1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRSZWwgPSAoY29yZS5vcHRpb25zLmxpbmtSZWxEZWZhdWx0LmRlZmF1bHQgfHwgJycpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG4gICAgICAgIGNvbnN0IGZvcm1zID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBsZXQgaHRtbCA9ICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWJvZHlcIj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybVwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3gubGlua0JveC51cmwgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm0tZmlsZXNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtZm9ybSBzZS1pbnB1dC11cmxcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiJyArIChjb3JlLm9wdGlvbnMucHJvdG9jb2wgfHwgJycpICsgJ1wiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1maWxlcy1lZGdlLWJ1dHRvbiBfc2VfYm9va21hcmtfYnV0dG9uXCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3gubGlua0JveC5ib29rbWFyayArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LmxpbmtCb3guYm9va21hcmsgKyAnXCI+JyArIGljb25zLmJvb2ttYXJrICsgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUucGx1Z2lucy5zZWxlY3RNZW51LnNldEZvcm0oKSArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWFuY2hvci1wcmV2aWV3LWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS1zdmcgc2UtYW5jaG9yLXByZXZpZXctaWNvbiBfc2VfYW5jaG9yX2Jvb2ttYXJrX2ljb25cIj4nICsgaWNvbnMuYm9va21hcmsgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXN2ZyBzZS1hbmNob3ItcHJldmlldy1pY29uIF9zZV9hbmNob3JfZG93bmxvYWRfaWNvblwiPicgKyBpY29ucy5kb3dubG9hZCArICc8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxwcmUgY2xhc3M9XCJzZS1saW5rLXByZXZpZXdcIj48L3ByZT4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC5saW5rQm94LnRleHQgKyAnPC9sYWJlbD48aW5wdXQgY2xhc3M9XCJzZS1pbnB1dC1mb3JtIF9zZV9hbmNob3JfdGV4dFwiIHR5cGU9XCJ0ZXh0XCIgLz4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtLWZvb3RlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLWNoZWNrIF9zZV9hbmNob3JfY2hlY2tcIiAvPiZuYnNwOycgKyBsYW5nLmRpYWxvZ0JveC5saW5rQm94Lm5ld1dpbmRvd0NoZWNrICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tY2hlY2sgX3NlX2FuY2hvcl9kb3dubG9hZFwiIC8+Jm5ic3A7JyArIGxhbmcuZGlhbG9nQm94LmxpbmtCb3guZG93bmxvYWRMaW5rQ2hlY2sgKyAnPC9sYWJlbD4nO1xyXG4gICAgICAgICAgICBpZiAocmVsTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwic2UtYW5jaG9yLXJlbFwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuIHNlLWJ0bi1zZWxlY3Qgc2UtYW5jaG9yLXJlbC1idG5cIj4mbHQ7cmVsJmd0OzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYW5jaG9yLXJlbC13cmFwcGVyXCI+PHByZSBjbGFzcz1cInNlLWxpbmstcHJldmlldyBzZS1hbmNob3ItcmVsLXByZXZpZXdcIj48L3ByZT48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWxpc3QtbGF5ZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpYyBzZS1saXN0LWNoZWNrZWRcIj4nO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlbExpc3QubGVuZ3RoLCByZWw7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbCA9IHJlbExpc3RbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3QnICsgKGRlZmF1bHRSZWwuaW5kZXhPZihyZWwpID4gLTEgPyAnIHNlLWNoZWNrZWQnIDogJycpICsgJ1wiIGRhdGEtY29tbWFuZD1cIicgKyByZWwgKyAnXCIgdGl0bGU9XCInICsgcmVsICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgcmVsICsgJ1wiPjxzcGFuIGNsYXNzPVwic2Utc3ZnXCI+JyArIGljb25zLmNoZWNrZWQgKyAnPC9zcGFuPicgKyByZWwgKyAnPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC91bD48L2Rpdj48L2Rpdj48L2Rpdj4nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIGh0bWwgKz0gJzwvZGl2PjwvZGl2Pic7XHJcblxyXG4gICAgICAgIGZvcm1zLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgcmV0dXJuIGZvcm1zO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCBmb3Jtcykge1xyXG4gICAgICAgIGNvbnN0IGFuY2hvclBsdWdpbiA9IHRoaXMucGx1Z2lucy5hbmNob3I7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyW3BsdWdpbk5hbWVdID0ge1xyXG4gICAgICAgICAgICBtb2RhbDogZm9ybXMsXHJcbiAgICAgICAgICAgIHVybElucHV0OiBudWxsLFxyXG4gICAgICAgICAgICBsaW5rRGVmYXVsdFJlbDogdGhpcy5vcHRpb25zLmxpbmtSZWxEZWZhdWx0LFxyXG4gICAgICAgICAgICBkZWZhdWx0UmVsOiB0aGlzLm9wdGlvbnMubGlua1JlbERlZmF1bHQuZGVmYXVsdCB8fCAnJyxcclxuICAgICAgICAgICAgY3VycmVudFJlbDogW10sXHJcbiAgICAgICAgICAgIGxpbmtBbmNob3I6IG51bGwsXHJcbiAgICAgICAgICAgIGxpbmtWYWx1ZTogJycsXHJcbiAgICAgICAgICAgIF9jaGFuZ2U6IGZhbHNlLFxyXG4gICAgICAgICAgICBjYWxsZXJOYW1lOiBwbHVnaW5OYW1lXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmRlZmF1bHQgPT09ICdzdHJpbmcnKSBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmRlZmF1bHQgPSBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmRlZmF1bHQudHJpbSgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5saW5rRGVmYXVsdFJlbC5jaGVja19uZXdfd2luZG93ID09PSAnc3RyaW5nJykgY29udGV4dC5saW5rRGVmYXVsdFJlbC5jaGVja19uZXdfd2luZG93ID0gY29udGV4dC5saW5rRGVmYXVsdFJlbC5jaGVja19uZXdfd2luZG93LnRyaW0oKTtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQubGlua0RlZmF1bHRSZWwuY2hlY2tfYm9va21hcmsgPT09ICdzdHJpbmcnKSBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmNoZWNrX2Jvb2ttYXJrID0gY29udGV4dC5saW5rRGVmYXVsdFJlbC5jaGVja19ib29rbWFyay50cmltKCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQudXJsSW5wdXQgPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuc2UtaW5wdXQtdXJsJyk7XHJcbiAgICAgICAgY29udGV4dC5hbmNob3JUZXh0ID0gZm9ybXMucXVlcnlTZWxlY3RvcignLl9zZV9hbmNob3JfdGV4dCcpO1xyXG4gICAgICAgIGNvbnRleHQubmV3V2luZG93Q2hlY2sgPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuX3NlX2FuY2hvcl9jaGVjaycpO1xyXG4gICAgICAgIGNvbnRleHQuZG93bmxvYWRDaGVjayA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfYW5jaG9yX2Rvd25sb2FkJyk7XHJcbiAgICAgICAgY29udGV4dC5kb3dubG9hZCA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfYW5jaG9yX2Rvd25sb2FkX2ljb24nKTtcclxuICAgICAgICBjb250ZXh0LnByZXZpZXcgPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuc2UtbGluay1wcmV2aWV3Jyk7XHJcbiAgICAgICAgY29udGV4dC5ib29rbWFyayA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfYW5jaG9yX2Jvb2ttYXJrX2ljb24nKTtcclxuICAgICAgICBjb250ZXh0LmJvb2ttYXJrQnV0dG9uID0gZm9ybXMucXVlcnlTZWxlY3RvcignLl9zZV9ib29rbWFya19idXR0b24nKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUuaW5pdEV2ZW50LmNhbGwodGhpcywgcGx1Z2luTmFtZSwgZm9ybXMpO1xyXG4gICAgICAgIGNvbnN0IGxpc3RDb250ZXh0ID0gdGhpcy5jb250ZXh0LnNlbGVjdE1lbnUuY2FsbGVyW3BsdWdpbk5hbWVdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKiByZWwgKi9cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxpbmtSZWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlbEJ1dHRvbiA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5zZS1hbmNob3ItcmVsLWJ0bicpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlbExpc3QgPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuc2UtbGlzdC1sYXllcicpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlbFByZXZpZXcgPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuc2UtYW5jaG9yLXJlbC1wcmV2aWV3Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYW5jaG9yUGx1Z2luLm9uQ2xpY2tfcmVsQnV0dG9uLmJpbmQodGhpcywgY29udGV4dCkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlbExpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhbmNob3JQbHVnaW4ub25DbGlja19yZWxMaXN0LmJpbmQodGhpcywgY29udGV4dCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5uZXdXaW5kb3dDaGVjay5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBhbmNob3JQbHVnaW4ub25DaGFuZ2VfbmV3V2luZG93Q2hlY2suYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY29udGV4dC5kb3dubG9hZENoZWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGFuY2hvclBsdWdpbi5vbkNoYW5nZV9kb3dubG9hZENoZWNrLmJpbmQodGhpcywgY29udGV4dCkpO1xyXG4gICAgICAgIGNvbnRleHQuYW5jaG9yVGV4dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGFuY2hvclBsdWdpbi5vbkNoYW5nZUFuY2hvclRleHQuYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY29udGV4dC51cmxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGFuY2hvclBsdWdpbi5vbkNoYW5nZVVybElucHV0LmJpbmQodGhpcywgY29udGV4dCkpO1xyXG4gICAgICAgIGNvbnRleHQudXJsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGFuY2hvclBsdWdpbi5vbktleURvd25VcmxJbnB1dC5iaW5kKHRoaXMsIGxpc3RDb250ZXh0KSk7XHJcbiAgICAgICAgY29udGV4dC51cmxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGFuY2hvclBsdWdpbi5vbkZvY3VzVXJsSW5wdXQuYmluZCh0aGlzLCBjb250ZXh0LCBsaXN0Q29udGV4dCkpO1xyXG4gICAgICAgIGNvbnRleHQudXJsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGFuY2hvclBsdWdpbi5vbkJsdXJVcmxJbnB1dC5iaW5kKHRoaXMsIGxpc3RDb250ZXh0KSk7XHJcbiAgICAgICAgY29udGV4dC5ib29rbWFya0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFuY2hvclBsdWdpbi5vbkNsaWNrX2Jvb2ttYXJrQnV0dG9uLmJpbmQodGhpcywgY29udGV4dCkpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbjogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIHVwZGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IGFuY2hvclBsdWdpbiA9IHRoaXMucGx1Z2lucy5hbmNob3I7XHJcblxyXG4gICAgICAgIGlmICghdXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGFuY2hvclBsdWdpbi5pbml0LmNhbGwodGhpcywgY29udGV4dEFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IuYW5jaG9yVGV4dC52YWx1ZSA9IHRoaXMuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKS50cmltKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IubmV3V2luZG93Q2hlY2suY2hlY2tlZCA9IHRoaXMub3B0aW9ucy5saW5rVGFyZ2V0TmV3V2luZG93O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dEFuY2hvci5saW5rQW5jaG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBocmVmID0gY29udGV4dEFuY2hvci5saW5rQW5jaG9yLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLmxpbmtWYWx1ZSA9IGNvbnRleHRBbmNob3IucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWUgPSBhbmNob3JQbHVnaW4uc2VsZlBhdGhCb29rbWFyay5jYWxsKHRoaXMsIGhyZWYpID8gaHJlZi5zdWJzdHIoaHJlZi5sYXN0SW5kZXhPZignIycpKSA6IGhyZWY7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IuYW5jaG9yVGV4dC52YWx1ZSA9IGNvbnRleHRBbmNob3IubGlua0FuY2hvci50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5uZXdXaW5kb3dDaGVjay5jaGVja2VkID0gKC9fYmxhbmsvaS50ZXN0KGNvbnRleHRBbmNob3IubGlua0FuY2hvci50YXJnZXQpID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5kb3dubG9hZENoZWNrLmNoZWNrZWQgPSBjb250ZXh0QW5jaG9yLmxpbmtBbmNob3IuZG93bmxvYWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlckNvbnRleHQgPSBjb250ZXh0QW5jaG9yO1xyXG4gICAgICAgIGFuY2hvclBsdWdpbi5zZXRSZWwuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCAodXBkYXRlICYmIGNvbnRleHRBbmNob3IubGlua0FuY2hvcikgPyBjb250ZXh0QW5jaG9yLmxpbmtBbmNob3IucmVsIDogY29udGV4dEFuY2hvci5kZWZhdWx0UmVsKTtcclxuICAgICAgICBhbmNob3JQbHVnaW4uc2V0TGlua1ByZXZpZXcuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCBjb250ZXh0QW5jaG9yLmxpbmtWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUub24uY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLmNhbGxlck5hbWUsIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0SGVhZGVyQm9va21hcmspO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZWxmUGF0aEJvb2ttYXJrOiBmdW5jdGlvbihwYXRoKSB7XHJcbiAgICAgICAgY29uc3QgaHJlZiA9IHRoaXMuX3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKC9cXC8kLywgJycpO1xyXG4gICAgICAgIHJldHVybiBwYXRoLmluZGV4T2YoJyMnKSA9PT0gMCB8fCAocGF0aC5pbmRleE9mKGhyZWYpID09PSAwICYmIHBhdGguaW5kZXhPZignIycpID09PSAoaHJlZi5pbmRleE9mKFwiI1wiKSA9PT0gLTEgPyBocmVmLmxlbmd0aCA6IGhyZWYuc3Vic3RyKDAsIGhyZWYuaW5kZXhPZihcIiNcIikpLmxlbmd0aCkpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfY2xvc2VSZWxNZW51OiBudWxsLFxyXG4gICAgdG9nZ2xlUmVsTGlzdDogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIHNob3cpIHtcclxuICAgICAgICBpZiAoIXNob3cpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2lucy5hbmNob3IuX2Nsb3NlUmVsTWVudSkgdGhpcy5wbHVnaW5zLmFuY2hvci5fY2xvc2VSZWxNZW51KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gY29udGV4dEFuY2hvci5yZWxCdXR0b247XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbExpc3QgPSBjb250ZXh0QW5jaG9yLnJlbExpc3Q7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0YXJnZXQsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgcmVsTGlzdC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIHJlbExpc3Quc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnJ0bCkgcmVsTGlzdC5zdHlsZS5sZWZ0ID0gKHRhcmdldC5vZmZzZXRMZWZ0ICsgdGFyZ2V0Lm9mZnNldFdpZHRoICsgMSkgKyAncHgnO1xyXG4gICAgICAgICAgICBlbHNlIHJlbExpc3Quc3R5bGUubGVmdCA9ICh0YXJnZXQub2Zmc2V0TGVmdCAtIHJlbExpc3Qub2Zmc2V0V2lkdGggLSAxKSArICdweCc7XHJcbiAgICAgICAgICAgIHJlbExpc3Quc3R5bGUudG9wID0gKHRhcmdldC5vZmZzZXRUb3AgKyAodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpIC0gKHJlbExpc3Qub2Zmc2V0SGVpZ2h0IC8gMikpICsgJ3B4JztcclxuICAgICAgICAgICAgcmVsTGlzdC5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLl9jbG9zZVJlbE1lbnUgPSBmdW5jdGlvbiAoY29udGV4dCwgdGFyZ2V0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiAoY29udGV4dC5yZWxCdXR0b24uY29udGFpbnMoZS50YXJnZXQpIHx8IGNvbnRleHQucmVsTGlzdC5jb250YWlucyhlLnRhcmdldCkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGFyZ2V0LCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlbExpc3Quc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWxGb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wbHVnaW5zLmFuY2hvci5fY2xvc2VSZWxNZW51KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3IuX2Nsb3NlUmVsTWVudSA9IG51bGw7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzLCBjb250ZXh0QW5jaG9yLCB0YXJnZXQpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wbHVnaW5zLmFuY2hvci5fY2xvc2VSZWxNZW51KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tfcmVsQnV0dG9uOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgZSkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3IudG9nZ2xlUmVsTGlzdC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsICF0aGlzLnV0aWwuaGFzQ2xhc3MoZS50YXJnZXQsICdhY3RpdmUnKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tfcmVsTGlzdDogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIGUpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICBjb25zdCBjbWQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICBpZiAoIWNtZCkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBjb250ZXh0QW5jaG9yLmN1cnJlbnRSZWw7XHJcbiAgICAgICAgY29uc3QgY2hlY2tlZCA9IHRoaXMudXRpbC50b2dnbGVDbGFzcyh0YXJnZXQsICdzZS1jaGVja2VkJyk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBjdXJyZW50LmluZGV4T2YoY21kKTtcclxuICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSBjdXJyZW50LnB1c2goY21kKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkgY3VycmVudC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dEFuY2hvci5yZWxQcmV2aWV3LnRpdGxlID0gY29udGV4dEFuY2hvci5yZWxQcmV2aWV3LnRleHRDb250ZW50ID0gY3VycmVudC5qb2luKCcgJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFJlbDogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIHJlbEF0dHIpIHtcclxuICAgICAgICBjb25zdCByZWxMaXN0RWwgPSBjb250ZXh0QW5jaG9yLnJlbExpc3Q7XHJcbiAgICAgICAgY29uc3QgcmVscyA9IGNvbnRleHRBbmNob3IuY3VycmVudFJlbCA9ICFyZWxBdHRyID8gW10gOiByZWxBdHRyLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgaWYgKCFyZWxMaXN0RWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2tlZFJlbCA9IHJlbExpc3RFbC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hlY2tlZFJlbC5sZW5ndGgsIGNtZDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNtZCA9IGNoZWNrZWRSZWxbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgaWYgKHJlbHMuaW5kZXhPZihjbWQpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhjaGVja2VkUmVsW2ldLCAnc2UtY2hlY2tlZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGNoZWNrZWRSZWxbaV0sICdzZS1jaGVja2VkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHRBbmNob3IucmVsUHJldmlldy50aXRsZSA9IGNvbnRleHRBbmNob3IucmVsUHJldmlldy50ZXh0Q29udGVudCA9IHJlbHMuam9pbignICcpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVIZWFkZXJMaXN0OiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgY29udGV4dExpc3QsIHVybFZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMudXRpbC5nZXRMaXN0Q2hpbGRyZW4odGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5ZywgZnVuY3Rpb24oY3VycmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gL2hbMS02XS9pLnRlc3QoY3VycmVudC5ub2RlTmFtZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGhlYWRlcnMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbHVlUmVnRXhwID0gbmV3IHRoaXMuX3cuUmVnRXhwKCdeJyArIHVybFZhbHVlLnJlcGxhY2UoL14jLywgJycpLCAnaScpO1xyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBbXTtcclxuICAgICAgICBsZXQgaHRtbCA9ICcnO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGxlbiA9IGhlYWRlcnMubGVuZ3RoLCBoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaCA9IGhlYWRlcnNbaV07XHJcbiAgICAgICAgICAgIGlmICghdmFsdWVSZWdFeHAudGVzdChoLnRleHRDb250ZW50KSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChoKTtcclxuICAgICAgICAgICAgaHRtbCArPSAnPGxpIGNsYXNzPVwic2Utc2VsZWN0LWl0ZW1cIiBkYXRhLWluZGV4PVwiJyArIGkgKyAnXCI+JyArIGgudGV4dENvbnRlbnQgKyAnPC9saT4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51LmNsb3NlLmNhbGwodGhpcywgY29udGV4dExpc3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51LmNyZWF0ZUxpc3QoY29udGV4dExpc3QsIGxpc3QsIGh0bWwpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5vcGVuLmNhbGwodGhpcywgY29udGV4dExpc3QsIHRoaXMucGx1Z2lucy5hbmNob3IuX3NldE1lbnVMaXN0UG9zaXRpb24uYmluZCh0aGlzLCBjb250ZXh0QW5jaG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0TWVudUxpc3RQb3NpdGlvbjogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIGxpc3QpIHtcclxuICAgICAgICBsaXN0LnN0eWxlLnRvcCA9IChjb250ZXh0QW5jaG9yLnVybElucHV0Lm9mZnNldEhlaWdodCArIDEpICsgJ3B4JztcclxuICAgIH0sXHJcblxyXG4gICAgb25LZXlEb3duVXJsSW5wdXQ6IGZ1bmN0aW9uIChjb250ZXh0TGlzdCwgZSkge1xyXG4gICAgICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgc3dpdGNoIChrZXlDb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMzg6IC8vIHVwXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUubW92ZUl0ZW0uY2FsbCh0aGlzLCBjb250ZXh0TGlzdCwgLTEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNDA6IC8vIGRvd25cclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5tb3ZlSXRlbS5jYWxsKHRoaXMsIGNvbnRleHRMaXN0LCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDEzOiAvLyBlbnRlclxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHRMaXN0LmluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldEhlYWRlckJvb2ttYXJrLmNhbGwodGhpcywgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUuZ2V0SXRlbShjb250ZXh0TGlzdCwgbnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXRIZWFkZXJCb29rbWFyazogZnVuY3Rpb24gKGhlYWRlcikge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRBbmNob3IgPSB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlckNvbnRleHQ7XHJcbiAgICAgICAgY29uc3QgaWQgPSBoZWFkZXIuaWQgfHwgJ2hfJyArIHRoaXMuX3cuTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnJlcGxhY2UoLy4rXFwuLywgJycpO1xyXG4gICAgICAgIGhlYWRlci5pZCA9IGlkO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWUgPSAnIycgKyBpZDtcclxuXHJcbiAgICAgICAgaWYgKCFjb250ZXh0QW5jaG9yLmFuY2hvclRleHQudmFsdWUudHJpbSgpIHx8ICFjb250ZXh0QW5jaG9yLl9jaGFuZ2UpIHtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5hbmNob3JUZXh0LnZhbHVlID0gaGVhZGVyLnRleHRDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldExpbmtQcmV2aWV3LmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgY29udGV4dEFuY2hvci51cmxJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUuY2xvc2UuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJDb250ZXh0KTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlckNvbnRleHQudXJsSW5wdXQuZm9jdXMoKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25DaGFuZ2VBbmNob3JUZXh0OiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgZSkge1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IuX2NoYW5nZSA9ICEhZS50YXJnZXQudmFsdWUudHJpbSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNoYW5nZVVybElucHV0OiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgZSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0TGlua1ByZXZpZXcuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbnMuYW5jaG9yLnNlbGZQYXRoQm9va21hcmsuY2FsbCh0aGlzLCB2YWx1ZSkpIHRoaXMucGx1Z2lucy5hbmNob3IuY3JlYXRlSGVhZGVyTGlzdC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIHRoaXMuY29udGV4dC5zZWxlY3RNZW51LmNhbGxlckNvbnRleHQsIHZhbHVlKTtcclxuICAgICAgICBlbHNlIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51LmNsb3NlLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LnNlbGVjdE1lbnUuY2FsbGVyQ29udGV4dCk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uRm9jdXNVcmxJbnB1dDogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIGNvbnRleHRMaW5rKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjb250ZXh0QW5jaG9yLnVybElucHV0LnZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbnMuYW5jaG9yLnNlbGZQYXRoQm9va21hcmsuY2FsbCh0aGlzLCB2YWx1ZSkpIHRoaXMucGx1Z2lucy5hbmNob3IuY3JlYXRlSGVhZGVyTGlzdC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIGNvbnRleHRMaW5rLCB2YWx1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQmx1clVybElucHV0OiBmdW5jdGlvbiAoY29udGV4dExpc3QpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5jbG9zZS5jYWxsKHRoaXMsIGNvbnRleHRMaXN0KTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0TGlua1ByZXZpZXc6IGZ1bmN0aW9uIChjb250ZXh0LCB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHByZXZpZXcgPSBjb250ZXh0LnByZXZpZXc7XHJcbiAgICAgICAgY29uc3QgcHJvdG9jb2wgPSB0aGlzLm9wdGlvbnMubGlua1Byb3RvY29sO1xyXG4gICAgICAgIGNvbnN0IG5vUHJlZml4ID0gdGhpcy5vcHRpb25zLmxpbmtOb1ByZWZpeDtcclxuICAgICAgICBjb25zdCByZXNlcnZlZFByb3RvY29sICA9IC9eKG1haWx0b1xcOnx0ZWxcXDp8c21zXFw6fGh0dHBzKlxcOlxcL1xcL3wjKS8udGVzdCh2YWx1ZSkgfHwgdmFsdWUuaW5kZXhPZihwcm90b2NvbCkgPT09IDA7XHJcbiAgICAgICAgY29uc3Qgc2FtZVByb3RvY29sID0gIXByb3RvY29sID8gZmFsc2UgOiB0aGlzLl93LlJlZ0V4cCgnXicgKyB0aGlzLnV0aWwuZXNjYXBlU3RyaW5nUmVnZXhwKHZhbHVlLnN1YnN0cigwLCBwcm90b2NvbC5sZW5ndGgpKSkudGVzdChwcm90b2NvbCk7XHJcbiAgICAgICAgdmFsdWUgPSBjb250ZXh0LmxpbmtWYWx1ZSA9IHByZXZpZXcudGV4dENvbnRlbnQgPSAhdmFsdWUgPyAnJyA6IG5vUHJlZml4ID8gdmFsdWUgOiAocHJvdG9jb2wgJiYgIXJlc2VydmVkUHJvdG9jb2wgJiYgIXNhbWVQcm90b2NvbCkgPyBwcm90b2NvbCArIHZhbHVlIDogcmVzZXJ2ZWRQcm90b2NvbCA/IHZhbHVlIDogL153d3dcXC4vLnRlc3QodmFsdWUpID8gJ2h0dHA6Ly8nICsgdmFsdWUgOiB0aGlzLmNvbnRleHQuYW5jaG9yLmhvc3QgKyAoL15cXC8vLnRlc3QodmFsdWUpID8gJycgOiAnLycpICsgdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbnMuYW5jaG9yLnNlbGZQYXRoQm9va21hcmsuY2FsbCh0aGlzLCB2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5ib29rbWFyay5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNvbnRleHQuYm9va21hcmtCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZXh0LmJvb2ttYXJrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0LmJvb2ttYXJrQnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMucGx1Z2lucy5hbmNob3Iuc2VsZlBhdGhCb29rbWFyay5jYWxsKHRoaXMsIHZhbHVlKSAmJiBjb250ZXh0LmRvd25sb2FkQ2hlY2suY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRvd25sb2FkLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZG93bmxvYWQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNldEN0eDogZnVuY3Rpb24gKGFuY2hvciwgY29udGV4dEFuY2hvcikge1xyXG4gICAgICAgIGlmICghYW5jaG9yKSByZXR1cm47XHJcbiAgICAgICAgY29udGV4dEFuY2hvci5saW5rQW5jaG9yID0gYW5jaG9yO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IubGlua1ZhbHVlID0gYW5jaG9yLmhyZWY7XHJcbiAgICAgICAgY29udGV4dEFuY2hvci5jdXJyZW50UmVsID0gYW5jaG9yLnJlbC5zcGxpdChcIiBcIik7XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZUFuY2hvcjogZnVuY3Rpb24gKGFuY2hvciwgdXJsLCBkaXNwbGF5VGV4dCwgY29udGV4dEFuY2hvciwgbm90VGV4dCkge1xyXG4gICAgICAgIC8vIGRvd25sb2FkXHJcbiAgICAgICAgaWYgKCF0aGlzLnBsdWdpbnMuYW5jaG9yLnNlbGZQYXRoQm9va21hcmsuY2FsbCh0aGlzLCB1cmwpICYmIGNvbnRleHRBbmNob3IuZG93bmxvYWRDaGVjay5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgIGFuY2hvci5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZGlzcGxheVRleHQgfHwgdXJsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhbmNob3IucmVtb3ZlQXR0cmlidXRlKCdkb3dubG9hZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbmV3IHdpbmRvd1xyXG4gICAgICAgIGlmIChjb250ZXh0QW5jaG9yLm5ld1dpbmRvd0NoZWNrLmNoZWNrZWQpIGFuY2hvci50YXJnZXQgPSAnX2JsYW5rJztcclxuICAgICAgICBlbHNlIGFuY2hvci5yZW1vdmVBdHRyaWJ1dGUoJ3RhcmdldCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHJlbFxyXG4gICAgICAgIGNvbnN0IHJlbCA9IGNvbnRleHRBbmNob3IuY3VycmVudFJlbC5qb2luKCcgJyk7XHJcbiAgICAgICAgaWYgKCFyZWwpIGFuY2hvci5yZW1vdmVBdHRyaWJ1dGUoJ3JlbCcpO1xyXG4gICAgICAgIGVsc2UgYW5jaG9yLnJlbCA9IHJlbDtcclxuXHJcbiAgICAgICAgLy8gc2V0IHVybFxyXG4gICAgICAgIGFuY2hvci5ocmVmID0gdXJsO1xyXG4gICAgICAgIGlmIChub3RUZXh0KSB7XHJcbiAgICAgICAgICAgIGlmIChhbmNob3IuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSBhbmNob3IudGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhbmNob3IudGV4dENvbnRlbnQgPSBkaXNwbGF5VGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZUFuY2hvcjogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIG5vdFRleHQpIHtcclxuICAgICAgICBpZiAoY29udGV4dEFuY2hvci5saW5rVmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB1cmwgPSBjb250ZXh0QW5jaG9yLmxpbmtWYWx1ZTtcclxuICAgICAgICBjb25zdCBhbmNob3IgPSBjb250ZXh0QW5jaG9yLmFuY2hvclRleHQ7XHJcbiAgICAgICAgY29uc3QgZGlzcGxheVRleHQgPSBhbmNob3IudmFsdWUubGVuZ3RoID09PSAwID8gdXJsIDogYW5jaG9yLnZhbHVlO1xyXG5cclxuICAgICAgICBjb25zdCBvQSA9IGNvbnRleHRBbmNob3IubGlua0FuY2hvciB8fCB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnQScpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3IudXBkYXRlQW5jaG9yLmNhbGwodGhpcywgb0EsIHVybCwgZGlzcGxheVRleHQsIGNvbnRleHRBbmNob3IsIG5vdFRleHQpO1xyXG5cclxuICAgICAgICBjb250ZXh0QW5jaG9yLmxpbmtWYWx1ZSA9IGNvbnRleHRBbmNob3IucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWUgPSBjb250ZXh0QW5jaG9yLmFuY2hvclRleHQudmFsdWUgPSAnJztcclxuXHJcbiAgICAgICAgcmV0dXJuIG9BO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNsaWNrX2Jvb2ttYXJrQnV0dG9uOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvcikge1xyXG4gICAgICAgIGxldCB1cmwgPSBjb250ZXh0QW5jaG9yLnVybElucHV0LnZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbnMuYW5jaG9yLnNlbGZQYXRoQm9va21hcmsuY2FsbCh0aGlzLCB1cmwpKSB7XHJcbiAgICAgICAgICAgIHVybCA9IHVybC5zdWJzdHIoMSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IuYm9va21hcmsuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGNvbnRleHRBbmNob3IuYm9va21hcmtCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUuY2xvc2UuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJDb250ZXh0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1cmwgPSAnIycgKyB1cmw7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IuYm9va21hcmsuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhjb250ZXh0QW5jaG9yLmJvb2ttYXJrQnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IuZG93bmxvYWRDaGVjay5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IuZG93bmxvYWQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5jcmVhdGVIZWFkZXJMaXN0LmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgdGhpcy5jb250ZXh0LnNlbGVjdE1lbnUuY2FsbGVyQ29udGV4dCwgdXJsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWUgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5zZXRMaW5rUHJldmlldy5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIHVybCk7XHJcbiAgICAgICAgY29udGV4dEFuY2hvci51cmxJbnB1dC5mb2N1cygpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNoYW5nZV9uZXdXaW5kb3dDaGVjazogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRleHRBbmNob3IubGlua0RlZmF1bHRSZWwuY2hlY2tfbmV3X3dpbmRvdyAhPT0gJ3N0cmluZycpIHJldHVybjtcclxuICAgICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldFJlbC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIHRoaXMucGx1Z2lucy5hbmNob3IuX3JlbE1lcmdlLmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgY29udGV4dEFuY2hvci5saW5rRGVmYXVsdFJlbC5jaGVja19uZXdfd2luZG93KSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5zZXRSZWwuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCB0aGlzLnBsdWdpbnMuYW5jaG9yLl9yZWxEZWxldGUuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCBjb250ZXh0QW5jaG9yLmxpbmtEZWZhdWx0UmVsLmNoZWNrX25ld193aW5kb3cpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2hhbmdlX2Rvd25sb2FkQ2hlY2s6IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yLCBlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5kb3dubG9hZC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5ib29rbWFyay5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY29udGV4dEFuY2hvci5ib29rbWFya0J1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLmxpbmtWYWx1ZSA9IGNvbnRleHRBbmNob3IucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWUgPSBjb250ZXh0QW5jaG9yLnVybElucHV0LnZhbHVlLnJlcGxhY2UoL15cXCMrLywgJycpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHRBbmNob3IubGlua0RlZmF1bHRSZWwuY2hlY2tfYm9va21hcmsgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldFJlbC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIHRoaXMucGx1Z2lucy5hbmNob3IuX3JlbE1lcmdlLmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgY29udGV4dEFuY2hvci5saW5rRGVmYXVsdFJlbC5jaGVja19ib29rbWFyaykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5kb3dubG9hZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHRBbmNob3IubGlua0RlZmF1bHRSZWwuY2hlY2tfYm9va21hcmsgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldFJlbC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIHRoaXMucGx1Z2lucy5hbmNob3IuX3JlbERlbGV0ZS5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIGNvbnRleHRBbmNob3IubGlua0RlZmF1bHRSZWwuY2hlY2tfYm9va21hcmspKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3JlbE1lcmdlOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgcmVsQXR0cikge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBjb250ZXh0QW5jaG9yLmN1cnJlbnRSZWw7XHJcbiAgICAgICAgaWYgKCFyZWxBdHRyKSByZXR1cm4gY3VycmVudC5qb2luKCcgJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKC9eb25seVxcOi8udGVzdChyZWxBdHRyKSkge1xyXG4gICAgICAgICAgICByZWxBdHRyID0gcmVsQXR0ci5yZXBsYWNlKC9eb25seVxcOi8sICcnKS50cmltKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IuY3VycmVudFJlbCA9IHJlbEF0dHIuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbEF0dHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZWxzID0gcmVsQXR0ci5zcGxpdCgnICcpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZWxzLmxlbmd0aCwgaW5kZXg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpbmRleCA9IGN1cnJlbnQuaW5kZXhPZihyZWxzW2ldKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgY3VycmVudC5wdXNoKHJlbHNbaV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQuam9pbignICcpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfcmVsRGVsZXRlOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgcmVsQXR0cikge1xyXG4gICAgICAgIGlmICghcmVsQXR0cikgcmV0dXJuIGNvbnRleHRBbmNob3IuY3VycmVudFJlbC5qb2luKCcgJyk7XHJcbiAgICAgICAgaWYgKC9eb25seVxcOi8udGVzdChyZWxBdHRyKSkgcmVsQXR0ciA9IHJlbEF0dHIucmVwbGFjZSgvXm9ubHlcXDovLCAnJykudHJpbSgpO1xyXG5cclxuICAgICAgICBjb25zdCByZWxzID0gY29udGV4dEFuY2hvci5jdXJyZW50UmVsLmpvaW4oJyAnKS5yZXBsYWNlKHRoaXMuX3cuUmVnRXhwKHJlbEF0dHIgKyAnXFxcXHMqJyksICcnKTtcclxuICAgICAgICBjb250ZXh0QW5jaG9yLmN1cnJlbnRSZWwgPSByZWxzLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgcmV0dXJuIHJlbHM7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXQ6IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yKSB7XHJcbiAgICAgICAgY29udGV4dEFuY2hvci5saW5rQW5jaG9yID0gbnVsbDtcclxuICAgICAgICBjb250ZXh0QW5jaG9yLmxpbmtWYWx1ZSA9IGNvbnRleHRBbmNob3IucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICBjb250ZXh0QW5jaG9yLmFuY2hvclRleHQudmFsdWUgPSAnJztcclxuICAgICAgICBjb250ZXh0QW5jaG9yLm5ld1dpbmRvd0NoZWNrLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICBjb250ZXh0QW5jaG9yLmRvd25sb2FkQ2hlY2suY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IuX2NoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0UmVsLmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgY29udGV4dEFuY2hvci5kZWZhdWx0UmVsKTtcclxuICAgICAgICBpZiAoY29udGV4dEFuY2hvci5yZWxMaXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3IudG9nZ2xlUmVsTGlzdC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmFuY2hvci5jYWxsZXJDb250ZXh0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5pbml0LmNhbGwodGhpcywgdGhpcy5jb250ZXh0LnNlbGVjdE1lbnUuY2FsbGVyQ29udGV4dCk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgZGlhbG9nIGZyb20gJy4uL21vZHVsZXMvZGlhbG9nJztcclxuaW1wb3J0IGFuY2hvciBmcm9tICcuLi9tb2R1bGVzL19hbmNob3InO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2xpbmsnLFxyXG4gICAgZGlzcGxheTogJ2RpYWxvZycsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29yZS5hZGRNb2R1bGUoW2RpYWxvZywgYW5jaG9yXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29uc3QgY29udGV4dExpbmsgPSBjb250ZXh0LmxpbmsgPSB7XHJcbiAgICAgICAgICAgIGZvY3VzRWxlbWVudDogbnVsbCwgLy8gQE92ZXJyaWRlIGRpYWxvZyAvLyBUaGlzIGVsZW1lbnQgaGFzIGZvY3VzIHdoZW4gdGhlIGRpYWxvZyBpcyBvcGVuZWQuXHJcbiAgICAgICAgICAgIF9saW5rQW5jaG9yOiBudWxsLFxyXG4gICAgICAgICAgICBhbmNob3JDdHg6IG51bGxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogbGluayBkaWFsb2cgKi9cclxuICAgICAgICBsZXQgbGlua19kaWFsb2cgPSB0aGlzLnNldERpYWxvZyhjb3JlKTtcclxuICAgICAgICBjb250ZXh0TGluay5tb2RhbCA9IGxpbmtfZGlhbG9nO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKiBsaW5rIGNvbnRyb2xsZXIgKi9cclxuICAgICAgICBsZXQgbGlua19jb250cm9sbGVyID0gdGhpcy5zZXRDb250cm9sbGVyX0xpbmtCdXR0b24oY29yZSk7XHJcbiAgICAgICAgY29udGV4dExpbmsubGlua0NvbnRyb2xsZXIgPSBsaW5rX2NvbnRyb2xsZXI7XHJcblxyXG4gICAgICAgIGxpbmtfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnN1Ym1pdC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBsaW5rX2NvbnRyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tfbGlua0NvbnRyb2xsZXIuYmluZChjb3JlKSk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xyXG4gICAgICAgIGNvbnRleHQuZGlhbG9nLm1vZGFsLmFwcGVuZENoaWxkKGxpbmtfZGlhbG9nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCBjb250cm9sbGVyICovXHJcbiAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKGxpbmtfY29udHJvbGxlcik7XHJcblxyXG4gICAgICAgIC8qKiBsaW5rIGV2ZW50ICovXHJcbiAgICAgICAgY29yZS5wbHVnaW5zLmFuY2hvci5pbml0RXZlbnQuY2FsbChjb3JlLCAnbGluaycsIGxpbmtfZGlhbG9nKTtcclxuICAgICAgICBjb250ZXh0TGluay5mb2N1c0VsZW1lbnQgPSBjb250ZXh0LmFuY2hvci5jYWxsZXIubGluay51cmxJbnB1dDtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpbmtfZGlhbG9nID0gbnVsbCwgbGlua19jb250cm9sbGVyID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIGRpYWxvZyAqL1xyXG4gICAgc2V0RGlhbG9nOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgZGlhbG9nID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGNvbnN0IGljb25zID0gY29yZS5pY29ucztcclxuXHJcbiAgICAgICAgZGlhbG9nLmNsYXNzTmFtZSA9ICdzZS1kaWFsb2ctY29udGVudCc7XHJcbiAgICAgICAgZGlhbG9nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgbGV0IGh0bWwgPSAnJyArXHJcbiAgICAgICAgICAgICc8Zm9ybT4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWhlYWRlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJjbG9zZVwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1jbG9zZVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zLmNhbmNlbCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLW1vZGFsLXRpdGxlXCI+JyArIGxhbmcuZGlhbG9nQm94LmxpbmtCb3gudGl0bGUgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgY29yZS5jb250ZXh0LmFuY2hvci5mb3Jtcy5pbm5lckhUTUwgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9vdGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwic2UtYnRuLXByaW1hcnlcIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCI+PHNwYW4+JyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICc8L3NwYW4+PC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Zvcm0+JztcclxuXHJcbiAgICAgICAgZGlhbG9nLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgcmV0dXJuIGRpYWxvZztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIG1vZGlmeSBjb250cm9sbGVyIGJ1dHRvbiAqL1xyXG4gICAgc2V0Q29udHJvbGxlcl9MaW5rQnV0dG9uOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG4gICAgICAgIGNvbnN0IGxpbmtfYnRuID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBsaW5rX2J0bi5jbGFzc05hbWUgPSAnc2UtY29udHJvbGxlciBzZS1jb250cm9sbGVyLWxpbmsnO1xyXG4gICAgICAgIGxpbmtfYnRuLmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1hcnJvdyBzZS1hcnJvdy11cFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImxpbmstY29udGVudFwiPjxzcGFuPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJcIj48L2E+Jm5ic3A7PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwidXBkYXRlXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMuZWRpdCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuZWRpdCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwidW5saW5rXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMudW5saW5rICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci51bmxpbmsgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImRlbGV0ZVwiIHRhYmluZGV4PVwiLTFcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zLmRlbGV0ZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpbmtfYnRuO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgb3BlbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cub3Blbi5jYWxsKHRoaXMsICdsaW5rJywgJ2xpbmsnID09PSB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN1Ym1pdDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBvQSA9IHRoaXMucGx1Z2lucy5hbmNob3IuY3JlYXRlQW5jaG9yLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LmFuY2hvci5jYWxsZXIubGluaywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAob0EgPT09IG51bGwpIHJldHVybjtcclxuICAgIFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRm9ybWF0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb0Zvcm1hdCA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1swXS5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb0Zvcm1hdC5hcHBlbmRDaGlsZChvQSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmluc2VydE5vZGUob0Zvcm1hdCwgbnVsbCwgdHJ1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmluc2VydE5vZGUob0EsIG51bGwsIHRydWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uob0EuY2hpbGROb2Rlc1swXSwgMCwgb0EuY2hpbGROb2Rlc1swXSwgb0EudGV4dENvbnRlbnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHNldCByYW5nZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dE5vZGUgPSB0aGlzLmNvbnRleHQubGluay5fbGlua0FuY2hvci5jaGlsZE5vZGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZSh0ZXh0Tm9kZSwgMCwgdGV4dE5vZGUsIHRleHROb2RlLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlXHJcbiAgICAgKi9cclxuICAgIGFjdGl2ZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlckFycmF5LmluZGV4T2YodGhpcy5jb250ZXh0LmxpbmsubGlua0NvbnRyb2xsZXIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy51dGlsLmlzQW5jaG9yKGVsZW1lbnQpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWltYWdlLWxpbmsnKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyQXJyYXkuaW5kZXhPZih0aGlzLmNvbnRleHQubGluay5saW5rQ29udHJvbGxlcikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGluay5jYWxsX2NvbnRyb2xsZXIuY2FsbCh0aGlzLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5vbi5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyLmxpbmssIHVwZGF0ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNhbGxfY29udHJvbGxlcjogZnVuY3Rpb24gKHNlbGVjdGlvbkFUYWcpIHtcclxuICAgICAgICB0aGlzLmVkaXRMaW5rID0gdGhpcy5jb250ZXh0LmxpbmsuX2xpbmtBbmNob3IgPSB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlci5saW5rLmxpbmtBbmNob3IgPSBzZWxlY3Rpb25BVGFnO1xyXG4gICAgICAgIGNvbnN0IGxpbmtCdG4gPSB0aGlzLmNvbnRleHQubGluay5saW5rQ29udHJvbGxlcjtcclxuICAgICAgICBjb25zdCBsaW5rID0gbGlua0J0bi5xdWVyeVNlbGVjdG9yKCdhJyk7XHJcblxyXG4gICAgICAgIGxpbmsuaHJlZiA9IHNlbGVjdGlvbkFUYWcuaHJlZjtcclxuICAgICAgICBsaW5rLnRpdGxlID0gc2VsZWN0aW9uQVRhZy50ZXh0Q29udGVudDtcclxuICAgICAgICBsaW5rLnRleHRDb250ZW50ID0gc2VsZWN0aW9uQVRhZy50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHNlbGVjdGlvbkFUYWcsICdvbicpO1xyXG4gICAgICAgIHRoaXMuc2V0Q29udHJvbGxlclBvc2l0aW9uKGxpbmtCdG4sIHNlbGVjdGlvbkFUYWcsICdib3R0b20nLCB7bGVmdDogMCwgdG9wOiAwfSk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc09uKGxpbmtCdG4sIHNlbGVjdGlvbkFUYWcsICdsaW5rJywgdGhpcy51dGlsLnJlbW92ZUNsYXNzLmJpbmQodGhpcy51dGlsLCB0aGlzLmNvbnRleHQubGluay5fbGlua0FuY2hvciwgJ29uJykpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNsaWNrX2xpbmtDb250cm9sbGVyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpIHx8IGUudGFyZ2V0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAoL3VwZGF0ZS8udGVzdChjb21tYW5kKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLm9wZW4uY2FsbCh0aGlzLCAnbGluaycsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoL3VubGluay8udGVzdChjb21tYW5kKSkge1xyXG4gICAgICAgICAgICBjb25zdCBzYyA9IHRoaXMudXRpbC5nZXRDaGlsZEVsZW1lbnQodGhpcy5jb250ZXh0LmxpbmsuX2xpbmtBbmNob3IsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgZWMgPSB0aGlzLnV0aWwuZ2V0Q2hpbGRFbGVtZW50KHRoaXMuY29udGV4dC5saW5rLl9saW5rQW5jaG9yLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCB8fCBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShzYywgMCwgZWMsIGVjLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZUNoYW5nZShudWxsLCBudWxsLCBbJ0EnXSwgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8qKiBkZWxldGUgKi9cclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0odGhpcy5jb250ZXh0LmxpbmsuX2xpbmtBbmNob3IpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlci5saW5rLmxpbmtBbmNob3IgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQubGluay5saW5rQ29udHJvbGxlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3IuaW5pdC5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyLmxpbmspO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IGRpYWxvZyBmcm9tICcuLi9tb2R1bGVzL2RpYWxvZyc7XHJcbmltcG9ydCBhbmNob3IgZnJvbSAnLi4vbW9kdWxlcy9fYW5jaG9yJztcclxuaW1wb3J0IGNvbXBvbmVudCBmcm9tICcuLi9tb2R1bGVzL2NvbXBvbmVudCc7XHJcbmltcG9ydCByZXNpemluZyBmcm9tICcuLi9tb2R1bGVzL3Jlc2l6aW5nJztcclxuaW1wb3J0IGZpbGVNYW5hZ2VyIGZyb20gJy4uL21vZHVsZXMvZmlsZU1hbmFnZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2ltYWdlJyxcclxuICAgIGRpc3BsYXk6ICdkaWFsb2cnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvcmUuYWRkTW9kdWxlKFtkaWFsb2csIGFuY2hvciwgY29tcG9uZW50LCByZXNpemluZywgZmlsZU1hbmFnZXJdKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gY29yZS5vcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gY29udGV4dC5pbWFnZSA9IHtcclxuICAgICAgICAgICAgX2luZm9MaXN0OiBbXSwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIF9pbmZvSW5kZXg6IDAsIC8vIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICAgICAgICBfdXBsb2FkRmlsZUxlbmd0aDogMCwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIGZvY3VzRWxlbWVudDogbnVsbCwgLy8gQE92ZXJyaWRlIGRpYWxvZyAvLyBUaGlzIGVsZW1lbnQgaGFzIGZvY3VzIHdoZW4gdGhlIGRpYWxvZyBpcyBvcGVuZWQuXHJcbiAgICAgICAgICAgIHNpemVVbml0OiBvcHRpb25zLl9pbWFnZVNpemVVbml0LFxyXG4gICAgICAgICAgICBfbGlua0VsZW1lbnQ6ICcnLFxyXG4gICAgICAgICAgICBfYWx0VGV4dDogJycsXHJcbiAgICAgICAgICAgIF9hbGlnbjogJ25vbmUnLFxyXG4gICAgICAgICAgICBfZmxvYXRDbGFzc1JlZ0V4cDogJ19fc2VfX2Zsb2F0XFxcXC1bYS16XSsnLFxyXG4gICAgICAgICAgICBfdl9zcmM6IHtfbGlua1ZhbHVlOiAnJ30sXHJcbiAgICAgICAgICAgIHN2Z0RlZmF1bHRTaXplOiAnMzAlJyxcclxuICAgICAgICAgICAgYmFzZTY0UmVuZGVySW5kZXg6IDAsXHJcbiAgICAgICAgICAgIC8vIEByZXF1aXJlIEBPdmVycmlkZSBjb21wb25lbnRcclxuICAgICAgICAgICAgX2VsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIF9jb3ZlcjogbnVsbCxcclxuICAgICAgICAgICAgX2NvbnRhaW5lcjogbnVsbCxcclxuICAgICAgICAgICAgLy8gQE92ZXJyaWRlIHJlc2l6aW5nIHByb3BlcnRpZXNcclxuICAgICAgICAgICAgaW5wdXRYOiBudWxsLFxyXG4gICAgICAgICAgICBpbnB1dFk6IG51bGwsXHJcbiAgICAgICAgICAgIF9lbGVtZW50X3c6IDEsXHJcbiAgICAgICAgICAgIF9lbGVtZW50X2g6IDEsXHJcbiAgICAgICAgICAgIF9lbGVtZW50X2w6IDAsXHJcbiAgICAgICAgICAgIF9lbGVtZW50X3Q6IDAsXHJcbiAgICAgICAgICAgIF9kZWZhdWx0U2l6ZVg6ICdhdXRvJyxcclxuICAgICAgICAgICAgX2RlZmF1bHRTaXplWTogJ2F1dG8nLFxyXG4gICAgICAgICAgICBfb3JpZ2luX3c6IG9wdGlvbnMuaW1hZ2VXaWR0aCA9PT0gJ2F1dG8nID8gJycgOiBvcHRpb25zLmltYWdlV2lkdGgsXHJcbiAgICAgICAgICAgIF9vcmlnaW5faDogb3B0aW9ucy5pbWFnZUhlaWdodCA9PT0gJ2F1dG8nID8gJycgOiBvcHRpb25zLmltYWdlSGVpZ2h0LFxyXG4gICAgICAgICAgICBfcHJvcG9ydGlvbkNoZWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIF9yZXNpemluZzogb3B0aW9ucy5pbWFnZVJlc2l6aW5nLFxyXG4gICAgICAgICAgICBfcmVzaXplRG90SGlkZTogIW9wdGlvbnMuaW1hZ2VIZWlnaHRTaG93LFxyXG4gICAgICAgICAgICBfcm90YXRpb246IG9wdGlvbnMuaW1hZ2VSb3RhdGlvbixcclxuICAgICAgICAgICAgX2FsaWduSGlkZTogIW9wdGlvbnMuaW1hZ2VBbGlnblNob3csXHJcbiAgICAgICAgICAgIF9vbmx5UGVyY2VudGFnZTogb3B0aW9ucy5pbWFnZVNpemVPbmx5UGVyY2VudGFnZSxcclxuICAgICAgICAgICAgX3JhdGlvOiBmYWxzZSxcclxuICAgICAgICAgICAgX3JhdGlvWDogMSxcclxuICAgICAgICAgICAgX3JhdGlvWTogMSxcclxuICAgICAgICAgICAgX2NhcHRpb25TaG93OiB0cnVlLFxyXG4gICAgICAgICAgICBfY2FwdGlvbkNoZWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBfY2FwdGlvbjogbnVsbCxcclxuICAgICAgICAgICAgY2FwdGlvbkNoZWNrRWw6IG51bGxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogaW1hZ2UgZGlhbG9nICovXHJcbiAgICAgICAgbGV0IGltYWdlX2RpYWxvZyA9IHRoaXMuc2V0RGlhbG9nKGNvcmUpO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5tb2RhbCA9IGltYWdlX2RpYWxvZztcclxuICAgICAgICBjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlID0gaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfaW1hZ2VfZmlsZScpO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5pbWdVcmxGaWxlID0gaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfaW1hZ2VfdXJsJyk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLmZvY3VzRWxlbWVudCA9IGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUgfHwgY29udGV4dEltYWdlLmltZ1VybEZpbGU7XHJcbiAgICAgICAgY29udGV4dEltYWdlLmFsdFRleHQgPSBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV9pbWFnZV9hbHQnKTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuY2FwdGlvbkNoZWNrRWwgPSBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV9pbWFnZV9jaGVja19jYXB0aW9uJyk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLnByZXZpZXdTcmMgPSBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV90YWJfY29udGVudF9pbWFnZSAuc2UtbGluay1wcmV2aWV3Jyk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5zZS1kaWFsb2ctdGFicycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuVGFiLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCdmb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5zdWJtaXQuYmluZChjb3JlKSk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUpIGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtZmlsZS1yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX3JlbW92ZVNlbGVjdGVkRmlsZXMuYmluZChjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlLCBjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZSwgY29udGV4dEltYWdlLnByZXZpZXdTcmMpKTtcclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLmltZ1VybEZpbGUpIGNvbnRleHRJbWFnZS5pbWdVcmxGaWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5fb25MaW5rUHJldmlldy5iaW5kKGNvbnRleHRJbWFnZS5wcmV2aWV3U3JjLCBjb250ZXh0SW1hZ2UuX3Zfc3JjLCBvcHRpb25zLmxpbmtQcm90b2NvbCkpO1xyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlICYmIGNvbnRleHRJbWFnZS5pbWdVcmxGaWxlKSBjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX2ZpbGVJbnB1dENoYW5nZS5iaW5kKGNvbnRleHRJbWFnZSkpO1xyXG5cclxuICAgICAgICBjb25zdCBpbWFnZUdhbGxlcnlCdXR0b24gPSBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9fc2VfX2dhbGxlcnknKTtcclxuICAgICAgICBpZiAoaW1hZ2VHYWxsZXJ5QnV0dG9uKSBpbWFnZUdhbGxlcnlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vcGVuR2FsbGVyeS5iaW5kKGNvcmUpKTtcclxuICAgICAgICBcclxuICAgICAgICBjb250ZXh0SW1hZ2UucHJvcG9ydGlvbiA9IHt9O1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFggPSB7fTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRZID0ge307XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaW1hZ2VSZXNpemluZykge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UucHJvcG9ydGlvbiA9IGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX2ltYWdlX2NoZWNrX3Byb3BvcnRpb24nKTtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WCA9IGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX2ltYWdlX3NpemVfeCcpO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRZID0gaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfaW1hZ2Vfc2l6ZV95Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUgPSBvcHRpb25zLmltYWdlV2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFkudmFsdWUgPSBvcHRpb25zLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuc2V0SW5wdXRTaXplLmJpbmQoY29yZSwgJ3gnKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLnNldElucHV0U2l6ZS5iaW5kKGNvcmUsICd5JykpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnNldFJhdGlvLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRZLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuc2V0UmF0aW8uYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5wcm9wb3J0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuc2V0UmF0aW8uYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWRpYWxvZy1idG4tcmV2ZXJ0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnNpemVSZXZlcnQuYmluZChjb3JlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiogYXBwZW5kIGh0bWwgKi9cclxuICAgICAgICBjb250ZXh0LmRpYWxvZy5tb2RhbC5hcHBlbmRDaGlsZChpbWFnZV9kaWFsb2cpO1xyXG5cclxuICAgICAgICAvKiogbGluayBldmVudCAqL1xyXG4gICAgICAgIGNvcmUucGx1Z2lucy5hbmNob3IuaW5pdEV2ZW50LmNhbGwoY29yZSwgJ2ltYWdlJywgaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfdGFiX2NvbnRlbnRfdXJsJykpO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5hbmNob3JDdHggPSBjb3JlLmNvbnRleHQuYW5jaG9yLmNhbGxlci5pbWFnZTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGltYWdlX2RpYWxvZyA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKiBkaWFsb2cgKi9cclxuICAgIHNldERpYWxvZzogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBkaWFsb2cgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGRpYWxvZy5jbGFzc05hbWUgPSAnc2UtZGlhbG9nLWNvbnRlbnQgc2UtZGlhbG9nLWltYWdlJztcclxuICAgICAgICBkaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgbGV0IGh0bWwgPSAnJyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWhlYWRlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImNsb3NlXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWNsb3NlXCIgY2xhc3M9XCJjbG9zZVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5jYW5jZWwgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtbW9kYWwtdGl0bGVcIj4nICsgbGFuZy5kaWFsb2dCb3guaW1hZ2VCb3gudGl0bGUgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLXRhYnNcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIl9zZV90YWJfbGluayBhY3RpdmVcIiBkYXRhLXRhYi1saW5rPVwiaW1hZ2VcIj4nICsgbGFuZy50b29sYmFyLmltYWdlICsgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiX3NlX3RhYl9saW5rXCIgZGF0YS10YWItbGluaz1cInVybFwiPicgKyBsYW5nLnRvb2xiYXIubGluayArICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGZvcm0gbWV0aG9kPVwicG9zdFwiIGVuY3R5cGU9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIl9zZV90YWJfY29udGVudCBfc2VfdGFiX2NvbnRlbnRfaW1hZ2VcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1ib2R5XCI+PGRpdiBzdHlsZT1cImJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgI2NjYztcIj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaW1hZ2VGaWxlSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3guaW1hZ2VCb3guZmlsZSArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm0tZmlsZXNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWZvcm0gX3NlX2ltYWdlX2ZpbGVcIiB0eXBlPVwiZmlsZVwiIGFjY2VwdD1cIicgKyBvcHRpb24uaW1hZ2VBY2NlcHQgKyAnXCInICsgKG9wdGlvbi5pbWFnZU11bHRpcGxlRmlsZSA/ICcgbXVsdGlwbGU9XCJtdWx0aXBsZVwiJyA6ICcnKSArICcvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWZpbGVzLWVkZ2UtYnV0dG9uIHNlLWZpbGUtcmVtb3ZlXCIgdGl0bGU9XCInICsgbGFuZy5jb250cm9sbGVyLnJlbW92ZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnXCI+JyArIGNvcmUuaWNvbnMuY2FuY2VsICsgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nIDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pbWFnZVVybElucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+JyArIGxhbmcuZGlhbG9nQm94LmltYWdlQm94LnVybCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm0tZmlsZXNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWZvcm0gc2UtaW5wdXQtdXJsIF9zZV9pbWFnZV91cmxcIiB0eXBlPVwidGV4dFwiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgob3B0aW9uLmltYWdlR2FsbGVyeVVybCAmJiBjb3JlLnBsdWdpbnMuaW1hZ2VHYWxsZXJ5KSA/ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0biBzZS1kaWFsb2ctZmlsZXMtZWRnZS1idXR0b24gX19zZV9fZ2FsbGVyeVwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci5pbWFnZUdhbGxlcnkgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLnRvb2xiYXIuaW1hZ2VHYWxsZXJ5ICsgJ1wiPicgKyBjb3JlLmljb25zLmltYWdlX2dhbGxlcnkgKyAnPC9idXR0b24+JyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cHJlIGNsYXNzPVwic2UtbGluay1wcmV2aWV3XCI+PC9wcmU+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+JyArIGxhbmcuZGlhbG9nQm94LmltYWdlQm94LmFsdFRleHQgKyAnPC9sYWJlbD48aW5wdXQgY2xhc3M9XCJzZS1pbnB1dC1mb3JtIF9zZV9pbWFnZV9hbHRcIiB0eXBlPVwidGV4dFwiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbi5pbWFnZVJlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbmx5UGVyY2VudGFnZSA9IG9wdGlvbi5pbWFnZVNpemVPbmx5UGVyY2VudGFnZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlQZXJjZW50RGlzcGxheSA9IG9ubHlQZXJjZW50YWdlID8gJyBzdHlsZT1cImRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcIicgOiAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodERpc3BsYXkgPSAhb3B0aW9uLmltYWdlSGVpZ2h0U2hvdyA/ICcgc3R5bGU9XCJkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XCInIDogJyc7XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25seVBlcmNlbnRhZ2UgfHwgIW9wdGlvbi5pbWFnZUhlaWdodFNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctc2l6ZS10ZXh0XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNpemUtd1wiPicgKyBsYW5nLmRpYWxvZ0JveC5zaXplICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctc2l6ZS10ZXh0XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNpemUtd1wiPicgKyBsYW5nLmRpYWxvZ0JveC53aWR0aCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWwgY2xhc3M9XCJzZS1kaWFsb2ctc2l6ZS14XCI+Jm5ic3A7PC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2l6ZS1oXCI+JyArIGxhbmcuZGlhbG9nQm94LmhlaWdodCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtY29udHJvbCBfc2VfaW1hZ2Vfc2l6ZV94XCIgcGxhY2Vob2xkZXI9XCJhdXRvXCInICsgKG9ubHlQZXJjZW50YWdlID8gJyB0eXBlPVwibnVtYmVyXCIgbWluPVwiMVwiJyA6ICd0eXBlPVwidGV4dFwiJykgKyAob25seVBlcmNlbnRhZ2UgPyAnIG1heD1cIjEwMFwiJyA6ICcnKSArICcgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWwgY2xhc3M9XCJzZS1kaWFsb2ctc2l6ZS14XCInICsgaGVpZ2h0RGlzcGxheSArICc+JyArIChvbmx5UGVyY2VudGFnZSA/ICclJyA6ICd4JykgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInNlLWlucHV0LWNvbnRyb2wgX3NlX2ltYWdlX3NpemVfeVwiIHBsYWNlaG9sZGVyPVwiYXV0b1wiJyArIG9ubHlQZXJjZW50RGlzcGxheSArIChvbmx5UGVyY2VudGFnZSA/ICcgbWF4PVwiMTAwXCInIDogJycpICsgaGVpZ2h0RGlzcGxheSArICcvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCcgKyBvbmx5UGVyY2VudERpc3BsYXkgKyBoZWlnaHREaXNwbGF5ICsgJz48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLWNoZWNrIF9zZV9pbWFnZV9jaGVja19wcm9wb3J0aW9uXCIgY2hlY2tlZC8+Jm5ic3A7JyArIGxhbmcuZGlhbG9nQm94LnByb3BvcnRpb24gKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5yZXZlcnRCdXR0b24gKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5yZXZlcnRCdXR0b24gKyAnXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWJ0bi1yZXZlcnRcIiBzdHlsZT1cImZsb2F0OiByaWdodDtcIj4nICsgY29yZS5pY29ucy5yZXZlcnQgKyAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nIDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm0gc2UtZGlhbG9nLWZvcm0tZm9vdGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tY2hlY2sgX3NlX2ltYWdlX2NoZWNrX2NhcHRpb25cIiAvPiZuYnNwOycgKyBsYW5nLmRpYWxvZ0JveC5jYXB0aW9uICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIl9zZV90YWJfY29udGVudCBfc2VfdGFiX2NvbnRlbnRfdXJsXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jb250ZXh0LmFuY2hvci5mb3Jtcy5pbm5lckhUTUwgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9vdGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYnICsgKG9wdGlvbi5pbWFnZUFsaWduU2hvdyA/ICcnIDogJyBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIicpICsgJz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInN1bmVkaXRvcl9pbWFnZV9yYWRpb1wiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1yYWRpb1wiIHZhbHVlPVwibm9uZVwiIGNoZWNrZWQ+JyArIGxhbmcuZGlhbG9nQm94LmJhc2ljICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJzdW5lZGl0b3JfaW1hZ2VfcmFkaW9cIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tcmFkaW9cIiB2YWx1ZT1cImxlZnRcIj4nICsgbGFuZy5kaWFsb2dCb3gubGVmdCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwic3VuZWRpdG9yX2ltYWdlX3JhZGlvXCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLXJhZGlvXCIgdmFsdWU9XCJjZW50ZXJcIj4nICsgbGFuZy5kaWFsb2dCb3guY2VudGVyICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJzdW5lZGl0b3JfaW1hZ2VfcmFkaW9cIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tcmFkaW9cIiB2YWx1ZT1cInJpZ2h0XCI+JyArIGxhbmcuZGlhbG9nQm94LnJpZ2h0ICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cInNlLWJ0bi1wcmltYXJ5XCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJ1wiPjxzcGFuPicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnPC9zcGFuPjwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9mb3JtPic7XHJcblxyXG4gICAgICAgIGRpYWxvZy5pbm5lckhUTUwgPSBodG1sO1xyXG5cclxuICAgICAgICByZXR1cm4gZGlhbG9nO1xyXG4gICAgfSxcclxuXHJcbiAgICBfZmlsZUlucHV0Q2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmltZ0lucHV0RmlsZS52YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmltZ1VybEZpbGUucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdTcmMuc3R5bGUudGV4dERlY29yYXRpb24gPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmltZ1VybEZpbGUuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdTcmMuc3R5bGUudGV4dERlY29yYXRpb24gPSAnbGluZS10aHJvdWdoJztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9yZW1vdmVTZWxlY3RlZEZpbGVzOiBmdW5jdGlvbiAodXJsSW5wdXQsIHByZXZpZXdTcmMpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaWYgKHVybElucHV0KSB7XHJcbiAgICAgICAgICAgIHVybElucHV0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgcHJldmlld1NyYy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX29wZW5HYWxsZXJ5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsUGx1Z2luKCdpbWFnZUdhbGxlcnknLCB0aGlzLnBsdWdpbnMuaW1hZ2VHYWxsZXJ5Lm9wZW4uYmluZCh0aGlzLCB0aGlzLnBsdWdpbnMuaW1hZ2UuX3NldFVybElucHV0LmJpbmQodGhpcy5jb250ZXh0LmltYWdlKSksIG51bGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0VXJsSW5wdXQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICB0aGlzLmFsdFRleHQudmFsdWUgPSB0YXJnZXQuYWx0O1xyXG4gICAgICAgIHRoaXMuX3Zfc3JjLl9saW5rVmFsdWUgPSB0aGlzLnByZXZpZXdTcmMudGV4dENvbnRlbnQgPSB0aGlzLmltZ1VybEZpbGUudmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgdGFyZ2V0LnNyYztcclxuICAgICAgICB0aGlzLmltZ1VybEZpbGUuZm9jdXMoKTtcclxuICAgIH0sXHJcblxyXG4gICAgX29uTGlua1ByZXZpZXc6IGZ1bmN0aW9uIChjb250ZXh0LCBwcm90b2NvbCwgZSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIGNvbnRleHQuX2xpbmtWYWx1ZSA9IHRoaXMudGV4dENvbnRlbnQgPSAhdmFsdWUgPyAnJyA6IChwcm90b2NvbCAmJiB2YWx1ZS5pbmRleE9mKCc6Ly8nKSA9PT0gLTEgJiYgdmFsdWUuaW5kZXhPZignIycpICE9PSAwKSA/IHByb3RvY29sICsgdmFsdWUgOiB2YWx1ZS5pbmRleE9mKCc6Ly8nKSA9PT0gLTEgPyAnLycgKyB2YWx1ZSA6IHZhbHVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBAUmVxdWlyZWQgZmlsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgZmlsZVRhZ3M6IFsnaW1nJ10sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZSwgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMgY2FsbGVkIGZyb20gY29yZS5zZWxlY3RDb21wb25lbnQuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgc2VsZWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5vbk1vZGlmeU1vZGUuY2FsbCh0aGlzLCBlbGVtZW50LCB0aGlzLnBsdWdpbnMucmVzaXppbmcuY2FsbF9jb250cm9sbGVyX3Jlc2l6ZS5jYWxsKHRoaXMsIGVsZW1lbnQsICdpbWFnZScpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VFbCA9IGVsZW1lbnQgfHwgdGhpcy5jb250ZXh0LmltYWdlLl9lbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IGltYWdlQ29udGFpbmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoaW1hZ2VFbCwgdGhpcy51dGlsLmlzTWVkaWFDb21wb25lbnQpIHx8IGltYWdlRWw7XHJcbiAgICAgICAgY29uc3QgZGF0YUluZGV4ID0gaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSAqIDE7XHJcblxyXG4gICAgICAgIC8vIGV2ZW50XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkltYWdlRGVsZXRlQmVmb3JlID09PSAnZnVuY3Rpb24nICYmICh0aGlzLmZ1bmN0aW9ucy5vbkltYWdlRGVsZXRlQmVmb3JlKGltYWdlRWwsIGltYWdlQ29udGFpbmVyLCBkYXRhSW5kZXgsIHRoaXMpID09PSBmYWxzZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGZvY3VzRWwgPSAoaW1hZ2VDb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZyB8fCBpbWFnZUNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGVtcHR5RGl2ID0gaW1hZ2VDb250YWluZXIucGFyZW50Tm9kZTtcclxuICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShpbWFnZUNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmluaXQuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgIGlmIChlbXB0eURpdiAhPT0gdGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5ZykgdGhpcy51dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKGVtcHR5RGl2LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMDsgfSwgbnVsbCk7XHJcblxyXG4gICAgICAgIC8vIGZvY3VzXHJcbiAgICAgICAgdGhpcy5mb2N1c0VkZ2UoZm9jdXNFbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZXZlbnRcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuZGVsZXRlSW5mby5jYWxsKHRoaXMsICdpbWFnZScsIGRhdGFJbmRleCwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCk7XHJcblxyXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgb246IGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSB0aGlzLmNvbnRleHQuaW1hZ2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF1cGRhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WC52YWx1ZSA9IGNvbnRleHRJbWFnZS5fb3JpZ2luX3cgPSB0aGlzLm9wdGlvbnMuaW1hZ2VXaWR0aCA9PT0gY29udGV4dEltYWdlLl9kZWZhdWx0U2l6ZVggPyAnJyA6IHRoaXMub3B0aW9ucy5pbWFnZVdpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlID0gY29udGV4dEltYWdlLl9vcmlnaW5faCA9IHRoaXMub3B0aW9ucy5pbWFnZUhlaWdodCA9PT0gY29udGV4dEltYWdlLl9kZWZhdWx0U2l6ZVkgPyAnJyA6IHRoaXMub3B0aW9ucy5pbWFnZUhlaWdodDtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUgJiYgdGhpcy5vcHRpb25zLmltYWdlTXVsdGlwbGVGaWxlKSBjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEltYWdlLmltZ0lucHV0RmlsZSAmJiB0aGlzLm9wdGlvbnMuaW1hZ2VNdWx0aXBsZUZpbGUpIGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUucmVtb3ZlQXR0cmlidXRlKCdtdWx0aXBsZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLm9uLmNhbGwodGhpcywgY29udGV4dEltYWdlLmFuY2hvckN0eCwgdXBkYXRlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5vcGVuLmNhbGwodGhpcywgJ2ltYWdlJywgJ2ltYWdlJyA9PT0gdGhpcy5jdXJyZW50Q29udHJvbGxlck5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvcGVuVGFiOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsID0gdGhpcy5jb250ZXh0LmltYWdlLm1vZGFsO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSAoZSA9PT0gJ2luaXQnID8gbW9kYWwucXVlcnlTZWxlY3RvcignLl9zZV90YWJfbGluaycpIDogZS50YXJnZXQpO1xyXG5cclxuICAgICAgICBpZiAoIS9eQlVUVE9OJC9pLnRlc3QodGFyZ2V0RWxlbWVudC50YWdOYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEZWNsYXJlIGFsbCB2YXJpYWJsZXNcclxuICAgICAgICBjb25zdCB0YWJOYW1lID0gdGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFiLWxpbmsnKTtcclxuICAgICAgICBjb25zdCBjb250ZW50Q2xhc3NOYW1lID0gJ19zZV90YWJfY29udGVudCc7XHJcbiAgICAgICAgbGV0IGksIHRhYkNvbnRlbnQsIHRhYkxpbmtzO1xyXG5cclxuICAgICAgICAvLyBHZXQgYWxsIGVsZW1lbnRzIHdpdGggY2xhc3M9XCJ0YWJjb250ZW50XCIgYW5kIGhpZGUgdGhlbVxyXG4gICAgICAgIHRhYkNvbnRlbnQgPSBtb2RhbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNvbnRlbnRDbGFzc05hbWUpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YWJDb250ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRhYkNvbnRlbnRbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEdldCBhbGwgZWxlbWVudHMgd2l0aCBjbGFzcz1cInRhYmxpbmtzXCIgYW5kIHJlbW92ZSB0aGUgY2xhc3MgXCJhY3RpdmVcIlxyXG4gICAgICAgIHRhYkxpbmtzID0gbW9kYWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnX3NlX3RhYl9saW5rJyk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYkxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0YWJMaW5rc1tpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2hvdyB0aGUgY3VycmVudCB0YWIsIGFuZCBhZGQgYW4gXCJhY3RpdmVcIiBjbGFzcyB0byB0aGUgYnV0dG9uIHRoYXQgb3BlbmVkIHRoZSB0YWJcclxuICAgICAgICBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbnRlbnRDbGFzc05hbWUgKyAnXycgKyB0YWJOYW1lKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3ModGFyZ2V0RWxlbWVudCwgJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAvLyBmb2N1c1xyXG4gICAgICAgIGlmICh0YWJOYW1lID09PSAnaW1hZ2UnICYmIHRoaXMuY29udGV4dC5pbWFnZS5mb2N1c0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmltYWdlLmZvY3VzRWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGFiTmFtZSA9PT0gJ3VybCcpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFuY2hvci5jYWxsZXIuaW1hZ2UudXJsSW5wdXQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgc3VibWl0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBjb25zdCBpbWFnZVBsdWdpbiA9IHRoaXMucGx1Z2lucy5pbWFnZTtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fYWx0VGV4dCA9IGNvbnRleHRJbWFnZS5hbHRUZXh0LnZhbHVlO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fYWxpZ24gPSBjb250ZXh0SW1hZ2UubW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN1bmVkaXRvcl9pbWFnZV9yYWRpb1wiXTpjaGVja2VkJykudmFsdWU7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9jYXB0aW9uQ2hlY2tlZCA9IGNvbnRleHRJbWFnZS5jYXB0aW9uQ2hlY2tFbC5jaGVja2VkO1xyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX3Jlc2l6aW5nKSBjb250ZXh0SW1hZ2UuX3Byb3BvcnRpb25DaGVja2VkID0gY29udGV4dEltYWdlLnByb3BvcnRpb24uY2hlY2tlZDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwpIHtcclxuICAgICAgICAgICAgICAgIGltYWdlUGx1Z2luLnVwZGF0ZV9pbWFnZS5jYWxsKHRoaXMsIGZhbHNlLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlICYmIGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUuZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VQbHVnaW4uc3VibWl0QWN0aW9uLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LmltYWdlLmltZ0lucHV0RmlsZS5maWxlcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dEltYWdlLmltZ1VybEZpbGUgJiYgY29udGV4dEltYWdlLl92X3NyYy5fbGlua1ZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIGltYWdlUGx1Z2luLm9uUmVuZGVyX2ltZ1VybC5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZS5fdl9zcmMuX2xpbmtWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5pbWFnZS5zdWJtaXQuZmFpbF0gY2F1c2UgOiBcIicgKyBlcnJvci5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5jbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICBzdWJtaXRBY3Rpb246IGZ1bmN0aW9uIChmaWxlTGlzdCkge1xyXG4gICAgICAgIGlmIChmaWxlTGlzdC5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGZpbGVTaXplID0gMDtcclxuICAgICAgICBsZXQgZmlsZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZmlsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKC9pbWFnZS9pLnRlc3QoZmlsZUxpc3RbaV0udHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgZmlsZVNpemUgKz0gZmlsZUxpc3RbaV0uc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbGltaXRTaXplID0gdGhpcy5vcHRpb25zLmltYWdlVXBsb2FkU2l6ZUxpbWl0O1xyXG4gICAgICAgIGlmIChsaW1pdFNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmZvU2l6ZSA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGltYWdlc0luZm8gPSB0aGlzLmNvbnRleHQuaW1hZ2UuX2luZm9MaXN0O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaW1hZ2VzSW5mby5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaW5mb1NpemUgKz0gaW1hZ2VzSW5mb1tpXS5zaXplICogMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKChmaWxlU2l6ZSArIGluZm9TaXplKSA+IGxpbWl0U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9ICdbU1VORURJVE9SLmltYWdlVXBsb2FkLmZhaWxdIFNpemUgb2YgdXBsb2FkYWJsZSB0b3RhbCBpbWFnZXM6ICcgKyAobGltaXRTaXplLzEwMDApICsgJ0tCJztcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZEVycm9yICE9PSAnZnVuY3Rpb24nIHx8IHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWRFcnJvcihlcnIsIHsgJ2xpbWl0U2l6ZSc6IGxpbWl0U2l6ZSwgJ2N1cnJlbnRTaXplJzogaW5mb1NpemUsICd1cGxvYWRTaXplJzogZmlsZVNpemUgfSwgdGhpcykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5ub3RpY2VPcGVuKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX3VwbG9hZEZpbGVMZW5ndGggPSBmaWxlcy5sZW5ndGg7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgYW5jaG9yID0gdGhpcy5wbHVnaW5zLmFuY2hvci5jcmVhdGVBbmNob3IuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UuYW5jaG9yQ3R4LCB0cnVlKTtcclxuICAgICAgICBjb25zdCBpbmZvID0ge1xyXG4gICAgICAgICAgICBhbmNob3I6IGFuY2hvcixcclxuICAgICAgICAgICAgaW5wdXRXaWR0aDogY29udGV4dEltYWdlLmlucHV0WC52YWx1ZSxcclxuICAgICAgICAgICAgaW5wdXRIZWlnaHQ6IGNvbnRleHRJbWFnZS5pbnB1dFkudmFsdWUsXHJcbiAgICAgICAgICAgIGFsaWduOiBjb250ZXh0SW1hZ2UuX2FsaWduLFxyXG4gICAgICAgICAgICBpc1VwZGF0ZTogdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCxcclxuICAgICAgICAgICAgYWx0OiBjb250ZXh0SW1hZ2UuX2FsdFRleHQsXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGNvbnRleHRJbWFnZS5fZWxlbWVudFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZ1bmN0aW9ucy5vbkltYWdlVXBsb2FkQmVmb3JlKGZpbGVzLCBpbmZvLCB0aGlzLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgdGhpcy5fdy5BcnJheS5pc0FycmF5KGRhdGEucmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5yZWdpc3Rlci5jYWxsKHRoaXMsIGluZm8sIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UudXBsb2FkLmNhbGwodGhpcywgaW5mbywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3cuQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggPiAwKSBmaWxlcyA9IHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS51cGxvYWQuY2FsbCh0aGlzLCBpbmZvLCBmaWxlcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGVycm9yOiBmdW5jdGlvbiAobWVzc2FnZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZEVycm9yICE9PSAnZnVuY3Rpb24nIHx8IHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWRFcnJvcihtZXNzYWdlLCByZXNwb25zZSwgdGhpcykpIHtcclxuICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnMubm90aWNlT3BlbihtZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IucGx1Z2luLmltYWdlLmVycm9yXSByZXNwb25zZTogJyArIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgdXBsb2FkOiBmdW5jdGlvbiAoaW5mbywgZmlsZXMpIHtcclxuICAgICAgICBpZiAoIWZpbGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmVycm9yLmNhbGwodGhpcywgZmlsZXMsIG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbWFnZVVwbG9hZFVybCA9IHRoaXMub3B0aW9ucy5pbWFnZVVwbG9hZFVybDtcclxuICAgICAgICBjb25zdCBmaWxlc0xlbiA9IHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwgPyAxIDogZmlsZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyBzZXJ2ZXIgdXBsb2FkXHJcbiAgICAgICAgaWYgKHR5cGVvZiBpbWFnZVVwbG9hZFVybCA9PT0gJ3N0cmluZycgJiYgaW1hZ2VVcGxvYWRVcmwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzTGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZS0nICsgaSwgZmlsZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci51cGxvYWQuY2FsbCh0aGlzLCBpbWFnZVVwbG9hZFVybCwgdGhpcy5vcHRpb25zLmltYWdlVXBsb2FkSGVhZGVyLCBmb3JtRGF0YSwgdGhpcy5wbHVnaW5zLmltYWdlLmNhbGxCYWNrX2ltZ1VwbG9hZC5iaW5kKHRoaXMsIGluZm8pLCB0aGlzLmZ1bmN0aW9ucy5vbkltYWdlVXBsb2FkRXJyb3IpO1xyXG4gICAgICAgIH0gZWxzZSB7IC8vIGJhc2U2NFxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0dXBfcmVhZGVyLmNhbGwodGhpcywgZmlsZXMsIGluZm8uYW5jaG9yLCBpbmZvLmlucHV0V2lkdGgsIGluZm8uaW5wdXRIZWlnaHQsIGluZm8uYWxpZ24sIGluZm8uYWx0LCBmaWxlc0xlbiwgaW5mby5pc1VwZGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjYWxsQmFja19pbWdVcGxvYWQ6IGZ1bmN0aW9uIChpbmZvLCB4bWxIdHRwKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5pbWFnZVVwbG9hZEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnMuaW1hZ2VVcGxvYWRIYW5kbGVyKHhtbEh0dHAsIGluZm8sIHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4bWxIdHRwLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5lcnJvci5jYWxsKHRoaXMsIHJlc3BvbnNlLmVycm9yTWVzc2FnZSwgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLnJlZ2lzdGVyLmNhbGwodGhpcywgaW5mbywgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICByZWdpc3RlcjogZnVuY3Rpb24gKGluZm8sIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZUxpc3QgPSByZXNwb25zZS5yZXN1bHQ7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmaWxlTGlzdC5sZW5ndGgsIGZpbGU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBmaWxlID0geyBuYW1lOiBmaWxlTGlzdFtpXS5uYW1lLCBzaXplOiBmaWxlTGlzdFtpXS5zaXplIH07XHJcbiAgICAgICAgICAgIGlmIChpbmZvLmlzVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UudXBkYXRlX3NyYy5jYWxsKHRoaXMsIGZpbGVMaXN0W2ldLnVybCwgaW5mby5lbGVtZW50LCBmaWxlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmNyZWF0ZV9pbWFnZS5jYWxsKHRoaXMsIGZpbGVMaXN0W2ldLnVybCwgaW5mby5hbmNob3IsIGluZm8uaW5wdXRXaWR0aCwgaW5mby5pbnB1dEhlaWdodCwgaW5mby5hbGlnbiwgZmlsZSwgaW5mby5hbHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldHVwX3JlYWRlcjogZnVuY3Rpb24gKGZpbGVzLCBhbmNob3IsIHdpZHRoLCBoZWlnaHQsIGFsaWduLCBhbHQsIGZpbGVzTGVuLCBpc1VwZGF0ZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmaWxlc0xlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1NVTkVESVRPUi5pbWFnZS5iYXNlNjQuZmFpbF0gY2F1c2UgOiBObyBhcHBsaWNhYmxlIGZpbGVzJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbWFnZS5iYXNlNjRSZW5kZXJJbmRleCA9IGZpbGVzTGVuO1xyXG4gICAgICAgICAgICBjb25zdCB3RmlsZVJlYWRlciA9IHRoaXMuX3cuRmlsZVJlYWRlcjtcclxuICAgICAgICAgICAgY29uc3QgZmlsZXNTdGFjayA9IFtmaWxlc0xlbl07XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbWFnZS5pbnB1dFgudmFsdWUgPSB3aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmltYWdlLmlucHV0WS52YWx1ZSA9IGhlaWdodDtcclxuICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgcmVhZGVyLCBmaWxlOyBpIDwgZmlsZXNMZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyID0gbmV3IHdGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBmaWxlID0gZmlsZXNbaV07XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAocmVhZGVyLCB1cGRhdGUsIHVwZGF0ZUVsZW1lbnQsIGZpbGUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZXNTdGFja1tpbmRleF0gPSB7IHJlc3VsdDogcmVhZGVyLnJlc3VsdCwgZmlsZTogZmlsZSB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoLS10aGlzLmNvbnRleHQuaW1hZ2UuYmFzZTY0UmVuZGVySW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLm9uUmVuZGVyX2ltZ0Jhc2U2NC5jYWxsKHRoaXMsIHVwZGF0ZSwgZmlsZXNTdGFjaywgdXBkYXRlRWxlbWVudCwgYW5jaG9yLCB3aWR0aCwgaGVpZ2h0LCBhbGlnbiwgYWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcywgcmVhZGVyLCBpc1VwZGF0ZSwgdGhpcy5jb250ZXh0LmltYWdlLl9lbGVtZW50LCBmaWxlLCBpKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuaW1hZ2Uuc2V0dXBfcmVhZGVyLmZhaWxdIGNhdXNlIDogXCInICsgZS5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBvblJlbmRlcl9pbWdCYXNlNjQ6IGZ1bmN0aW9uICh1cGRhdGUsIGZpbGVzU3RhY2ssIHVwZGF0ZUVsZW1lbnQsIGFuY2hvciwgd2lkdGgsIGhlaWdodCwgYWxpZ24sIGFsdCkge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZU1ldGhvZCA9IHRoaXMucGx1Z2lucy5pbWFnZS51cGRhdGVfc3JjO1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZU1ldGhvZCA9IHRoaXMucGx1Z2lucy5pbWFnZS5jcmVhdGVfaW1hZ2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZpbGVzU3RhY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmltYWdlLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1maWxlLW5hbWUnLCBmaWxlc1N0YWNrW2ldLmZpbGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaW1hZ2UuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtc2l6ZScsIGZpbGVzU3RhY2tbaV0uZmlsZS5zaXplKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU1ldGhvZC5jYWxsKHRoaXMsIGZpbGVzU3RhY2tbaV0ucmVzdWx0LCB1cGRhdGVFbGVtZW50LCBmaWxlc1N0YWNrW2ldLmZpbGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlTWV0aG9kLmNhbGwodGhpcywgZmlsZXNTdGFja1tpXS5yZXN1bHQsIGFuY2hvciwgd2lkdGgsIGhlaWdodCwgYWxpZ24sIGZpbGVzU3RhY2tbaV0uZmlsZSwgYWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgb25SZW5kZXJfaW1nVXJsOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgaWYgKCF1cmwpIHVybCA9IHRoaXMuY29udGV4dC5pbWFnZS5fdl9zcmMuX2xpbmtWYWx1ZTtcclxuICAgICAgICBpZiAoIXVybCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHtuYW1lOiB1cmwuc3BsaXQoJy8nKS5wb3AoKSwgc2l6ZTogMH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsKSB0aGlzLnBsdWdpbnMuaW1hZ2UudXBkYXRlX3NyYy5jYWxsKHRoaXMsIHVybCwgY29udGV4dEltYWdlLl9lbGVtZW50LCBmaWxlKTtcclxuICAgICAgICAgICAgZWxzZSB0aGlzLnBsdWdpbnMuaW1hZ2UuY3JlYXRlX2ltYWdlLmNhbGwodGhpcywgdXJsLCB0aGlzLnBsdWdpbnMuYW5jaG9yLmNyZWF0ZUFuY2hvci5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZS5hbmNob3JDdHgsIHRydWUpLCBjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlLCBjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlLCBjb250ZXh0SW1hZ2UuX2FsaWduLCBmaWxlLCBjb250ZXh0SW1hZ2UuX2FsdFRleHQpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuaW1hZ2UuVVJMUmVuZGVyaW5nLmZhaWxdIGNhdXNlIDogXCInICsgZS5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG9uUmVuZGVyX2xpbms6IGZ1bmN0aW9uIChpbWdUYWcsIGFuY2hvcikge1xyXG4gICAgICAgIGlmIChhbmNob3IpIHtcclxuICAgICAgICAgICAgYW5jaG9yLnNldEF0dHJpYnV0ZSgnZGF0YS1pbWFnZS1saW5rJywgJ2ltYWdlJyk7XHJcbiAgICAgICAgICAgIGltZ1RhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW1hZ2UtbGluaycsIGFuY2hvci5ocmVmKTtcclxuICAgICAgICAgICAgYW5jaG9yLmFwcGVuZENoaWxkKGltZ1RhZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBhbmNob3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW1nVGFnO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHh5ICd4Jzogd2lkdGgsICd5JzogaGVpZ2h0XHJcbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGUgRXZlbnQgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHNldElucHV0U2l6ZTogZnVuY3Rpb24gKHh5LCBlKSB7XHJcbiAgICAgICAgaWYgKGUgJiYgZS5rZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NldElucHV0U2l6ZS5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5pbWFnZSwgeHkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRSYXRpbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NldFJhdGlvLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LmltYWdlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgY2hlY2tGaWxlSW5mbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlUGx1Z2luID0gdGhpcy5wbHVnaW5zLmltYWdlO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kaWZ5SGFuZGxlciA9IGZ1bmN0aW9uICh0YWcpIHtcclxuICAgICAgICAgICAgaW1hZ2VQbHVnaW4ub25Nb2RpZnlNb2RlLmNhbGwodGhpcywgdGFnLCBudWxsKTtcclxuICAgICAgICAgICAgaW1hZ2VQbHVnaW4ub3Blbk1vZGlmeS5jYWxsKHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAvLyBnZXQgc2l6ZVxyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlID0gY29udGV4dEltYWdlLl9vcmlnaW5fdztcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSA9IGNvbnRleHRJbWFnZS5fb3JpZ2luX2g7XHJcbiAgICAgICAgICAgIC8vIGdldCBhbGlnblxyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLnV0aWwuZ2V0Rm9ybWF0RWxlbWVudCh0YWcpO1xyXG4gICAgICAgICAgICBpZiAoZm9ybWF0KSBjb250ZXh0SW1hZ2UuX2FsaWduID0gZm9ybWF0LnN0eWxlLnRleHRBbGlnbiB8fCBmb3JtYXQuc3R5bGUuZmxvYXQ7XHJcbiAgICAgICAgICAgIC8vIGxpbmtcclxuICAgICAgICAgICAgaWYgKHRoaXMudXRpbC5pc0FuY2hvcih0YWcucGFyZW50Tm9kZSkgJiYgIWNvbnRleHRJbWFnZS5hbmNob3JDdHgubGlua1ZhbHVlKSBjb250ZXh0SW1hZ2UuYW5jaG9yQ3R4LmxpbmtWYWx1ZSA9ICcgJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGltYWdlUGx1Z2luLnVwZGF0ZV9pbWFnZS5jYWxsKHRoaXMsIHRydWUsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgaW1hZ2VQbHVnaW4uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLmNoZWNrSW5mby5jYWxsKHRoaXMsICdpbWFnZScsIFsnaW1nJ10sIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWQsIG1vZGlmeUhhbmRsZXIsIHRydWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICByZXNldEZpbGVJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnJlc2V0SW5mby5jYWxsKHRoaXMsICdpbWFnZScsIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVfaW1hZ2U6IGZ1bmN0aW9uIChzcmMsIGFuY2hvciwgd2lkdGgsIGhlaWdodCwgYWxpZ24sIGZpbGUsIGFsdCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlUGx1Z2luID0gdGhpcy5wbHVnaW5zLmltYWdlO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW4gPSAnaW1hZ2UnO1xyXG5cclxuICAgICAgICBsZXQgb0ltZyA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdJTUcnKTtcclxuICAgICAgICBvSW1nLnNyYyA9IHNyYztcclxuICAgICAgICBvSW1nLmFsdCA9IGFsdDtcclxuICAgICAgICBvSW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnLCAnMCcpO1xyXG4gICAgICAgIGFuY2hvciA9IGltYWdlUGx1Z2luLm9uUmVuZGVyX2xpbmsuY2FsbCh0aGlzLCBvSW1nLCBhbmNob3IgPyAgYW5jaG9yLmNsb25lTm9kZShmYWxzZSkgOiBudWxsKTtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgb0ltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvcG9ydGlvbicsIGNvbnRleHRJbWFnZS5fcHJvcG9ydGlvbkNoZWNrZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY292ZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb3Zlci5jYWxsKHRoaXMsIGFuY2hvcik7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5zZXRfY29udGFpbmVyLmNhbGwodGhpcywgY292ZXIsICdzZS1pbWFnZS1jb250YWluZXInKTtcclxuXHJcbiAgICAgICAgLy8gY2FwdGlvblxyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX2NhcHRpb25DaGVja2VkKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY2FwdGlvbiA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuY3JlYXRlX2NhcHRpb24uY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgY292ZXIuYXBwZW5kQ2hpbGQoY29udGV4dEltYWdlLl9jYXB0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudCA9IG9JbWc7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9jb3ZlciA9IGNvdmVyO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fY29udGFpbmVyID0gY29udGFpbmVyO1xyXG5cclxuICAgICAgICAvLyBzZXQgc2l6ZVxyXG4gICAgICAgIGltYWdlUGx1Z2luLmFwcGx5U2l6ZS5jYWxsKHRoaXMsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBhbGlnblxyXG4gICAgICAgIGltYWdlUGx1Z2luLnNldEFsaWduLmNhbGwodGhpcywgYWxpZ24sIG9JbWcsIGNvdmVyLCBjb250YWluZXIpO1xyXG5cclxuICAgICAgICBvSW1nLm9ubG9hZCA9IGltYWdlUGx1Z2luLl9pbWFnZV9jcmVhdGVfb25sb2FkLmJpbmQodGhpcywgb0ltZywgY29udGV4dEltYWdlLnN2Z0RlZmF1bHRTaXplLCBjb250YWluZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLmluc2VydENvbXBvbmVudChjb250YWluZXIsIHRydWUsIHRydWUsIHRydWUpKSB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuc2V0SW5mby5jYWxsKHRoaXMsICdpbWFnZScsIG9JbWcsIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWQsIGZpbGUsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9ICcnO1xyXG4gICAgfSxcclxuXHJcbiAgICBfaW1hZ2VfY3JlYXRlX29ubG9hZDogZnVuY3Rpb24gKG9JbWcsIHN2Z0RlZmF1bHRTaXplLCBjb250YWluZXIpIHtcclxuICAgICAgICAvLyBzdmcgZXhjZXB0aW9uIGhhbmRsaW5nXHJcbiAgICAgICAgaWYgKG9JbWcub2Zmc2V0V2lkdGggPT09IDApIHRoaXMucGx1Z2lucy5pbWFnZS5hcHBseVNpemUuY2FsbCh0aGlzLCBzdmdEZWZhdWx0U2l6ZSwgJycpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWVkaWFBdXRvU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KG9JbWcsICdpbWFnZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmFwcGVuZEZvcm1hdFRhZyhjb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICBpZiAobGluZSkgdGhpcy5zZXRSYW5nZShsaW5lLCAwLCBsaW5lLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZV9pbWFnZTogZnVuY3Rpb24gKGluaXQsIG9wZW5Db250cm9sbGVyLCBub3RIaXN0b3J5UHVzaCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBsZXQgaW1hZ2VFbCA9IGNvbnRleHRJbWFnZS5fZWxlbWVudDtcclxuICAgICAgICBsZXQgY292ZXIgPSBjb250ZXh0SW1hZ2UuX2NvdmVyO1xyXG4gICAgICAgIGxldCBjb250YWluZXIgPSBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lcjtcclxuICAgICAgICBsZXQgaXNOZXdDb250YWluZXIgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKGNvdmVyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlzTmV3Q29udGFpbmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgaW1hZ2VFbCA9IGNvbnRleHRJbWFnZS5fZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvdmVyID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5zZXRfY292ZXIuY2FsbCh0aGlzLCBpbWFnZUVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250YWluZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgY292ZXIgPSBjb3Zlci5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGltYWdlRWwgPSBjb3Zlci5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcclxuICAgICAgICAgICAgaXNOZXdDb250YWluZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb250YWluZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb250YWluZXIuY2FsbCh0aGlzLCBjb3ZlciwgJ3NlLWltYWdlLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNOZXdDb250YWluZXIpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY292ZXIpO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvdmVyID0gY292ZXI7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudCA9IGltYWdlRWw7XHJcbiAgICAgICAgICAgIGlzTmV3Q29udGFpbmVyID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjaGVjayBzaXplXHJcbiAgICAgICAgbGV0IGNoYW5nZVNpemU7XHJcbiAgICAgICAgY29uc3QgeCA9IHRoaXMudXRpbC5pc051bWJlcihjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlKSA/IGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUgKyBjb250ZXh0SW1hZ2Uuc2l6ZVVuaXQgOiBjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLnV0aWwuaXNOdW1iZXIoY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSkgPyBjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlICsgY29udGV4dEltYWdlLnNpemVVbml0IDogY29udGV4dEltYWdlLmlucHV0WS52YWx1ZTtcclxuICAgICAgICBpZiAoLyUkLy50ZXN0KGltYWdlRWwuc3R5bGUud2lkdGgpKSB7XHJcbiAgICAgICAgICAgIGNoYW5nZVNpemUgPSB4ICE9PSBjb250YWluZXIuc3R5bGUud2lkdGggfHwgeSAhPT0gY29udGFpbmVyLnN0eWxlLmhlaWdodDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaGFuZ2VTaXplID0geCAhPT0gaW1hZ2VFbC5zdHlsZS53aWR0aCB8fCB5ICE9PSBpbWFnZUVsLnN0eWxlLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFsdFxyXG4gICAgICAgIGltYWdlRWwuYWx0ID0gY29udGV4dEltYWdlLl9hbHRUZXh0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGNhcHRpb25cclxuICAgICAgICBsZXQgbW9kaWZpZWRDYXB0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fY2FwdGlvbkNoZWNrZWQpIHtcclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0SW1hZ2UuX2NhcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY2FwdGlvbiA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuY3JlYXRlX2NhcHRpb24uY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGNvdmVyLmFwcGVuZENoaWxkKGNvbnRleHRJbWFnZS5fY2FwdGlvbik7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZENhcHRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fY2FwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oY29udGV4dEltYWdlLl9jYXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY2FwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZENhcHRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsaW5rXHJcbiAgICAgICAgbGV0IGlzTmV3QW5jaG9yID0gbnVsbDtcclxuICAgICAgICBjb25zdCBhbmNob3IgPSB0aGlzLnBsdWdpbnMuYW5jaG9yLmNyZWF0ZUFuY2hvci5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZS5hbmNob3JDdHgsIHRydWUpO1xyXG4gICAgICAgIGlmIChhbmNob3IpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fbGlua0VsZW1lbnQgIT09IGFuY2hvciB8fCAoaXNOZXdDb250YWluZXIgJiYgIWNvbnRhaW5lci5jb250YWlucyhhbmNob3IpKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dEltYWdlLl9saW5rRWxlbWVudCA9IGFuY2hvci5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgY292ZXIuaW5zZXJ0QmVmb3JlKHRoaXMucGx1Z2lucy5pbWFnZS5vblJlbmRlcl9saW5rLmNhbGwodGhpcywgaW1hZ2VFbCwgY29udGV4dEltYWdlLl9saW5rRWxlbWVudCksIGNvbnRleHRJbWFnZS5fY2FwdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpc05ld0FuY2hvciA9IGNvbnRleHRJbWFnZS5fZWxlbWVudDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fbGlua0VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWltYWdlLWxpbmsnLCAnaW1hZ2UnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dEltYWdlLl9saW5rRWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBpbWFnZUVsO1xyXG4gICAgICAgICAgICBpbWFnZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWltYWdlLWxpbmsnLCAnJyk7XHJcbiAgICAgICAgICAgIGlmIChjb3Zlci5jb250YWlucyhjb250ZXh0SW1hZ2UuX2xpbmtFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RWwgPSBpbWFnZUVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY292ZXIucmVtb3ZlQ2hpbGQoY29udGV4dEltYWdlLl9saW5rRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBjb3Zlci5pbnNlcnRCZWZvcmUobmV3RWwsIGNvbnRleHRJbWFnZS5fY2FwdGlvbik7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQgPSBpbWFnZUVsID0gbmV3RWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBleGlzdEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGlmIChpc05ld0NvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBleGlzdEVsZW1lbnQgPSAodGhpcy51dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGNvbnRleHRJbWFnZS5fZWxlbWVudC5wYXJlbnROb2RlKSB8fCB0aGlzLnV0aWwuaXNXeXNpd3lnRGl2KGNvbnRleHRJbWFnZS5fZWxlbWVudC5wYXJlbnROb2RlKSkgPyBcclxuICAgICAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudCA6IFxyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmlzQW5jaG9yKGNvbnRleHRJbWFnZS5fZWxlbWVudC5wYXJlbnROb2RlKSA/IGNvbnRleHRJbWFnZS5fZWxlbWVudC5wYXJlbnROb2RlIDogdGhpcy51dGlsLmdldEZvcm1hdEVsZW1lbnQoY29udGV4dEltYWdlLl9lbGVtZW50KSB8fCBjb250ZXh0SW1hZ2UuX2VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KGNvbnRleHRJbWFnZS5fZWxlbWVudCwgdGhpcy51dGlsLmlzTm90Q2hlY2tpbmdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50ID0gaXNOZXdBbmNob3IgPyBhbmNob3IgOiBjb250ZXh0SW1hZ2UuX2VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoY29udGFpbmVyLCBleGlzdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudXRpbC5pc0xpc3RDZWxsKGV4aXN0RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoY29udGV4dEltYWdlLl9lbGVtZW50LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5wYXJlbnROb2RlID09PSBleGlzdEVsZW1lbnQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50Lmluc2VydEJlZm9yZShjb250YWluZXIsIHJlZmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGNvbnRleHRJbWFnZS5fZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlRW1wdHlOb2RlKHJlZmVyLCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnV0aWwuaXNGb3JtYXRFbGVtZW50KGV4aXN0RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoY29udGV4dEltYWdlLl9lbGVtZW50LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5wYXJlbnROb2RlID09PSBleGlzdEVsZW1lbnQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50ID0gdGhpcy51dGlsLnNwbGl0RWxlbWVudChleGlzdEVsZW1lbnQsIHJlZmVyKTtcclxuICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb250YWluZXIsIGV4aXN0RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShjb250ZXh0SW1hZ2UuX2VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUVtcHR5Tm9kZShleGlzdEVsZW1lbnQsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0RWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPT09IDApIGV4aXN0RWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLnV0aWwuaHRtbFJlbW92ZVdoaXRlU3BhY2UoZXhpc3RFbGVtZW50LmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51dGlsLmlzRm9ybWF0RWxlbWVudChleGlzdEVsZW1lbnQucGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRzID0gZXhpc3RFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0cy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb250YWluZXIsIGV4aXN0RWxlbWVudC5wcmV2aW91c1NpYmxpbmcgPyBmb3JtYXRzLm5leHRFbGVtZW50U2libGluZyA6IGZvcm1hdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX191cGRhdGVUYWdzLm1hcChmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gZXhpc3RFbGVtZW50LmNvbnRhaW5zKGN1cnJlbnQpOyB9KS5sZW5ndGggPT09IDApIHRoaXMudXRpbC5yZW1vdmVJdGVtKGV4aXN0RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudCA9IHRoaXMudXRpbC5pc0ZpZ3VyZXMoZXhpc3RFbGVtZW50LnBhcmVudE5vZGUpID8gZXhpc3RFbGVtZW50LnBhcmVudE5vZGUgOiBleGlzdEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbnRhaW5lciwgZXhpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW1hZ2VFbCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudCA9IGltYWdlRWw7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY292ZXIgPSBjb3ZlcjtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNOZXdBbmNob3IpIHtcclxuICAgICAgICAgICAgaWYgKCFpc05ld0NvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oYW5jaG9yKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGlzTmV3QW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuZ2V0TGlzdENoaWxkcmVuKGFuY2hvciwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIC9JTUcvaS50ZXN0KGN1cnJlbnQudGFnTmFtZSk7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGFuY2hvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRyYW5zZm9ybVxyXG4gICAgICAgIGlmIChtb2RpZmllZENhcHRpb24gfHwgKCFjb250ZXh0SW1hZ2UuX29ubHlQZXJjZW50YWdlICYmIGNoYW5nZVNpemUpKSB7XHJcbiAgICAgICAgICAgIGlmICghaW5pdCAmJiAoL1xcZCsvLnRlc3QoaW1hZ2VFbC5zdHlsZS5oZWlnaHQpIHx8ICh0aGlzLmNvbnRleHQucmVzaXppbmcuX3JvdGF0ZVZlcnRpY2FsICYmIGNvbnRleHRJbWFnZS5fY2FwdGlvbkNoZWNrZWQpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKC8lJC8udGVzdChjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlKSB8fCAvJSQvLnRlc3QoY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcucmVzZXRUcmFuc2Zvcm0uY2FsbCh0aGlzLCBpbWFnZUVsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnNldFRyYW5zZm9ybVNpemUuY2FsbCh0aGlzLCBpbWFnZUVsLCB0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUsIDApLCB0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvbnRleHRJbWFnZS5pbnB1dFkudmFsdWUsIDApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2l6ZVxyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX3Jlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgIGltYWdlRWwuc2V0QXR0cmlidXRlKCdkYXRhLXByb3BvcnRpb24nLCBjb250ZXh0SW1hZ2UuX3Byb3BvcnRpb25DaGVja2VkKTtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5hcHBseVNpemUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWxpZ25cclxuICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0QWxpZ24uY2FsbCh0aGlzLCBudWxsLCBpbWFnZUVsLCBudWxsLCBudWxsKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IGltYWdlc0luZm9cclxuICAgICAgICBpZiAoaW5pdCkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuc2V0SW5mby5jYWxsKHRoaXMsICdpbWFnZScsIGltYWdlRWwsIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWQsIG51bGwsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wZW5Db250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGltYWdlRWwsICdpbWFnZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgIGlmICghbm90SGlzdG9yeVB1c2gpIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlX3NyYzogZnVuY3Rpb24gKHNyYywgZWxlbWVudCwgZmlsZSkge1xyXG4gICAgICAgIGVsZW1lbnQuc3JjID0gc3JjO1xyXG4gICAgICAgIHRoaXMuX3cuc2V0VGltZW91dCh0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuc2V0SW5mby5iaW5kKHRoaXMsICdpbWFnZScsIGVsZW1lbnQsIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWQsIGZpbGUsIHRydWUpKTtcclxuICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudChlbGVtZW50LCAnaW1hZ2UnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVNYW5hZ2VyLCByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBvbk1vZGlmeU1vZGU6IGZ1bmN0aW9uIChlbGVtZW50LCBzaXplKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fbGlua0VsZW1lbnQgPSBjb250ZXh0SW1hZ2UuYW5jaG9yQ3R4LmxpbmtBbmNob3IgPSB0aGlzLnV0aWwuaXNBbmNob3IoZWxlbWVudC5wYXJlbnROb2RlKSA/IGVsZW1lbnQucGFyZW50Tm9kZSA6IG51bGw7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2NvdmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgJ0ZJR1VSRScpO1xyXG4gICAgICAgIC8vIGlmIChjb250ZXh0SW1hZ2UuX2NvdmVyID09PSBudWxsKSB7XHJcbiAgICAgICAgLy8gICAgIGNvbnRleHRJbWFnZS5fY292ZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb3Zlci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KGVsZW1lbnQsIHRoaXMudXRpbC5pc01lZGlhQ29tcG9uZW50KTtcclxuICAgICAgICAvLyBpZiAoY29udGV4dEltYWdlLl9jb250YWluZXIgPT09IG51bGwpIHtcclxuICAgICAgICAvLyAgICAgY29udGV4dEltYWdlLl9jb250YWluZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb250YWluZXIuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UuX2NvdmVyLCAnc2UtaW1hZ2UtY29udGFpbmVyJyk7XHJcbiAgICAgICAgLy8gfSBcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2NhcHRpb24gPSB0aGlzLnV0aWwuZ2V0Q2hpbGRFbGVtZW50KGNvbnRleHRJbWFnZS5fY292ZXIsICdGSUdDQVBUSU9OJyk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9hbGlnbiA9ICBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hbGlnbicpIHx8IGVsZW1lbnQuc3R5bGUuZmxvYXQgfHwgJ25vbmUnO1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZmxvYXQgPSAnJztcclxuICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldEN0eChjb250ZXh0SW1hZ2UuX2xpbmtFbGVtZW50LCBjb250ZXh0SW1hZ2UuYW5jaG9yQ3R4KTtcclxuXHJcbiAgICAgICAgaWYgKHNpemUpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50X3cgPSBzaXplLnc7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudF9oID0gc2l6ZS5oO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnRfdCA9IHNpemUudDtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50X2wgPSBzaXplLmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdXNlclNpemUgPSBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSB8fCBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicpO1xyXG4gICAgICAgIGxldCB3LCBoO1xyXG4gICAgICAgIGlmICh1c2VyU2l6ZSkge1xyXG4gICAgICAgICAgICB1c2VyU2l6ZSA9IHVzZXJTaXplLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHcgPSB1c2VyU2l6ZVswXTtcclxuICAgICAgICAgICAgaCA9IHVzZXJTaXplWzFdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2l6ZSkge1xyXG4gICAgICAgICAgICB3ID0gc2l6ZS53O1xyXG4gICAgICAgICAgICBoID0gc2l6ZS5oO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dEltYWdlLl9vcmlnaW5fdyA9IHcgfHwgZWxlbWVudC5zdHlsZS53aWR0aCB8fCBlbGVtZW50LndpZHRoIHx8ICcnO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fb3JpZ2luX2ggPSBoIHx8IGVsZW1lbnQuc3R5bGUuaGVpZ2h0IHx8IGVsZW1lbnQuaGVpZ2h0IHx8ICcnO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIG9wZW5Nb2RpZnk6IGZ1bmN0aW9uIChub3RPcGVuKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX3Zfc3JjLl9saW5rVmFsdWUgPSBjb250ZXh0SW1hZ2UucHJldmlld1NyYy50ZXh0Q29udGVudCA9IGNvbnRleHRJbWFnZS5pbWdVcmxGaWxlLnZhbHVlID0gY29udGV4dEltYWdlLl9lbGVtZW50LnNyYztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9hbHRUZXh0ID0gY29udGV4dEltYWdlLmFsdFRleHQudmFsdWUgPSBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuYWx0O1xyXG4gICAgICAgIChjb250ZXh0SW1hZ2UubW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN1bmVkaXRvcl9pbWFnZV9yYWRpb1wiXVt2YWx1ZT1cIicgKyBjb250ZXh0SW1hZ2UuX2FsaWduICsgJ1wiXScpIHx8IGNvbnRleHRJbWFnZS5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX2ltYWdlX3JhZGlvXCJdW3ZhbHVlPVwibm9uZVwiXScpKS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2FsaWduID0gY29udGV4dEltYWdlLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJzdW5lZGl0b3JfaW1hZ2VfcmFkaW9cIl06Y2hlY2tlZCcpLnZhbHVlO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fY2FwdGlvbkNoZWNrZWQgPSBjb250ZXh0SW1hZ2UuY2FwdGlvbkNoZWNrRWwuY2hlY2tlZCA9ICEhY29udGV4dEltYWdlLl9jYXB0aW9uO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX3Jlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NldE1vZGlmeUlucHV0U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZSwgdGhpcy5wbHVnaW5zLmltYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghbm90T3BlbikgdGhpcy5wbHVnaW5zLmRpYWxvZy5vcGVuLmNhbGwodGhpcywgJ2ltYWdlJywgdHJ1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIGFwcGx5U2l6ZTogZnVuY3Rpb24gKHcsIGgpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSB0aGlzLmNvbnRleHQuaW1hZ2U7XHJcblxyXG4gICAgICAgIGlmICghdykgdyA9IGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUgfHwgdGhpcy5vcHRpb25zLmltYWdlV2lkdGg7XHJcbiAgICAgICAgaWYgKCFoKSBoID0gY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSB8fCB0aGlzLm9wdGlvbnMuaW1hZ2VIZWlnaHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKChjb250ZXh0SW1hZ2UuX29ubHlQZXJjZW50YWdlICYmICEhdykgfHwgLyUkLy50ZXN0KHcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRQZXJjZW50U2l6ZS5jYWxsKHRoaXMsIHcsIGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKCghdyB8fCB3ID09PSAnYXV0bycpICYmICghaCB8fCBoID09PSAnYXV0bycpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRBdXRvU2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRTaXplLmNhbGwodGhpcywgdywgaCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzaXplUmV2ZXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2l6ZVJldmVydC5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5pbWFnZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldFNpemU6IGZ1bmN0aW9uICh3LCBoLCBub3RSZXNldFBlcmNlbnRhZ2UsIGRpcmVjdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBjb25zdCBvbmx5VyA9IC9eKHJ3fGx3KSQvLnRlc3QoZGlyZWN0aW9uKSAmJiAvXFxkKy8udGVzdChjb250ZXh0SW1hZ2UuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0KTtcclxuICAgICAgICBjb25zdCBvbmx5SCA9IC9eKHRofGJoKSQvLnRlc3QoZGlyZWN0aW9uKSAmJiAvXFxkKy8udGVzdChjb250ZXh0SW1hZ2UuX2VsZW1lbnQuc3R5bGUud2lkdGgpO1xyXG5cclxuICAgICAgICBpZiAoIW9ubHlIKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMudXRpbC5pc051bWJlcih3KSA/IHcgKyBjb250ZXh0SW1hZ2Uuc2l6ZVVuaXQgOiB3O1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UuY2FuY2VsUGVyY2VudEF0dHIuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFvbmx5Vykge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy51dGlsLmlzTnVtYmVyKGgpID8gaCArIGNvbnRleHRJbWFnZS5zaXplVW5pdCA6IC8lJC8udGVzdChoKSA/ICcnIDogaDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX2FsaWduID09PSAnY2VudGVyJykgdGhpcy5wbHVnaW5zLmltYWdlLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgaWYgKCFub3RSZXNldFBlcmNlbnRhZ2UpIGNvbnRleHRJbWFnZS5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScpO1xyXG5cclxuICAgICAgICAvLyBzYXZlIGN1cnJlbnQgc2l6ZVxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NhdmVDdXJyZW50U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldEF1dG9TaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLl9jYXB0aW9uKSBjb250ZXh0SW1hZ2UuX2NhcHRpb24uc3R5bGUubWFyZ2luVG9wID0gJyc7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnJlc2V0VHJhbnNmb3JtLmNhbGwodGhpcywgY29udGV4dEltYWdlLl9lbGVtZW50KTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UuY2FuY2VsUGVyY2VudEF0dHIuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLm1heFdpZHRoID0gJyc7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLndpZHRoID0gJyc7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgIGlmKGNvbnRleHRJbWFnZS5fY292ZXIpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb3Zlci5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvdmVyLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1wZXJjZW50YWdlJywgJ2F1dG8sYXV0bycpO1xyXG5cclxuICAgICAgICAvLyBzYXZlIGN1cnJlbnQgc2l6ZVxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NhdmVDdXJyZW50U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRPcmlnaW5TaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScpO1xyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcucmVzZXRUcmFuc2Zvcm0uY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UuX2VsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5jYW5jZWxQZXJjZW50QXR0ci5jYWxsKHRoaXMpO1xyXG5cclxuICAgICAgICBjb25zdCBvcmlnaW5TaXplID0gKGNvbnRleHRJbWFnZS5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luJykgfHwgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgY29uc3QgdyA9IG9yaWdpblNpemVbMF07XHJcbiAgICAgICAgY29uc3QgaCA9IG9yaWdpblNpemVbMV07XHJcblxyXG4gICAgICAgIGlmIChvcmlnaW5TaXplKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX29ubHlQZXJjZW50YWdlIHx8ICgvJSQvLnRlc3QodykgJiYgKC8lJC8udGVzdChoKSB8fCAhL1xcZC8udGVzdChoKSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0UGVyY2VudFNpemUuY2FsbCh0aGlzLCB3LCBoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRTaXplLmNhbGwodGhpcywgdywgaCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNhdmUgY3VycmVudCBzaXplXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NhdmVDdXJyZW50U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRQZXJjZW50U2l6ZTogZnVuY3Rpb24gKHcsIGgpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSB0aGlzLmNvbnRleHQuaW1hZ2U7XHJcbiAgICAgICAgaCA9ICEhaCAmJiAhLyUkLy50ZXN0KGgpICYmICF0aGlzLnV0aWwuZ2V0TnVtYmVyKGgsIDApID8gdGhpcy51dGlsLmlzTnVtYmVyKGgpID8gaCArICclJyA6IGggOiB0aGlzLnV0aWwuaXNOdW1iZXIoaCkgPyBoICsgY29udGV4dEltYWdlLnNpemVVbml0IDogKGggfHwgJycpO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodFBlcmNlbnRhZ2UgPSAvJSQvLnRlc3QoaCk7XHJcblxyXG4gICAgICAgIGlmKGNvbnRleHRJbWFnZS5fY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY29udGFpbmVyLnN0eWxlLndpZHRoID0gdGhpcy51dGlsLmlzTnVtYmVyKHcpID8gdyArICclJyA6IHc7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihjb250ZXh0SW1hZ2UuX2NvdmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY292ZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY292ZXIuc3R5bGUuaGVpZ2h0ID0gIWhlaWdodFBlcmNlbnRhZ2UgPyAnJyA6IGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0UGVyY2VudGFnZSA/ICcnIDogaDtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuc3R5bGUubWF4V2lkdGggPSAnJztcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fYWxpZ24gPT09ICdjZW50ZXInKSB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0QWxpZ24uY2FsbCh0aGlzLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcclxuXHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1wZXJjZW50YWdlJywgdyArICcsJyArIGgpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5zZXRDYXB0aW9uUG9zaXRpb24uY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UuX2VsZW1lbnQpO1xyXG5cclxuICAgICAgICAvLyBzYXZlIGN1cnJlbnQgc2l6ZVxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NhdmVDdXJyZW50U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIGNhbmNlbFBlcmNlbnRBdHRyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGNvbnRleHRJbWFnZS5fY292ZXIpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb3Zlci5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvdmVyLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjb250ZXh0SW1hZ2UuX2NvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0SW1hZ2UuX2NvbnRhaW5lciwgdGhpcy5jb250ZXh0LmltYWdlLl9mbG9hdENsYXNzUmVnRXhwKTtcclxuICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dEltYWdlLl9jb250YWluZXIsICdfX3NlX19mbG9hdC0nICsgY29udGV4dEltYWdlLl9hbGlnbik7XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX2FsaWduID09PSAnY2VudGVyJykgdGhpcy5wbHVnaW5zLmltYWdlLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldEFsaWduOiBmdW5jdGlvbiAoYWxpZ24sIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSB0aGlzLmNvbnRleHQuaW1hZ2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFhbGlnbikgYWxpZ24gPSBjb250ZXh0SW1hZ2UuX2FsaWduO1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgZWxlbWVudCA9IGNvbnRleHRJbWFnZS5fZWxlbWVudDtcclxuICAgICAgICBpZiAoIWNvdmVyKSBjb3ZlciA9IGNvbnRleHRJbWFnZS5fY292ZXI7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXIpIGNvbnRhaW5lciA9IGNvbnRleHRJbWFnZS5fY29udGFpbmVyO1xyXG5cclxuICAgICAgICBpZiAoLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUud2lkdGgpICYmIGFsaWduID09PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICBpZihjb250YWluZXIpIGNvbnRhaW5lci5zdHlsZS5taW5XaWR0aCA9ICcxMDAlJztcclxuICAgICAgICAgICAgaWYoY292ZXIpIGNvdmVyLnN0eWxlLndpZHRoID0gY29udGFpbmVyLnN0eWxlLndpZHRoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKGNvbnRhaW5lcikgY29udGFpbmVyLnN0eWxlLm1pbldpZHRoID0gJyc7XHJcbiAgICAgICAgICAgIGlmKGNvdmVyKSBjb3Zlci5zdHlsZS53aWR0aCA9IHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWwgPyAoZWxlbWVudC5zdHlsZS5oZWlnaHQgfHwgZWxlbWVudC5vZmZzZXRIZWlnaHQpIDogKCghZWxlbWVudC5zdHlsZS53aWR0aCB8fCBlbGVtZW50LnN0eWxlLndpZHRoID09PSAnYXV0bycpID8gJycgOiBlbGVtZW50LnN0eWxlLndpZHRoIHx8ICcxMDAlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMudXRpbC5oYXNDbGFzcyhjb250YWluZXIsICdfX3NlX19mbG9hdC0nICsgYWxpZ24pKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250YWluZXIsIGNvbnRleHRJbWFnZS5fZmxvYXRDbGFzc1JlZ0V4cCk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhjb250YWluZXIsICdfX3NlX19mbG9hdC0nICsgYWxpZ24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1hbGlnbicsIGFsaWduKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSB0aGlzLmNvbnRleHQuaW1hZ2U7XHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUpIGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUudmFsdWUgPSAnJztcclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLmltZ1VybEZpbGUpIGNvbnRleHRJbWFnZS5fdl9zcmMuX2xpbmtWYWx1ZSA9IGNvbnRleHRJbWFnZS5wcmV2aWV3U3JjLnRleHRDb250ZW50ID0gY29udGV4dEltYWdlLmltZ1VybEZpbGUudmFsdWUgPSAnJztcclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLmltZ0lucHV0RmlsZSAmJiBjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5wcmV2aWV3U3JjLnN0eWxlLnRleHREZWNvcmF0aW9uID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0SW1hZ2UuYWx0VGV4dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX2ltYWdlX3JhZGlvXCJdW3ZhbHVlPVwibm9uZVwiXScpLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5jYXB0aW9uQ2hlY2tFbC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uub3BlblRhYi5jYWxsKHRoaXMsICdpbml0Jyk7XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX3Jlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUgPSB0aGlzLm9wdGlvbnMuaW1hZ2VXaWR0aCA9PT0gY29udGV4dEltYWdlLl9kZWZhdWx0U2l6ZVggPyAnJyA6IHRoaXMub3B0aW9ucy5pbWFnZVdpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlID0gdGhpcy5vcHRpb25zLmltYWdlSGVpZ2h0ID09PSBjb250ZXh0SW1hZ2UuX2RlZmF1bHRTaXplWSA/ICcnIDogdGhpcy5vcHRpb25zLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UucHJvcG9ydGlvbi5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9yYXRpbyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX3JhdGlvWCA9IDE7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fcmF0aW9ZID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3IuaW5pdC5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZS5hbmNob3JDdHgpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IGRpYWxvZyBmcm9tICcuLi9tb2R1bGVzL2RpYWxvZyc7XHJcbmltcG9ydCBjb21wb25lbnQgZnJvbSAnLi4vbW9kdWxlcy9jb21wb25lbnQnO1xyXG5pbXBvcnQgcmVzaXppbmcgZnJvbSAnLi4vbW9kdWxlcy9yZXNpemluZyc7XHJcbmltcG9ydCBmaWxlTWFuYWdlciBmcm9tICcuLi9tb2R1bGVzL2ZpbGVNYW5hZ2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICd2aWRlbycsXHJcbiAgICBkaXNwbGF5OiAnZGlhbG9nJyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb3JlLmFkZE1vZHVsZShbZGlhbG9nLCBjb21wb25lbnQsIHJlc2l6aW5nLCBmaWxlTWFuYWdlcl0pO1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb25zID0gY29yZS5vcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gY29udGV4dC52aWRlbyA9IHtcclxuICAgICAgICAgICAgX2luZm9MaXN0OiBbXSwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIF9pbmZvSW5kZXg6IDAsIC8vIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICAgICAgICBfdXBsb2FkRmlsZUxlbmd0aDogMCwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIGZvY3VzRWxlbWVudDogbnVsbCwgLy8gQE92ZXJyaWRlIGRpYWxvZyAvLyBUaGlzIGVsZW1lbnQgaGFzIGZvY3VzIHdoZW4gdGhlIGRpYWxvZyBpcyBvcGVuZWQuXHJcbiAgICAgICAgICAgIHNpemVVbml0OiBvcHRpb25zLl92aWRlb1NpemVVbml0LFxyXG4gICAgICAgICAgICBfYWxpZ246ICdub25lJyxcclxuICAgICAgICAgICAgX2Zsb2F0Q2xhc3NSZWdFeHA6ICdfX3NlX19mbG9hdFxcXFwtW2Etel0rJyxcclxuICAgICAgICAgICAgX3lvdXR1YmVRdWVyeTogb3B0aW9ucy55b3V0dWJlUXVlcnksXHJcbiAgICAgICAgICAgIF92aWRlb1JhdGlvOiAob3B0aW9ucy52aWRlb1JhdGlvICogMTAwKSArICclJyxcclxuICAgICAgICAgICAgX2RlZmF1bHRSYXRpbzogKG9wdGlvbnMudmlkZW9SYXRpbyAqIDEwMCkgKyAnJScsXHJcbiAgICAgICAgICAgIF9saW5rVmFsdWU6ICcnLFxyXG4gICAgICAgICAgICAvLyBAcmVxdWlyZSBAT3ZlcnJpZGUgY29tcG9uZW50XHJcbiAgICAgICAgICAgIF9lbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBfY292ZXI6IG51bGwsXHJcbiAgICAgICAgICAgIF9jb250YWluZXI6IG51bGwsXHJcbiAgICAgICAgICAgIC8vIEBPdmVycmlkZSByZXNpemluZyBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIGlucHV0WDogbnVsbCxcclxuICAgICAgICAgICAgaW5wdXRZOiBudWxsLFxyXG4gICAgICAgICAgICBfZWxlbWVudF93OiAxLFxyXG4gICAgICAgICAgICBfZWxlbWVudF9oOiAxLFxyXG4gICAgICAgICAgICBfZWxlbWVudF9sOiAwLFxyXG4gICAgICAgICAgICBfZWxlbWVudF90OiAwLFxyXG4gICAgICAgICAgICBfZGVmYXVsdFNpemVYOiAnMTAwJScsXHJcbiAgICAgICAgICAgIF9kZWZhdWx0U2l6ZVk6IChvcHRpb25zLnZpZGVvUmF0aW8gKiAxMDApICsgJyUnLFxyXG4gICAgICAgICAgICBfb3JpZ2luX3c6IG9wdGlvbnMudmlkZW9XaWR0aCA9PT0gJzEwMCUnID8gJycgOiBvcHRpb25zLnZpZGVvV2lkdGgsXHJcbiAgICAgICAgICAgIF9vcmlnaW5faDogb3B0aW9ucy52aWRlb0hlaWdodCA9PT0gJzU2LjI1JScgPyAnJyA6IG9wdGlvbnMudmlkZW9IZWlnaHQsXHJcbiAgICAgICAgICAgIF9wcm9wb3J0aW9uQ2hlY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgX3Jlc2l6aW5nOiBvcHRpb25zLnZpZGVvUmVzaXppbmcsXHJcbiAgICAgICAgICAgIF9yZXNpemVEb3RIaWRlOiAhb3B0aW9ucy52aWRlb0hlaWdodFNob3csXHJcbiAgICAgICAgICAgIF9yb3RhdGlvbjogb3B0aW9ucy52aWRlb1JvdGF0aW9uLFxyXG4gICAgICAgICAgICBfYWxpZ25IaWRlOiAhb3B0aW9ucy52aWRlb0FsaWduU2hvdyxcclxuICAgICAgICAgICAgX29ubHlQZXJjZW50YWdlOiBvcHRpb25zLnZpZGVvU2l6ZU9ubHlQZXJjZW50YWdlLFxyXG4gICAgICAgICAgICBfcmF0aW86IGZhbHNlLFxyXG4gICAgICAgICAgICBfcmF0aW9YOiAxLFxyXG4gICAgICAgICAgICBfcmF0aW9ZOiAxLFxyXG4gICAgICAgICAgICBfY2FwdGlvblNob3c6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHZpZGVvIGRpYWxvZyAqL1xyXG4gICAgICAgIGxldCB2aWRlb19kaWFsb2cgPSB0aGlzLnNldERpYWxvZyhjb3JlKTtcclxuICAgICAgICBjb250ZXh0VmlkZW8ubW9kYWwgPSB2aWRlb19kaWFsb2c7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlID0gdmlkZW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfdmlkZW9fZmlsZScpO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUgPSB2aWRlb19kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWlucHV0LXVybCcpO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5mb2N1c0VsZW1lbnQgPSBjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlIHx8IGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZTtcclxuICAgICAgICBjb250ZXh0VmlkZW8ucHJldmlldyA9IHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtbGluay1wcmV2aWV3Jyk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgdmlkZW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnN1Ym1pdC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlKSB2aWRlb19kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWRpYWxvZy1maWxlcy1lZGdlLWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fcmVtb3ZlU2VsZWN0ZWRGaWxlcy5iaW5kKGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZSwgY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZSwgY29udGV4dFZpZGVvLnByZXZpZXcpKTtcclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlICYmIGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUpIGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLl9maWxlSW5wdXRDaGFuZ2UuYmluZChjb250ZXh0VmlkZW8pKTtcclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZSkgY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuX29uTGlua1ByZXZpZXcuYmluZChjb250ZXh0VmlkZW8ucHJldmlldywgY29udGV4dFZpZGVvLCBvcHRpb25zLmxpbmtQcm90b2NvbCkpO1xyXG5cclxuICAgICAgICBjb250ZXh0VmlkZW8ucHJvcG9ydGlvbiA9IHt9O1xyXG4gICAgICAgIGNvbnRleHRWaWRlby52aWRlb1JhdGlvT3B0aW9uID0ge307XHJcbiAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WCA9IHt9O1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkgPSB7fTtcclxuICAgICAgICBpZiAob3B0aW9ucy52aWRlb1Jlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5wcm9wb3J0aW9uID0gdmlkZW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfdmlkZW9fY2hlY2tfcHJvcG9ydGlvbicpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8udmlkZW9SYXRpb09wdGlvbiA9IHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtdmlkZW8tcmF0aW8nKTtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WCA9IHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX3ZpZGVvX3NpemVfeCcpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZID0gdmlkZW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfdmlkZW9fc2l6ZV95Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFgudmFsdWUgPSBvcHRpb25zLnZpZGVvV2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkudmFsdWUgPSBvcHRpb25zLnZpZGVvSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuc2V0SW5wdXRTaXplLmJpbmQoY29yZSwgJ3gnKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLnNldElucHV0U2l6ZS5iaW5kKGNvcmUsICd5JykpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnNldFJhdGlvLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuc2V0UmF0aW8uYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5wcm9wb3J0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuc2V0UmF0aW8uYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby52aWRlb1JhdGlvT3B0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuc2V0VmlkZW9SYXRpby5iaW5kKGNvcmUpKTtcclxuXHJcbiAgICAgICAgICAgIHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtZGlhbG9nLWJ0bi1yZXZlcnQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2l6ZVJldmVydC5iaW5kKGNvcmUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xyXG4gICAgICAgIGNvbnRleHQuZGlhbG9nLm1vZGFsLmFwcGVuZENoaWxkKHZpZGVvX2RpYWxvZyk7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICB2aWRlb19kaWFsb2cgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKiogZGlhbG9nICovXHJcbiAgICBzZXREaWFsb2c6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gY29yZS5vcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgZGlhbG9nID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBkaWFsb2cuY2xhc3NOYW1lID0gJ3NlLWRpYWxvZy1jb250ZW50JztcclxuICAgICAgICBkaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBsZXQgaHRtbCA9ICcnICtcclxuICAgICAgICAgICAgJzxmb3JtIG1ldGhvZD1cInBvc3RcIiBlbmN0eXBlPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctaGVhZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImNsb3NlXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWNsb3NlXCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5jbG9zZSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5jYW5jZWwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS1tb2RhbC10aXRsZVwiPicgKyBsYW5nLmRpYWxvZ0JveC52aWRlb0JveC50aXRsZSArICc8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1ib2R5XCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnZpZGVvRmlsZUlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+JyArIGxhbmcuZGlhbG9nQm94LnZpZGVvQm94LmZpbGUgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm0tZmlsZXNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtZm9ybSBfc2VfdmlkZW9fZmlsZVwiIHR5cGU9XCJmaWxlXCIgYWNjZXB0PVwiJyArIG9wdGlvbi52aWRlb0FjY2VwdCArICdcIicgKyAob3B0aW9uLnZpZGVvTXVsdGlwbGVGaWxlID8gJyBtdWx0aXBsZT1cIm11bHRpcGxlXCInIDogJycpICsgJy8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImZpbGVzUmVtb3ZlXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWZpbGVzLWVkZ2UtYnV0dG9uIHNlLWZpbGUtcmVtb3ZlXCIgdGl0bGU9XCInICsgbGFuZy5jb250cm9sbGVyLnJlbW92ZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnXCI+JyArIGNvcmUuaWNvbnMuY2FuY2VsICsgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb24udmlkZW9VcmxJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC52aWRlb0JveC51cmwgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZS1pbnB1dC1mb3JtIHNlLWlucHV0LXVybFwiIHR5cGU9XCJ0ZXh0XCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cHJlIGNsYXNzPVwic2UtbGluay1wcmV2aWV3XCI+PC9wcmU+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbi52aWRlb1Jlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYXRpb0xpc3QgPSBvcHRpb24udmlkZW9SYXRpb0xpc3QgfHwgW3tuYW1lOiAnMTY6OScsIHZhbHVlOiAwLjU2MjV9LCB7bmFtZTogJzQ6MycsIHZhbHVlOiAwLjc1fSwge25hbWU6ICcyMTo5JywgdmFsdWU6IDAuNDI4NX1dO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBvcHRpb24udmlkZW9SYXRpbztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlQZXJjZW50YWdlID0gb3B0aW9uLnZpZGVvU2l6ZU9ubHlQZXJjZW50YWdlO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb25seVBlcmNlbnREaXNwbGF5ID0gb25seVBlcmNlbnRhZ2UgPyAnIHN0eWxlPVwiZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1wiJyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0RGlzcGxheSA9ICFvcHRpb24udmlkZW9IZWlnaHRTaG93ID8gJyBzdHlsZT1cImRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcIicgOiAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGlvRGlzcGxheSA9ICFvcHRpb24udmlkZW9SYXRpb1Nob3cgPyAnIHN0eWxlPVwiZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1wiJyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb25seVdpZHRoRGlzcGxheSA9ICFvbmx5UGVyY2VudGFnZSAmJiAhb3B0aW9uLnZpZGVvSGVpZ2h0U2hvdyAmJiAhb3B0aW9uLnZpZGVvUmF0aW9TaG93ID8gJyBzdHlsZT1cImRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcIicgOiAnJztcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctc2l6ZS10ZXh0XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2l6ZS13XCI+JyArIGxhbmcuZGlhbG9nQm94LndpZHRoICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2UtZGlhbG9nLXNpemUteFwiPiZuYnNwOzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2l6ZS1oXCInICsgaGVpZ2h0RGlzcGxheSArICc+JyArIGxhbmcuZGlhbG9nQm94LmhlaWdodCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNpemUtaFwiJyArIHJhdGlvRGlzcGxheSArICc+KCcgKyBsYW5nLmRpYWxvZ0JveC5yYXRpbyArICcpPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtY29udHJvbCBfc2VfdmlkZW9fc2l6ZV94XCIgcGxhY2Vob2xkZXI9XCIxMDAlXCInICsgKG9ubHlQZXJjZW50YWdlID8gJyB0eXBlPVwibnVtYmVyXCIgbWluPVwiMVwiJyA6ICd0eXBlPVwidGV4dFwiJykgKyAob25seVBlcmNlbnRhZ2UgPyAnIG1heD1cIjEwMFwiJyA6ICcnKSArICcvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2UtZGlhbG9nLXNpemUteFwiJyArIG9ubHlXaWR0aERpc3BsYXkgKyAnPicgKyAob25seVBlcmNlbnRhZ2UgPyAnJScgOiAneCcpICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZS1pbnB1dC1jb250cm9sIF9zZV92aWRlb19zaXplX3lcIiBwbGFjZWhvbGRlcj1cIicgKyAob3B0aW9uLnZpZGVvUmF0aW8gKiAxMDApICsgJyVcIicgKyAob25seVBlcmNlbnRhZ2UgPyAnIHR5cGU9XCJudW1iZXJcIiBtaW49XCIxXCInIDogJ3R5cGU9XCJ0ZXh0XCInKSArIChvbmx5UGVyY2VudGFnZSA/ICcgbWF4PVwiMTAwXCInIDogJycpICsgaGVpZ2h0RGlzcGxheSArICcvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNlbGVjdCBjbGFzcz1cInNlLWlucHV0LXNlbGVjdCBzZS12aWRlby1yYXRpb1wiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LnJhdGlvICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3gucmF0aW8gKyAnXCInICsgcmF0aW9EaXNwbGF5ICsgJz4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWlnaHREaXNwbGF5KSBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiXCI+IC0gPC9vcHRpb24+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByYXRpb0xpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIHJhdGlvTGlzdFtpXS52YWx1ZSArICdcIicgKyAocmF0aW8udG9TdHJpbmcoKSA9PT0gcmF0aW9MaXN0W2ldLnZhbHVlLnRvU3RyaW5nKCkgPyAnIHNlbGVjdGVkJyA6ICcnKSArICc+JyArIHJhdGlvTGlzdFtpXS5uYW1lICsgJzwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzwvc2VsZWN0PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3gucmV2ZXJ0QnV0dG9uICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3gucmV2ZXJ0QnV0dG9uICsgJ1wiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1idG4tcmV2ZXJ0XCIgc3R5bGU9XCJmbG9hdDogcmlnaHQ7XCI+JyArIGNvcmUuaWNvbnMucmV2ZXJ0ICsgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtIHNlLWRpYWxvZy1mb3JtLWZvb3RlclwiJyArIG9ubHlQZXJjZW50RGlzcGxheSArIG9ubHlXaWR0aERpc3BsYXkgKyAnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tY2hlY2sgX3NlX3ZpZGVvX2NoZWNrX3Byb3BvcnRpb25cIiBjaGVja2VkLz4mbmJzcDsnICsgbGFuZy5kaWFsb2dCb3gucHJvcG9ydGlvbiArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvb3RlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2JyArIChvcHRpb24udmlkZW9BbGlnblNob3cgPyAnJyA6ICcgc3R5bGU9XCJkaXNwbGF5OiBub25lXCInKSArICc+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJzdW5lZGl0b3JfdmlkZW9fcmFkaW9cIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tcmFkaW9cIiB2YWx1ZT1cIm5vbmVcIiBjaGVja2VkPicgKyBsYW5nLmRpYWxvZ0JveC5iYXNpYyArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwic3VuZWRpdG9yX3ZpZGVvX3JhZGlvXCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLXJhZGlvXCIgdmFsdWU9XCJsZWZ0XCI+JyArIGxhbmcuZGlhbG9nQm94LmxlZnQgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInN1bmVkaXRvcl92aWRlb19yYWRpb1wiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1yYWRpb1wiIHZhbHVlPVwiY2VudGVyXCI+JyArIGxhbmcuZGlhbG9nQm94LmNlbnRlciArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwic3VuZWRpdG9yX3ZpZGVvX3JhZGlvXCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLXJhZGlvXCIgdmFsdWU9XCJyaWdodFwiPicgKyBsYW5nLmRpYWxvZ0JveC5yaWdodCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJzZS1idG4tcHJpbWFyeVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIj48c3Bhbj4nICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJzwvc3Bhbj48L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZm9ybT4nO1xyXG5cclxuICAgICAgICBkaWFsb2cuaW5uZXJIVE1MID0gaHRtbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRpYWxvZztcclxuICAgIH0sXHJcblxyXG4gICAgX2ZpbGVJbnB1dENoYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0lucHV0RmlsZS52YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvVXJsRmlsZS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlldy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9VcmxGaWxlLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aWV3LnN0eWxlLnRleHREZWNvcmF0aW9uID0gJ2xpbmUtdGhyb3VnaCc7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfcmVtb3ZlU2VsZWN0ZWRGaWxlczogZnVuY3Rpb24gKHVybElucHV0LCBwcmV2aWV3KSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmICh1cmxJbnB1dCkge1xyXG4gICAgICAgICAgICB1cmxJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIHByZXZpZXcuc3R5bGUudGV4dERlY29yYXRpb24gPSAnJztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9vbkxpbmtQcmV2aWV3OiBmdW5jdGlvbiAoY29udGV4dCwgcHJvdG9jb2wsIGUpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKTtcclxuICAgICAgICBpZiAoL148aWZyYW1lLipcXC9pZnJhbWU+JC8udGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5fbGlua1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSAnPElGcmFtZSA6c3JjPVwiLi5cIj48L0lGcmFtZT4nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuX2xpbmtWYWx1ZSA9IHRoaXMudGV4dENvbnRlbnQgPSAhdmFsdWUgPyAnJyA6IChwcm90b2NvbCAmJiB2YWx1ZS5pbmRleE9mKCc6Ly8nKSA9PT0gLTEgJiYgdmFsdWUuaW5kZXhPZignIycpICE9PSAwKSA/IHByb3RvY29sICsgdmFsdWUgOiB2YWx1ZS5pbmRleE9mKCc6Ly8nKSA9PT0gLTEgPyAnLycgKyB2YWx1ZSA6IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3NldFRhZ0F0dHJzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjb250cm9scycsIHRydWUpO1xyXG5cclxuICAgICAgICBjb25zdCBhdHRycyA9IHRoaXMub3B0aW9ucy52aWRlb1RhZ0F0dHJzO1xyXG4gICAgICAgIGlmICghYXR0cnMpIHJldHVybjtcclxuXHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy51dGlsLmhhc093bihhdHRycywga2V5KSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVWaWRlb1RhZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvVGFnID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ1ZJREVPJyk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLl9zZXRUYWdBdHRycy5jYWxsKHRoaXMsIHZpZGVvVGFnKTtcclxuICAgICAgICByZXR1cm4gdmlkZW9UYWc7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRJZnJhbWVBdHRyczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50LmZyYW1lQm9yZGVyID0gJzAnO1xyXG4gICAgICAgIGVsZW1lbnQuYWxsb3dGdWxsc2NyZWVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgY29uc3QgYXR0cnMgPSB0aGlzLm9wdGlvbnMudmlkZW9JZnJhbWVBdHRycztcclxuICAgICAgICBpZiAoIWF0dHJzKSByZXR1cm47XHJcblxyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBhdHRycykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudXRpbC5oYXNPd24oYXR0cnMsIGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlSWZyYW1lVGFnOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgaWZyYW1lVGFnID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0lGUkFNRScpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5fc2V0SWZyYW1lQXR0cnMuY2FsbCh0aGlzLCBpZnJhbWVUYWcpO1xyXG4gICAgICAgIHJldHVybiBpZnJhbWVUYWc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIEBSZXF1aXJlZCBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBmaWxlVGFnczogWydpZnJhbWUnLCAndmlkZW8nXSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlLCByZXNpemluZywgZmlsZU1hbmFnZXJcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBjYWxsZWQgZnJvbSBjb3JlLnNlbGVjdENvbXBvbmVudC5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBzZWxlY3Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLm9uTW9kaWZ5TW9kZS5jYWxsKHRoaXMsIGVsZW1lbnQsIHRoaXMucGx1Z2lucy5yZXNpemluZy5jYWxsX2NvbnRyb2xsZXJfcmVzaXplLmNhbGwodGhpcywgZWxlbWVudCwgJ3ZpZGVvJykpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlciwgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBmcmFtZSA9IGVsZW1lbnQgfHwgdGhpcy5jb250ZXh0LnZpZGVvLl9lbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGV4dC52aWRlby5fY29udGFpbmVyO1xyXG4gICAgICAgIGNvbnN0IGRhdGFJbmRleCA9IGZyYW1lLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpICogMTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvRGVsZXRlQmVmb3JlID09PSAnZnVuY3Rpb24nICYmICh0aGlzLmZ1bmN0aW9ucy5vblZpZGVvRGVsZXRlQmVmb3JlKGZyYW1lLCBjb250YWluZXIsIGRhdGFJbmRleCwgdGhpcykgPT09IGZhbHNlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgZm9jdXNFbCA9IChjb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZyB8fCBjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICBjb25zdCBlbXB0eURpdiA9IGNvbnRhaW5lci5wYXJlbnROb2RlO1xyXG4gICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLmluaXQuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgIGlmIChlbXB0eURpdiAhPT0gdGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5ZykgdGhpcy51dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKGVtcHR5RGl2LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMDsgfSwgbnVsbCk7XHJcblxyXG4gICAgICAgIC8vIGZvY3VzXHJcbiAgICAgICAgdGhpcy5mb2N1c0VkZ2UoZm9jdXNFbCk7XHJcblxyXG4gICAgICAgIC8vIGV2ZW50XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLmRlbGV0ZUluZm8uY2FsbCh0aGlzLCAndmlkZW8nLCBkYXRhSW5kZXgsIHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWQpO1xyXG5cclxuICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG5cclxuICAgICAgICBpZiAoIXVwZGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRYLnZhbHVlID0gY29udGV4dFZpZGVvLl9vcmlnaW5fdyA9IHRoaXMub3B0aW9ucy52aWRlb1dpZHRoID09PSBjb250ZXh0VmlkZW8uX2RlZmF1bHRTaXplWCA/ICcnIDogdGhpcy5vcHRpb25zLnZpZGVvV2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkudmFsdWUgPSBjb250ZXh0VmlkZW8uX29yaWdpbl9oID0gdGhpcy5vcHRpb25zLnZpZGVvSGVpZ2h0ID09PSBjb250ZXh0VmlkZW8uX2RlZmF1bHRTaXplWSA/ICcnIDogdGhpcy5vcHRpb25zLnZpZGVvSGVpZ2h0O1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8ucHJvcG9ydGlvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUgJiYgdGhpcy5vcHRpb25zLnZpZGVvTXVsdGlwbGVGaWxlKSBjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUuc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUgJiYgdGhpcy5vcHRpb25zLnZpZGVvTXVsdGlwbGVGaWxlKSBjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUucmVtb3ZlQXR0cmlidXRlKCdtdWx0aXBsZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby5fcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnNldFZpZGVvUmF0aW9TZWxlY3QuY2FsbCh0aGlzLCBjb250ZXh0VmlkZW8uX29yaWdpbl9oIHx8IGNvbnRleHRWaWRlby5fZGVmYXVsdFJhdGlvKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgb3BlbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cub3Blbi5jYWxsKHRoaXMsICd2aWRlbycsICd2aWRlbycgPT09IHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNldFZpZGVvUmF0aW86IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQub3B0aW9uc1tlLnRhcmdldC5zZWxlY3RlZEluZGV4XS52YWx1ZTtcclxuXHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9kZWZhdWx0U2l6ZVkgPSBjb250ZXh0VmlkZW8uX3ZpZGVvUmF0aW8gPSAhdmFsdWUgPyBjb250ZXh0VmlkZW8uX2RlZmF1bHRTaXplWSA6ICh2YWx1ZSAqIDEwMCkgKyAnJSc7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WS5wbGFjZWhvbGRlciA9ICF2YWx1ZSA/ICcnIDogKHZhbHVlICogMTAwKSArICclJztcclxuICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLnZhbHVlID0gJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30geHkgJ3gnOiB3aWR0aCwgJ3knOiBoZWlnaHRcclxuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZSBFdmVudCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgc2V0SW5wdXRTaXplOiBmdW5jdGlvbiAoeHksIGUpIHtcclxuICAgICAgICBpZiAoZSAmJiBlLmtleUNvZGUgPT09IDMyKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NldElucHV0U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRWaWRlbywgeHkpO1xyXG5cclxuICAgICAgICBpZiAoeHkgPT09ICd5Jykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0VmlkZW9SYXRpb1NlbGVjdC5jYWxsKHRoaXMsIGUudGFyZ2V0LnZhbHVlIHx8IGNvbnRleHRWaWRlby5fZGVmYXVsdFJhdGlvKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldFJhdGlvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2V0UmF0aW8uY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQudmlkZW8pO1xyXG4gICAgfSxcclxuXHJcbiAgICBzdWJtaXQ6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIGNvbnN0IHZpZGVvUGx1Z2luID0gdGhpcy5wbHVnaW5zLnZpZGVvO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9hbGlnbiA9IGNvbnRleHRWaWRlby5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX3ZpZGVvX3JhZGlvXCJdOmNoZWNrZWQnKS52YWx1ZTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZSAmJiBjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUuZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgdmlkZW9QbHVnaW4uc3VibWl0QWN0aW9uLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LnZpZGVvLnZpZGVvSW5wdXRGaWxlLmZpbGVzKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlICYmIGNvbnRleHRWaWRlby5fbGlua1ZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHZpZGVvUGx1Z2luLnNldHVwX3VybC5jYWxsKHRoaXMsIGNvbnRleHRWaWRlby5fbGlua1ZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLnZpZGVvLnN1Ym1pdC5mYWlsXSBjYXVzZSA6IFwiJyArIGVycm9yLm1lc3NhZ2UgKyAnXCInKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIHN1Ym1pdEFjdGlvbjogZnVuY3Rpb24gKGZpbGVMaXN0KSB7XHJcbiAgICAgICAgaWYgKGZpbGVMaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgZmlsZVNpemUgPSAwO1xyXG4gICAgICAgIGxldCBmaWxlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmaWxlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoL3ZpZGVvL2kudGVzdChmaWxlTGlzdFtpXS50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZXMucHVzaChmaWxlTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICBmaWxlU2l6ZSArPSBmaWxlTGlzdFtpXS5zaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsaW1pdFNpemUgPSB0aGlzLm9wdGlvbnMudmlkZW9VcGxvYWRTaXplTGltaXQ7XHJcbiAgICAgICAgaWYgKGxpbWl0U2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGluZm9TaXplID0gMDtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW9zSW5mbyA9IHRoaXMuY29udGV4dC52aWRlby5faW5mb0xpc3Q7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2aWRlb3NJbmZvLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvU2l6ZSArPSB2aWRlb3NJbmZvW2ldLnNpemUgKiAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKGZpbGVTaXplICsgaW5mb1NpemUpID4gbGltaXRTaXplKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gJ1tTVU5FRElUT1IudmlkZW9VcGxvYWQuZmFpbF0gU2l6ZSBvZiB1cGxvYWRhYmxlIHRvdGFsIHZpZGVvczogJyArIChsaW1pdFNpemUvMTAwMCkgKyAnS0InO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkRXJyb3IgIT09ICdmdW5jdGlvbicgfHwgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZEVycm9yKGVyciwgeyAnbGltaXRTaXplJzogbGltaXRTaXplLCAnY3VycmVudFNpemUnOiBpbmZvU2l6ZSwgJ3VwbG9hZFNpemUnOiBmaWxlU2l6ZSB9LCB0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25zLm5vdGljZU9wZW4oZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fdXBsb2FkRmlsZUxlbmd0aCA9IGZpbGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgICAgICAgaW5wdXRXaWR0aDogY29udGV4dFZpZGVvLmlucHV0WC52YWx1ZSxcclxuICAgICAgICAgICAgaW5wdXRIZWlnaHQ6IGNvbnRleHRWaWRlby5pbnB1dFkudmFsdWUsXHJcbiAgICAgICAgICAgIGFsaWduOiBjb250ZXh0VmlkZW8uX2FsaWduLFxyXG4gICAgICAgICAgICBpc1VwZGF0ZTogdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCxcclxuICAgICAgICAgICAgZWxlbWVudDogY29udGV4dFZpZGVvLl9lbGVtZW50XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkQmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWRCZWZvcmUoZmlsZXMsIGluZm8sIHRoaXMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiB0aGlzLl93LkFycmF5LmlzQXJyYXkoZGF0YS5yZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnJlZ2lzdGVyLmNhbGwodGhpcywgaW5mbywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby51cGxvYWQuY2FsbCh0aGlzLCBpbmZvLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIGZpbGVzID0gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnVwbG9hZC5jYWxsKHRoaXMsIGluZm8sIGZpbGVzKTtcclxuICAgIH0sXHJcblxyXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChtZXNzYWdlLCByZXNwb25zZSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkRXJyb3IgIT09ICdmdW5jdGlvbicgfHwgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZEVycm9yKG1lc3NhZ2UsIHJlc3BvbnNlLCB0aGlzKSkge1xyXG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5ub3RpY2VPcGVuKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5wbHVnaW4udmlkZW8uZXJyb3JdIHJlc3BvbnNlOiAnICsgbWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGxvYWQ6IGZ1bmN0aW9uIChpbmZvLCBmaWxlcykge1xyXG4gICAgICAgIGlmICghZmlsZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGZpbGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uZXJyb3IuY2FsbCh0aGlzLCBmaWxlcywgbnVsbCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHZpZGVvVXBsb2FkVXJsID0gdGhpcy5vcHRpb25zLnZpZGVvVXBsb2FkVXJsO1xyXG4gICAgICAgIGNvbnN0IGZpbGVzTGVuID0gdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCA/IDEgOiBmaWxlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIHNlcnZlciB1cGxvYWRcclxuICAgICAgICBpZiAodHlwZW9mIHZpZGVvVXBsb2FkVXJsID09PSAnc3RyaW5nJyAmJiB2aWRlb1VwbG9hZFVybC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXNMZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlLScgKyBpLCBmaWxlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnVwbG9hZC5jYWxsKHRoaXMsIHZpZGVvVXBsb2FkVXJsLCB0aGlzLm9wdGlvbnMudmlkZW9VcGxvYWRIZWFkZXIsIGZvcm1EYXRhLCB0aGlzLnBsdWdpbnMudmlkZW8uY2FsbEJhY2tfdmlkZW9VcGxvYWQuYmluZCh0aGlzLCBpbmZvKSwgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZEVycm9yKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi52aWRlb1VwbG9hZC5mYWlsXSBjYXVzZSA6IFRoZXJlIGlzIG5vIFwidmlkZW9VcGxvYWRVcmxcIiBvcHRpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjYWxsQmFja192aWRlb1VwbG9hZDogZnVuY3Rpb24gKGluZm8sIHhtbEh0dHApIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZnVuY3Rpb25zLnZpZGVvVXBsb2FkSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy52aWRlb1VwbG9hZEhhbmRsZXIoeG1sSHR0cCwgaW5mbywgdGhpcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLmVycm9yLmNhbGwodGhpcywgcmVzcG9uc2UuZXJyb3JNZXNzYWdlLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8ucmVnaXN0ZXIuY2FsbCh0aGlzLCBpbmZvLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAoaW5mbywgcmVzcG9uc2UpIHtcclxuICAgICAgICBjb25zdCBmaWxlTGlzdCA9IHJlc3BvbnNlLnJlc3VsdDtcclxuICAgICAgICBjb25zdCB2aWRlb1RhZyA9IHRoaXMucGx1Z2lucy52aWRlby5jcmVhdGVWaWRlb1RhZy5jYWxsKHRoaXMpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZmlsZUxpc3QubGVuZ3RoLCBmaWxlOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZmlsZSA9IHsgbmFtZTogZmlsZUxpc3RbaV0ubmFtZSwgc2l6ZTogZmlsZUxpc3RbaV0uc2l6ZSB9O1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uY3JlYXRlX3ZpZGVvLmNhbGwodGhpcywgKGluZm8uaXNVcGRhdGUgPyBpbmZvLmVsZW1lbnQgOiB2aWRlb1RhZy5jbG9uZU5vZGUoZmFsc2UpKSwgZmlsZUxpc3RbaV0udXJsLCBpbmZvLmlucHV0V2lkdGgsIGluZm8uaW5wdXRIZWlnaHQsIGluZm8uYWxpZ24sIGZpbGUsIGluZm8uaXNVcGRhdGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0dXBfdXJsOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgICAgICBpZiAoIXVybCkgdXJsID0gY29udGV4dFZpZGVvLl9saW5rVmFsdWU7XHJcbiAgICAgICAgICAgIGlmICghdXJsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvKiogaWZyYW1lIHNvdXJjZSAqL1xyXG4gICAgICAgICAgICBpZiAoL148aWZyYW1lLipcXC9pZnJhbWU+JC8udGVzdCh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvSWZyYW1lID0gKG5ldyB0aGlzLl93LkRPTVBhcnNlcigpKS5wYXJzZUZyb21TdHJpbmcodXJsLCAndGV4dC9odG1sJykucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XHJcbiAgICAgICAgICAgICAgICB1cmwgPSBvSWZyYW1lLnNyYztcclxuICAgICAgICAgICAgICAgIGlmICh1cmwubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8qKiB5b3V0dWJlICovXHJcbiAgICAgICAgICAgIGlmICgveW91dHVcXC4/YmUvLnRlc3QodXJsKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEvXmh0dHAvLnRlc3QodXJsKSkgdXJsID0gJ2h0dHBzOi8vJyArIHVybDtcclxuICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCd3YXRjaD92PScsICcnKTtcclxuICAgICAgICAgICAgICAgIGlmICghL15cXC9cXC8uK1xcL2VtYmVkXFwvLy50ZXN0KHVybCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSh1cmwubWF0Y2goL1xcL1xcLy4rXFwvLylbMF0sICcvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nKS5yZXBsYWNlKCcmJywgJz8mJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHRWaWRlby5feW91dHViZVF1ZXJ5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL1xcPy8udGVzdCh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0VXJsID0gdXJsLnNwbGl0KCc/Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHNwbGl0VXJsWzBdICsgJz8nICsgY29udGV4dFZpZGVvLl95b3V0dWJlUXVlcnkgKyAnJicgKyBzcGxpdFVybFsxXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgY29udGV4dFZpZGVvLl95b3V0dWJlUXVlcnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKC92aW1lb1xcLmNvbS8udGVzdCh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXJsLmVuZHNXaXRoKCcvJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgLTEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgdXJsLnNsaWNlKHVybC5sYXN0SW5kZXhPZignLycpICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5jcmVhdGVfdmlkZW8uY2FsbCh0aGlzLCB0aGlzLnBsdWdpbnMudmlkZW9bKCEvZW1iZWR8aWZyYW1lfHBsYXllcnxcXC9lXFwvfFxcLnBocHxcXC5odG1sPy8udGVzdCh1cmwpICYmICEvdmltZW9cXC5jb20vLnRlc3QodXJsKSA/IFwiY3JlYXRlVmlkZW9UYWdcIiA6IFwiY3JlYXRlSWZyYW1lVGFnXCIpXS5jYWxsKHRoaXMpLCB1cmwsIGNvbnRleHRWaWRlby5pbnB1dFgudmFsdWUsIGNvbnRleHRWaWRlby5pbnB1dFkudmFsdWUsIGNvbnRleHRWaWRlby5fYWxpZ24sIG51bGwsIHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLnZpZGVvLnVwbG9hZC5mYWlsXSBjYXVzZSA6IFwiJyArIGVycm9yLm1lc3NhZ2UgKyAnXCInKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlX3ZpZGVvOiBmdW5jdGlvbiAob0ZyYW1lLCBzcmMsIHdpZHRoLCBoZWlnaHQsIGFsaWduLCBmaWxlLCBpc1VwZGF0ZSkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9ICd2aWRlbyc7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjb3ZlciA9IG51bGw7XHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgbGV0IGluaXQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLyoqIHVwZGF0ZSAqL1xyXG4gICAgICAgIGlmIChpc1VwZGF0ZSkge1xyXG4gICAgICAgICAgICBvRnJhbWUgPSBjb250ZXh0VmlkZW8uX2VsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmIChvRnJhbWUuc3JjICE9PSBzcmMpIHtcclxuICAgICAgICAgICAgICAgIGluaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNZb3V0dWJlID0gL3lvdXR1XFwuP2JlLy50ZXN0KHNyYyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc1ZpbWVvID0gL3ZpbWVvXFwuY29tLy50ZXN0KHNyYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGlzWW91dHViZSB8fCBpc1ZpbWVvKSAmJiAhL15pZnJhbWUkL2kudGVzdChvRnJhbWUubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VGFnID0gdGhpcy5wbHVnaW5zLnZpZGVvLmNyZWF0ZUlmcmFtZVRhZy5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1RhZy5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgICAgICAgICAgb0ZyYW1lLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld1RhZywgb0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQgPSBvRnJhbWUgPSBuZXdUYWc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1lvdXR1YmUgJiYgIWlzVmltZW8gJiYgIS9edmlkZW8kL2kudGVzdChvRnJhbWUubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VGFnID0gdGhpcy5wbHVnaW5zLnZpZGVvLmNyZWF0ZVZpZGVvVGFnLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VGFnLnNyYyA9IHNyYztcclxuICAgICAgICAgICAgICAgICAgICBvRnJhbWUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3VGFnLCBvRnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudCA9IG9GcmFtZSA9IG5ld1RhZztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb0ZyYW1lLnNyYyA9IHNyYztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250YWluZXIgPSBjb250ZXh0VmlkZW8uX2NvbnRhaW5lcjtcclxuICAgICAgICAgICAgY292ZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChvRnJhbWUsICdGSUdVUkUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIGNyZWF0ZSAqL1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbml0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgb0ZyYW1lLnNyYyA9IHNyYztcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50ID0gb0ZyYW1lO1xyXG4gICAgICAgICAgICBjb3ZlciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvdmVyLmNhbGwodGhpcywgb0ZyYW1lKTtcclxuICAgICAgICAgICAgY29udGFpbmVyID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5zZXRfY29udGFpbmVyLmNhbGwodGhpcywgY292ZXIsICdzZS12aWRlby1jb250YWluZXInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiByZW5kZXJpbmcgKi9cclxuICAgICAgICBjb250ZXh0VmlkZW8uX2NvdmVyID0gY292ZXI7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9jb250YWluZXIgPSBjb250YWluZXI7XHJcblxyXG4gICAgICAgIGNvbnN0IGlucHV0VXBkYXRlID0gKHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVYLmNhbGwodGhpcywgY29udGV4dFZpZGVvKSAhPT0gKHdpZHRoIHx8IGNvbnRleHRWaWRlby5fZGVmYXVsdFNpemVYKSkgfHwgKHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVZLmNhbGwodGhpcywgY29udGV4dFZpZGVvKSAhPT0gKGhlaWdodCB8fCBjb250ZXh0VmlkZW8uX3ZpZGVvUmF0aW8pKTtcclxuICAgICAgICBjb25zdCBjaGFuZ2VTaXplID0gIWlzVXBkYXRlIHx8IGlucHV0VXBkYXRlO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLl9yZXNpemluZykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQudmlkZW8uX3Byb3BvcnRpb25DaGVja2VkID0gY29udGV4dFZpZGVvLnByb3BvcnRpb24uY2hlY2tlZDtcclxuICAgICAgICAgICAgb0ZyYW1lLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9wb3J0aW9uJywgY29udGV4dFZpZGVvLl9wcm9wb3J0aW9uQ2hlY2tlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzaXplXHJcbiAgICAgICAgbGV0IGlzUGVyY2VudCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChjaGFuZ2VTaXplKSB7XHJcbiAgICAgICAgICAgIGlzUGVyY2VudCA9IHRoaXMucGx1Z2lucy52aWRlby5hcHBseVNpemUuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFsaWduXHJcbiAgICAgICAgaWYgKCEoaXNQZXJjZW50ICYmIGFsaWduID09PSAnY2VudGVyJykpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgb0ZyYW1lLCBjb3ZlciwgY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoIWlzVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0aGlzLmluc2VydENvbXBvbmVudChjb250YWluZXIsIGZhbHNlLCB0cnVlLCAhdGhpcy5vcHRpb25zLm1lZGlhQXV0b1NlbGVjdCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLm1lZGlhQXV0b1NlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuYXBwZW5kRm9ybWF0VGFnKGNvbnRhaW5lciwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZSkgdGhpcy5zZXRSYW5nZShsaW5lLCAwLCBsaW5lLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFZpZGVvLl9yZXNpemluZyAmJiB0aGlzLmNvbnRleHQucmVzaXppbmcuX3JvdGF0ZVZlcnRpY2FsICYmIGNoYW5nZVNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnNldFRyYW5zZm9ybVNpemUuY2FsbCh0aGlzLCBvRnJhbWUsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcclxuICAgICAgICAgICAgaWYgKGluaXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmNhbGwodGhpcywgJ3ZpZGVvJywgb0ZyYW1lLCB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkLCBmaWxlLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNVcGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KG9GcmFtZSwgJ3ZpZGVvJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9ICcnO1xyXG4gICAgfSxcclxuXHJcbiAgICBfdXBkYXRlX3ZpZGVvQ292ZXI6IGZ1bmN0aW9uIChvRnJhbWUpIHtcclxuICAgICAgICBpZiAoIW9GcmFtZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKC9edmlkZW8kL2kudGVzdChvRnJhbWUubm9kZU5hbWUpKSB0aGlzLnBsdWdpbnMudmlkZW8uX3NldFRhZ0F0dHJzLmNhbGwodGhpcywgb0ZyYW1lKTtcclxuICAgICAgICBlbHNlIHRoaXMucGx1Z2lucy52aWRlby5fc2V0SWZyYW1lQXR0cnMuY2FsbCh0aGlzLCBvRnJhbWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBleGlzdEVsZW1lbnQgPSAodGhpcy51dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9GcmFtZS5wYXJlbnROb2RlKSB8fCB0aGlzLnV0aWwuaXNXeXNpd3lnRGl2KG9GcmFtZS5wYXJlbnROb2RlKSkgPyBcclxuICAgICAgICAgICAgb0ZyYW1lIDogdGhpcy51dGlsLmdldEZvcm1hdEVsZW1lbnQob0ZyYW1lKSB8fCBvRnJhbWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHByZXZGcmFtZSA9IG9GcmFtZTtcclxuICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQgPSBvRnJhbWUgPSBvRnJhbWUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIGNvbnN0IGNvdmVyID0gY29udGV4dFZpZGVvLl9jb3ZlciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvdmVyLmNhbGwodGhpcywgb0ZyYW1lKTtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250ZXh0VmlkZW8uX2NvbnRhaW5lciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvbnRhaW5lci5jYWxsKHRoaXMsIGNvdmVyLCAnc2UtdmlkZW8tY29udGFpbmVyJyk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZ2NhcHRpb24gPSBleGlzdEVsZW1lbnQucXVlcnlTZWxlY3RvcignZmlnY2FwdGlvbicpO1xyXG4gICAgICAgICAgICBsZXQgY2FwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghIWZpZ2NhcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGNhcHRpb24gPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uLmlubmVySFRNTCA9IGZpZ2NhcHRpb24uaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oZmlnY2FwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNpemVcclxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IChvRnJhbWUuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSB8fCBvRnJhbWUuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicpIHx8ICcnKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uYXBwbHlTaXplLmNhbGwodGhpcywgKHNpemVbMF0gfHwgcHJldkZyYW1lLnN0eWxlLndpZHRoIHx8IHByZXZGcmFtZS53aWR0aCB8fCAnJyksIChzaXplWzFdIHx8IHByZXZGcmFtZS5zdHlsZS5oZWlnaHQgfHwgcHJldkZyYW1lLmhlaWdodCB8fCAnJykpO1xyXG5cclxuICAgICAgICAgICAgLy8gYWxpZ25cclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdGhpcy51dGlsLmdldEZvcm1hdEVsZW1lbnQocHJldkZyYW1lKTtcclxuICAgICAgICAgICAgaWYgKGZvcm1hdCkgY29udGV4dFZpZGVvLl9hbGlnbiA9IGZvcm1hdC5zdHlsZS50ZXh0QWxpZ24gfHwgZm9ybWF0LnN0eWxlLmZsb2F0O1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0QWxpZ24uY2FsbCh0aGlzLCBudWxsLCBvRnJhbWUsIGNvdmVyLCBjb250YWluZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHByZXZGcmFtZSwgdGhpcy51dGlsLmlzTm90Q2hlY2tpbmdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgcHJldkZyYW1lLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbnRhaW5lciwgcHJldkZyYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnV0aWwuaXNMaXN0Q2VsbChleGlzdEVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHByZXZGcmFtZSwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQucGFyZW50Tm9kZSA9PT0gZXhpc3RFbGVtZW50OyB9KTtcclxuICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudC5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCByZWZlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShwcmV2RnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUVtcHR5Tm9kZShyZWZlciwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy51dGlsLmlzRm9ybWF0RWxlbWVudChleGlzdEVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHByZXZGcmFtZSwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQucGFyZW50Tm9kZSA9PT0gZXhpc3RFbGVtZW50OyB9KTtcclxuICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudCA9IHRoaXMudXRpbC5zcGxpdEVsZW1lbnQoZXhpc3RFbGVtZW50LCByZWZlcik7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBleGlzdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0ocHJldkZyYW1lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVFbXB0eU5vZGUoZXhpc3RFbGVtZW50LCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChleGlzdEVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSBleGlzdEVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy51dGlsLmh0bWxSZW1vdmVXaGl0ZVNwYWNlKGV4aXN0RWxlbWVudC5pbm5lckhUTUwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbnRhaW5lciwgZXhpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCEhY2FwdGlvbikgZXhpc3RFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNhcHRpb24sIGNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW1NVTkVESVRPUi52aWRlby5lcnJvcl0gTWF5YmUgdGhlIHZpZGVvIHRhZyBpcyBuZXN0ZWQuJywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnNldEluZm8uY2FsbCh0aGlzLCAndmlkZW8nLCBvRnJhbWUsIHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWQsIG51bGwsIHRydWUpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5pbml0LmNhbGwodGhpcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBmaWxlTWFuYWdlciwgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgb25Nb2RpZnlNb2RlOiBmdW5jdGlvbiAoZWxlbWVudCwgc2l6ZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fY292ZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCAnRklHVVJFJyk7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9jb250YWluZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLnV0aWwuaXNNZWRpYUNvbXBvbmVudCk7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9hbGlnbiA9IGVsZW1lbnQuc3R5bGUuZmxvYXQgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWxpZ24nKSB8fCAnbm9uZSc7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5mbG9hdCA9ICcnO1xyXG5cclxuICAgICAgICBpZiAoc2l6ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnRfdyA9IHNpemUudztcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50X2ggPSBzaXplLmg7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudF90ID0gc2l6ZS50O1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnRfbCA9IHNpemUubDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBvcmlnaW4gPSBjb250ZXh0VmlkZW8uX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSB8fCBjb250ZXh0VmlkZW8uX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicpO1xyXG4gICAgICAgIGxldCB3LCBoO1xyXG4gICAgICAgIGlmIChvcmlnaW4pIHtcclxuICAgICAgICAgICAgb3JpZ2luID0gb3JpZ2luLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHcgPSBvcmlnaW5bMF07XHJcbiAgICAgICAgICAgIGggPSBvcmlnaW5bMV07XHJcbiAgICAgICAgfSBlbHNlIGlmIChzaXplKSB7XHJcbiAgICAgICAgICAgIHcgPSBzaXplLnc7XHJcbiAgICAgICAgICAgIGggPSBzaXplLmg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0VmlkZW8uX29yaWdpbl93ID0gdyB8fCBlbGVtZW50LnN0eWxlLndpZHRoIHx8IGVsZW1lbnQud2lkdGggfHwgJyc7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9vcmlnaW5faCA9IGggfHwgZWxlbWVudC5zdHlsZS5oZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQgfHwgJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBmaWxlTWFuYWdlciwgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgb3Blbk1vZGlmeTogZnVuY3Rpb24gKG5vdE9wZW4pIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlKSBjb250ZXh0VmlkZW8uX2xpbmtWYWx1ZSA9IGNvbnRleHRWaWRlby5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZS52YWx1ZSA9IChjb250ZXh0VmlkZW8uX2VsZW1lbnQuc3JjIHx8IChjb250ZXh0VmlkZW8uX2VsZW1lbnQucXVlcnlTZWxlY3Rvcignc291cmNlJykgfHwgJycpLnNyYyB8fCAnJyk7XHJcbiAgICAgICAgKGNvbnRleHRWaWRlby5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX3ZpZGVvX3JhZGlvXCJdW3ZhbHVlPVwiJyArIGNvbnRleHRWaWRlby5fYWxpZ24gKyAnXCJdJykgfHwgY29udGV4dFZpZGVvLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJzdW5lZGl0b3JfdmlkZW9fcmFkaW9cIl1bdmFsdWU9XCJub25lXCJdJykpLmNoZWNrZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLl9yZXNpemluZykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zZXRNb2RpZnlJbnB1dFNpemUuY2FsbCh0aGlzLCBjb250ZXh0VmlkZW8sIHRoaXMucGx1Z2lucy52aWRlbyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCB5ID0gY29udGV4dFZpZGVvLl92aWRlb1JhdGlvID0gdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfZ2V0U2l6ZVkuY2FsbCh0aGlzLCBjb250ZXh0VmlkZW8pO1xyXG4gICAgICAgICAgICBjb25zdCByYXRpb1NlbGVjdGVkID0gdGhpcy5wbHVnaW5zLnZpZGVvLnNldFZpZGVvUmF0aW9TZWxlY3QuY2FsbCh0aGlzLCB5KTtcclxuICAgICAgICAgICAgaWYgKCFyYXRpb1NlbGVjdGVkKSBjb250ZXh0VmlkZW8uaW5wdXRZLnZhbHVlID0gY29udGV4dFZpZGVvLl9vbmx5UGVyY2VudGFnZSA/IHRoaXMudXRpbC5nZXROdW1iZXIoeSwgMikgOiB5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFub3RPcGVuKSB0aGlzLnBsdWdpbnMuZGlhbG9nLm9wZW4uY2FsbCh0aGlzLCAndmlkZW8nLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNldFZpZGVvUmF0aW9TZWxlY3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGxldCByYXRpb1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIGNvbnN0IHJhdGlvT3B0aW9ucyA9IGNvbnRleHRWaWRlby52aWRlb1JhdGlvT3B0aW9uLm9wdGlvbnM7XHJcblxyXG4gICAgICAgIGlmICgvJSQvLnRlc3QodmFsdWUpIHx8IGNvbnRleHRWaWRlby5fb25seVBlcmNlbnRhZ2UpIHZhbHVlID0gKHRoaXMudXRpbC5nZXROdW1iZXIodmFsdWUsIDIpIC8gMTAwKSArICcnO1xyXG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLnV0aWwuaXNOdW1iZXIodmFsdWUpIHx8ICh2YWx1ZSAqIDEpID49IDEpIHZhbHVlID0gJyc7XHJcblxyXG4gICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkucGxhY2Vob2xkZXIgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmF0aW9PcHRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChyYXRpb09wdGlvbnNbaV0udmFsdWUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByYXRpb1NlbGVjdGVkID0gcmF0aW9PcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkucGxhY2Vob2xkZXIgPSAhdmFsdWUgPyAnJyA6ICh2YWx1ZSAqIDEwMCkgKyAnJSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSByYXRpb09wdGlvbnNbaV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByYXRpb1NlbGVjdGVkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBjaGVja0ZpbGVJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLmNoZWNrSW5mby5jYWxsKHRoaXMsICd2aWRlbycsIFsnaWZyYW1lJywgJ3ZpZGVvJ10sIHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWQsIHRoaXMucGx1Z2lucy52aWRlby5fdXBkYXRlX3ZpZGVvQ292ZXIuYmluZCh0aGlzKSwgdHJ1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIHJlc2V0RmlsZUluZm86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIucmVzZXRJbmZvLmNhbGwodGhpcywgJ3ZpZGVvJywgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIGFwcGx5U2l6ZTogZnVuY3Rpb24gKHcsIGgpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcblxyXG4gICAgICAgIGlmICghdykgdyA9IGNvbnRleHRWaWRlby5pbnB1dFgudmFsdWUgfHwgdGhpcy5vcHRpb25zLnZpZGVvV2lkdGg7XHJcbiAgICAgICAgaWYgKCFoKSBoID0gY29udGV4dFZpZGVvLmlucHV0WS52YWx1ZSB8fCB0aGlzLm9wdGlvbnMudmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby5fb25seVBlcmNlbnRhZ2UgfHwgLyUkLy50ZXN0KHcpIHx8ICF3KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRQZXJjZW50U2l6ZS5jYWxsKHRoaXMsICh3IHx8ICcxMDAlJyksIChoIHx8ICgvJSQvLnRlc3QoY29udGV4dFZpZGVvLl92aWRlb1JhdGlvKSA/IGNvbnRleHRWaWRlby5fdmlkZW9SYXRpbyA6IGNvbnRleHRWaWRlby5fZGVmYXVsdFJhdGlvKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKCghdyB8fCB3ID09PSAnYXV0bycpICYmICghaCB8fCBoID09PSAnYXV0bycpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRBdXRvU2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRTaXplLmNhbGwodGhpcywgdywgKGggfHwgY29udGV4dFZpZGVvLl92aWRlb1JhdGlvIHx8IGNvbnRleHRWaWRlby5fZGVmYXVsdFJhdGlvKSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzaXplUmV2ZXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2l6ZVJldmVydC5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC52aWRlbyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldFNpemU6IGZ1bmN0aW9uICh3LCBoLCBub3RSZXNldFBlcmNlbnRhZ2UsIGRpcmVjdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBjb25zdCBvbmx5VyA9IC9eKHJ3fGx3KSQvLnRlc3QoZGlyZWN0aW9uKTtcclxuICAgICAgICBjb25zdCBvbmx5SCA9IC9eKHRofGJoKSQvLnRlc3QoZGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgaWYgKCFvbmx5SCkgdyA9IHRoaXMudXRpbC5nZXROdW1iZXIodywgMCk7XHJcbiAgICAgICAgaWYgKCFvbmx5VykgaCA9IHRoaXMudXRpbC5pc051bWJlcihoKSA/IGggKyBjb250ZXh0VmlkZW8uc2l6ZVVuaXQgOiAhaCA/ICcnIDogaDtcclxuICAgICAgICB3ID0gdyA/IHcgKyBjb250ZXh0VmlkZW8uc2l6ZVVuaXQgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCFvbmx5SCkgY29udGV4dFZpZGVvLl9lbGVtZW50LnN0eWxlLndpZHRoID0gdztcclxuICAgICAgICBpZiAoIW9ubHlXICYmIGNvbnRleHRWaWRlby5fY292ZXIpIGNvbnRleHRWaWRlby5fY292ZXIuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGNvbnRleHRWaWRlby5fY292ZXIuc3R5bGUuaGVpZ2h0ID0gaDtcclxuXHJcbiAgICAgICAgaWYgKCFvbmx5SCAmJiAhLyUkLy50ZXN0KHcpKSB7XHJcbiAgICAgICAgICAgIGlmKGNvbnRleHRWaWRlby5fY292ZXIpIGNvbnRleHRWaWRlby5fY292ZXIuc3R5bGUud2lkdGggPSB3O1xyXG4gICAgICAgICAgICBpZihjb250ZXh0VmlkZW8uX2NvbnRhaW5lcikgY29udGV4dFZpZGVvLl9jb250YWluZXIuc3R5bGUud2lkdGggPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghb25seVcgJiYgIS8lJC8udGVzdChoKSkge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW5vdFJlc2V0UGVyY2VudGFnZSkgY29udGV4dFZpZGVvLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wZXJjZW50YWdlJyk7XHJcblxyXG4gICAgICAgIC8vIHNhdmUgY3VycmVudCBzaXplXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2F2ZUN1cnJlbnRTaXplLmNhbGwodGhpcywgY29udGV4dFZpZGVvKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgc2V0QXV0b1NpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0UGVyY2VudFNpemUuY2FsbCh0aGlzLCAxMDAsIHRoaXMuY29udGV4dC52aWRlby5fZGVmYXVsdFJhdGlvKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgc2V0T3JpZ2luU2l6ZTogZnVuY3Rpb24gKGRhdGFTaXplKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScpO1xyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcucmVzZXRUcmFuc2Zvcm0uY2FsbCh0aGlzLCBjb250ZXh0VmlkZW8uX2VsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5jYW5jZWxQZXJjZW50QXR0ci5jYWxsKHRoaXMpO1xyXG5cclxuICAgICAgICBjb25zdCBvcmlnaW5TaXplID0gKChkYXRhU2l6ZSA/IGNvbnRleHRWaWRlby5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2l6ZScpIDogJycpIHx8IGNvbnRleHRWaWRlby5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luJykgfHwgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKG9yaWdpblNpemUpIHtcclxuICAgICAgICAgICAgY29uc3QgdyA9IG9yaWdpblNpemVbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IGggPSBvcmlnaW5TaXplWzFdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRleHRWaWRlby5fb25seVBlcmNlbnRhZ2UgfHwgKC8lJC8udGVzdCh3KSAmJiAoLyUkLy50ZXN0KGgpIHx8ICEvXFxkLy50ZXN0KGgpKSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRQZXJjZW50U2l6ZS5jYWxsKHRoaXMsIHcsIGgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnNldFNpemUuY2FsbCh0aGlzLCB3LCBoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2F2ZSBjdXJyZW50IHNpemVcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2F2ZUN1cnJlbnRTaXplLmNhbGwodGhpcywgY29udGV4dFZpZGVvKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldFBlcmNlbnRTaXplOiBmdW5jdGlvbiAodywgaCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBoID0gISFoICYmICEvJSQvLnRlc3QoaCkgJiYgIXRoaXMudXRpbC5nZXROdW1iZXIoaCwgMCkgPyB0aGlzLnV0aWwuaXNOdW1iZXIoaCkgPyBoICsgJyUnIDogaCA6IHRoaXMudXRpbC5pc051bWJlcihoKSA/IGggKyBjb250ZXh0VmlkZW8uc2l6ZVVuaXQgOiAoaCB8fCBjb250ZXh0VmlkZW8uX2RlZmF1bHRSYXRpbyk7XHJcblxyXG4gICAgICAgIGlmKGNvbnRleHRWaWRlby5fY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY29udGFpbmVyLnN0eWxlLndpZHRoID0gdGhpcy51dGlsLmlzTnVtYmVyKHcpID8gdyArICclJyA6IHc7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjb250ZXh0VmlkZW8uX2NvdmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY292ZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY292ZXIuc3R5bGUuaGVpZ2h0ID0gaDtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9jb3Zlci5zdHlsZS5wYWRkaW5nQm90dG9tID0gaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50LnN0eWxlLm1heFdpZHRoID0gJyc7XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8uX2FsaWduID09PSAnY2VudGVyJykgdGhpcy5wbHVnaW5zLnZpZGVvLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1wZXJjZW50YWdlJywgdyArICcsJyArIGgpO1xyXG5cclxuICAgICAgICAvLyBzYXZlIGN1cnJlbnQgc2l6ZVxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NhdmVDdXJyZW50U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRWaWRlbyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIGNhbmNlbFBlcmNlbnRBdHRyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGNvbnRleHRWaWRlby5fY292ZXIpIHtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9jb3Zlci5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2NvdmVyLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2NvdmVyLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoY29udGV4dFZpZGVvLl9jb250YWluZXIpIHtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9jb250YWluZXIuc3R5bGUud2lkdGggPSAnJztcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0VmlkZW8uX2NvbnRhaW5lciwgdGhpcy5jb250ZXh0LnZpZGVvLl9mbG9hdENsYXNzUmVnRXhwKTtcclxuICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dFZpZGVvLl9jb250YWluZXIsICdfX3NlX19mbG9hdC0nICsgY29udGV4dFZpZGVvLl9hbGlnbik7XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8uX2FsaWduID09PSAnY2VudGVyJykgdGhpcy5wbHVnaW5zLnZpZGVvLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldEFsaWduOiBmdW5jdGlvbiAoYWxpZ24sIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFhbGlnbikgYWxpZ24gPSBjb250ZXh0VmlkZW8uX2FsaWduO1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgZWxlbWVudCA9IGNvbnRleHRWaWRlby5fZWxlbWVudDtcclxuICAgICAgICBpZiAoIWNvdmVyKSBjb3ZlciA9IGNvbnRleHRWaWRlby5fY292ZXI7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXIpIGNvbnRhaW5lciA9IGNvbnRleHRWaWRlby5fY29udGFpbmVyO1xyXG5cclxuICAgICAgICBpZiAoLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUud2lkdGgpICYmIGFsaWduID09PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICBpZihjb250YWluZXIpIGNvbnRhaW5lci5zdHlsZS5taW5XaWR0aCA9ICcxMDAlJztcclxuICAgICAgICAgICAgaWYoY292ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLndpZHRoID0gY29udGFpbmVyLnN0eWxlLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgY292ZXIuc3R5bGUuaGVpZ2h0ID0gY292ZXIuc3R5bGUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY292ZXIuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICEvJSQvLnRlc3QoY292ZXIuc3R5bGUuaGVpZ2h0KSA/IGNvdmVyLnN0eWxlLmhlaWdodCA6IHRoaXMudXRpbC5nZXROdW1iZXIoKHRoaXMudXRpbC5nZXROdW1iZXIoY292ZXIuc3R5bGUuaGVpZ2h0LCAyKSAvIDEwMCkgKiB0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvdmVyLnN0eWxlLndpZHRoLCAyKSwgMikgKyAnJSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZihjb250YWluZXIpIGNvbnRhaW5lci5zdHlsZS5taW5XaWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBpZihjb3Zlcikge1xyXG4gICAgICAgICAgICAgICAgY292ZXIuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRleHQucmVzaXppbmcuX3JvdGF0ZVZlcnRpY2FsID8gKGVsZW1lbnQuc3R5bGUuaGVpZ2h0IHx8IGVsZW1lbnQub2Zmc2V0SGVpZ2h0KSA6IChlbGVtZW50LnN0eWxlLndpZHRoIHx8ICcxMDAlJyk7XHJcbiAgICAgICAgICAgICAgICBjb3Zlci5zdHlsZS5wYWRkaW5nQm90dG9tID0gY292ZXIuc3R5bGUuaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMudXRpbC5oYXNDbGFzcyhjb250YWluZXIsICdfX3NlX19mbG9hdC0nICsgYWxpZ24pKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250YWluZXIsIGNvbnRleHRWaWRlby5fZmxvYXRDbGFzc1JlZ0V4cCk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhjb250YWluZXIsICdfX3NlX19mbG9hdC0nICsgYWxpZ24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1hbGlnbicsIGFsaWduKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZSkgY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUpIGNvbnRleHRWaWRlby5fbGlua1ZhbHVlID0gY29udGV4dFZpZGVvLnByZXZpZXcudGV4dENvbnRlbnQgPSBjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZSAmJiBjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8ucHJldmlldy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9vcmlnaW5fdyA9IHRoaXMub3B0aW9ucy52aWRlb1dpZHRoO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fb3JpZ2luX2ggPSB0aGlzLm9wdGlvbnMudmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJzdW5lZGl0b3JfdmlkZW9fcmFkaW9cIl1bdmFsdWU9XCJub25lXCJdJykuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby5fcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WC52YWx1ZSA9IHRoaXMub3B0aW9ucy52aWRlb1dpZHRoID09PSBjb250ZXh0VmlkZW8uX2RlZmF1bHRTaXplWCA/ICcnIDogdGhpcy5vcHRpb25zLnZpZGVvV2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkudmFsdWUgPSB0aGlzLm9wdGlvbnMudmlkZW9IZWlnaHQgPT09IGNvbnRleHRWaWRlby5fZGVmYXVsdFNpemVZID8gJycgOiB0aGlzLm9wdGlvbnMudmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5wcm9wb3J0aW9uLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8ucHJvcG9ydGlvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRWaWRlb1JhdGlvU2VsZWN0LmNhbGwodGhpcywgY29udGV4dFZpZGVvLl9kZWZhdWx0UmF0aW8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBkaWFsb2cgZnJvbSAnLi4vbW9kdWxlcy9kaWFsb2cnO1xyXG5pbXBvcnQgY29tcG9uZW50IGZyb20gJy4uL21vZHVsZXMvY29tcG9uZW50JztcclxuaW1wb3J0IGZpbGVNYW5hZ2VyIGZyb20gJy4uL21vZHVsZXMvZmlsZU1hbmFnZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2F1ZGlvJyxcclxuICAgIGRpc3BsYXk6ICdkaWFsb2cnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvcmUuYWRkTW9kdWxlKFtkaWFsb2csIGNvbXBvbmVudCwgZmlsZU1hbmFnZXJdKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb25zdCBjb250ZXh0QXVkaW8gPSBjb250ZXh0LmF1ZGlvID0ge1xyXG4gICAgICAgICAgICBfaW5mb0xpc3Q6IFtdLCAvLyBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAgICAgICAgX2luZm9JbmRleDogMCwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIF91cGxvYWRGaWxlTGVuZ3RoOiAwLCAvLyBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAgICAgICAgZm9jdXNFbGVtZW50OiBudWxsLCAvLyBAT3ZlcnJpZGUgZGlhbG9nIC8vIFRoaXMgZWxlbWVudCBoYXMgZm9jdXMgd2hlbiB0aGUgZGlhbG9nIGlzIG9wZW5lZC5cclxuICAgICAgICAgICAgdGFyZ2V0U2VsZWN0OiBudWxsLFxyXG4gICAgICAgICAgICBfb3JpZ2luX3c6IGNvcmUub3B0aW9ucy5hdWRpb1dpZHRoLFxyXG4gICAgICAgICAgICBfb3JpZ2luX2g6IGNvcmUub3B0aW9ucy5hdWRpb0hlaWdodCxcclxuICAgICAgICAgICAgX2xpbmtWYWx1ZTogJycsXHJcbiAgICAgICAgICAgIC8vIEByZXF1aXJlIEBPdmVycmlkZSBjb21wb25lbnRcclxuICAgICAgICAgICAgX2VsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIF9jb3ZlcjogbnVsbCxcclxuICAgICAgICAgICAgX2NvbnRhaW5lcjogbnVsbCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogZGlhbG9nICovXHJcbiAgICAgICAgbGV0IGF1ZGlvX2RpYWxvZyA9IHRoaXMuc2V0RGlhbG9nKGNvcmUpO1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5tb2RhbCA9IGF1ZGlvX2RpYWxvZztcclxuICAgICAgICBjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUgPSBhdWRpb19kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV9hdWRpb19maWxlcycpO1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGUgPSBhdWRpb19kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWlucHV0LXVybCcpO1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5mb2N1c0VsZW1lbnQgPSBjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUgfHwgY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZTtcclxuICAgICAgICBjb250ZXh0QXVkaW8ucHJldmlldyA9IGF1ZGlvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtbGluay1wcmV2aWV3Jyk7XHJcblxyXG4gICAgICAgIC8qKiBjb250cm9sbGVyICovXHJcbiAgICAgICAgbGV0IGF1ZGlvX2NvbnRyb2xsZXIgPSB0aGlzLnNldENvbnRyb2xsZXIoY29yZSk7XHJcbiAgICAgICAgY29udGV4dEF1ZGlvLmNvbnRyb2xsZXIgPSBhdWRpb19jb250cm9sbGVyO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGF1ZGlvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCdmb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5zdWJtaXQuYmluZChjb3JlKSk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZSkgYXVkaW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5zZS1kaWFsb2ctZmlsZXMtZWRnZS1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX3JlbW92ZVNlbGVjdGVkRmlsZXMuYmluZChjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUsIGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGUsIGNvbnRleHRBdWRpby5wcmV2aWV3KSk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZSAmJiBjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlKSBjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fZmlsZUlucHV0Q2hhbmdlLmJpbmQoY29udGV4dEF1ZGlvKSk7XHJcbiAgICAgICAgYXVkaW9fY29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja19jb250cm9sbGVyLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGlmIChjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlKSBjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5fb25MaW5rUHJldmlldy5iaW5kKGNvbnRleHRBdWRpby5wcmV2aWV3LCBjb250ZXh0QXVkaW8sIGNvcmUub3B0aW9ucy5saW5rUHJvdG9jb2wpKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXHJcbiAgICAgICAgY29udGV4dC5kaWFsb2cubW9kYWwuYXBwZW5kQ2hpbGQoYXVkaW9fZGlhbG9nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCBjb250cm9sbGVyICovXHJcbiAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKGF1ZGlvX2NvbnRyb2xsZXIpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgYXVkaW9fZGlhbG9nID0gbnVsbCwgYXVkaW9fY29udHJvbGxlciA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKiBIVE1MIC0gZGlhbG9nICovXHJcbiAgICBzZXREaWFsb2c6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gY29yZS5vcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgZGlhbG9nID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBkaWFsb2cuY2xhc3NOYW1lID0gJ3NlLWRpYWxvZy1jb250ZW50JztcclxuICAgICAgICBkaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBsZXQgaHRtbCA9ICcnICtcclxuICAgICAgICAgICAgJzxmb3JtIG1ldGhvZD1cInBvc3RcIiBlbmN0eXBlPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctaGVhZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImNsb3NlXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWNsb3NlXCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5jbG9zZSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5jYW5jZWwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS1tb2RhbC10aXRsZVwiPicgKyBsYW5nLmRpYWxvZ0JveC5hdWRpb0JveC50aXRsZSArICc8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1ib2R5XCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmF1ZGlvRmlsZUlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+JyArIGxhbmcuZGlhbG9nQm94LmF1ZGlvQm94LmZpbGUgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm0tZmlsZXNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtZm9ybSBfc2VfYXVkaW9fZmlsZXNcIiB0eXBlPVwiZmlsZVwiIGFjY2VwdD1cIicgKyBvcHRpb24uYXVkaW9BY2NlcHQgKyAnXCInICsgKG9wdGlvbi5hdWRpb011bHRpcGxlRmlsZSA/ICcgbXVsdGlwbGU9XCJtdWx0aXBsZVwiJyA6ICcnKSArICcvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJmaWxlc1JlbW92ZVwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1maWxlcy1lZGdlLWJ1dHRvbiBzZS1maWxlLXJlbW92ZVwiIHRpdGxlPVwiJyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJ1wiPicgKyBjb3JlLmljb25zLmNhbmNlbCArICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmF1ZGlvVXJsSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3guYXVkaW9Cb3gudXJsICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtZm9ybSBzZS1pbnB1dC11cmxcIiB0eXBlPVwidGV4dFwiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHByZSBjbGFzcz1cInNlLWxpbmstcHJldmlld1wiPjwvcHJlPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9vdGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwic2UtYnRuLXByaW1hcnlcIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCI+PHNwYW4+JyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICc8L3NwYW4+PC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Zvcm0+JztcclxuXHJcbiAgICAgICAgZGlhbG9nLmlubmVySFRNTCA9IGh0bWw7XHJcblxyXG4gICAgICAgIHJldHVybiBkaWFsb2c7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKiBIVE1MIC0gY29udHJvbGxlciAqL1xyXG4gICAgc2V0Q29udHJvbGxlcjogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGljb25zID0gY29yZS5pY29ucztcclxuICAgICAgICBjb25zdCBsaW5rX2J0biA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgbGlua19idG4uY2xhc3NOYW1lID0gJ3NlLWNvbnRyb2xsZXIgc2UtY29udHJvbGxlci1saW5rJztcclxuICAgICAgICBsaW5rX2J0bi5pbm5lckhUTUwgPSAnJyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYXJyb3cgc2UtYXJyb3ctdXBcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJsaW5rLWNvbnRlbnRcIj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYnRuLWdyb3VwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cInVwZGF0ZVwiIHRhYmluZGV4PVwiLTFcIiBjbGFzcz1cInNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMuZWRpdCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuZWRpdCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiZGVsZXRlXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwic2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5kZWxldGUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnJlbW92ZSArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgIHJldHVybiBsaW5rX2J0bjtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gRGlzYWJsZSB1cmwgaW5wdXQgd2hlbiB1cGxvYWRpbmcgZmlsZXNcclxuICAgIF9maWxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYXVkaW9JbnB1dEZpbGUudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1VybEZpbGUucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXcuc3R5bGUudGV4dERlY29yYXRpb24gPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvVXJsRmlsZS5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlldy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICdsaW5lLXRocm91Z2gnO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gRGlzYWJsZSB1cmwgaW5wdXQgd2hlbiB1cGxvYWRpbmcgZmlsZXNcclxuICAgIF9yZW1vdmVTZWxlY3RlZEZpbGVzOiBmdW5jdGlvbiAodXJsSW5wdXQsIHByZXZpZXcpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaWYgKHVybElucHV0KSB7XHJcbiAgICAgICAgICAgIHVybElucHV0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgcHJldmlldy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gY3JlYXRlIG5ldyBhdWRpbyB0YWdcclxuICAgIF9jcmVhdGVBdWRpb1RhZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IG9BdWRpbyA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdBVURJTycpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5fc2V0VGFnQXR0cnMuY2FsbCh0aGlzLCBvQXVkaW8pO1xyXG5cclxuICAgICAgICBjb25zdCB3ID0gdGhpcy5jb250ZXh0LmF1ZGlvLl9vcmlnaW5fdztcclxuICAgICAgICBjb25zdCBoID0gdGhpcy5jb250ZXh0LmF1ZGlvLl9vcmlnaW5faDtcclxuICAgICAgICBvQXVkaW8uc2V0QXR0cmlidXRlKCdvcmlnaW4tc2l6ZScsIHcgKyAnLCcgKyBoKTtcclxuICAgICAgICBvQXVkaW8uc3R5bGUuY3NzVGV4dCA9ICh3ID8gKCd3aWR0aDonICsgdyArICc7ICcpIDogJycpICsgKGggPyAoJ2hlaWdodDonICsgaCArICc7JykgOiAnJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvQXVkaW87XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRUYWdBdHRyczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY29udHJvbHMnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXR0cnMgPSB0aGlzLm9wdGlvbnMuYXVkaW9UYWdBdHRycztcclxuICAgICAgICBpZiAoIWF0dHJzKSByZXR1cm47XHJcblxyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBhdHRycykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudXRpbC5oYXNPd24oYXR0cnMsIGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX29uTGlua1ByZXZpZXc6IGZ1bmN0aW9uIChjb250ZXh0LCBwcm90b2NvbCwgZSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIGNvbnRleHQuX2xpbmtWYWx1ZSA9IHRoaXMudGV4dENvbnRlbnQgPSAhdmFsdWUgPyAnJyA6IChwcm90b2NvbCAmJiB2YWx1ZS5pbmRleE9mKCc6Ly8nKSA9PT0gLTEgJiYgdmFsdWUuaW5kZXhPZignIycpICE9PSAwKSA/IHByb3RvY29sICsgdmFsdWUgOiB2YWx1ZS5pbmRleE9mKCc6Ly8nKSA9PT0gLTEgPyAnLycgKyB2YWx1ZSA6IHZhbHVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgZmlsZVRhZ3M6IFsnYXVkaW8nXSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlLCBmaWxlTWFuYWdlciwgcmVzaXppbmdcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBjYWxsZWQgZnJvbSBjb3JlLnNlbGVjdENvbXBvbmVudC5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBzZWxlY3Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLm9uTW9kaWZ5TW9kZS5jYWxsKHRoaXMsIGVsZW1lbnQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlciwgcmVzaXppbmcgXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQgfHwgdGhpcy5jb250ZXh0LmF1ZGlvLl9lbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KGVsZW1lbnQsIHRoaXMudXRpbC5pc0NvbXBvbmVudCkgfHwgZWxlbWVudDtcclxuICAgICAgICBjb25zdCBkYXRhSW5kZXggPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpICogMTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9EZWxldGVCZWZvcmUgPT09ICdmdW5jdGlvbicgJiYgKHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9EZWxldGVCZWZvcmUoZWxlbWVudCwgY29udGFpbmVyLCBkYXRhSW5kZXgsIHRoaXMpID09PSBmYWxzZSkpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBmb2N1c0VsID0gKGNvbnRhaW5lci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IGNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgIGNvbnN0IGVtcHR5RGl2ID0gY29udGFpbmVyLnBhcmVudE5vZGU7XHJcbiAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oY29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgaWYgKGVtcHR5RGl2ICE9PSB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnKSB0aGlzLnV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMoZW1wdHlEaXYsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwOyB9LCBudWxsKTtcclxuXHJcbiAgICAgICAgLy8gZm9jdXNcclxuICAgICAgICB0aGlzLmZvY3VzRWRnZShmb2N1c0VsKTtcclxuXHJcbiAgICAgICAgLy8gZmlsZU1hbmFnZXIgZXZlbnRcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuZGVsZXRlSW5mby5jYWxsKHRoaXMsICdhdWRpbycsIGRhdGFJbmRleCwgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZCk7XHJcblxyXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIGNoZWNrRmlsZUluZm86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuY2hlY2tJbmZvLmNhbGwodGhpcywgJ2F1ZGlvJywgWydhdWRpbyddLCB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkLCB0aGlzLnBsdWdpbnMuYXVkaW8udXBkYXRlQ292ZXIuYmluZCh0aGlzKSwgZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICByZXNldEZpbGVJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnJlc2V0SW5mby5jYWxsKHRoaXMsICdhdWRpbycsIHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEF1ZGlvID0gdGhpcy5jb250ZXh0LmF1ZGlvO1xyXG5cclxuICAgICAgICBpZiAoIXVwZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlICYmIHRoaXMub3B0aW9ucy5hdWRpb011bHRpcGxlRmlsZSkgY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHRBdWRpby5fZWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29udGV4dEF1ZGlvLl9saW5rVmFsdWUgPSBjb250ZXh0QXVkaW8ucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGUudmFsdWUgPSBjb250ZXh0QXVkaW8uX2VsZW1lbnQuc3JjO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlICYmIHRoaXMub3B0aW9ucy5hdWRpb011bHRpcGxlRmlsZSkgY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlLnJlbW92ZUF0dHJpYnV0ZSgnbXVsdGlwbGUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlICYmIHRoaXMub3B0aW9ucy5hdWRpb011bHRpcGxlRmlsZSkgY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlLnJlbW92ZUF0dHJpYnV0ZSgnbXVsdGlwbGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgb3BlbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cub3Blbi5jYWxsKHRoaXMsICdhdWRpbycsICdhdWRpbycgPT09IHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgc3VibWl0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRBdWRpbyA9IHRoaXMuY29udGV4dC5hdWRpbztcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUgJiYgY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlLmZpbGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5zdWJtaXRBY3Rpb24uY2FsbCh0aGlzLCBjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUuZmlsZXMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGUgJiYgY29udGV4dEF1ZGlvLl9saW5rVmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLnNldHVwVXJsLmNhbGwodGhpcywgY29udGV4dEF1ZGlvLl9saW5rVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuYXVkaW8uc3VibWl0LmZhaWxdIGNhdXNlIDogXCInICsgZXJyb3IubWVzc2FnZSArICdcIicpO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgc3VibWl0QWN0aW9uOiBmdW5jdGlvbiAoZmlsZUxpc3QpIHtcclxuICAgICAgICBpZiAoZmlsZUxpc3QubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBmaWxlU2l6ZSA9IDA7XHJcbiAgICAgICAgbGV0IGZpbGVzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZpbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICgvYXVkaW8vaS50ZXN0KGZpbGVMaXN0W2ldLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKGZpbGVMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgIGZpbGVTaXplICs9IGZpbGVMaXN0W2ldLnNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxpbWl0U2l6ZSA9IHRoaXMub3B0aW9ucy5hdWRpb1VwbG9hZFNpemVMaW1pdDtcclxuICAgICAgICBpZiAobGltaXRTaXplID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgaW5mb1NpemUgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCBhdWRpb3NJbmZvID0gdGhpcy5jb250ZXh0LmF1ZGlvLl9pbmZvTGlzdDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF1ZGlvc0luZm8ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGluZm9TaXplICs9IGF1ZGlvc0luZm9baV0uc2l6ZSAqIDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgoZmlsZVNpemUgKyBpbmZvU2l6ZSkgPiBsaW1pdFNpemUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSAnW1NVTkVESVRPUi5hdWRpb1VwbG9hZC5mYWlsXSBTaXplIG9mIHVwbG9hZGFibGUgdG90YWwgYXVkaW9zOiAnICsgKGxpbWl0U2l6ZS8xMDAwKSArICdLQic7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWRFcnJvciAhPT0gJ2Z1bmN0aW9uJyB8fCB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkRXJyb3IoZXJyLCB7ICdsaW1pdFNpemUnOiBsaW1pdFNpemUsICdjdXJyZW50U2l6ZSc6IGluZm9TaXplLCAndXBsb2FkU2l6ZSc6IGZpbGVTaXplIH0sIHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnMubm90aWNlT3BlbihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0QXVkaW8gPSB0aGlzLmNvbnRleHQuYXVkaW87XHJcbiAgICAgICAgY29udGV4dEF1ZGlvLl91cGxvYWRGaWxlTGVuZ3RoID0gZmlsZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICBjb25zdCBpbmZvID0ge1xyXG4gICAgICAgICAgICBpc1VwZGF0ZTogdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCxcclxuICAgICAgICAgICAgZWxlbWVudDogY29udGV4dEF1ZGlvLl9lbGVtZW50XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkQmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWRCZWZvcmUoZmlsZXMsIGluZm8sIHRoaXMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiB0aGlzLl93LkFycmF5LmlzQXJyYXkoZGF0YS5yZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLnJlZ2lzdGVyLmNhbGwodGhpcywgaW5mbywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby51cGxvYWQuY2FsbCh0aGlzLCBpbmZvLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIGZpbGVzID0gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLnVwbG9hZC5jYWxsKHRoaXMsIGluZm8sIGZpbGVzKTtcclxuICAgIH0sXHJcblxyXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChtZXNzYWdlLCByZXNwb25zZSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkRXJyb3IgIT09ICdmdW5jdGlvbicgfHwgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZEVycm9yKG1lc3NhZ2UsIHJlc3BvbnNlLCB0aGlzKSkge1xyXG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5ub3RpY2VPcGVuKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5wbHVnaW4uYXVkaW8uZXhjZXB0aW9uXSByZXNwb25zZTogJyArIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgdXBsb2FkOiBmdW5jdGlvbiAoaW5mbywgZmlsZXMpIHtcclxuICAgICAgICBpZiAoIWZpbGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmVycm9yLmNhbGwodGhpcywgZmlsZXMsIG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhdWRpb1VwbG9hZFVybCA9IHRoaXMub3B0aW9ucy5hdWRpb1VwbG9hZFVybDtcclxuICAgICAgICBjb25zdCBmaWxlc0xlbiA9IHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwgPyAxIDogZmlsZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyBjcmVhdGUgZm9ybURhdGFcclxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXNMZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUtJyArIGksIGZpbGVzW2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNlcnZlciB1cGxvYWRcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIudXBsb2FkLmNhbGwodGhpcywgYXVkaW9VcGxvYWRVcmwsIHRoaXMub3B0aW9ucy5hdWRpb1VwbG9hZEhlYWRlciwgZm9ybURhdGEsIHRoaXMucGx1Z2lucy5hdWRpby5jYWxsQmFja191cGxvYWQuYmluZCh0aGlzLCBpbmZvKSwgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZEVycm9yKTtcclxuICAgIH0sXHJcblxyXG4gICAgY2FsbEJhY2tfdXBsb2FkOiBmdW5jdGlvbiAoaW5mbywgeG1sSHR0cCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMuYXVkaW9VcGxvYWRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25zLmF1ZGlvVXBsb2FkSGFuZGxlcih4bWxIdHRwLCBpbmZvLCB0aGlzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8uZXJyb3IuY2FsbCh0aGlzLCByZXNwb25zZS5lcnJvck1lc3NhZ2UsIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5yZWdpc3Rlci5jYWxsKHRoaXMsIGluZm8sIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIChpbmZvLCByZXNwb25zZSkge1xyXG4gICAgICAgIGNvbnN0IGZpbGVMaXN0ID0gcmVzcG9uc2UucmVzdWx0O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZmlsZUxpc3QubGVuZ3RoLCBmaWxlLCBvQXVkaW87IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaW5mby5pc1VwZGF0ZSkgb0F1ZGlvID0gaW5mby5lbGVtZW50O1xyXG4gICAgICAgICAgICBlbHNlIG9BdWRpbyA9IHRoaXMucGx1Z2lucy5hdWRpby5fY3JlYXRlQXVkaW9UYWcuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGZpbGUgPSB7IG5hbWU6IGZpbGVMaXN0W2ldLm5hbWUsIHNpemU6IGZpbGVMaXN0W2ldLnNpemUgfTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmNyZWF0ZV9hdWRpby5jYWxsKHRoaXMsIG9BdWRpbywgZmlsZUxpc3RbaV0udXJsLCBmaWxlLCBpbmZvLmlzVXBkYXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldHVwVXJsOiBmdW5jdGlvbiAoc3JjKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHNyYy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmNyZWF0ZV9hdWRpby5jYWxsKHRoaXMsIHRoaXMucGx1Z2lucy5hdWRpby5fY3JlYXRlQXVkaW9UYWcuY2FsbCh0aGlzKSwgc3JjLCBudWxsLCB0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5hdWRpby5hdWRpby5mYWlsXSBjYXVzZSA6IFwiJyArIGVycm9yLm1lc3NhZ2UgKyAnXCInKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlX2F1ZGlvOiBmdW5jdGlvbiAoZWxlbWVudCwgc3JjLCBmaWxlLCBpc1VwZGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRBdWRpbyA9IHRoaXMuY29udGV4dC5hdWRpbztcclxuICAgICAgICBcclxuICAgICAgICAvLyBjcmVhdGUgbmV3IHRhZ1xyXG4gICAgICAgIGlmICghaXNVcGRhdGUpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5zZXRfY292ZXIuY2FsbCh0aGlzLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5zZXRfY29udGFpbmVyLmNhbGwodGhpcywgY292ZXIsICcnKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmluc2VydENvbXBvbmVudChjb250YWluZXIsIGZhbHNlLCB0cnVlLCAhdGhpcy5vcHRpb25zLm1lZGlhQXV0b1NlbGVjdCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5tZWRpYUF1dG9TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmFwcGVuZEZvcm1hdFRhZyhjb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUpIHRoaXMuc2V0UmFuZ2UobGluZSwgMCwgbGluZSwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IC8vIHVwZGF0ZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEF1ZGlvLl9lbGVtZW50KSBlbGVtZW50ID0gY29udGV4dEF1ZGlvLl9lbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnNyYyAhPT0gc3JjKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNyYyA9IHNyYztcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGVsZW1lbnQsICdhdWRpbycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoZWxlbWVudCwgJ2F1ZGlvJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmNhbGwodGhpcywgJ2F1ZGlvJywgZWxlbWVudCwgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZCwgZmlsZSwgZmFsc2UpO1xyXG4gICAgICAgIGlmIChpc1VwZGF0ZSkgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVDb3ZlcjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0QXVkaW8gPSB0aGlzLmNvbnRleHQuYXVkaW87XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLl9zZXRUYWdBdHRycy5jYWxsKHRoaXMsIGVsZW1lbnQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGZpbmQgY29tcG9uZW50IGVsZW1lbnRcclxuICAgICAgICBsZXQgZXhpc3RFbGVtZW50ID0gKHRoaXMudXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChlbGVtZW50LnBhcmVudE5vZGUpIHx8IHRoaXMudXRpbC5pc1d5c2l3eWdEaXYoZWxlbWVudC5wYXJlbnROb2RlKSkgPyBcclxuICAgICAgICAgICAgZWxlbWVudCA6IHRoaXMudXRpbC5nZXRGb3JtYXRFbGVtZW50KGVsZW1lbnQpIHx8IGVsZW1lbnQ7XHJcblxyXG4gICAgICAgIC8vIGNsb25lIGVsZW1lbnRcclxuICAgICAgICBjb25zdCBwcmV2RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgY29udGV4dEF1ZGlvLl9lbGVtZW50ID0gZWxlbWVudCA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICBjb25zdCBjb3ZlciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvdmVyLmNhbGwodGhpcywgZWxlbWVudCk7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5zZXRfY29udGFpbmVyLmNhbGwodGhpcywgY292ZXIsICdzZS1hdWRpby1jb250YWluZXInKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHByZXZFbGVtZW50LCB0aGlzLnV0aWwuaXNOb3RDaGVja2luZ05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjb250YWluZXIsIHByZXZFbGVtZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnV0aWwuaXNMaXN0Q2VsbChleGlzdEVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHByZXZFbGVtZW50LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5wYXJlbnROb2RlID09PSBleGlzdEVsZW1lbnQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50Lmluc2VydEJlZm9yZShjb250YWluZXIsIHJlZmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKHByZXZFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVFbXB0eU5vZGUocmVmZXIsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudXRpbC5pc0Zvcm1hdEVsZW1lbnQoZXhpc3RFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChwcmV2RWxlbWVudCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQucGFyZW50Tm9kZSA9PT0gZXhpc3RFbGVtZW50OyB9KTtcclxuICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudCA9IHRoaXMudXRpbC5zcGxpdEVsZW1lbnQoZXhpc3RFbGVtZW50LCByZWZlcik7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBleGlzdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0ocHJldkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUVtcHR5Tm9kZShleGlzdEVsZW1lbnQsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0RWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPT09IDApIGV4aXN0RWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLnV0aWwuaHRtbFJlbW92ZVdoaXRlU3BhY2UoZXhpc3RFbGVtZW50LmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoY29udGFpbmVyLCBleGlzdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbU1VORURJVE9SLmF1ZGlvLmVycm9yXSBNYXliZSB0aGUgYXVkaW8gdGFnIGlzIG5lc3RlZC4nLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuc2V0SW5mby5jYWxsKHRoaXMsICdhdWRpbycsIGVsZW1lbnQsIHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWQsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIG9uTW9kaWZ5TW9kZTogZnVuY3Rpb24gKHNlbGVjdGlvblRhZykge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRBdWRpbyA9IHRoaXMuY29udGV4dC5hdWRpbztcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNldENvbnRyb2xsZXJQb3NpdGlvbihjb250ZXh0QXVkaW8uY29udHJvbGxlciwgc2VsZWN0aW9uVGFnLCAnYm90dG9tJywge2xlZnQ6IDAsIHRvcDogMH0pO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPbihjb250ZXh0QXVkaW8uY29udHJvbGxlciwgc2VsZWN0aW9uVGFnLCB0aGlzLnBsdWdpbnMuYXVkaW8ub25Db250cm9sbGVyT2ZmLmJpbmQodGhpcywgc2VsZWN0aW9uVGFnKSwgJ2F1ZGlvJyk7XHJcblxyXG4gICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhzZWxlY3Rpb25UYWcsICdhY3RpdmUnKTtcclxuICAgICAgICBjb250ZXh0QXVkaW8uX2VsZW1lbnQgPSBzZWxlY3Rpb25UYWc7XHJcbiAgICAgICAgY29udGV4dEF1ZGlvLl9jb3ZlciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGlvblRhZywgJ0ZJR1VSRScpO1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5fY29udGFpbmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0aW9uVGFnLCB0aGlzLnV0aWwuaXNDb21wb25lbnQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIG9wZW5Nb2RpZnk6IGZ1bmN0aW9uIChub3RPcGVuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dC5hdWRpby5hdWRpb1VybEZpbGUpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dEF1ZGlvID0gdGhpcy5jb250ZXh0LmF1ZGlvO1xyXG4gICAgICAgICAgICBjb250ZXh0QXVkaW8uX2xpbmtWYWx1ZSA9IGNvbnRleHRBdWRpby5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZS52YWx1ZSA9IGNvbnRleHRBdWRpby5fZWxlbWVudC5zcmM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbm90T3BlbikgdGhpcy5wbHVnaW5zLmRpYWxvZy5vcGVuLmNhbGwodGhpcywgJ2F1ZGlvJywgdHJ1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tfY29udHJvbGxlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBjb25zdCBjb21tYW5kID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAoL3VwZGF0ZS8udGVzdChjb21tYW5kKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8ub3Blbk1vZGlmeS5jYWxsKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7IC8qKiBkZWxldGUgKi9cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmRlc3Ryb3kuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuYXVkaW8uX2VsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNvbnRyb2xsZXJPZmY6IGZ1bmN0aW9uIChzZWxlY3Rpb25UYWcpIHtcclxuICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3Moc2VsZWN0aW9uVGFnLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmF1ZGlvLmNvbnRyb2xsZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwpIHJldHVybjtcclxuICAgICAgICBjb25zdCBjb250ZXh0QXVkaW8gPSB0aGlzLmNvbnRleHQuYXVkaW87XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUpIGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZS52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmIChjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlKSBjb250ZXh0QXVkaW8uX2xpbmtWYWx1ZSA9IGNvbnRleHRBdWRpby5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZS52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmIChjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUgJiYgY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgY29udGV4dEF1ZGlvLnByZXZpZXcuc3R5bGUudGV4dERlY29yYXRpb24gPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHRBdWRpby5fZWxlbWVudCA9IG51bGw7XHJcbiAgICB9XHJcbn07IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IGRpYWxvZyBmcm9tICcuLi9tb2R1bGVzL2RpYWxvZyc7XHJcblxyXG5jb25zdCBLQVRFWF9XRUJTSVRFID0gXCJodHRwczovL2thdGV4Lm9yZy9kb2NzL3N1cHBvcnRlZC5odG1sXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnbWF0aCcsXHJcbiAgICBkaXNwbGF5OiAnZGlhbG9nJyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb3JlLmFkZE1vZHVsZShbZGlhbG9nXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5tYXRoID0ge1xyXG4gICAgICAgICAgICBmb2N1c0VsZW1lbnQ6IG51bGwsIC8vIEBPdmVycmlkZSBkaWFsb2cgLy8gVGhpcyBlbGVtZW50IGhhcyBmb2N1cyB3aGVuIHRoZSBkaWFsb2cgaXMgb3BlbmVkLlxyXG4gICAgICAgICAgICBwcmV2aWV3RWxlbWVudDogbnVsbCxcclxuICAgICAgICAgICAgZm9udFNpemVFbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBkZWZhdWx0Rm9udFNpemU6ICcnLFxyXG4gICAgICAgICAgICBfbWF0aEV4cDogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBtYXRoIGRpYWxvZyAqL1xyXG4gICAgICAgIGxldCBtYXRoX2RpYWxvZyA9IHRoaXMuc2V0RGlhbG9nKGNvcmUpO1xyXG4gICAgICAgIGNvbnRleHQubWF0aC5tb2RhbCA9IG1hdGhfZGlhbG9nO1xyXG4gICAgICAgIGNvbnRleHQubWF0aC5mb2N1c0VsZW1lbnQgPSBtYXRoX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtbWF0aC1leHAnKTtcclxuICAgICAgICBjb250ZXh0Lm1hdGgucHJldmlld0VsZW1lbnQgPSBtYXRoX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtbWF0aC1wcmV2aWV3Jyk7XHJcbiAgICAgICAgY29udGV4dC5tYXRoLmZvbnRTaXplRWxlbWVudCA9IG1hdGhfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5zZS1tYXRoLXNpemUnKTtcclxuICAgICAgICBjb250ZXh0Lm1hdGguZm9jdXNFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoY29yZS51dGlsLmlzSUUgPyAndGV4dGlucHV0JyA6ICdpbnB1dCcsIHRoaXMuX3JlbmRlck1hdGhFeHAuYmluZChjb3JlLCBjb250ZXh0Lm1hdGgpLCBmYWxzZSk7XHJcbiAgICAgICAgY29udGV4dC5tYXRoLmZvbnRTaXplRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkgeyB0aGlzLmZvbnRTaXplID0gZS50YXJnZXQudmFsdWU7IH0uYmluZChjb250ZXh0Lm1hdGgucHJldmlld0VsZW1lbnQuc3R5bGUpLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8qKiBtYXRoIGNvbnRyb2xsZXIgKi9cclxuICAgICAgICBsZXQgbWF0aF9jb250cm9sbGVyID0gdGhpcy5zZXRDb250cm9sbGVyX01hdGhCdXR0b24oY29yZSk7XHJcbiAgICAgICAgY29udGV4dC5tYXRoLm1hdGhDb250cm9sbGVyID0gbWF0aF9jb250cm9sbGVyO1xyXG4gICAgICAgIGNvbnRleHQubWF0aC5fbWF0aEV4cCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgbWF0aF9kaWFsb2cucXVlcnlTZWxlY3RvcignZm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuc3VibWl0LmJpbmQoY29yZSksIGZhbHNlKTtcclxuICAgICAgICBtYXRoX2NvbnRyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tfbWF0aENvbnRyb2xsZXIuYmluZChjb3JlKSk7XHJcbiAgICAgICAgY29udGV4dC5tYXRoLnByZXZpZXdFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gY29udGV4dC5tYXRoLmRlZmF1bHRGb250U2l6ZTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXHJcbiAgICAgICAgY29udGV4dC5kaWFsb2cubW9kYWwuYXBwZW5kQ2hpbGQobWF0aF9kaWFsb2cpO1xyXG4gICAgICAgIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5hcHBlbmRDaGlsZChtYXRoX2NvbnRyb2xsZXIpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgbWF0aF9kaWFsb2cgPSBudWxsLCBtYXRoX2NvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKiogZGlhbG9nICovXHJcbiAgICBzZXREaWFsb2c6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBkaWFsb2cgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSBjb3JlLm9wdGlvbnMubWF0aEZvbnRTaXplO1xyXG4gICAgICAgIGxldCBkZWZhdWx0Rm9udFNpemUgPSBmb250U2l6ZVswXS52YWx1ZTtcclxuXHJcbiAgICAgICAgZGlhbG9nLmNsYXNzTmFtZSA9ICdzZS1kaWFsb2ctY29udGVudCc7XHJcbiAgICAgICAgZGlhbG9nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgbGV0IGh0bWwgPSAnJyArXHJcbiAgICAgICAgJzxmb3JtPicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1oZWFkZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJjbG9zZVwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1jbG9zZVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5jYW5jZWwgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtbW9kYWwtdGl0bGVcIj4nICsgbGFuZy5kaWFsb2dCb3gubWF0aEJveC50aXRsZSArICc8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctYm9keVwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bGFiZWw+JyArIGxhbmcuZGlhbG9nQm94Lm1hdGhCb3guaW5wdXRMYWJlbCArICcgKDxhIGhyZWY9XCInICsgS0FURVhfV0VCU0lURSArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5LYVRlWDwvYT4pPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRleHRhcmVhIGNsYXNzPVwic2UtaW5wdXQtZm9ybSBzZS1tYXRoLWV4cFwiIHR5cGU9XCJ0ZXh0XCI+PC90ZXh0YXJlYT4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC5tYXRoQm94LmZvbnRTaXplTGFiZWwgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNlbGVjdCBjbGFzcz1cInNlLWlucHV0LXNlbGVjdCBzZS1tYXRoLXNpemVcIj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmb250U2l6ZS5sZW5ndGgsIGY7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gZm9udFNpemVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmLmRlZmF1bHQpIGRlZmF1bHRGb250U2l6ZSA9IGYudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCInICsgZi52YWx1ZSArICdcIicgKyAoZi5kZWZhdWx0ID8gJyBzZWxlY3RlZCcgOiAnJykgKyAnPicgKyBmLnRleHQgKyAnPC9vcHRpb24+JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8L3NlbGVjdD4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC5tYXRoQm94LnByZXZpZXdMYWJlbCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8cCBjbGFzcz1cInNlLW1hdGgtcHJldmlld1wiPjwvcD4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb290ZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cInNlLWJ0bi1wcmltYXJ5XCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJ1wiPjxzcGFuPicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnPC9zcGFuPjwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgJzwvZm9ybT4nO1xyXG5cclxuICAgICAgICBjb3JlLmNvbnRleHQubWF0aC5kZWZhdWx0Rm9udFNpemUgPSBkZWZhdWx0Rm9udFNpemU7XHJcbiAgICAgICAgZGlhbG9nLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgcmV0dXJuIGRpYWxvZztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIG1vZGlmeSBjb250cm9sbGVyIGJ1dHRvbiAqL1xyXG4gICAgc2V0Q29udHJvbGxlcl9NYXRoQnV0dG9uOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgbWF0aF9idG4gPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIG1hdGhfYnRuLmNsYXNzTmFtZSA9ICdzZS1jb250cm9sbGVyIHNlLWNvbnRyb2xsZXItbGluayc7XHJcbiAgICAgICAgbWF0aF9idG4uaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYXJyb3cgc2UtYXJyb3ctdXBcIj48L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImxpbmstY29udGVudFwiPicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWJ0bi1ncm91cFwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cInVwZGF0ZVwiIHRhYmluZGV4PVwiLTFcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5lZGl0ICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLmVkaXQgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJkZWxldGVcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMuZGVsZXRlICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnJlbW92ZSArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICcnO1xyXG5cclxuICAgICAgICByZXR1cm4gbWF0aF9idG47XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgb3BlbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cub3Blbi5jYWxsKHRoaXMsICdtYXRoJywgJ21hdGgnID09PSB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGNvcmUgLSBtYW5hZ2VkVGFnc0luZm9cclxuICAgICAqL1xyXG4gICAgbWFuYWdlZFRhZ3M6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdrYXRleCcsXHJcbiAgICAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwJykgfHwgIXRoaXMub3B0aW9ucy5rYXRleCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZG9tID0gdGhpcy5fZC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCh0aGlzLnBsdWdpbnMubWF0aC5fcmVuZGVyZXIuY2FsbCh0aGlzLCB0aGlzLnV0aWwuSFRNTERlY29kZXIoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwJykpKSk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGRvbS5xdWVyeVNlbGVjdG9yKCcua2F0ZXgnKS5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgX3JlbmRlcmVyOiBmdW5jdGlvbiAoZXhwKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0aGlzLmNvbnRleHQubWF0aC5mb2N1c0VsZW1lbnQsICdzZS1lcnJvcicpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLm9wdGlvbnMua2F0ZXguc3JjLnJlbmRlclRvU3RyaW5nKGV4cCwge3Rocm93T25FcnJvcjogdHJ1ZSwgZGlzcGxheU1vZGU6IHRydWV9KTtcclxuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0aGlzLmNvbnRleHQubWF0aC5mb2N1c0VsZW1lbnQsICdzZS1lcnJvcicpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAnPHNwYW4gY2xhc3M9XCJzZS1tYXRoLWthdGV4LWVycm9yXCI+S2F0ZXggc3ludGF4IGVycm9yLiAoUmVmZXIgPGEgaHJlZj1cIicgKyBLQVRFWF9XRUJTSVRFICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPkthVGVYPC9hPik8L3NwYW4+JztcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbU1VORURJVE9SLm1hdGguS2F0ZXguZXJyb3JdICcsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcblxyXG4gICAgX3JlbmRlck1hdGhFeHA6IGZ1bmN0aW9uIChjb250ZXh0TWF0aCwgZSkge1xyXG4gICAgICAgIGNvbnRleHRNYXRoLnByZXZpZXdFbGVtZW50LmlubmVySFRNTCA9IHRoaXMucGx1Z2lucy5tYXRoLl9yZW5kZXJlci5jYWxsKHRoaXMsIGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIH0sXHJcblxyXG4gICAgc3VibWl0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN1Ym1pdEFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5tYXRoLmZvY3VzRWxlbWVudC52YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0TWF0aCA9IHRoaXMuY29udGV4dC5tYXRoO1xyXG4gICAgICAgICAgICBjb25zdCBtYXRoRXhwID0gY29udGV4dE1hdGguZm9jdXNFbGVtZW50LnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBrYXRleEVsID0gY29udGV4dE1hdGgucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignLmthdGV4Jyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWthdGV4RWwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAga2F0ZXhFbC5jbGFzc05hbWUgPSAnX19zZV9fa2F0ZXggJyArIGthdGV4RWwuY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICBrYXRleEVsLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xyXG4gICAgICAgICAgICBrYXRleEVsLnNldEF0dHJpYnV0ZSgnZGF0YS1leHAnLCB0aGlzLnV0aWwuSFRNTEVuY29kZXIobWF0aEV4cCkpO1xyXG4gICAgICAgICAgICBrYXRleEVsLnNldEF0dHJpYnV0ZSgnZGF0YS1mb250LXNpemUnLCBjb250ZXh0TWF0aC5mb250U2l6ZUVsZW1lbnQudmFsdWUpO1xyXG4gICAgICAgICAgICBrYXRleEVsLnN0eWxlLmZvbnRTaXplID0gY29udGV4dE1hdGguZm9udFNpemVFbGVtZW50LnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZvcm1hdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvRm9ybWF0ID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzWzBdLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBvRm9ybWF0LmFwcGVuZENoaWxkKGthdGV4RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbnNlcnROb2RlKG9Gb3JtYXQsIG51bGwsIHRydWUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbnNlcnROb2RlKGthdGV4RWwsIG51bGwsIHRydWUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZW1wdHkgPSB0aGlzLnV0aWwuY3JlYXRlVGV4dE5vZGUodGhpcy51dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgIGthdGV4RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZW1wdHksIGthdGV4RWwubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShrYXRleEVsLCAwLCBrYXRleEVsLCAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckVsID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoY29udGV4dE1hdGguX21hdGhFeHAsICcua2F0ZXgnKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGthdGV4RWwsIGNvbnRhaW5lckVsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uoa2F0ZXhFbCwgMCwga2F0ZXhFbCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRNYXRoLmZvY3VzRWxlbWVudC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICBjb250ZXh0TWF0aC5mb250U2l6ZUVsZW1lbnQudmFsdWUgPSAnMWVtJztcclxuICAgICAgICAgICAgY29udGV4dE1hdGgucHJldmlld0VsZW1lbnQuc3R5bGUuZm9udFNpemUgPSAnMWVtJztcclxuICAgICAgICAgICAgY29udGV4dE1hdGgucHJldmlld0VsZW1lbnQuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChzdWJtaXRBY3Rpb24oKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5jbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyQXJyYXkuaW5kZXhPZih0aGlzLmNvbnRleHQubWF0aC5tYXRoQ29udHJvbGxlcikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1leHAnKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyQXJyYXkuaW5kZXhPZih0aGlzLmNvbnRleHQubWF0aC5tYXRoQ29udHJvbGxlcikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGVsZW1lbnQsIDAsIGVsZW1lbnQsIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLm1hdGguY2FsbF9jb250cm9sbGVyLmNhbGwodGhpcywgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uOiBmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgaWYgKCF1cGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLm1hdGguaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRNYXRoID0gdGhpcy5jb250ZXh0Lm1hdGg7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0TWF0aC5fbWF0aEV4cCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhwID0gdGhpcy51dGlsLkhUTUxEZWNvZGVyKGNvbnRleHRNYXRoLl9tYXRoRXhwLmdldEF0dHJpYnV0ZSgnZGF0YS1leHAnKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IGNvbnRleHRNYXRoLl9tYXRoRXhwLmdldEF0dHJpYnV0ZSgnZGF0YS1mb250LXNpemUnKSB8fCAnMWVtJztcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dE1hdGguZm9jdXNFbGVtZW50LnZhbHVlID0gZXhwO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dE1hdGguZm9udFNpemVFbGVtZW50LnZhbHVlID0gZm9udFNpemU7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0TWF0aC5wcmV2aWV3RWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLnBsdWdpbnMubWF0aC5fcmVuZGVyZXIuY2FsbCh0aGlzLCBleHApO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dE1hdGgucHJldmlld0VsZW1lbnQuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY2FsbF9jb250cm9sbGVyOiBmdW5jdGlvbiAobWF0aFRhZykge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5tYXRoLl9tYXRoRXhwID0gbWF0aFRhZztcclxuICAgICAgICBjb25zdCBtYXRoQnRuID0gdGhpcy5jb250ZXh0Lm1hdGgubWF0aENvbnRyb2xsZXI7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Q29udHJvbGxlclBvc2l0aW9uKG1hdGhCdG4sIG1hdGhUYWcsICdib3R0b20nLCB7bGVmdDogMCwgdG9wOiAwfSk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc09uKG1hdGhCdG4sIG1hdGhUYWcsICdtYXRoJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tfbWF0aENvbnRyb2xsZXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykgfHwgZS50YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgIGlmICghY29tbWFuZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIGlmICgvdXBkYXRlLy50ZXN0KGNvbW1hbmQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5tYXRoLmZvY3VzRWxlbWVudC52YWx1ZSA9IHRoaXMudXRpbC5IVE1MRGVjb2Rlcih0aGlzLmNvbnRleHQubWF0aC5fbWF0aEV4cC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwJykpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLm9wZW4uY2FsbCh0aGlzLCAnbWF0aCcsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8qKiBkZWxldGUgKi9cclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0odGhpcy5jb250ZXh0Lm1hdGguX21hdGhFeHApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubWF0aC5fbWF0aEV4cCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dE1hdGggPSB0aGlzLmNvbnRleHQubWF0aDtcclxuICAgICAgICBjb250ZXh0TWF0aC5tYXRoQ29udHJvbGxlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIGNvbnRleHRNYXRoLl9tYXRoRXhwID0gbnVsbDtcclxuICAgICAgICBjb250ZXh0TWF0aC5mb2N1c0VsZW1lbnQudmFsdWUgPSAnJztcclxuICAgICAgICBjb250ZXh0TWF0aC5wcmV2aWV3RWxlbWVudC5pbm5lckhUTUwgPSAnJztcclxuICAgIH1cclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gY29tbWFuZFxyXG5pbXBvcnQgYmxvY2txdW90ZSBmcm9tICcuL2NvbW1hbmQvYmxvY2txdW90ZSc7XHJcblxyXG4vLyBzdWJtZW51XHJcbmltcG9ydCBhbGlnbiBmcm9tICcuL3N1Ym1lbnUvYWxpZ24nO1xyXG5pbXBvcnQgZm9udCBmcm9tICcuL3N1Ym1lbnUvZm9udCc7XHJcbmltcG9ydCBmb250U2l6ZSBmcm9tICcuL3N1Ym1lbnUvZm9udFNpemUnO1xyXG5pbXBvcnQgZm9udENvbG9yIGZyb20gJy4vc3VibWVudS9mb250Q29sb3InO1xyXG5pbXBvcnQgaGlsaXRlQ29sb3IgZnJvbSAnLi9zdWJtZW51L2hpbGl0ZUNvbG9yJztcclxuaW1wb3J0IGhvcml6b250YWxSdWxlIGZyb20gJy4vc3VibWVudS9ob3Jpem9udGFsUnVsZSc7XHJcbmltcG9ydCBsaXN0IGZyb20gJy4vc3VibWVudS9saXN0JztcclxuaW1wb3J0IHRhYmxlIGZyb20gJy4vc3VibWVudS90YWJsZSc7XHJcbmltcG9ydCBmb3JtYXRCbG9jayBmcm9tICcuL3N1Ym1lbnUvZm9ybWF0QmxvY2snO1xyXG5pbXBvcnQgbGluZUhlaWdodCBmcm9tICcuL3N1Ym1lbnUvbGluZUhlaWdodCc7XHJcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3N1Ym1lbnUvdGVtcGxhdGUnO1xyXG5pbXBvcnQgcGFyYWdyYXBoU3R5bGUgZnJvbSAnLi9zdWJtZW51L3BhcmFncmFwaFN0eWxlJztcclxuaW1wb3J0IHRleHRTdHlsZSBmcm9tICcuL3N1Ym1lbnUvdGV4dFN0eWxlJztcclxuXHJcbi8vIGRpYWxvZ1xyXG5pbXBvcnQgbGluayBmcm9tICcuL2RpYWxvZy9saW5rJztcclxuaW1wb3J0IGltYWdlIGZyb20gJy4vZGlhbG9nL2ltYWdlJztcclxuaW1wb3J0IHZpZGVvIGZyb20gJy4vZGlhbG9nL3ZpZGVvJztcclxuaW1wb3J0IGF1ZGlvIGZyb20gJy4vZGlhbG9nL2F1ZGlvJztcclxuaW1wb3J0IG1hdGggZnJvbSAnLi9kaWFsb2cvbWF0aCc7XHJcblxyXG4vLyBmaWxlIGJyb3dzZXJcclxuaW1wb3J0IGltYWdlR2FsbGVyeSBmcm9tICcuL2ZpbGVCcm93c2VyL2ltYWdlR2FsbGVyeSc7XHJcblxyXG5leHBvcnQgeyBibG9ja3F1b3RlLCBhbGlnbiwgZm9udCwgZm9udFNpemUsIGZvbnRDb2xvciwgaGlsaXRlQ29sb3IsIGhvcml6b250YWxSdWxlLCBsaXN0LCB0YWJsZSwgZm9ybWF0QmxvY2ssIGxpbmVIZWlnaHQsIHRlbXBsYXRlLCBwYXJhZ3JhcGhTdHlsZSwgdGV4dFN0eWxlLCBsaW5rLCBpbWFnZSwgdmlkZW8sIGF1ZGlvLCBtYXRoLCBpbWFnZUdhbGxlcnkgfTtcclxuZXhwb3J0IGRlZmF1bHQgeyBibG9ja3F1b3RlLCBhbGlnbiwgZm9udCwgZm9udFNpemUsIGZvbnRDb2xvciwgaGlsaXRlQ29sb3IsIGhvcml6b250YWxSdWxlLCBsaXN0LCB0YWJsZSwgZm9ybWF0QmxvY2ssIGxpbmVIZWlnaHQsIHRlbXBsYXRlLCBwYXJhZ3JhcGhTdHlsZSwgdGV4dFN0eWxlLCBsaW5rLCBpbWFnZSwgdmlkZW8sIGF1ZGlvLCBtYXRoLCBpbWFnZUdhbGxlcnkgfTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdibG9ja3F1b3RlJyxcclxuICAgIGRpc3BsYXk6ICdjb21tYW5kJyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQuYmxvY2txdW90ZSA9IHtcclxuICAgICAgICAgICAgdGFyZ2V0QnV0dG9uOiB0YXJnZXRFbGVtZW50LFxyXG4gICAgICAgICAgICB0YWc6IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdCTE9DS1FVT1RFJylcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlXHJcbiAgICAgKi9cclxuICAgIGFjdGl2ZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHRoaXMuY29udGV4dC5ibG9ja3F1b3RlLnRhcmdldEJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoL2Jsb2NrcXVvdGUvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0aGlzLmNvbnRleHQuYmxvY2txdW90ZS50YXJnZXRCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxyXG4gICAgICovXHJcbiAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50QmxvY2txdW90ZSA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLCAnYmxvY2txdW90ZScpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudEJsb2NrcXVvdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQoY3VycmVudEJsb2NrcXVvdGUsIG51bGwsIG51bGwsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVJhbmdlRm9ybWF0RWxlbWVudCh0aGlzLmNvbnRleHQuYmxvY2txdW90ZS50YWcuY2xvbmVOb2RlKGZhbHNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59OyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnYWxpZ24nLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGljb25zID0gY29yZS5pY29ucztcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQuYWxpZ24gPSB7XHJcbiAgICAgICAgICAgIHRhcmdldEJ1dHRvbjogdGFyZ2V0RWxlbWVudCxcclxuICAgICAgICAgICAgX2l0ZW1NZW51OiBudWxsLFxyXG4gICAgICAgICAgICBfYWxpZ25MaXN0OiBudWxsLFxyXG4gICAgICAgICAgICBjdXJyZW50QWxpZ246ICcnLFxyXG4gICAgICAgICAgICBkZWZhdWx0RGlyOiBjb3JlLm9wdGlvbnMucnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcclxuICAgICAgICAgICAgaWNvbnM6IHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnk6IGljb25zLmFsaWduX2p1c3RpZnksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBpY29ucy5hbGlnbl9sZWZ0LFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IGljb25zLmFsaWduX3JpZ2h0LFxyXG4gICAgICAgICAgICAgICAgY2VudGVyOiBpY29ucy5hbGlnbl9jZW50ZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG4gICAgICAgIGxldCBsaXN0VWwgPSBjb250ZXh0LmFsaWduLl9pdGVtTWVudSA9IGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0VWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBjb250ZXh0LmFsaWduLl9hbGlnbkxpc3QgPSBsaXN0VWwucXVlcnlTZWxlY3RvckFsbCgnbGkgYnV0dG9uJyk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgdGFyZ2V0IGJ1dHRvbiBtZW51ICovXHJcbiAgICAgICAgY29yZS5pbml0TWVudVRhcmdldCh0aGlzLm5hbWUsIHRhcmdldEVsZW1lbnQsIGxpc3REaXYpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgbGlzdERpdiA9IG51bGwsIGxpc3RVbCA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBpY29ucyA9IGNvcmUuaWNvbnM7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBjb25zdCBhbGlnbkl0ZW1zID0gY29yZS5vcHRpb25zLmFsaWduSXRlbXM7XHJcblxyXG4gICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGl0ZW0sIHRleHQ7IGkgPCBhbGlnbkl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGl0ZW0gPSBhbGlnbkl0ZW1zW2ldO1xyXG4gICAgICAgICAgICB0ZXh0ID0gbGFuZy50b29sYmFyWydhbGlnbicgKyBpdGVtLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgaXRlbS5zbGljZSgxKV07XHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzxsaT4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLWJ0bi1hbGlnblwiIGRhdGEtdmFsdWU9XCInICsgaXRlbSArICdcIiB0aXRsZT1cIicgKyB0ZXh0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgdGV4dCArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS1saXN0LWljb25cIj4nICsgaWNvbnNbJ2FsaWduXycgKyBpdGVtXSArICc8L3NwYW4+JyArIHRleHQgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAnPC9saT4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2Utc3VibWVudSBzZS1saXN0LWxheWVyIHNlLWxpc3QtYWxpZ24nO1xyXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArXHJcbiAgICAgICAgICAgICAgICAnPC91bD4nICtcclxuICAgICAgICAgICAgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlXHJcbiAgICAgKi9cclxuICAgIGFjdGl2ZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBhbGlnbkNvbnRleHQgPSB0aGlzLmNvbnRleHQuYWxpZ247XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0QnV0dG9uID0gYWxpZ25Db250ZXh0LnRhcmdldEJ1dHRvbjtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRCdXR0b24uZmlyc3RFbGVtZW50Q2hpbGQ7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlRWxlbWVudCh0YXJnZXQsIGFsaWduQ29udGV4dC5pY29uc1thbGlnbkNvbnRleHQuZGVmYXVsdERpcl0pO1xyXG4gICAgICAgICAgICB0YXJnZXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZvY3VzJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnV0aWwuaXNGb3JtYXRFbGVtZW50KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRBbGlnbiA9IGVsZW1lbnQuc3R5bGUudGV4dEFsaWduO1xyXG4gICAgICAgICAgICBpZiAodGV4dEFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlRWxlbWVudCh0YXJnZXQsIGFsaWduQ29udGV4dC5pY29uc1t0ZXh0QWxpZ25dIHx8IGFsaWduQ29udGV4dC5pY29uc1thbGlnbkNvbnRleHQuZGVmYXVsdERpcl0pO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cycsIHRleHRBbGlnbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBzdWJtZW51XHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgYWxpZ25Db250ZXh0ID0gdGhpcy5jb250ZXh0LmFsaWduO1xyXG4gICAgICAgIGNvbnN0IGFsaWduTGlzdCA9IGFsaWduQ29udGV4dC5fYWxpZ25MaXN0O1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBbGlnbiA9IGFsaWduQ29udGV4dC50YXJnZXRCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWZvY3VzJykgfHwgYWxpZ25Db250ZXh0LmRlZmF1bHREaXI7XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50QWxpZ24gIT09IGFsaWduQ29udGV4dC5jdXJyZW50QWxpZ24pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFsaWduTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRBbGlnbiA9PT0gYWxpZ25MaXN0W2ldLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGFsaWduTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoYWxpZ25MaXN0W2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFsaWduQ29udGV4dC5jdXJyZW50QWxpZ24gPSBjdXJyZW50QWxpZ247XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBleGNoYW5nZURpcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGRpciA9IHRoaXMub3B0aW9ucy5ydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0LmFsaWduIHx8IHRoaXMuY29udGV4dC5hbGlnbi5kZWZhdWx0RGlyID09PSBkaXIpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmFsaWduLmRlZmF1bHREaXIgPSBkaXI7XHJcbiAgICAgICAgbGV0IG1lbnUgPSB0aGlzLmNvbnRleHQuYWxpZ24uX2l0ZW1NZW51O1xyXG4gICAgICAgIGxldCBsZWZ0QnRuID0gbWVudS5xdWVyeVNlbGVjdG9yKCdbZGF0YS12YWx1ZT1cImxlZnRcIl0nKTtcclxuICAgICAgICBsZXQgcmlnaHRCdG4gPSBtZW51LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXZhbHVlPVwicmlnaHRcIl0nKTtcclxuICAgICAgICBpZiAobGVmdEJ0biAmJiByaWdodEJ0bikge1xyXG4gICAgICAgICAgICBjb25zdCBscCA9IGxlZnRCdG4ucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgcnAgPSByaWdodEJ0bi5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICBscC5hcHBlbmRDaGlsZChyaWdodEJ0bik7XHJcbiAgICAgICAgICAgIHJwLmFwcGVuZENoaWxkKGxlZnRCdG4pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgd2hpbGUgKCF2YWx1ZSAmJiAhL1VML2kudGVzdCh0YXJnZXQudGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBkZWZhdWx0RGlyID0gdGhpcy5jb250ZXh0LmFsaWduLmRlZmF1bHREaXI7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRGb3Jtc3RzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybXN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuc2V0U3R5bGUoc2VsZWN0ZWRGb3Jtc3RzW2ldLCAndGV4dEFsaWduJywgKHZhbHVlID09PSBkZWZhdWx0RGlyID8gJycgOiB2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdmb250JyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQuZm9udCA9IHtcclxuICAgICAgICAgICAgdGFyZ2V0VGV4dDogdGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudHh0JyksXHJcbiAgICAgICAgICAgIHRhcmdldFRvb2x0aXA6IHRhcmdldEVsZW1lbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuc2UtdG9vbHRpcC10ZXh0JyksXHJcbiAgICAgICAgICAgIF9mb250TGlzdDogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVudEZvbnQ6ICcnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgbGlzdERpdi5xdWVyeVNlbGVjdG9yKCcuc2UtbGlzdC1pbm5lcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5waWNrdXAuYmluZChjb3JlKSk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuZm9udC5fZm9udExpc3QgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ3VsIGxpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2Utc3VibWVudSBzZS1saXN0LWxheWVyIHNlLWxpc3QtZm9udC1mYW1pbHknO1xyXG5cclxuICAgICAgICBsZXQgZm9udCwgdGV4dCwgaSwgbGVuO1xyXG4gICAgICAgIGxldCBmb250TGlzdCA9IGNvcmUub3B0aW9ucy5mb250O1xyXG5cclxuICAgICAgICBsZXQgbGlzdCA9ICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1pbm5lclwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzx1bCBjbGFzcz1cInNlLWxpc3QtYmFzaWNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZGVmYXVsdF92YWx1ZSBzZS1idG4tbGlzdFwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci5kZWZhdWx0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy50b29sYmFyLmRlZmF1bHQgKyAnXCI+KCcgKyBsYW5nLnRvb2xiYXIuZGVmYXVsdCArICcpPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGZvbnRMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvbnQgPSBmb250TGlzdFtpXTtcclxuICAgICAgICAgICAgdGV4dCA9IGZvbnQuc3BsaXQoJywnKVswXTtcclxuICAgICAgICAgICAgbGlzdCArPSAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3RcIiBkYXRhLXZhbHVlPVwiJyArIGZvbnQgKyAnXCIgZGF0YS10eHQ9XCInICsgdGV4dCArICdcIiB0aXRsZT1cIicgKyB0ZXh0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgdGV4dCArICdcIiBzdHlsZT1cImZvbnQtZmFtaWx5OicgKyBmb250ICsgJztcIj4nICsgdGV4dCArICc8L2J1dHRvbj48L2xpPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QgKz0gJzwvdWw+PC9kaXY+JztcclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxyXG4gICAgICovXHJcbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5jb250ZXh0LmZvbnQudGFyZ2V0VGV4dDtcclxuICAgICAgICBjb25zdCB0b29sdGlwID0gdGhpcy5jb250ZXh0LmZvbnQudGFyZ2V0VG9vbHRpcDtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvbnQgPSB0aGlzLmhhc0ZvY3VzID8gdGhpcy53d0NvbXB1dGVkU3R5bGUuZm9udEZhbWlseSA6IHRoaXMubGFuZy50b29sYmFyLmZvbnQ7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQodGFyZ2V0LCBmb250KTtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dCh0b29sdGlwLCB0aGlzLmhhc0ZvY3VzID8gdGhpcy5sYW5nLnRvb2xiYXIuZm9udCArIChmb250ID8gJyAoJyArIGZvbnQgKyAnKScgOiAnJykgOiBmb250KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc3R5bGUgJiYgZWxlbWVudC5zdHlsZS5mb250RmFtaWx5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0Rm9udCA9IGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseS5yZXBsYWNlKC9bXCInXS9nLCcnKTtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dCh0YXJnZXQsIHNlbGVjdEZvbnQpO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlVHh0KHRvb2x0aXAsIHRoaXMubGFuZy50b29sYmFyLmZvbnQgKyAnICgnICsgc2VsZWN0Rm9udCArICcpJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGZvbnRDb250ZXh0ID0gdGhpcy5jb250ZXh0LmZvbnQ7XHJcbiAgICAgICAgY29uc3QgZm9udExpc3QgPSBmb250Q29udGV4dC5fZm9udExpc3Q7XHJcbiAgICAgICAgY29uc3QgY3VycmVudEZvbnQgPSBmb250Q29udGV4dC50YXJnZXRUZXh0LnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudEZvbnQgIT09IGZvbnRDb250ZXh0LmN1cnJlbnRGb250KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmb250TGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGb250ID09PSAoZm9udExpc3RbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJycpLnJlcGxhY2UoLyd8XCIvZywgJycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGZvbnRMaXN0W2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhmb250TGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb250Q29udGV4dC5jdXJyZW50Rm9udCA9IGN1cnJlbnRGb250O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghL15CVVRUT04kL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICAgICAgaWYgKC9bXFxzXFxkXFxXXS8udGVzdCh2YWx1ZSkgJiYgIS9eWydcIl0uKlsnXCJdJC8udGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gJ1wiJyArIHZhbHVlICsgJ1wiJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZXdOb2RlLnN0eWxlLmZvbnRGYW1pbHkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG5ld05vZGUsIFsnZm9udC1mYW1pbHknXSwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG51bGwsIFsnZm9udC1mYW1pbHknXSwgWydzcGFuJ10sIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdmb250U2l6ZScsXHJcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0LmZvbnRTaXplID0ge1xyXG4gICAgICAgICAgICB0YXJnZXRUZXh0OiB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50eHQnKSxcclxuICAgICAgICAgICAgX3NpemVMaXN0OiBudWxsLFxyXG4gICAgICAgICAgICBjdXJyZW50U2l6ZTogJydcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuICAgICAgICBsZXQgbGlzdFVsID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yKCd1bCcpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGxpc3RVbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGNvbnRleHQuZm9udFNpemUuX3NpemVMaXN0ID0gbGlzdFVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsLCBsaXN0VWwgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWZvbnQtc2l6ZSc7XHJcblxyXG4gICAgICAgIGNvbnN0IHNpemVMaXN0ID0gIW9wdGlvbi5mb250U2l6ZSA/IFs4LCA5LCAxMCwgMTEsIDEyLCAxNCwgMTYsIDE4LCAyMCwgMjIsIDI0LCAyNiwgMjgsIDM2LCA0OCwgNzJdIDogb3B0aW9uLmZvbnRTaXplO1xyXG5cclxuICAgICAgICBsZXQgbGlzdCA9ICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1pbm5lclwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzx1bCBjbGFzcz1cInNlLWxpc3QtYmFzaWNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZGVmYXVsdF92YWx1ZSBzZS1idG4tbGlzdFwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci5kZWZhdWx0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy50b29sYmFyLmRlZmF1bHQgKyAnXCI+KCcgKyBsYW5nLnRvb2xiYXIuZGVmYXVsdCArICcpPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCB1bml0ID0gb3B0aW9uLmZvbnRTaXplVW5pdCwgbGVuID0gc2l6ZUxpc3QubGVuZ3RoLCBzaXplOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgc2l6ZSA9IHNpemVMaXN0W2ldO1xyXG4gICAgICAgICAgICBsaXN0ICs9ICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdFwiIGRhdGEtdmFsdWU9XCInICsgc2l6ZSArIHVuaXQgKyAnXCIgdGl0bGU9XCInICsgc2l6ZSArIHVuaXQgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBzaXplICsgdW5pdCArICdcIiBzdHlsZT1cImZvbnQtc2l6ZTonICsgc2l6ZSArIHVuaXQgKyAnO1wiPicgKyBzaXplICsgJzwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdCArPSAnPC91bD48L2Rpdj4nO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxyXG4gICAgICovXHJcbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQodGhpcy5jb250ZXh0LmZvbnRTaXplLnRhcmdldFRleHQsIHRoaXMuaGFzRm9jdXMgPyB0aGlzLl9jb252ZXJ0Rm9udFNpemUuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuZm9udFNpemVVbml0LCB0aGlzLnd3Q29tcHV0ZWRTdHlsZS5mb250U2l6ZSkgOiB0aGlzLmxhbmcudG9vbGJhci5mb250U2l6ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnN0eWxlICYmIGVsZW1lbnQuc3R5bGUuZm9udFNpemUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlVHh0KHRoaXMuY29udGV4dC5mb250U2l6ZS50YXJnZXRUZXh0LCB0aGlzLl9jb252ZXJ0Rm9udFNpemUuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuZm9udFNpemVVbml0LCBlbGVtZW50LnN0eWxlLmZvbnRTaXplKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGZvbnRTaXplQ29udGV4dCA9IHRoaXMuY29udGV4dC5mb250U2l6ZTtcclxuICAgICAgICBjb25zdCBzaXplTGlzdCA9IGZvbnRTaXplQ29udGV4dC5fc2l6ZUxpc3Q7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFNpemUgPSBmb250U2l6ZUNvbnRleHQudGFyZ2V0VGV4dC50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRTaXplICE9PSBmb250U2l6ZUNvbnRleHQuY3VycmVudFNpemUpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNpemVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNpemUgPT09IHNpemVMaXN0W2ldLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHNpemVMaXN0W2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhzaXplTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb250U2l6ZUNvbnRleHQuY3VycmVudFNpemUgPSBjdXJyZW50U2l6ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoIS9eQlVUVE9OJC9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05vZGUgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnU1BBTicpO1xyXG4gICAgICAgICAgICBuZXdOb2RlLnN0eWxlLmZvbnRTaXplID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZUNoYW5nZShuZXdOb2RlLCBbJ2ZvbnQtc2l6ZSddLCBudWxsLCBudWxsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVDaGFuZ2UobnVsbCwgWydmb250LXNpemUnXSwgWydzcGFuJ10sIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnaG9yaXpvbnRhbFJ1bGUnLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvcmUuY29udGV4dC5ob3Jpem9udGFsUnVsZSA9IHtcclxuICAgICAgICAgICAgY3VycmVudEhSOiBudWxsLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaG9yaXpvbnRhbFJ1bGVQaWNrLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IGNvcmUub3B0aW9ucy5ockl0ZW1zIHx8IFt7bmFtZTogbGFuZy50b29sYmFyLmhyX3NvbGlkLCBjbGFzczogJ19fc2VfX3NvbGlkJ30sIHtuYW1lOiBsYW5nLnRvb2xiYXIuaHJfZGFzaGVkLCBjbGFzczogJ19fc2VfX2Rhc2hlZCd9LCB7bmFtZTogbGFuZy50b29sYmFyLmhyX2RvdHRlZCwgY2xhc3M6ICdfX3NlX19kb3R0ZWQnfV07XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGxpc3QgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgbGlzdCArPSAnPGxpPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3QgYnRuX2xpbmVcIiBkYXRhLWNvbW1hbmQ9XCJob3Jpem9udGFsUnVsZVwiIGRhdGEtdmFsdWU9XCInICsgaXRlbXNbaV0uY2xhc3MgKyAnXCIgdGl0bGU9XCInICsgaXRlbXNbaV0ubmFtZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIGl0ZW1zW2ldLm5hbWUgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxocicgKyAoaXRlbXNbaV0uY2xhc3MgPyAnIGNsYXNzPVwiJyArIGl0ZW1zW2ldLmNsYXNzICsgJ1wiJyA6ICcnKSArIChpdGVtc1tpXS5zdHlsZSA/ICcgc3R5bGU9XCInICsgaXRlbXNbaV0uc3R5bGUgKyAnXCInIDogJycpICsgJy8+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICc8L2xpPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWxpbmUnO1xyXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdCArXHJcbiAgICAgICAgICAgICAgICAnPC91bD4nICtcclxuICAgICAgICAgICAgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuaGFzQ2xhc3ModGhpcy5jb250ZXh0Lmhvcml6b250YWxSdWxlLmN1cnJlbnRIUiwgJ29uJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoL0hSL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuaG9yaXpvbnRhbFJ1bGUuY3VycmVudEhSID0gZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnV0aWwuaGFzQ2xhc3MoZWxlbWVudCwgJ29uJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnb24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPbignaHInLCB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MuYmluZCh0aGlzLnV0aWwsIGVsZW1lbnQsICdvbicpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgYXBwZW5kSHI6IGZ1bmN0aW9uIChoclRlbXApIHtcclxuICAgICAgICB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0Q29tcG9uZW50KGhyVGVtcC5jbG9uZU5vZGUoZmFsc2UpLCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICBob3Jpem9udGFsUnVsZVBpY2s6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICBsZXQgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdoaWxlICghY29tbWFuZCAmJiAhL1VML2kudGVzdCh0YXJnZXQudGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghY29tbWFuZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBvTm9kZSA9IHRoaXMucGx1Z2lucy5ob3Jpem9udGFsUnVsZS5hcHBlbmRIci5jYWxsKHRoaXMsIHRhcmdldC5maXJzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgaWYgKG9Ob2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uob05vZGUsIDAsIG9Ob2RlLCAwKTtcclxuICAgICAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2xpc3QnLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5saXN0ID0ge1xyXG4gICAgICAgICAgICB0YXJnZXRCdXR0b246IHRhcmdldEVsZW1lbnQsXHJcbiAgICAgICAgICAgIF9saXN0OiBudWxsLFxyXG4gICAgICAgICAgICBjdXJyZW50TGlzdDogJycsXHJcbiAgICAgICAgICAgIGljb25zOiB7XHJcbiAgICAgICAgICAgICAgICBidWxsZXRzOiBjb3JlLmljb25zLmxpc3RfYnVsbGV0cyxcclxuICAgICAgICAgICAgICAgIG51bWJlcjogY29yZS5pY29ucy5saXN0X251bWJlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcbiAgICAgICAgbGV0IGxpc3RVbCA9IGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0VWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBjb250ZXh0Lmxpc3QuX2xpc3QgPSBsaXN0VWwucXVlcnlTZWxlY3RvckFsbCgnbGkgYnV0dG9uJyk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgdGFyZ2V0IGJ1dHRvbiBtZW51ICovXHJcbiAgICAgICAgY29yZS5pbml0TWVudVRhcmdldCh0aGlzLm5hbWUsIHRhcmdldEVsZW1lbnQsIGxpc3REaXYpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgbGlzdERpdiA9IG51bGwsIGxpc3RVbCA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXInO1xyXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLXRvb2x0aXBcIiBkYXRhLWNvbW1hbmQ9XCJPTFwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci5vcmRlckxpc3QgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLnRvb2xiYXIub3JkZXJMaXN0ICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmljb25zLmxpc3RfbnVtYmVyICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+PC9saT4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3Qgc2UtdG9vbHRpcFwiIGRhdGEtY29tbWFuZD1cIlVMXCIgdGl0bGU9XCInICsgbGFuZy50b29sYmFyLnVub3JkZXJMaXN0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy50b29sYmFyLnVub3JkZXJMaXN0ICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmljb25zLmxpc3RfYnVsbGV0cyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JyArXHJcbiAgICAgICAgICAgICAgICAnPC91bD4nICtcclxuICAgICAgICAgICAgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxyXG4gICAgICovXHJcbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5jb250ZXh0Lmxpc3QudGFyZ2V0QnV0dG9uO1xyXG4gICAgICAgIGNvbnN0IGljb24gPSBidXR0b24uZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuXHJcbiAgICAgICAgaWYgKHV0aWwuaXNMaXN0KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cycsIG5vZGVOYW1lKTtcclxuICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhidXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgaWYgKC9VTC9pLnRlc3Qobm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmNoYW5nZUVsZW1lbnQoaWNvbiwgdGhpcy5jb250ZXh0Lmxpc3QuaWNvbnMuYnVsbGV0cyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmNoYW5nZUVsZW1lbnQoaWNvbiwgdGhpcy5jb250ZXh0Lmxpc3QuaWNvbnMubnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mb2N1cycpO1xyXG4gICAgICAgICAgICB1dGlsLmNoYW5nZUVsZW1lbnQoaWNvbiwgdGhpcy5jb250ZXh0Lmxpc3QuaWNvbnMubnVtYmVyKTtcclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhidXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHN1Ym1lbnVcclxuICAgICAqL1xyXG4gICAgb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBsaXN0Q29udGV4dCA9IHRoaXMuY29udGV4dC5saXN0O1xyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBsaXN0Q29udGV4dC5fbGlzdDtcclxuICAgICAgICBjb25zdCBjdXJyZW50TGlzdCA9IGxpc3RDb250ZXh0LnRhcmdldEJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMnKSB8fCAnJztcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRMaXN0ICE9PSBsaXN0Q29udGV4dC5jdXJyZW50TGlzdCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaXN0ID09PSBsaXN0W2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MobGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MobGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsaXN0Q29udGV4dC5jdXJyZW50TGlzdCA9IGN1cnJlbnRMaXN0O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZWRpdExpc3Q6IGZ1bmN0aW9uIChjb21tYW5kLCBzZWxlY3RlZENlbGxzLCBkZXRhY2gpIHtcclxuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgbGV0IHNlbGVjdGVkRm9ybWF0cyA9ICFzZWxlY3RlZENlbGxzID8gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzQW5kQ29tcG9uZW50cyhmYWxzZSkgOiBzZWxlY3RlZENlbGxzO1xyXG5cclxuICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRDZWxscykgcmV0dXJuO1xyXG4gICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VfYWRkTGluZShyYW5nZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRm9ybWF0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMoZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB1dGlsID0gdGhpcy51dGlsO1xyXG4gICAgICAgIHV0aWwuc29ydEJ5RGVwdGgoc2VsZWN0ZWRGb3JtYXRzLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gbWVyZ2VcclxuICAgICAgICBsZXQgZmlyc3RTZWwgPSBzZWxlY3RlZEZvcm1hdHNbMF07XHJcbiAgICAgICAgbGV0IGxhc3RTZWwgPSBzZWxlY3RlZEZvcm1hdHNbc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIGxldCB0b3BFbCA9ICh1dGlsLmlzTGlzdENlbGwoZmlyc3RTZWwpIHx8IHV0aWwuaXNDb21wb25lbnQoZmlyc3RTZWwpKSAmJiAhZmlyc3RTZWwucHJldmlvdXNFbGVtZW50U2libGluZyA/IGZpcnN0U2VsLnBhcmVudE5vZGUucHJldmlvdXNFbGVtZW50U2libGluZyA6IGZpcnN0U2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgbGV0IGJvdHRvbUVsID0gKHV0aWwuaXNMaXN0Q2VsbChsYXN0U2VsKSB8fCB1dGlsLmlzQ29tcG9uZW50KGxhc3RTZWwpKSAmJiAhbGFzdFNlbC5uZXh0RWxlbWVudFNpYmxpbmcgPyBsYXN0U2VsLnBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nIDogbGFzdFNlbC5uZXh0RWxlbWVudFNpYmxpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0IGlzQ29sbGFwc2VkID0gcmFuZ2UuY29sbGFwc2VkO1xyXG4gICAgICAgIGNvbnN0IG9yaWdpblJhbmdlID0ge1xyXG4gICAgICAgICAgICBzYzogcmFuZ2Uuc3RhcnRDb250YWluZXIsXHJcbiAgICAgICAgICAgIHNvOiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShyYW5nZS5zdGFydENvbnRhaW5lcikgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDAgJiYgcmFuZ2UuZW5kT2Zmc2V0ID09PSAxKSA/IHJhbmdlLmVuZE9mZnNldCA6IHJhbmdlLnN0YXJ0T2Zmc2V0LFxyXG4gICAgICAgICAgICBlYzogcmFuZ2UuZW5kQ29udGFpbmVyLFxyXG4gICAgICAgICAgICBlbzogcmFuZ2UuZW5kT2Zmc2V0XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgYWZ0ZXJSYW5nZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGlzUmVtb3ZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNMaXN0KHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KSAmJiBjdXJyZW50ICE9PSBzZWxlY3RlZEZvcm1hdHNbaV07XHJcbiAgICAgICAgICAgIH0uYmluZCh1dGlsKSkpKSB7XHJcbiAgICAgICAgICAgICAgICBpc1JlbW92ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc1JlbW92ZSAmJiAoIXRvcEVsIHx8IChmaXJzdFNlbC50YWdOYW1lICE9PSB0b3BFbC50YWdOYW1lIHx8IGNvbW1hbmQgIT09IHRvcEVsLnRhZ05hbWUudG9VcHBlckNhc2UoKSkpICYmICghYm90dG9tRWwgfHwgKGxhc3RTZWwudGFnTmFtZSAhPT0gYm90dG9tRWwudGFnTmFtZSB8fCBjb21tYW5kICE9PSBib3R0b21FbC50YWdOYW1lLnRvVXBwZXJDYXNlKCkpKSkge1xyXG4gICAgICAgICAgICBpZiAoZGV0YWNoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgLSAxOyBqID49IDA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzW2pdLmNvbnRhaW5zKHNlbGVjdGVkRm9ybWF0c1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRm9ybWF0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLS07IGxlbi0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGb3JtYXQgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChmaXJzdFNlbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbCA9IGN1cnJlbnRGb3JtYXQgJiYgY3VycmVudEZvcm1hdC50YWdOYW1lID09PSBjb21tYW5kO1xyXG4gICAgICAgICAgICBsZXQgcmFuZ2VBcnIsIHRlbXBMaXN0O1xyXG4gICAgICAgICAgICBjb25zdCBwYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0NvbXBvbmVudChjdXJyZW50KTtcclxuICAgICAgICAgICAgfS5iaW5kKHV0aWwpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKCFjYW5jZWwpIHRlbXBMaXN0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGNvbW1hbmQpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGgsIHIsIG87IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbyA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgcGFzc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8gfHwgIXV0aWwuaXNMaXN0KG8pKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByID0gbztcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUFyciA9IHtyOiByLCBmOiBbdXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgJ0xJJyldfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgIT09IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFjaCAmJiB1dGlsLmlzTGlzdENlbGwoby5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmxpc3QuX2RldGFjaE5lc3RlZC5jYWxsKHRoaXMsIHJhbmdlQXJyLmYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJSYW5nZSA9IHRoaXMuZGV0YWNoUmFuZ2VGb3JtYXRFbGVtZW50KHJhbmdlQXJyLmZbMF0ucGFyZW50Tm9kZSwgcmFuZ2VBcnIuZiwgdGVtcExpc3QsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHNlbGVjdGVkRm9ybWF0c1tpXS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbCkgdGVtcExpc3QgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoY29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VBcnIgPSB7cjogciwgZjogW3V0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3RlZEZvcm1hdHNbaV0sICdMSScpXX07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VBcnIuZi5wdXNoKHV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3RlZEZvcm1hdHNbaV0sICdMSScpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSBsZW4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFjaCAmJiB1dGlsLmlzTGlzdENlbGwoby5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5fZGV0YWNoTmVzdGVkLmNhbGwodGhpcywgcmFuZ2VBcnIuZik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJSYW5nZSA9IHRoaXMuZGV0YWNoUmFuZ2VGb3JtYXRFbGVtZW50KHJhbmdlQXJyLmZbMF0ucGFyZW50Tm9kZSwgcmFuZ2VBcnIuZiwgdGVtcExpc3QsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0b3BFbFBhcmVudCA9IHRvcEVsID8gdG9wRWwucGFyZW50Tm9kZSA6IHRvcEVsO1xyXG4gICAgICAgICAgICBjb25zdCBib3R0b21FbFBhcmVudCA9IGJvdHRvbUVsID8gYm90dG9tRWwucGFyZW50Tm9kZSA6IGJvdHRvbUVsO1xyXG4gICAgICAgICAgICB0b3BFbCA9IHRvcEVsUGFyZW50ICYmICF1dGlsLmlzV3lzaXd5Z0Rpdih0b3BFbFBhcmVudCkgJiYgdG9wRWxQYXJlbnQubm9kZU5hbWUgPT09IGNvbW1hbmQgPyB0b3BFbFBhcmVudCA6IHRvcEVsO1xyXG4gICAgICAgICAgICBib3R0b21FbCA9IGJvdHRvbUVsUGFyZW50ICYmICF1dGlsLmlzV3lzaXd5Z0Rpdihib3R0b21FbFBhcmVudCkgJiYgYm90dG9tRWxQYXJlbnQubm9kZU5hbWUgPT09IGNvbW1hbmQgPyBib3R0b21FbFBhcmVudCA6IGJvdHRvbUVsO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VUb3AgPSB0b3BFbCAmJiB0b3BFbC50YWdOYW1lID09PSBjb21tYW5kO1xyXG4gICAgICAgICAgICBjb25zdCBtZXJnZUJvdHRvbSA9IGJvdHRvbUVsICYmIGJvdHRvbUVsLnRhZ05hbWUgPT09IGNvbW1hbmQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgbGlzdCA9IG1lcmdlVG9wID8gdG9wRWwgOiB1dGlsLmNyZWF0ZUVsZW1lbnQoY29tbWFuZCk7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdExpc3QgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgbGFzdExpc3QgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgdG9wTnVtYmVyID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IGJvdHRvbU51bWJlciA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0NvbXBvbmVudChjdXJyZW50KSAmJiAhdGhpcy5pc0xpc3QoY3VycmVudCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh1dGlsKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoLCBuZXdDZWxsLCBmVGFnLCBpc0NlbGwsIG5leHQsIG9yaWdpblBhcmVudCwgbmV4dFBhcmVudCwgcGFyZW50VGFnLCBzaWJsaW5nVGFnLCByYW5nZVRhZzsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmVGFnID0gc2VsZWN0ZWRGb3JtYXRzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZUYWcuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgJiYgIXV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShmVGFnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShmVGFnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQgPSBzZWxlY3RlZEZvcm1hdHNbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luUGFyZW50ID0gZlRhZy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgbmV4dFBhcmVudCA9IG5leHQgPyBuZXh0LnBhcmVudE5vZGUgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgaXNDZWxsID0gdXRpbC5pc0xpc3RDZWxsKGZUYWcpO1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VUYWcgPSB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9yaWdpblBhcmVudCkgPyBvcmlnaW5QYXJlbnQgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50VGFnID0gaXNDZWxsICYmICF1dGlsLmlzV3lzaXd5Z0RpdihvcmlnaW5QYXJlbnQpID8gb3JpZ2luUGFyZW50LnBhcmVudE5vZGUgOiBvcmlnaW5QYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nVGFnID0gaXNDZWxsICYmICF1dGlsLmlzV3lzaXd5Z0RpdihvcmlnaW5QYXJlbnQpID8gKCFuZXh0IHx8IHV0aWwuaXNMaXN0Q2VsbChwYXJlbnRUYWcpKSA/IG9yaWdpblBhcmVudCA6IG9yaWdpblBhcmVudC5uZXh0U2libGluZyA6IGZUYWcubmV4dFNpYmxpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgbmV3Q2VsbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnTEknKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuY29weUZvcm1hdEF0dHJpYnV0ZXMobmV3Q2VsbCwgZlRhZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09ICAwICYmIG9yaWdpblJhbmdlLnNjID09PSBmVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luUmFuZ2Uuc2MgPSBuZXdDZWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGxlbiAtIDEgJiYgb3JpZ2luUmFuZ2UuZWMgPT09IGZUYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5SYW5nZS5lYyA9IG5ld0NlbGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNDb21wb25lbnQoZlRhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0hSID0gL15IUiQvaS50ZXN0KGZUYWcubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNIUikgbmV3Q2VsbC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbC5pbm5lckhUTUwgKz0gZlRhZy5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSFIpIG5ld0NlbGwuaW5uZXJIVE1MICs9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZkNoaWxkcmVuID0gZlRhZy5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChmQ2hpbGRyZW5bMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbC5hcHBlbmRDaGlsZChmQ2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQobmV3Q2VsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0KSBsYXN0TGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5leHQgfHwgcGFyZW50VGFnICE9PSBuZXh0UGFyZW50IHx8IHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoc2libGluZ1RhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0TGlzdCkgZmlyc3RMaXN0ID0gbGlzdDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCFtZXJnZVRvcCB8fCAhbmV4dCB8fCBwYXJlbnRUYWcgIT09IG5leHRQYXJlbnQpICYmICEobmV4dCAmJiB1dGlsLmlzTGlzdChuZXh0UGFyZW50KSAmJiBuZXh0UGFyZW50ID09PSBvcmlnaW5QYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaXN0LnBhcmVudE5vZGUgIT09IHBhcmVudFRhZykgcGFyZW50VGFnLmluc2VydEJlZm9yZShsaXN0LCBzaWJsaW5nVGFnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGZUYWcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lcmdlVG9wICYmIHRvcE51bWJlciA9PT0gbnVsbCkgdG9wTnVtYmVyID0gbGlzdC5jaGlsZHJlbi5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgKHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KG5leHRQYXJlbnQsIHBhc3NDb21wb25lbnQpICE9PSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChvcmlnaW5QYXJlbnQsIHBhc3NDb21wb25lbnQpIHx8ICh1dGlsLmlzTGlzdChuZXh0UGFyZW50KSAmJiB1dGlsLmlzTGlzdChvcmlnaW5QYXJlbnQpICYmIHV0aWwuZ2V0RWxlbWVudERlcHRoKG5leHRQYXJlbnQpICE9PSB1dGlsLmdldEVsZW1lbnREZXB0aChvcmlnaW5QYXJlbnQpKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyYW5nZVRhZyAmJiByYW5nZVRhZy5jaGlsZHJlbi5sZW5ndGggPT09IDApIHV0aWwucmVtb3ZlSXRlbShyYW5nZVRhZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0b3BOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGZpcnN0TGlzdCA9IGZpcnN0TGlzdC5jaGlsZHJlblt0b3BOdW1iZXJdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobWVyZ2VCb3R0b20pIHtcclxuICAgICAgICAgICAgICAgIGJvdHRvbU51bWJlciA9IGxpc3QuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGxpc3QuaW5uZXJIVE1MICs9IGJvdHRvbUVsLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIGxhc3RMaXN0ID0gbGlzdC5jaGlsZHJlbltib3R0b21OdW1iZXJdO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGJvdHRvbUVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmVmZmVjdE5vZGUgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiAhaXNDb2xsYXBzZWQgPyBvcmlnaW5SYW5nZSA6IGFmdGVyUmFuZ2U7XHJcbiAgICB9LFxyXG5cclxuICAgIF9kZXRhY2hOZXN0ZWQ6IGZ1bmN0aW9uIChjZWxscykge1xyXG4gICAgICAgIGNvbnN0IGZpcnN0ID0gY2VsbHNbMF07XHJcbiAgICAgICAgY29uc3QgbGFzdCA9IGNlbGxzW2NlbGxzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBsYXN0Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICBjb25zdCBvcmlnaW5MaXN0ID0gZmlyc3QucGFyZW50Tm9kZTtcclxuICAgICAgICBjb25zdCBzaWJsaW5nID0gb3JpZ2luTGlzdC5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gb3JpZ2luTGlzdC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2VsbHMubGVuZ3RoOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNlbGxzW2NdLCBzaWJsaW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuZXh0ICYmIG9yaWdpbkxpc3QuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMaXN0ID0gb3JpZ2luTGlzdC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG9yaWdpbkxpc3QuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnV0aWwuZ2V0UG9zaXRpb25JbmRleChuZXh0KTtcclxuICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuW2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgbmV3TGlzdC5hcHBlbmRDaGlsZChjaGlsZHJlbltpbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxhc3QuYXBwZW5kQ2hpbGQobmV3TGlzdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3JpZ2luTGlzdC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHRoaXMudXRpbC5yZW1vdmVJdGVtKG9yaWdpbkxpc3QpO1xyXG4gICAgICAgIHRoaXMudXRpbC5tZXJnZVNhbWVUYWdzKHBhcmVudE5vZGUpO1xyXG5cclxuICAgICAgICBjb25zdCBlZGdlID0gdGhpcy51dGlsLmdldEVkZ2VDaGlsZE5vZGVzKGZpcnN0LCBsYXN0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2M6IGZpcnN0LnBhcmVudE5vZGUsXHJcbiAgICAgICAgICAgIHNjOiBlZGdlLnNjLFxyXG4gICAgICAgICAgICBlYzogZWRnZS5lY1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIGVkaXRJbnNpZGVMaXN0OiBmdW5jdGlvbiAocmVtb3ZlLCBzZWxlY3RlZENlbGxzKSB7XHJcbiAgICAgICAgc2VsZWN0ZWRDZWxscyA9ICFzZWxlY3RlZENlbGxzID8gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKCkuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gdGhpcy5pc0xpc3RDZWxsKGVsKTsgfS5iaW5kKHRoaXMudXRpbCkpIDogc2VsZWN0ZWRDZWxscztcclxuICAgICAgICBjb25zdCBjZWxsc0xlbiA9IHNlbGVjdGVkQ2VsbHMubGVuZ3RoO1xyXG4gICAgICAgIGlmIChjZWxsc0xlbiA9PT0gMCB8fCAoIXJlbW92ZSAmJiAoIXRoaXMudXRpbC5pc0xpc3RDZWxsKHNlbGVjdGVkQ2VsbHNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZykgJiYgIXRoaXMudXRpbC5pc0xpc3RDZWxsKHNlbGVjdGVkQ2VsbHNbY2VsbHNMZW4gLSAxXS5uZXh0RWxlbWVudFNpYmxpbmcpKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNjOiBzZWxlY3RlZENlbGxzWzBdLFxyXG4gICAgICAgICAgICAgICAgc286IDAsXHJcbiAgICAgICAgICAgICAgICBlYzogc2VsZWN0ZWRDZWxsc1tjZWxsc0xlbiAtIDFdLFxyXG4gICAgICAgICAgICAgICAgZW86IDFcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBvcmlnaW5MaXN0ID0gc2VsZWN0ZWRDZWxsc1swXS5wYXJlbnROb2RlO1xyXG4gICAgICAgIGxldCBsYXN0Q2VsbCA9IHNlbGVjdGVkQ2VsbHNbY2VsbHNMZW4gLSAxXTtcclxuICAgICAgICBsZXQgcmFuZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAocmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5MaXN0ICE9PSBsYXN0Q2VsbC5wYXJlbnROb2RlICYmIHRoaXMudXRpbC5pc0xpc3QobGFzdENlbGwucGFyZW50Tm9kZS5wYXJlbnROb2RlKSAmJiBsYXN0Q2VsbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RDZWxsID0gbGFzdENlbGwubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGxhc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDZWxscy5wdXNoKGxhc3RDZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q2VsbCA9IGxhc3RDZWxsLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByYW5nZSA9IHRoaXMucGx1Z2lucy5saXN0LmVkaXRMaXN0LmNhbGwodGhpcywgb3JpZ2luTGlzdC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpLCBzZWxlY3RlZENlbGxzLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgaW5uZXJMaXN0ID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQob3JpZ2luTGlzdC5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBwcmV2ID0gc2VsZWN0ZWRDZWxsc1swXS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICBsZXQgbmV4dCA9IGxhc3RDZWxsLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgY29uc3Qgbm9kZVBhdGggPSB7IHM6IG51bGwsIGU6IG51bGwsIHNsOiBvcmlnaW5MaXN0LCBlbDogb3JpZ2luTGlzdCB9O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNlbGxzTGVuLCBjOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGMgPSBzZWxlY3RlZENlbGxzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMucGFyZW50Tm9kZSAhPT0gb3JpZ2luTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5saXN0Ll9pbnNpZWRMaXN0LmNhbGwodGhpcywgb3JpZ2luTGlzdCwgaW5uZXJMaXN0LCBwcmV2LCBuZXh0LCBub2RlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luTGlzdCA9IGMucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBpbm5lckxpc3QgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudChvcmlnaW5MaXN0Lm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcHJldiA9IGMucHJldmlvdXNFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIG5leHQgPSBjLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIGlubmVyTGlzdC5hcHBlbmRDaGlsZChjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmxpc3QuX2luc2llZExpc3QuY2FsbCh0aGlzLCBvcmlnaW5MaXN0LCBpbm5lckxpc3QsIHByZXYsIG5leHQsIG5vZGVQYXRoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNjID0gdGhpcy51dGlsLmdldE5vZGVGcm9tUGF0aChub2RlUGF0aC5zLCBub2RlUGF0aC5zbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVjID0gdGhpcy51dGlsLmdldE5vZGVGcm9tUGF0aChub2RlUGF0aC5lLCBub2RlUGF0aC5lbCk7XHJcbiAgICAgICAgICAgIHJhbmdlID0ge1xyXG4gICAgICAgICAgICAgICAgc2M6IHNjLFxyXG4gICAgICAgICAgICAgICAgc286IDAsXHJcbiAgICAgICAgICAgICAgICBlYzogZWMsXHJcbiAgICAgICAgICAgICAgICBlbzogZWMudGV4dENvbnRlbnQubGVuZ3RoXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmFuZ2U7XHJcbiAgICB9LFxyXG5cclxuICAgIF9pbnNpZWRMaXN0OiBmdW5jdGlvbiAob3JpZ2luTGlzdCwgaW5uZXJMaXN0LCBwcmV2LCBuZXh0LCBub2RlUGF0aCkge1xyXG4gICAgICAgIGxldCBpbnNlcnRQcmV2ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChwcmV2ICYmIGlubmVyTGlzdC50YWdOYW1lID09PSBwcmV2LnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBpbm5lckxpc3QuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgcHJldi5hcHBlbmRDaGlsZChjaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlubmVyTGlzdCA9IHByZXY7XHJcbiAgICAgICAgICAgIGluc2VydFByZXYgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5leHQgJiYgaW5uZXJMaXN0LnRhZ05hbWUgPT09IG5leHQudGFnTmFtZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG5leHQuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgaW5uZXJMaXN0LmFwcGVuZENoaWxkKGNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IG5leHQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICBuZXh0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobmV4dCk7XHJcbiAgICAgICAgICAgIG5leHQgPSB0ZW1wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFpbnNlcnRQcmV2KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuaXNMaXN0Q2VsbChwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luTGlzdCA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3JpZ2luTGlzdC5pbnNlcnRCZWZvcmUoaW5uZXJMaXN0LCBuZXh0KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghbm9kZVBhdGgucykge1xyXG4gICAgICAgICAgICAgICAgbm9kZVBhdGgucyA9IHRoaXMudXRpbC5nZXROb2RlUGF0aChpbm5lckxpc3QuZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RDaGlsZCwgb3JpZ2luTGlzdCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBub2RlUGF0aC5zbCA9IG9yaWdpbkxpc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNsUGF0aCA9IG9yaWdpbkxpc3QuY29udGFpbnMobm9kZVBhdGguc2wpID8gdGhpcy51dGlsLmdldE5vZGVQYXRoKG5vZGVQYXRoLnNsLCBvcmlnaW5MaXN0KSA6IG51bGw7XHJcbiAgICAgICAgICAgIG5vZGVQYXRoLmUgPSB0aGlzLnV0aWwuZ2V0Tm9kZVBhdGgoaW5uZXJMaXN0Lmxhc3RFbGVtZW50Q2hpbGQuZmlyc3RDaGlsZCwgb3JpZ2luTGlzdCwgbnVsbCk7XHJcbiAgICAgICAgICAgIG5vZGVQYXRoLmVsID0gb3JpZ2luTGlzdDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5tZXJnZVNhbWVUYWdzKG9yaWdpbkxpc3QsIFtub2RlUGF0aC5zLCBub2RlUGF0aC5lLCBzbFBhdGhdLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5tZXJnZU5lc3RlZFRhZ3Mob3JpZ2luTGlzdCk7XHJcbiAgICAgICAgICAgIGlmIChzbFBhdGgpIG5vZGVQYXRoLnNsID0gdGhpcy51dGlsLmdldE5vZGVGcm9tUGF0aChzbFBhdGgsIG9yaWdpbkxpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGlubmVyTGlzdDtcclxuICAgIH0sXHJcblxyXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgbGV0IGNvbW1hbmQgPSAnJztcclxuXHJcbiAgICAgICAgd2hpbGUgKCFjb21tYW5kICYmICEvXlVMJC9pLnRlc3QodGFyZ2V0LnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLnBsdWdpbnMubGlzdC5lZGl0TGlzdC5jYWxsKHRoaXMsIGNvbW1hbmQsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICBpZiAocmFuZ2UpIHRoaXMuc2V0UmFuZ2UocmFuZ2Uuc2MsIHJhbmdlLnNvLCByYW5nZS5lYywgcmFuZ2UuZW8pO1xyXG5cclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuXHJcbiAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICd0YWJsZScsXHJcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBsZXQgY29udGV4dFRhYmxlID0gY29udGV4dC50YWJsZSA9IHtcclxuICAgICAgICAgICAgX2VsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIF90ZEVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIF90ckVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIF90ckVsZW1lbnRzOiBudWxsLFxyXG4gICAgICAgICAgICBfdGFibGVYWTogW10sXHJcbiAgICAgICAgICAgIF9tYXhXaWR0aDogdHJ1ZSxcclxuICAgICAgICAgICAgX2ZpeGVkQ29sdW1uOiBmYWxzZSxcclxuICAgICAgICAgICAgX3J0bDogY29yZS5vcHRpb25zLnJ0bCxcclxuICAgICAgICAgICAgY2VsbENvbnRyb2xsZXJUb3A6IGNvcmUub3B0aW9ucy50YWJsZUNlbGxDb250cm9sbGVyUG9zaXRpb24gPT09ICd0b3AnLFxyXG4gICAgICAgICAgICByZXNpemVUZXh0OiBudWxsLFxyXG4gICAgICAgICAgICBoZWFkZXJCdXR0b246IG51bGwsXHJcbiAgICAgICAgICAgIG1lcmdlQnV0dG9uOiBudWxsLFxyXG4gICAgICAgICAgICBzcGxpdEJ1dHRvbjogbnVsbCxcclxuICAgICAgICAgICAgc3BsaXRNZW51OiBudWxsLFxyXG4gICAgICAgICAgICBtYXhUZXh0OiBjb3JlLmxhbmcuY29udHJvbGxlci5tYXhTaXplLFxyXG4gICAgICAgICAgICBtaW5UZXh0OiBjb3JlLmxhbmcuY29udHJvbGxlci5taW5TaXplLFxyXG4gICAgICAgICAgICBfcGh5c2ljYWxfY2VsbENudDogMCxcclxuICAgICAgICAgICAgX2xvZ2ljYWxfY2VsbENudDogMCxcclxuICAgICAgICAgICAgX3Jvd0NudDogMCxcclxuICAgICAgICAgICAgX3Jvd0luZGV4OiAwLFxyXG4gICAgICAgICAgICBfcGh5c2ljYWxfY2VsbEluZGV4OiAwLFxyXG4gICAgICAgICAgICBfbG9naWNhbF9jZWxsSW5kZXg6IDAsXHJcbiAgICAgICAgICAgIF9jdXJyZW50X2NvbFNwYW46IDAsXHJcbiAgICAgICAgICAgIF9jdXJyZW50X3Jvd1NwYW46IDAsXHJcbiAgICAgICAgICAgIGljb25zOiB7XHJcbiAgICAgICAgICAgICAgICBleHBhbnNpb246IGNvcmUuaWNvbnMuZXhwYW5zaW9uLFxyXG4gICAgICAgICAgICAgICAgcmVkdWN0aW9uOiBjb3JlLmljb25zLnJlZHVjdGlvblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcbiAgICAgICAgbGV0IHRhYmxlUGlja2VyID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yKCcuc2UtY29udHJvbGxlci10YWJsZS1waWNrZXInKTtcclxuXHJcbiAgICAgICAgY29udGV4dFRhYmxlLnRhYmxlSGlnaGxpZ2h0ID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yKCcuc2UtdGFibGUtc2l6ZS1oaWdobGlnaHRlZCcpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS50YWJsZVVuSGlnaGxpZ2h0ID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yKCcuc2UtdGFibGUtc2l6ZS11bmhpZ2hsaWdodGVkJyk7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLnRhYmxlRGlzcGxheSA9IGxpc3REaXYucXVlcnlTZWxlY3RvcignLnNlLXRhYmxlLXNpemUtZGlzcGxheScpO1xyXG4gICAgICAgIGlmIChjb3JlLm9wdGlvbnMucnRsKSBjb250ZXh0VGFibGUudGFibGVIaWdobGlnaHQuc3R5bGUubGVmdCA9ICgxMCAqIDE4IC0gMTMpICsgJ3B4JztcclxuXHJcbiAgICAgICAgLyoqIHNldCB0YWJsZSBjb250cm9sbGVyICovXHJcbiAgICAgICAgbGV0IHRhYmxlQ29udHJvbGxlciA9IHRoaXMuc2V0Q29udHJvbGxlcl90YWJsZShjb3JlKTtcclxuICAgICAgICBjb250ZXh0VGFibGUudGFibGVDb250cm9sbGVyID0gdGFibGVDb250cm9sbGVyO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5yZXNpemVCdXR0b24gPSB0YWJsZUNvbnRyb2xsZXIucXVlcnlTZWxlY3RvcignLl9zZV90YWJsZV9yZXNpemUnKTtcclxuICAgICAgICBjb250ZXh0VGFibGUucmVzaXplVGV4dCA9IHRhYmxlQ29udHJvbGxlci5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYmxlX3Jlc2l6ZSA+IHNwYW4gPiBzcGFuJyk7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLmNvbHVtbkZpeGVkQnV0dG9uID0gdGFibGVDb250cm9sbGVyLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfdGFibGVfZml4ZWRfY29sdW1uJyk7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLmhlYWRlckJ1dHRvbiA9IHRhYmxlQ29udHJvbGxlci5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYmxlX2hlYWRlcicpO1xyXG5cclxuICAgICAgICAvKiogc2V0IHJlc2l6aW5nICovXHJcbiAgICAgICAgbGV0IHJlc2l6ZURpdiA9IHRoaXMuc2V0Q29udHJvbGxlcl90YWJsZUVkaXRvcihjb3JlLCBjb250ZXh0VGFibGUuY2VsbENvbnRyb2xsZXJUb3ApO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5yZXNpemVEaXYgPSByZXNpemVEaXY7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLnNwbGl0TWVudSA9IHJlc2l6ZURpdi5xdWVyeVNlbGVjdG9yKCcuc2UtYnRuLWdyb3VwLXN1YicpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5tZXJnZUJ1dHRvbiA9IHJlc2l6ZURpdi5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYmxlX21lcmdlX2J1dHRvbicpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5zcGxpdEJ1dHRvbiA9IHJlc2l6ZURpdi5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYmxlX3NwbGl0X2J1dHRvbicpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5pbnNlcnRSb3dBYm92ZUJ1dHRvbiA9IHJlc2l6ZURpdi5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYmxlX2luc2VydF9yb3dfYScpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5pbnNlcnRSb3dCZWxvd0J1dHRvbiA9IHJlc2l6ZURpdi5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYmxlX2luc2VydF9yb3dfYicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgdGFibGVQaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZV90YWJsZVBpY2tlci5iaW5kKGNvcmUsIGNvbnRleHRUYWJsZSkpO1xyXG4gICAgICAgIHRhYmxlUGlja2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5hcHBlbmRUYWJsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICByZXNpemVEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tfdGFibGVDb250cm9sbGVyLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIHRhYmxlQ29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja190YWJsZUNvbnRyb2xsZXIuYmluZChjb3JlKSk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgdGFyZ2V0IGJ1dHRvbiBtZW51ICovXHJcbiAgICAgICAgY29yZS5pbml0TWVudVRhcmdldCh0aGlzLm5hbWUsIHRhcmdldEVsZW1lbnQsIGxpc3REaXYpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIGNvbnRyb2xsZXIgKi9cclxuICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVsYXRpdmUuYXBwZW5kQ2hpbGQocmVzaXplRGl2KTtcclxuICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVsYXRpdmUuYXBwZW5kQ2hpbGQodGFibGVDb250cm9sbGVyKTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsLCB0YWJsZVBpY2tlciA9IG51bGwsIHJlc2l6ZURpdiA9IG51bGwsIHRhYmxlQ29udHJvbGxlciA9IG51bGwsIGNvbnRleHRUYWJsZSA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLXNlbGVjdG9yLXRhYmxlJztcclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS10YWJsZS1zaXplXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLXRhYmxlLXNpemUtcGlja2VyIHNlLWNvbnRyb2xsZXItdGFibGUtcGlja2VyXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLXRhYmxlLXNpemUtaGlnaGxpZ2h0ZWRcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtdGFibGUtc2l6ZS11bmhpZ2hsaWdodGVkXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS10YWJsZS1zaXplLWRpc3BsYXlcIj4xIHggMTwvZGl2Pic7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRDb250cm9sbGVyX3RhYmxlOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUmVzaXplID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICB0YWJsZVJlc2l6ZS5jbGFzc05hbWUgPSAnc2UtY29udHJvbGxlciBzZS1jb250cm9sbGVyLXRhYmxlJztcclxuICAgICAgICB0YWJsZVJlc2l6ZS5pbm5lckhUTUwgPSAnJyArXHJcbiAgICAgICAgICAgICc8ZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwicmVzaXplXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcCBfc2VfdGFibGVfcmVzaXplXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zLmV4cGFuc2lvbiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIubWF4U2l6ZSArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwibGF5b3V0XCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcCBfc2VfdGFibGVfZml4ZWRfY29sdW1uXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zLmZpeGVkX2NvbHVtbl93aWR0aCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuZml4ZWRDb2x1bW5XaWR0aCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiaGVhZGVyXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcCBfc2VfdGFibGVfaGVhZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zLnRhYmxlX2hlYWRlciArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIudGFibGVIZWFkZXIgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cInJlbW92ZVwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMuZGVsZXRlICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gdGFibGVSZXNpemU7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldENvbnRyb2xsZXJfdGFibGVFZGl0b3I6IGZ1bmN0aW9uIChjb3JlLCBjZWxsQ29udHJvbGxlclRvcCkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUmVzaXplID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICB0YWJsZVJlc2l6ZS5jbGFzc05hbWUgPSAnc2UtY29udHJvbGxlciBzZS1jb250cm9sbGVyLXRhYmxlLWNlbGwnO1xyXG4gICAgICAgIHRhYmxlUmVzaXplLmlubmVySFRNTCA9IChjZWxsQ29udHJvbGxlclRvcCA/ICcnIDogJzxkaXYgY2xhc3M9XCJzZS1hcnJvdyBzZS1hcnJvdy11cFwiPjwvZGl2PicpICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXBcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJpbnNlcnRcIiBkYXRhLXZhbHVlPVwicm93XCIgZGF0YS1vcHRpb249XCJ1cFwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3RhYmxlX2luc2VydF9yb3dfYVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGljb25zLmluc2VydF9yb3dfYWJvdmUgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuaW5zZXJ0Um93QWJvdmUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJpbnNlcnRcIiBkYXRhLXZhbHVlPVwicm93XCIgZGF0YS1vcHRpb249XCJkb3duXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcCBfc2VfdGFibGVfaW5zZXJ0X3Jvd19iXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnMuaW5zZXJ0X3Jvd19iZWxvdyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5pbnNlcnRSb3dCZWxvdyArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImRlbGV0ZVwiIGRhdGEtdmFsdWU9XCJyb3dcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnMuZGVsZXRlX3JvdyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5kZWxldGVSb3cgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJtZXJnZVwiIGNsYXNzPVwiX3NlX3RhYmxlX21lcmdlX2J1dHRvbiBzZS1idG4gc2UtdG9vbHRpcFwiIGRpc2FibGVkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGljb25zLm1lcmdlX2NlbGwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIubWVyZ2VDZWxscyArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYnRuLWdyb3VwXCIgc3R5bGU9XCJwYWRkaW5nLXRvcDogMDtcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJpbnNlcnRcIiBkYXRhLXZhbHVlPVwiY2VsbFwiIGRhdGEtb3B0aW9uPVwibGVmdFwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBpY29ucy5pbnNlcnRfY29sdW1uX2xlZnQgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuaW5zZXJ0Q29sdW1uQmVmb3JlICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiaW5zZXJ0XCIgZGF0YS12YWx1ZT1cImNlbGxcIiBkYXRhLW9wdGlvbj1cInJpZ2h0XCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGljb25zLmluc2VydF9jb2x1bW5fcmlnaHQgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuaW5zZXJ0Q29sdW1uQWZ0ZXIgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJkZWxldGVcIiBkYXRhLXZhbHVlPVwiY2VsbFwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBpY29ucy5kZWxldGVfY29sdW1uICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLmRlbGV0ZUNvbHVtbiArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cIm9uc3BsaXRcIiBjbGFzcz1cIl9zZV90YWJsZV9zcGxpdF9idXR0b24gc2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBpY29ucy5zcGxpdF9jZWxsICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnNwbGl0Q2VsbHMgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYnRuLWdyb3VwLXN1YiBzdW4tZWRpdG9yLWNvbW1vbiBzZS1saXN0LWxheWVyIHNlLXRhYmxlLXNwbGl0XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxpIGNsYXNzPVwic2UtYnRuLWxpc3RcIiBkYXRhLWNvbW1hbmQ9XCJzcGxpdFwiIGRhdGEtdmFsdWU9XCJ2ZXJ0aWNhbFwiIHN0eWxlPVwibGluZS1oZWlnaHQ6MzJweDtcIiB0aXRsZT1cIicgKyBsYW5nLmNvbnRyb2xsZXIuVmVydGljYWxTcGxpdCArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuY29udHJvbGxlci5WZXJ0aWNhbFNwbGl0ICsgJ1wiPicgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5nLmNvbnRyb2xsZXIuVmVydGljYWxTcGxpdCArICc8L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsaSBjbGFzcz1cInNlLWJ0bi1saXN0XCIgZGF0YS1jb21tYW5kPVwic3BsaXRcIiBkYXRhLXZhbHVlPVwiaG9yaXpvbnRhbFwiIHN0eWxlPVwibGluZS1oZWlnaHQ6MzJweDtcIiB0aXRsZT1cIicgKyBsYW5nLmNvbnRyb2xsZXIuSG9yaXpvbnRhbFNwbGl0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5jb250cm9sbGVyLkhvcml6b250YWxTcGxpdCArICdcIj4nICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZy5jb250cm9sbGVyLkhvcml6b250YWxTcGxpdCArICc8L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC91bD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gdGFibGVSZXNpemU7XHJcbiAgICB9LFxyXG5cclxuICAgIGFwcGVuZFRhYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3Qgb1RhYmxlID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ1RBQkxFJyk7XHJcbiAgICAgICAgY29uc3QgY3JlYXRlQ2VsbHMgPSB0aGlzLnBsdWdpbnMudGFibGUuY3JlYXRlQ2VsbHM7XHJcblxyXG4gICAgICAgIGNvbnN0IHggPSB0aGlzLmNvbnRleHQudGFibGUuX3RhYmxlWFlbMF07XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmNvbnRleHQudGFibGUuX3RhYmxlWFlbMV07XHJcbiAgICAgICAgbGV0IHRhYmxlSFRNTCA9ICc8dGJvZHk+JztcclxuICAgICAgICB3aGlsZSAoeSA+IDApIHtcclxuICAgICAgICAgICAgdGFibGVIVE1MICs9ICc8dHI+JyArIGNyZWF0ZUNlbGxzLmNhbGwodGhpcywgJ3RkJywgeCkgKyAnPC90cj4nO1xyXG4gICAgICAgICAgICAtLXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhYmxlSFRNTCArPSAnPC90Ym9keT4nO1xyXG4gICAgICAgIG9UYWJsZS5pbm5lckhUTUwgPSB0YWJsZUhUTUw7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLmluc2VydENvbXBvbmVudChvVGFibGUsIGZhbHNlLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3RUZCA9IG9UYWJsZS5xdWVyeVNlbGVjdG9yKCd0ZCBkaXYnKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShmaXJzdFRkLCAwLCBmaXJzdFRkLCAwKTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnRhYmxlLnJlc2V0X3RhYmxlX3BpY2tlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlQ2VsbHM6IGZ1bmN0aW9uIChub2RlTmFtZSwgY250LCByZXR1cm5FbGVtZW50KSB7XHJcbiAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICBpZiAoIXJldHVybkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgbGV0IGNlbGxzSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICB3aGlsZSAoY250ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY2VsbHNIVE1MICs9ICc8JyArbm9kZU5hbWUgKyAnPjxkaXY+PGJyPjwvZGl2PjwvJyArIG5vZGVOYW1lICsgJz4nO1xyXG4gICAgICAgICAgICAgICAgY250LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNlbGxzSFRNTDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQobm9kZU5hbWUpO1xyXG4gICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9ICc8ZGl2Pjxicj48L2Rpdj4nO1xyXG4gICAgICAgICAgICByZXR1cm4gY2VsbDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG9uTW91c2VNb3ZlX3RhYmxlUGlja2VyOiBmdW5jdGlvbiAoY29udGV4dFRhYmxlLCBlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgbGV0IHggPSB0aGlzLl93Lk1hdGguY2VpbChlLm9mZnNldFggLyAxOCk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLl93Lk1hdGguY2VpbChlLm9mZnNldFkgLyAxOCk7XHJcbiAgICAgICAgeCA9IHggPCAxID8gMSA6IHg7XHJcbiAgICAgICAgeSA9IHkgPCAxID8gMSA6IHk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGNvbnRleHRUYWJsZS5fcnRsKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS50YWJsZUhpZ2hsaWdodC5zdHlsZS5sZWZ0ID0gKHggKiAxOCAtIDEzKSArICdweCc7XHJcbiAgICAgICAgICAgIHggPSAxMSAtIHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnRleHRUYWJsZS50YWJsZUhpZ2hsaWdodC5zdHlsZS53aWR0aCA9IHggKyAnZW0nO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS50YWJsZUhpZ2hsaWdodC5zdHlsZS5oZWlnaHQgPSB5ICsgJ2VtJztcclxuXHJcbiAgICAgICAgLy8gbGV0IHhfdSA9IHggPCA1ID8gNSA6ICh4ID4gOSA/IDEwIDogeCArIDEpO1xyXG4gICAgICAgIC8vIGxldCB5X3UgPSB5IDwgNSA/IDUgOiAoeSA+IDkgPyAxMCA6IHkgKyAxKTtcclxuICAgICAgICAvLyBjb250ZXh0VGFibGUudGFibGVVbkhpZ2hsaWdodC5zdHlsZS53aWR0aCA9IHhfdSArICdlbSc7XHJcbiAgICAgICAgLy8gY29udGV4dFRhYmxlLnRhYmxlVW5IaWdobGlnaHQuc3R5bGUuaGVpZ2h0ID0geV91ICsgJ2VtJztcclxuXHJcbiAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dChjb250ZXh0VGFibGUudGFibGVEaXNwbGF5LCB4ICsgJyB4ICcgKyB5KTtcclxuICAgICAgICBjb250ZXh0VGFibGUuX3RhYmxlWFkgPSBbeCwgeV07XHJcbiAgICB9LFxyXG5cclxuICAgIHJlc2V0X3RhYmxlX3BpY2tlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0LnRhYmxlLnRhYmxlSGlnaGxpZ2h0KSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHRoaXMuY29udGV4dC50YWJsZS50YWJsZUhpZ2hsaWdodC5zdHlsZTtcclxuICAgICAgICBjb25zdCB1bkhpZ2hsaWdodCA9IHRoaXMuY29udGV4dC50YWJsZS50YWJsZVVuSGlnaGxpZ2h0LnN0eWxlO1xyXG5cclxuICAgICAgICBoaWdobGlnaHQud2lkdGggPSAnMWVtJztcclxuICAgICAgICBoaWdobGlnaHQuaGVpZ2h0ID0gJzFlbSc7XHJcbiAgICAgICAgdW5IaWdobGlnaHQud2lkdGggPSAnMTBlbSc7XHJcbiAgICAgICAgdW5IaWdobGlnaHQuaGVpZ2h0ID0gJzEwZW0nO1xyXG5cclxuICAgICAgICB0aGlzLnV0aWwuY2hhbmdlVHh0KHRoaXMuY29udGV4dC50YWJsZS50YWJsZURpc3BsYXksICcxIHggMScpO1xyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUGx1Z2luID0gdGhpcy5wbHVnaW5zLnRhYmxlO1xyXG5cclxuICAgICAgICB0YWJsZVBsdWdpbi5fcmVtb3ZlRXZlbnRzLmNhbGwodGhpcyk7XHJcblxyXG4gICAgICAgIGlmICh0YWJsZVBsdWdpbi5fc2VsZWN0ZWRUYWJsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZENlbGxzID0gdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUucXVlcnlTZWxlY3RvckFsbCgnLnNlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkQ2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhzZWxlY3RlZENlbGxzW2ldLCAnc2UtdGFibGUtc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0YWJsZVBsdWdpbi5fdG9nZ2xlRWRpdG9yLmNhbGwodGhpcywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fZWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl90ZEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fdHJFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX3RyRWxlbWVudHMgPSBudWxsO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fdGFibGVYWSA9IFtdO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fbWF4V2lkdGggPSB0cnVlO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fZml4ZWRDb2x1bW4gPSBmYWxzZTtcclxuICAgICAgICBjb250ZXh0VGFibGUuX3BoeXNpY2FsX2NlbGxDbnQgPSAwO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fbG9naWNhbF9jZWxsQ250ID0gMDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX3Jvd0NudCA9IDA7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl9yb3dJbmRleCA9IDA7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl9waHlzaWNhbF9jZWxsSW5kZXggPSAwO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fbG9naWNhbF9jZWxsSW5kZXggPSAwO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fY3VycmVudF9jb2xTcGFuID0gMDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX2N1cnJlbnRfcm93U3BhbiA9IDA7XHJcblxyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9zaGlmdCA9IGZhbHNlO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9zZWxlY3RlZENlbGxzID0gbnVsbDtcclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRUYWJsZSA9IG51bGw7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3JlZiA9IG51bGw7XHJcblxyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9maXhlZENlbGwgPSBudWxsO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9zZWxlY3RlZENlbGwgPSBudWxsO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9maXhlZENlbGxOYW1lID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIHRhYmxlIGVkaXQgY29udHJvbGxlciAqL1xyXG4gICAgY2FsbF9jb250cm9sbGVyX3RhYmxlRWRpdDogZnVuY3Rpb24gKHRkRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUGx1Z2luID0gdGhpcy5wbHVnaW5zLnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkICYmICF0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHRkRWxlbWVudCwgJ3NlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGFibGVFbGVtZW50ID0gY29udGV4dFRhYmxlLl9lbGVtZW50IHx8IHRoaXMucGx1Z2lucy50YWJsZS5fc2VsZWN0ZWRUYWJsZSB8fCB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudCh0ZEVsZW1lbnQsICdUQUJMRScpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fbWF4V2lkdGggPSB0aGlzLnV0aWwuaGFzQ2xhc3ModGFibGVFbGVtZW50LCAnc2UtdGFibGUtc2l6ZS0xMDAnKSB8fCB0YWJsZUVsZW1lbnQuc3R5bGUud2lkdGggPT09ICcxMDAlJyB8fCAoIXRhYmxlRWxlbWVudC5zdHlsZS53aWR0aCAmJiAhdGhpcy51dGlsLmhhc0NsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLXNpemUtYXV0bycpKTtcclxuICAgICAgICBjb250ZXh0VGFibGUuX2ZpeGVkQ29sdW1uID0gdGhpcy51dGlsLmhhc0NsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLWxheW91dC1maXhlZCcpIHx8IHRhYmxlRWxlbWVudC5zdHlsZS50YWJsZUxheW91dCA9PT0gJ2ZpeGVkJztcclxuICAgICAgICB0YWJsZVBsdWdpbi5zZXRUYWJsZVN0eWxlLmNhbGwodGhpcywgY29udGV4dFRhYmxlLl9tYXhXaWR0aCA/ICd3aWR0aHxjb2x1bW4nIDogJ3dpZHRoJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGFibGVQbHVnaW4uc2V0UG9zaXRpb25Db250cm9sbGVyVG9wLmNhbGwodGhpcywgdGFibGVFbGVtZW50KTtcclxuICAgICAgICB0YWJsZVBsdWdpbi5zZXRQb3NpdGlvbkNvbnRyb2xsZXJEaXYuY2FsbCh0aGlzLCB0ZEVsZW1lbnQsIHRhYmxlUGx1Z2luLl9zaGlmdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF0YWJsZVBsdWdpbi5fc2hpZnQpIHRoaXMuY29udHJvbGxlcnNPbihjb250ZXh0VGFibGUucmVzaXplRGl2LCBjb250ZXh0VGFibGUudGFibGVDb250cm9sbGVyLCB0YWJsZVBsdWdpbi5pbml0LmJpbmQodGhpcyksIHRkRWxlbWVudCwgJ3RhYmxlJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFBvc2l0aW9uQ29udHJvbGxlclRvcDogZnVuY3Rpb24gKHRhYmxlRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuc2V0Q29udHJvbGxlclBvc2l0aW9uKHRoaXMuY29udGV4dC50YWJsZS50YWJsZUNvbnRyb2xsZXIsIHRhYmxlRWxlbWVudCwgJ3RvcCcsIHtsZWZ0OiAwLCB0b3A6IDB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0UG9zaXRpb25Db250cm9sbGVyRGl2OiBmdW5jdGlvbiAodGRFbGVtZW50LCByZXNldCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuICAgICAgICBjb25zdCByZXNpemVEaXYgPSBjb250ZXh0VGFibGUucmVzaXplRGl2O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucGx1Z2lucy50YWJsZS5zZXRDZWxsSW5mby5jYWxsKHRoaXMsIHRkRWxlbWVudCwgcmVzZXQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjb250ZXh0VGFibGUuY2VsbENvbnRyb2xsZXJUb3ApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRDb250cm9sbGVyUG9zaXRpb24ocmVzaXplRGl2LCBjb250ZXh0VGFibGUuX2VsZW1lbnQsICd0b3AnLCB7bGVmdDogY29udGV4dFRhYmxlLnRhYmxlQ29udHJvbGxlci5vZmZzZXRXaWR0aCwgdG9wOiAwfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRDb250cm9sbGVyUG9zaXRpb24ocmVzaXplRGl2LCB0ZEVsZW1lbnQsICdib3R0b20nLCB7bGVmdDogMCwgdG9wOiAwfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXRDZWxsSW5mbzogZnVuY3Rpb24gKHRkRWxlbWVudCwgcmVzZXQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcbiAgICAgICAgY29uc3QgdGFibGUgPSBjb250ZXh0VGFibGUuX2VsZW1lbnQgPSB0aGlzLnBsdWdpbnMudGFibGUuX3NlbGVjdGVkVGFibGUgfHwgdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQodGRFbGVtZW50LCAnVEFCTEUnKTtcclxuXHJcbiAgICAgICAgaWYgKC9USEVBRC9pLnRlc3QodGFibGUuZmlyc3RFbGVtZW50Q2hpbGQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhjb250ZXh0VGFibGUuaGVhZGVyQnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGNvbnRleHRUYWJsZS5oZWFkZXJCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXNldCB8fCBjb250ZXh0VGFibGUuX3BoeXNpY2FsX2NlbGxDbnQgPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRUYWJsZS5fdGRFbGVtZW50ICE9PSB0ZEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fdGRFbGVtZW50ID0gdGRFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFRhYmxlLl90ckVsZW1lbnQgPSB0ZEVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgcm93cyA9IGNvbnRleHRUYWJsZS5fdHJFbGVtZW50cyA9IHRhYmxlLnJvd3M7XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGxJbmRleCA9IHRkRWxlbWVudC5jZWxsSW5kZXg7XHJcblxyXG4gICAgICAgICAgICBsZXQgY2VsbENudCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBjZWxscyA9IHJvd3NbMF0uY2VsbHMsIGxlbiA9IHJvd3NbMF0uY2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNlbGxDbnQgKz0gY2VsbHNbaV0uY29sU3BhbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcm93IGNudCwgcm93IGluZGV4XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0luZGV4ID0gY29udGV4dFRhYmxlLl9yb3dJbmRleCA9IGNvbnRleHRUYWJsZS5fdHJFbGVtZW50LnJvd0luZGV4O1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuX3Jvd0NudCA9IHJvd3MubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgLy8gY2VsbCBjbnQsIHBoeXNpY2FsIGNlbGwgaW5kZXhcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLl9waHlzaWNhbF9jZWxsQ250ID0gY29udGV4dFRhYmxlLl90ckVsZW1lbnQuY2VsbHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuX2xvZ2ljYWxfY2VsbENudCA9IGNlbGxDbnQ7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fcGh5c2ljYWxfY2VsbEluZGV4ID0gY2VsbEluZGV4O1xyXG5cclxuICAgICAgICAgICAgLy8gc3BhblxyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuX2N1cnJlbnRfY29sU3BhbiA9IGNvbnRleHRUYWJsZS5fdGRFbGVtZW50LmNvbFNwYW4gLSAxO1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuX2N1cnJlbnRfcm93U3BhbiAtIGNvbnRleHRUYWJsZS5fdHJFbGVtZW50LmNlbGxzW2NlbGxJbmRleF0ucm93U3BhbiAtIDE7XHJcblxyXG4gICAgICAgICAgICAvLyBmaW5kIGxvZ2NhbCBjZWxsIGluZGV4XHJcbiAgICAgICAgICAgIGxldCByb3dTcGFuQXJyID0gW107XHJcbiAgICAgICAgICAgIGxldCBzcGFuSW5kZXggPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGNlbGxzLCBjb2xTcGFuOyBpIDw9IHJvd0luZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNlbGxzID0gcm93c1tpXS5jZWxscztcclxuICAgICAgICAgICAgICAgIGNvbFNwYW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGNzLCBycywgbG9nY2FsSW5kZXg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsID0gY2VsbHNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgY3MgPSBjZWxsLmNvbFNwYW4gLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHJzID0gY2VsbC5yb3dTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCA9IGMgKyBjb2xTcGFuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BhbkluZGV4Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciA9IDAsIGFycjsgciA8IHNwYW5JbmRleC5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyID0gc3BhbkluZGV4W3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5yb3cgPiBpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2djYWxJbmRleCA+PSBhcnIuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuICs9IGFyci5jcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCArPSBhcnIuY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJvdyA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucnMgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gY0xlbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucnMgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucm93ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5ycyA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4LnNwbGljZShyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9nY2FsIGNlbGwgaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gcm93SW5kZXggJiYgYyA9PT0gY2VsbEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fbG9naWNhbF9jZWxsSW5kZXggPSBsb2djYWxJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocnMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW5BcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbG9nY2FsSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjczogY3MgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnM6IHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93OiAtMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBjcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzcGFuSW5kZXggPSBzcGFuSW5kZXguY29uY2F0KHJvd1NwYW5BcnIpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtyZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7fSk7XHJcbiAgICAgICAgICAgICAgICByb3dTcGFuQXJyID0gW107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJvd1NwYW5BcnIgPSBudWxsO1xyXG4gICAgICAgICAgICBzcGFuSW5kZXggPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZWRpdFRhYmxlOiBmdW5jdGlvbiAodHlwZSwgb3B0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgdGFibGVQbHVnaW4gPSB0aGlzLnBsdWdpbnMudGFibGU7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlID0gY29udGV4dFRhYmxlLl9lbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IGlzUm93ID0gdHlwZSA9PT0gJ3Jvdyc7XHJcblxyXG4gICAgICAgIGlmIChpc1Jvdykge1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUF0dHIgPSBjb250ZXh0VGFibGUuX3RyRWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAoL15USEVBRCQvaS50ZXN0KHRhYmxlQXR0ci5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb24gPT09ICd1cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0YWJsZUF0dHIubmV4dEVsZW1lbnRTaWJsaW5nIHx8ICEvXlRCT0RZJC9pLnRlc3QodGFibGVBdHRyLm5leHRFbGVtZW50U2libGluZy5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbm5lckhUTUwgKz0gJzx0Ym9keT48dHI+JyArIHRhYmxlUGx1Z2luLmNyZWF0ZUNlbGxzLmNhbGwodGhpcywgJ3RkJywgY29udGV4dFRhYmxlLl9sb2dpY2FsX2NlbGxDbnQsIGZhbHNlKSArICc8L3RyPjwvdGJvZHk+JztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG11bHRpXHJcbiAgICAgICAgaWYgKHRhYmxlUGx1Z2luLl9yZWYpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25DZWxsID0gY29udGV4dFRhYmxlLl90ZEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2VsbHMgPSB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxscztcclxuICAgICAgICAgICAgLy8gbXVsdGkgLSByb3dcclxuICAgICAgICAgICAgaWYgKGlzUm93KSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgcm93XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSBzZWxlY3RlZENlbGxzWzBdLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlQ2VsbHMgPSBbc2VsZWN0ZWRDZWxsc1swXV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxLCBsZW4gPSBzZWxlY3RlZENlbGxzLmxlbmd0aCwgY2VsbDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwgPSBzZWxlY3RlZENlbGxzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93ICE9PSBjZWxsLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNlbGxzLnB1c2goY2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cgPSBjZWxsLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZW1vdmVDZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRDZWxsSW5mby5jYWxsKHRoaXMsIHJlbW92ZUNlbGxzW2ldLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uZWRpdFJvdy5jYWxsKHRoaXMsIG9wdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZWRpdCByb3dcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRDZWxsSW5mby5jYWxsKHRoaXMsIG9wdGlvbiA9PT0gJ3VwJyA/IHNlbGVjdGVkQ2VsbHNbMF0gOiBzZWxlY3RlZENlbGxzW3NlbGVjdGVkQ2VsbHMubGVuZ3RoIC0gMV0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLmVkaXRSb3cuY2FsbCh0aGlzLCBvcHRpb24sIHBvc2l0aW9uQ2VsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIG11bHRpIC0gY2VsbFxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RSb3cgPSBzZWxlY3RlZENlbGxzWzBdLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgY2VsbFxyXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVDZWxscyA9IFtzZWxlY3RlZENlbGxzWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gc2VsZWN0ZWRDZWxscy5sZW5ndGgsIGNlbGw7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gc2VsZWN0ZWRDZWxsc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0Um93ID09PSBjZWxsLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNlbGxzLnB1c2goY2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlbW92ZUNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnNldENlbGxJbmZvLmNhbGwodGhpcywgcmVtb3ZlQ2VsbHNbaV0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5lZGl0Q2VsbC5jYWxsKHRoaXMsIG9wdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZWRpdCBjZWxsXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0Q2VsbCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZENlbGxzLmxlbmd0aCAtIDE7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RSb3cgIT09IHNlbGVjdGVkQ2VsbHNbaSArIDFdLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0Q2VsbCA9IHNlbGVjdGVkQ2VsbHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uc2V0Q2VsbEluZm8uY2FsbCh0aGlzLCBvcHRpb24gPT09ICdsZWZ0JyA/IHNlbGVjdGVkQ2VsbHNbMF0gOiByaWdodENlbGwgfHwgc2VsZWN0ZWRDZWxsc1swXSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uZWRpdENlbGwuY2FsbCh0aGlzLCBvcHRpb24sIHBvc2l0aW9uQ2VsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghb3B0aW9uKSB0YWJsZVBsdWdpbi5pbml0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgfSAvLyBvbmVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGFibGVQbHVnaW5baXNSb3cgPyAnZWRpdFJvdycgOiAnZWRpdENlbGwnXS5jYWxsKHRoaXMsIG9wdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhZnRlciByZW1vdmVcclxuICAgICAgICBpZiAoIW9wdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRhYmxlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5baV0uY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRhYmxlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgdGhpcy51dGlsLnJlbW92ZUl0ZW0odGFibGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZWRpdFJvdzogZnVuY3Rpb24gKG9wdGlvbiwgcG9zaXRpb25SZXNldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlID0gIW9wdGlvbjtcclxuXHJcbiAgICAgICAgY29uc3QgdXAgPSBvcHRpb24gPT09ICd1cCc7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luUm93SW5kZXggPSBjb250ZXh0VGFibGUuX3Jvd0luZGV4O1xyXG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcmVtb3ZlIHx8IHVwID8gb3JpZ2luUm93SW5kZXggOiBvcmlnaW5Sb3dJbmRleCArIGNvbnRleHRUYWJsZS5fY3VycmVudF9yb3dTcGFuICsgMTtcclxuICAgICAgICBjb25zdCBzaWduID0gcmVtb3ZlID8gLTEgOiAxO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJvd3MgPSBjb250ZXh0VGFibGUuX3RyRWxlbWVudHM7XHJcbiAgICAgICAgbGV0IGNlbGxDbnQgPSBjb250ZXh0VGFibGUuX2xvZ2ljYWxfY2VsbENudDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG9yaWdpblJvd0luZGV4ICsgKHJlbW92ZSA/IC0xIDogMCksIGNlbGw7IGkgPD0gbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY2VsbCA9IHJvd3NbaV0uY2VsbHM7XHJcbiAgICAgICAgICAgIGlmIChjZWxsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxsLmxlbmd0aCwgcnMsIGNzOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICBycyA9IGNlbGxbY10ucm93U3BhbjtcclxuICAgICAgICAgICAgICAgIGNzID0gY2VsbFtjXS5jb2xTcGFuO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJzIDwgMiAmJiBjcyA8IDIpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChycyArIGkgPiByb3dJbmRleCAmJiByb3dJbmRleCA+IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2NdLnJvd1NwYW4gPSBycyArIHNpZ247XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbENudCAtPSBjcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlbW92ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gcm93c1tvcmlnaW5Sb3dJbmRleCArIDFdO1xyXG4gICAgICAgICAgICBpZiAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3BhbkNlbGxzID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VsbHMgPSByb3dzW29yaWdpblJvd0luZGV4XS5jZWxscztcclxuICAgICAgICAgICAgICAgIGxldCBjb2xTcGFuID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBsb2djYWxJbmRleDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2NhbEluZGV4ID0gaSArIGNvbFNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBjZWxsLmNvbFNwYW4gLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbC5yb3dTcGFuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnJvd1NwYW4gLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkNlbGxzLnB1c2goe2NlbGw6IGNlbGwuY2xvbmVOb2RlKGZhbHNlKSwgaW5kZXg6IGxvZ2NhbEluZGV4fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzcGFuQ2VsbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzcGFuQ2VsbCA9IHNwYW5DZWxscy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzID0gbmV4dC5jZWxscztcclxuICAgICAgICAgICAgICAgICAgICBjb2xTcGFuID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgbG9nY2FsSW5kZXg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gY2VsbHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2NhbEluZGV4ID0gaSArIGNvbFNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW4gKz0gY2VsbC5jb2xTcGFuIC0gMTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9nY2FsSW5kZXggPj0gc3BhbkNlbGwuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLSwgY29sU3Bhbi0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBzcGFuQ2VsbC5jZWxsLmNvbFNwYW4gLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5pbnNlcnRCZWZvcmUoc3BhbkNlbGwuY2VsbCwgY2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuQ2VsbCA9IHNwYW5DZWxscy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGFuQ2VsbCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGFuQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0LmFwcGVuZENoaWxkKHNwYW5DZWxsLmNlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3BhbkNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LmFwcGVuZENoaWxkKHNwYW5DZWxsc1tpXS5jZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLl9lbGVtZW50LmRlbGV0ZVJvdyhyb3dJbmRleCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gY29udGV4dFRhYmxlLl9lbGVtZW50Lmluc2VydFJvdyhyb3dJbmRleCk7XHJcbiAgICAgICAgICAgIG5ld1Jvdy5pbm5lckhUTUwgPSB0aGlzLnBsdWdpbnMudGFibGUuY3JlYXRlQ2VsbHMuY2FsbCh0aGlzLCAndGQnLCBjZWxsQ250LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXJlbW92ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudGFibGUuc2V0UG9zaXRpb25Db250cm9sbGVyRGl2LmNhbGwodGhpcywgcG9zaXRpb25SZXNldEVsZW1lbnQgfHwgY29udGV4dFRhYmxlLl90ZEVsZW1lbnQsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGVkaXRDZWxsOiBmdW5jdGlvbiAob3B0aW9uLCBwb3NpdGlvblJlc2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuICAgICAgICBjb25zdCB1dGlsID0gdGhpcy51dGlsO1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZSA9ICFvcHRpb247XHJcblxyXG4gICAgICAgIGNvbnN0IGxlZnQgPSBvcHRpb24gPT09ICdsZWZ0JztcclxuICAgICAgICBjb25zdCBjb2xTcGFuID0gY29udGV4dFRhYmxlLl9jdXJyZW50X2NvbFNwYW47XHJcbiAgICAgICAgY29uc3QgY2VsbEluZGV4ID0gcmVtb3ZlIHx8IGxlZnQgPyBjb250ZXh0VGFibGUuX2xvZ2ljYWxfY2VsbEluZGV4IDogY29udGV4dFRhYmxlLl9sb2dpY2FsX2NlbGxJbmRleCArIGNvbFNwYW4gKyAxO1xyXG5cclxuICAgICAgICBjb25zdCByb3dzID0gY29udGV4dFRhYmxlLl90ckVsZW1lbnRzO1xyXG4gICAgICAgIGxldCByb3dTcGFuQXJyID0gW107XHJcbiAgICAgICAgbGV0IHNwYW5JbmRleCA9IFtdO1xyXG4gICAgICAgIGxldCBwYXNzQ2VsbCA9IDA7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlQ2VsbCA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZVNwYW5BcnIgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNvbnRleHRUYWJsZS5fcm93Q250LCByb3csIGluc2VydEluZGV4LCBjZWxscywgbmV3Q2VsbCwgYXBwbHlTcGFuLCBjZWxsQ29sU3BhbjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJvdyA9IHJvd3NbaV07XHJcbiAgICAgICAgICAgIGluc2VydEluZGV4ID0gY2VsbEluZGV4O1xyXG4gICAgICAgICAgICBhcHBseVNwYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgY2VsbHMgPSByb3cuY2VsbHM7XHJcbiAgICAgICAgICAgIGNlbGxDb2xTcGFuID0gMDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjZWxsLCBjTGVuID0gY2VsbHMubGVuZ3RoLCBycywgY3MsIHJlbW92ZUluZGV4OyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsID0gY2VsbHNbY107XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNlbGwpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIHJzID0gY2VsbC5yb3dTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgIGNzID0gY2VsbC5jb2xTcGFuIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjID49IGluc2VydEluZGV4KSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3MgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXNzQ2VsbCA8IDEgJiYgY3MgKyBjID49IGluc2VydEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNvbFNwYW4gKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEluZGV4ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NDZWxsID0gcnMgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEluZGV4IC09IGNzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhcHBseVNwYW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciA9IDAsIGFycjsgciA8IHNwYW5JbmRleC5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyID0gc3BhbkluZGV4W3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0SW5kZXggLT0gYXJyLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJzIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlTcGFuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUluZGV4ID0gYyArIGNlbGxDb2xTcGFuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BhbkluZGV4Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdENlbGwgPSAhY2VsbHNbYyArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByID0gMCwgYXJyOyByIDwgc3BhbkluZGV4Lmxlbmd0aDsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIgPSBzcGFuSW5kZXhbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJvdyA+IGkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVJbmRleCA+PSBhcnIuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQ29sU3BhbiArPSBhcnIuY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSW5kZXggPSBjICsgY2VsbENvbFNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJvdyA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucnMgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucnMgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucm93ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5ycyA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4LnNwbGljZShyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dTcGFuQXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnM6IHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3M6IGNzICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiByZW1vdmVJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogLTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlSW5kZXggPj0gaW5zZXJ0SW5kZXggJiYgcmVtb3ZlSW5kZXggKyBjcyA8PSBpbnNlcnRJbmRleCArIGNvbFNwYW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2VsbC5wdXNoKGNlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVtb3ZlSW5kZXggPD0gaW5zZXJ0SW5kZXggKyBjb2xTcGFuICYmIHJlbW92ZUluZGV4ICsgY3MgPj0gaW5zZXJ0SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jb2xTcGFuIC09IHV0aWwuZ2V0T3ZlcmxhcFJhbmdlQXRJbmRleChjZWxsSW5kZXgsIGNlbGxJbmRleCArIGNvbFNwYW4sIHJlbW92ZUluZGV4LCByZW1vdmVJbmRleCArIGNzKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChycyA+IDAgJiYgKHJlbW92ZUluZGV4IDwgaW5zZXJ0SW5kZXggfHwgcmVtb3ZlSW5kZXggKyBjcyA+IGluc2VydEluZGV4ICsgY29sU3BhbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlU3BhbkFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGw6IGNlbGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnM6IGkgKyByc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxDb2xTcGFuICs9IGNzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzcGFuSW5kZXggPSBzcGFuSW5kZXguY29uY2F0KHJvd1NwYW5BcnIpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtyZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7fSk7XHJcbiAgICAgICAgICAgIHJvd1NwYW5BcnIgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFzc0NlbGwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc0NlbGwgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0SW5kZXggIT09IG51bGwgJiYgY2VsbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbGwgPSB0aGlzLnBsdWdpbnMudGFibGUuY3JlYXRlQ2VsbHMuY2FsbCh0aGlzLCBjZWxsc1swXS5ub2RlTmFtZSwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbCA9IHJvdy5pbnNlcnRCZWZvcmUobmV3Q2VsbCwgY2VsbHNbaW5zZXJ0SW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlbW92ZSkge1xyXG4gICAgICAgICAgICBsZXQgcmVtb3ZlRmlyc3QsIHJlbW92ZUVuZDtcclxuICAgICAgICAgICAgZm9yIChsZXQgciA9IDAsIHJMZW4gPSByZW1vdmVDZWxsLmxlbmd0aCwgcm93OyByIDwgckxlbjsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICByb3cgPSByZW1vdmVDZWxsW3JdLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocmVtb3ZlQ2VsbFtyXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocm93LmNlbGxzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVtb3ZlRmlyc3QpIHJlbW92ZUZpcnN0ID0gdXRpbC5nZXRBcnJheUluZGV4KHJvd3MsIHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRW5kID0gdXRpbC5nZXRBcnJheUluZGV4KHJvd3MsIHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJvdyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gcmVtb3ZlU3BhbkFyci5sZW5ndGgsIHJvd1NwYW5DZWxsOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICByb3dTcGFuQ2VsbCA9IHJlbW92ZVNwYW5BcnJbY107XHJcbiAgICAgICAgICAgICAgICByb3dTcGFuQ2VsbC5jZWxsLnJvd1NwYW4gPSB1dGlsLmdldE92ZXJsYXBSYW5nZUF0SW5kZXgocmVtb3ZlRmlyc3QsIHJlbW92ZUVuZCwgcm93U3BhbkNlbGwuaSwgcm93U3BhbkNlbGwucnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnRhYmxlLnNldFBvc2l0aW9uQ29udHJvbGxlckRpdi5jYWxsKHRoaXMsIHBvc2l0aW9uUmVzZXRFbGVtZW50IHx8IGNvbnRleHRUYWJsZS5fdGRFbGVtZW50LCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9jbG9zZVNwbGl0TWVudTogbnVsbCxcclxuICAgIG9wZW5TcGxpdE1lbnU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3ModGhpcy5jb250ZXh0LnRhYmxlLnNwbGl0QnV0dG9uLCAnb24nKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGFibGUuc3BsaXRNZW51LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLXRhYmxlJztcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnRhYmxlLl9jbG9zZVNwbGl0TWVudSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHRoaXMuY29udGV4dC50YWJsZS5zcGxpdEJ1dHRvbiwgJ29uJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC50YWJsZS5zcGxpdE1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVEb2NFdmVudCgnY2xpY2snLCB0aGlzLnBsdWdpbnMudGFibGUuX2Nsb3NlU3BsaXRNZW51KTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnRhYmxlLl9jbG9zZVNwbGl0TWVudSA9IG51bGw7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdjbGljaycsIHRoaXMucGx1Z2lucy50YWJsZS5fY2xvc2VTcGxpdE1lbnUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzcGxpdENlbGxzOiBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENlbGwgPSBjb250ZXh0VGFibGUuX3RkRWxlbWVudDtcclxuICAgICAgICBjb25zdCByb3dzID0gY29udGV4dFRhYmxlLl90ckVsZW1lbnRzO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSBjb250ZXh0VGFibGUuX3RyRWxlbWVudDtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGNvbnRleHRUYWJsZS5fbG9naWNhbF9jZWxsSW5kZXg7XHJcbiAgICAgICAgY29uc3Qgcm93SW5kZXggPSBjb250ZXh0VGFibGUuX3Jvd0luZGV4O1xyXG4gICAgICAgIGNvbnN0IG5ld0NlbGwgPSB0aGlzLnBsdWdpbnMudGFibGUuY3JlYXRlQ2VsbHMuY2FsbCh0aGlzLCBjdXJyZW50Q2VsbC5ub2RlTmFtZSwgMCwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIHZlcnRpY2FsXHJcbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb2xTcGFuID0gY3VycmVudENlbGwuY29sU3BhbjtcclxuICAgICAgICAgICAgbmV3Q2VsbC5yb3dTcGFuID0gY3VycmVudENlbGwucm93U3BhbjtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbHNwYW4gPiAxXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Q29sU3BhbiA+IDEpIHtcclxuICAgICAgICAgICAgICAgIG5ld0NlbGwuY29sU3BhbiA9IHRoaXMuX3cuTWF0aC5mbG9vcihjdXJyZW50Q29sU3Bhbi8yKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRDZWxsLmNvbFNwYW4gPSBjdXJyZW50Q29sU3BhbiAtIG5ld0NlbGwuY29sU3BhbjtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRSb3cuaW5zZXJ0QmVmb3JlKG5ld0NlbGwsIGN1cnJlbnRDZWxsLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGNvbHNwYW4gLSAxXHJcbiAgICAgICAgICAgICAgICBsZXQgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwYW5JbmRleCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjb250ZXh0VGFibGUuX3Jvd0NudCwgY2VsbHMsIGNvbFNwYW47IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzID0gcm93c1tpXS5jZWxscztcclxuICAgICAgICAgICAgICAgICAgICBjb2xTcGFuID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgY3MsIHJzLCBsb2djYWxJbmRleDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gY2VsbHNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzID0gY2VsbC5jb2xTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnMgPSBjZWxsLnJvd1NwYW4gLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCA9IGMgKyBjb2xTcGFuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwYW5JbmRleC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByID0gMCwgYXJyOyByIDwgc3BhbkluZGV4Lmxlbmd0aDsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyID0gc3BhbkluZGV4W3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucm93ID4gaSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ2NhbEluZGV4ID49IGFyci5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuICs9IGFyci5jcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nY2FsSW5kZXggKz0gYXJyLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucnMgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJvdyA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJzIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4LnNwbGljZShyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBjTGVuIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucnMgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJvdyA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJzIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4LnNwbGljZShyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ2NhbEluZGV4IDw9IGluZGV4ICYmIHJzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U3BhbkFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbG9nY2FsSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3M6IGNzICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByczogcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93OiAtMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsICE9PSBjdXJyZW50Q2VsbCAmJiBsb2djYWxJbmRleCA8PSBpbmRleCAmJiBsb2djYWxJbmRleCArIGNzID49IGluZGV4ICsgY3VycmVudENvbFNwYW4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNvbFNwYW4gKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9nY2FsSW5kZXggPiBpbmRleCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuICs9IGNzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4ID0gc3BhbkluZGV4LmNvbmNhdChyb3dTcGFuQXJyKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7cmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O30pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd1NwYW5BcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Um93Lmluc2VydEJlZm9yZShuZXdDZWxsLCBjdXJyZW50Q2VsbC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHsgLy8gaG9yaXpvbnRhbFxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um93U3BhbiA9IGN1cnJlbnRDZWxsLnJvd1NwYW47XHJcbiAgICAgICAgICAgIG5ld0NlbGwuY29sU3BhbiA9IGN1cnJlbnRDZWxsLmNvbFNwYW47XHJcblxyXG4gICAgICAgICAgICAvLyByb3dzcGFuID4gMVxyXG4gICAgICAgICAgICBpZiAoY3VycmVudFJvd1NwYW4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDZWxsLnJvd1NwYW4gPSB0aGlzLl93Lk1hdGguZmxvb3IoY3VycmVudFJvd1NwYW4vMik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3dTcGFuID0gY3VycmVudFJvd1NwYW4gLSBuZXdDZWxsLnJvd1NwYW47XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFJvd0luZGV4ID0gdXRpbC5nZXRBcnJheUluZGV4KHJvd3MsIGN1cnJlbnRSb3cpICsgbmV3Um93U3BhbjtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgY2VsbHMsIGNvbFNwYW47IGkgPCBuZXh0Um93SW5kZXg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzID0gcm93c1tpXS5jZWxscztcclxuICAgICAgICAgICAgICAgICAgICBjb2xTcGFuID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgY3MsIGxvZ2NhbEluZGV4OyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2NhbEluZGV4ID0gYyArIGNvbFNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2djYWxJbmRleCA+PSBpbmRleCkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gY2VsbHNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzID0gY2VsbC5yb3dTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNzID4gMCAmJiBjcyArIGkgPj0gbmV4dFJvd0luZGV4ICYmIGxvZ2NhbEluZGV4IDwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW5BcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGxvZ2NhbEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzOiBjZWxsLmNvbFNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW4gKz0gY2VsbC5jb2xTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFJvdyA9IHJvd3NbbmV4dFJvd0luZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDZWxscyA9IG5leHRSb3cuY2VsbHM7XHJcbiAgICAgICAgICAgICAgICBsZXQgcnMgPSByb3dTcGFuQXJyLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBuZXh0Q2VsbHMubGVuZ3RoLCBjb2xTcGFuID0gMCwgY2VsbCwgY3MsIGxvZ2NhbEluZGV4LCBpbnNlcnRJbmRleDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2NhbEluZGV4ID0gYyArIGNvbFNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbCA9IG5leHRDZWxsc1tjXTtcclxuICAgICAgICAgICAgICAgICAgICBjcyA9IGNlbGwuY29sU3BhbiAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0SW5kZXggPSBsb2djYWxJbmRleCArIGNzICsgMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJzICYmIGluc2VydEluZGV4ID49IHJzLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW4gKz0gcnMuY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEluZGV4ICs9IHJzLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IHJvd1NwYW5BcnIuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc2VydEluZGV4ID49IGluZGV4IHx8IGMgPT09IGNMZW4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRSb3cuaW5zZXJ0QmVmb3JlKG5ld0NlbGwsIGNlbGwubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb2xTcGFuICs9IGNzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRDZWxsLnJvd1NwYW4gPSBuZXdSb3dTcGFuO1xyXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyByb3dzcGFuIC0gMVxyXG4gICAgICAgICAgICAgICAgbmV3Q2VsbC5yb3dTcGFuID0gY3VycmVudENlbGwucm93U3BhbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JvdyA9IHV0aWwuY3JlYXRlRWxlbWVudCgnVFInKTtcclxuICAgICAgICAgICAgICAgIG5ld1Jvdy5hcHBlbmRDaGlsZChuZXdDZWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgY2VsbHM7IGkgPCByb3dJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbHMgPSByb3dzW2ldLmNlbGxzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxscy5sZW5ndGg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgKyBjZWxsc1tjXS5yb3dTcGFuIC0gMSA+PSByb3dJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHNbY10ucm93U3BhbiArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBoeXNpY2FsSW5kZXggPSBjb250ZXh0VGFibGUuX3BoeXNpY2FsX2NlbGxJbmRleDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gY3VycmVudFJvdy5jZWxscztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNlbGxzLmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjID09PSBwaHlzaWNhbEluZGV4KSBjb250aW51ZTsgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbY10ucm93U3BhbiArPSAxOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJvdy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdSb3csIGN1cnJlbnRSb3cubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mb2N1c0VkZ2UoY3VycmVudENlbGwpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy50YWJsZS5zZXRQb3NpdGlvbkNvbnRyb2xsZXJEaXYuY2FsbCh0aGlzLCBjdXJyZW50Q2VsbCwgdHJ1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG1lcmdlQ2VsbHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuXHJcbiAgICAgICAgY29uc3QgcmVmID0gdGFibGVQbHVnaW4uX3JlZjtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZENlbGxzID0gdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbHM7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VDZWxsID0gc2VsZWN0ZWRDZWxsc1swXTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZW1wdHlSb3dGaXJzdCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGVtcHR5Um93TGFzdCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGNzID0gKHJlZi5jZSAtIHJlZi5jcykgKyAxO1xyXG4gICAgICAgIGxldCBycyA9IChyZWYucmUgLSByZWYucnMpICsgMTtcclxuICAgICAgICBsZXQgbWVyZ2VIVE1MID0gJyc7XHJcbiAgICAgICAgbGV0IHJvdyA9IG51bGw7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAxLCBsZW4gPSBzZWxlY3RlZENlbGxzLmxlbmd0aCwgY2VsbCwgY2g7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBjZWxsID0gc2VsZWN0ZWRDZWxsc1tpXTtcclxuICAgICAgICAgICAgaWYgKHJvdyAhPT0gY2VsbC5wYXJlbnROb2RlKSByb3cgPSBjZWxsLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICBjaCA9IGNlbGwuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2gubGVuZ3RoOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoY2hbY10pICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKGNoW2NdLnRleHRDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShjaFtjXSk7XHJcbiAgICAgICAgICAgICAgICB9ICBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWVyZ2VIVE1MICs9IGNlbGwuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2VsbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocm93LmNlbGxzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbXB0eVJvd0ZpcnN0KSBlbXB0eVJvd0ZpcnN0ID0gcm93O1xyXG4gICAgICAgICAgICAgICAgZWxzZSBlbXB0eVJvd0xhc3QgPSByb3c7XHJcbiAgICAgICAgICAgICAgICBycyAtPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZW1wdHlSb3dGaXJzdCkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dzID0gY29udGV4dFRhYmxlLl90ckVsZW1lbnRzO1xyXG4gICAgICAgICAgICBjb25zdCByb3dJbmRleEZpcnN0ID0gdXRpbC5nZXRBcnJheUluZGV4KHJvd3MsIGVtcHR5Um93Rmlyc3QpO1xyXG4gICAgICAgICAgICBjb25zdCByb3dJbmRleExhc3QgPSB1dGlsLmdldEFycmF5SW5kZXgocm93cywgZW1wdHlSb3dMYXN0IHx8IGVtcHR5Um93Rmlyc3QpO1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVSb3dzID0gW107XHJcbiAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGNlbGxzOyBpIDw9IHJvd0luZGV4TGFzdDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxscyA9IHJvd3NbaV0uY2VsbHM7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2VsbHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUm93cy5wdXNoKHJvd3NbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgcnM7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsID0gY2VsbHNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBjZWxsLnJvd1NwYW4gLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChycyA+IDAgJiYgaSArIHJzID49IHJvd0luZGV4Rmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5yb3dTcGFuIC09IHV0aWwuZ2V0T3ZlcmxhcFJhbmdlQXRJbmRleChyb3dJbmRleEZpcnN0LCByb3dJbmRleExhc3QsIGksIGkgKyBycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmVtb3ZlUm93cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZVJvd3NbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZXJnZUNlbGwuaW5uZXJIVE1MICs9IG1lcmdlSFRNTDtcclxuICAgICAgICBtZXJnZUNlbGwuY29sU3BhbiA9IGNzO1xyXG4gICAgICAgIG1lcmdlQ2VsbC5yb3dTcGFuID0gcnM7XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICB0YWJsZVBsdWdpbi5zZXRBY3RpdmVCdXR0b24uY2FsbCh0aGlzLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uY2FsbF9jb250cm9sbGVyX3RhYmxlRWRpdC5jYWxsKHRoaXMsIG1lcmdlQ2VsbCk7XHJcblxyXG4gICAgICAgIHV0aWwuYWRkQ2xhc3MobWVyZ2VDZWxsLCAnc2UtdGFibGUtc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgIHRoaXMuZm9jdXNFZGdlKG1lcmdlQ2VsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRvZ2dsZUhlYWRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHV0aWwgPSB0aGlzLnV0aWw7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyQnV0dG9uID0gdGhpcy5jb250ZXh0LnRhYmxlLmhlYWRlckJ1dHRvbjtcclxuICAgICAgICBjb25zdCBhY3RpdmUgPSB1dGlsLmhhc0NsYXNzKGhlYWRlckJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlLl9lbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAoIWFjdGl2ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ1RIRUFEJyk7XHJcbiAgICAgICAgICAgIGhlYWRlci5pbm5lckhUTUwgPSAnPHRyPicgKyB0aGlzLnBsdWdpbnMudGFibGUuY3JlYXRlQ2VsbHMuY2FsbCh0aGlzLCAndGgnLCB0aGlzLmNvbnRleHQudGFibGUuX2xvZ2ljYWxfY2VsbENudCwgZmFsc2UpICsgJzwvdHI+JztcclxuICAgICAgICAgICAgdGFibGUuaW5zZXJ0QmVmb3JlKGhlYWRlciwgdGFibGUuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbSh0YWJsZS5xdWVyeVNlbGVjdG9yKCd0aGVhZCcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHV0aWwudG9nZ2xlQ2xhc3MoaGVhZGVyQnV0dG9uLCAnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgIGlmICgvVEgvaS50ZXN0KHRoaXMuY29udGV4dC50YWJsZS5fdGRFbGVtZW50Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnRhYmxlLnNldFBvc2l0aW9uQ29udHJvbGxlckRpdi5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC50YWJsZS5fdGRFbGVtZW50LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXRUYWJsZVN0eWxlOiBmdW5jdGlvbiAoc3R5bGVzKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlRWxlbWVudCA9IGNvbnRleHRUYWJsZS5fZWxlbWVudDtcclxuICAgICAgICBsZXQgaWNvbiwgc3Bhbiwgc2l6ZUljb24sIHRleHQ7XHJcblxyXG4gICAgICAgIGlmIChzdHlsZXMuaW5kZXhPZignd2lkdGgnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIGljb24gPSAgY29udGV4dFRhYmxlLnJlc2l6ZUJ1dHRvbi5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICAgICAgc3BhbiA9IGNvbnRleHRUYWJsZS5yZXNpemVUZXh0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0VGFibGUuX21heFdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplSWNvbiA9IGNvbnRleHRUYWJsZS5pY29ucy5leHBhbnNpb247XHJcbiAgICAgICAgICAgICAgICB0ZXh0ID0gY29udGV4dFRhYmxlLm1heFRleHQ7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0VGFibGUuY29sdW1uRml4ZWRCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1zaXplLTEwMCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLXNpemUtYXV0bycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2l6ZUljb24gPSBjb250ZXh0VGFibGUuaWNvbnMucmVkdWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IGNvbnRleHRUYWJsZS5taW5UZXh0O1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFRhYmxlLmNvbHVtbkZpeGVkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLXNpemUtYXV0bycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLXNpemUtMTAwJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VFbGVtZW50KGljb24sIHNpemVJY29uKTtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dChzcGFuLCB0ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdHlsZXMuaW5kZXhPZignY29sdW1uJykgPiAtMSkge1xyXG4gICAgICAgICAgICBpZiAoIWNvbnRleHRUYWJsZS5fZml4ZWRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1sYXlvdXQtZml4ZWQnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1sYXlvdXQtYXV0bycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGNvbnRleHRUYWJsZS5jb2x1bW5GaXhlZEJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLWxheW91dC1hdXRvJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3ModGFibGVFbGVtZW50LCAnc2UtdGFibGUtbGF5b3V0LWZpeGVkJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dFRhYmxlLmNvbHVtbkZpeGVkQnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXRBY3RpdmVCdXR0b246IGZ1bmN0aW9uIChmaXhlZENlbGwsIHNlbGVjdGVkQ2VsbCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKC9eVEgkL2kudGVzdChmaXhlZENlbGwubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5pbnNlcnRSb3dBYm92ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5pbnNlcnRSb3dCZWxvd0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLmluc2VydFJvd0Fib3ZlQnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLmluc2VydFJvd0JlbG93QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc2VsZWN0ZWRDZWxsIHx8IGZpeGVkQ2VsbCA9PT0gc2VsZWN0ZWRDZWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5zcGxpdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5tZXJnZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLnNwbGl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLm1lcmdlQnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG11bHRpIHNlbGVjdGVcclxuICAgIF9iaW5kT25TZWxlY3Q6IG51bGwsXHJcbiAgICBfYmluZE9mZlNlbGVjdDogbnVsbCxcclxuICAgIF9iaW5kT2ZmU2hpZnQ6IG51bGwsXHJcbiAgICBfc2VsZWN0ZWRDZWxsczogbnVsbCxcclxuICAgIF9zaGlmdDogZmFsc2UsXHJcbiAgICBfZml4ZWRDZWxsOiBudWxsLFxyXG4gICAgX2ZpeGVkQ2VsbE5hbWU6IG51bGwsXHJcbiAgICBfc2VsZWN0ZWRDZWxsOiBudWxsLFxyXG4gICAgX3NlbGVjdGVkVGFibGU6IG51bGwsXHJcbiAgICBfcmVmOiBudWxsLFxyXG4gICAgX3RvZ2dsZUVkaXRvcjogZnVuY3Rpb24gKGVuYWJsZWQpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZW5hYmxlZCk7XHJcbiAgICAgICAgaWYgKGVuYWJsZWQpIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnLCAnc2UtZGlzYWJsZWQnKTtcclxuICAgICAgICBlbHNlIHRoaXMudXRpbC5hZGRDbGFzcyh0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnLCAnc2UtZGlzYWJsZWQnKTtcclxuICAgIH0sXHJcblxyXG4gICAgX29mZkNlbGxNdWx0aVNlbGVjdDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUGx1Z2luID0gdGhpcy5wbHVnaW5zLnRhYmxlO1xyXG5cclxuICAgICAgICBpZiAoIXRhYmxlUGx1Z2luLl9zaGlmdCkge1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fcmVtb3ZlRXZlbnRzLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl90b2dnbGVFZGl0b3IuY2FsbCh0aGlzLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhYmxlUGx1Z2luLl9pbml0QmluZCkge1xyXG4gICAgICAgICAgICB0aGlzLl93ZC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0YWJsZVBsdWdpbi5faW5pdEJpbmQpO1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5faW5pdEJpbmQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0YWJsZVBsdWdpbi5fZml4ZWRDZWxsIHx8ICF0YWJsZVBsdWdpbi5fc2VsZWN0ZWRUYWJsZSkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRhYmxlUGx1Z2luLnNldEFjdGl2ZUJ1dHRvbi5jYWxsKHRoaXMsIHRhYmxlUGx1Z2luLl9maXhlZENlbGwsIHRhYmxlUGx1Z2luLl9zZWxlY3RlZENlbGwpO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLmNhbGxfY29udHJvbGxlcl90YWJsZUVkaXQuY2FsbCh0aGlzLCB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxsIHx8IHRhYmxlUGx1Z2luLl9maXhlZENlbGwpO1xyXG5cclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxscyA9IHRhYmxlUGx1Z2luLl9zZWxlY3RlZFRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZS10YWJsZS1zZWxlY3RlZC1jZWxsJyk7XHJcbiAgICAgICAgaWYgKHRhYmxlUGx1Z2luLl9zZWxlY3RlZENlbGwgJiYgdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbCkgdGhpcy5mb2N1c0VkZ2UodGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbCk7XHJcblxyXG4gICAgICAgIGlmICghdGFibGVQbHVnaW4uX3NoaWZ0KSB7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9maXhlZENlbGwgPSBudWxsO1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxsID0gbnVsbDtcclxuICAgICAgICAgICAgdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbE5hbWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX29uQ2VsbE11bHRpU2VsZWN0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRoaXMuX2FudGlCbHVyID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlLnRhcmdldCwgdGhpcy51dGlsLmlzQ2VsbCk7XHJcblxyXG4gICAgICAgIGlmICh0YWJsZVBsdWdpbi5fc2hpZnQpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbCkgdGFibGVQbHVnaW4uX3RvZ2dsZUVkaXRvci5jYWxsKHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICBlbHNlIHRhYmxlUGx1Z2luLl90b2dnbGVFZGl0b3IuY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICghdGFibGVQbHVnaW4uX3JlZikge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsKSByZXR1cm47XHJcbiAgICAgICAgICAgIGVsc2UgdGFibGVQbHVnaW4uX3RvZ2dsZUVkaXRvci5jYWxsKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGFyZ2V0IHx8IHRhcmdldCA9PT0gdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbCB8fCB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsTmFtZSAhPT0gdGFyZ2V0Lm5vZGVOYW1lIHx8IFxyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRUYWJsZSAhPT0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQodGFyZ2V0LCAnVEFCTEUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxsID0gdGFyZ2V0O1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9zZXRNdWx0aUNlbGxzLmNhbGwodGhpcywgdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbCwgdGFyZ2V0KTtcclxuICAgIH0sXHJcblxyXG4gICAgX3NldE11bHRpQ2VsbHM6IGZ1bmN0aW9uIChzdGFydENlbGwsIGVuZENlbGwpIHtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuICAgICAgICBjb25zdCByb3dzID0gdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUucm93cztcclxuICAgICAgICBjb25zdCB1dGlsID0gdGhpcy51dGlsO1xyXG5cclxuICAgICAgICBjb25zdCBzZWxlY3RlZENlbGxzID0gdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUucXVlcnlTZWxlY3RvckFsbCgnLnNlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRDZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHNlbGVjdGVkQ2VsbHNbaV0sICdzZS10YWJsZS1zZWxlY3RlZC1jZWxsJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhcnRDZWxsID09PSBlbmRDZWxsKSB7XHJcbiAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3Moc3RhcnRDZWxsLCAnc2UtdGFibGUtc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgICAgICBpZiAoIXRhYmxlUGx1Z2luLl9zaGlmdCkgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGZpbmRTZWxlY3RlZENlbGwgPSB0cnVlO1xyXG4gICAgICAgIGxldCBzcGFuSW5kZXggPSBbXTtcclxuICAgICAgICBsZXQgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHJlZiA9IHRhYmxlUGx1Z2luLl9yZWYgPSB7X2k6IDAsIGNzOiBudWxsLCBjZTogbnVsbCwgcnM6IG51bGwsIHJlOiBudWxsfTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJvd3MubGVuZ3RoLCBjZWxscywgY29sU3BhbjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNlbGxzID0gcm93c1tpXS5jZWxscztcclxuICAgICAgICAgICAgY29sU3BhbiA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgbG9nY2FsSW5kZXgsIGNzLCByczsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2NdO1xyXG4gICAgICAgICAgICAgICAgY3MgPSBjZWxsLmNvbFNwYW4gLSAxO1xyXG4gICAgICAgICAgICAgICAgcnMgPSBjZWxsLnJvd1NwYW4gLSAxO1xyXG4gICAgICAgICAgICAgICAgbG9nY2FsSW5kZXggPSBjICsgY29sU3BhbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3BhbkluZGV4Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByID0gMCwgYXJyOyByIDwgc3BhbkluZGV4Lmxlbmd0aDsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9IHNwYW5JbmRleFtyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5yb3cgPiBpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ2NhbEluZGV4ID49IGFyci5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBhcnIuY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCArPSBhcnIuY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucnMgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5yb3cgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucnMgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4LnNwbGljZShyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gY0xlbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5ycyAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJvdyA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5ycyA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuSW5kZXguc3BsaWNlKHIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZmluZFNlbGVjdGVkQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsID09PSBzdGFydENlbGwgfHwgY2VsbCA9PT0gZW5kQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWYuY3MgPSByZWYuY3MgIT09IG51bGwgJiYgcmVmLmNzIDwgbG9nY2FsSW5kZXggPyByZWYuY3MgOiBsb2djYWxJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmLmNlID0gcmVmLmNlICE9PSBudWxsICYmIHJlZi5jZSA+IGxvZ2NhbEluZGV4ICsgY3MgPyByZWYuY2UgOiBsb2djYWxJbmRleCArIGNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWYucnMgPSByZWYucnMgIT09IG51bGwgJiYgcmVmLnJzIDwgaSA/IHJlZi5ycyA6IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5yZSA9IHJlZi5yZSAhPT0gbnVsbCAmJiByZWYucmUgPiBpICsgcnMgPyByZWYucmUgOiBpICsgcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5faSArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVmLl9pID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRTZWxlY3RlZENlbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW5BcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuZ2V0T3ZlcmxhcFJhbmdlQXRJbmRleChyZWYuY3MsIHJlZi5jZSwgbG9nY2FsSW5kZXgsIGxvZ2NhbEluZGV4ICsgY3MpICYmIHV0aWwuZ2V0T3ZlcmxhcFJhbmdlQXRJbmRleChyZWYucnMsIHJlZi5yZSwgaSwgaSArIHJzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NzID0gcmVmLmNzIDwgbG9nY2FsSW5kZXggPyByZWYuY3MgOiBsb2djYWxJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDZSA9IHJlZi5jZSA+IGxvZ2NhbEluZGV4ICsgY3MgPyByZWYuY2UgOiBsb2djYWxJbmRleCArIGNzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JzID0gcmVmLnJzIDwgaSA/IHJlZi5ycyA6IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3UmUgPSByZWYucmUgPiBpICsgcnMgPyByZWYucmUgOiBpICsgcnM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWYuY3MgIT09IG5ld0NzIHx8IHJlZi5jZSAhPT0gbmV3Q2UgfHwgcmVmLnJzICE9PSBuZXdScyB8fCByZWYucmUgIT09IG5ld1JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5jcyA9IG5ld0NzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWYuY2UgPSBuZXdDZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmLnJzID0gbmV3UnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5yZSA9IG5ld1JlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuSW5kZXggPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoY2VsbCwgJ3NlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocnMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93U3BhbkFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGxvZ2NhbEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjczogY3MgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByczogcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogLTFcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb2xTcGFuICs9IGNlbGwuY29sU3BhbiAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNwYW5JbmRleCA9IHNwYW5JbmRleC5jb25jYXQocm93U3BhbkFycikuc29ydChmdW5jdGlvbiAoYSwgYikge3JldHVybiBhLmluZGV4IC0gYi5pbmRleDt9KTtcclxuICAgICAgICAgICAgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3JlbW92ZUV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUGx1Z2luID0gdGhpcy5wbHVnaW5zLnRhYmxlO1xyXG5cclxuICAgICAgICBpZiAodGFibGVQbHVnaW4uX2luaXRCaW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRhYmxlUGx1Z2luLl9pbml0QmluZCk7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9pbml0QmluZCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFibGVQbHVnaW4uX2JpbmRPblNlbGVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLl93ZC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0YWJsZVBsdWdpbi5fYmluZE9uU2VsZWN0KTtcclxuICAgICAgICAgICAgdGhpcy5fd2QucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGFibGVQbHVnaW4uX2JpbmRPblNlbGVjdCk7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9iaW5kT25TZWxlY3QgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0YWJsZVBsdWdpbi5fYmluZE9mZlNlbGVjdCk7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2VsZWN0ID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YWJsZVBsdWdpbi5fYmluZE9mZlNoaWZ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGFibGVQbHVnaW4uX2JpbmRPZmZTaGlmdCk7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2hpZnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX2luaXRCaW5kOiBudWxsLFxyXG4gICAgb25UYWJsZUNlbGxNdWx0aVNlbGVjdDogZnVuY3Rpb24gKHRkRWxlbWVudCwgc2hpZnQpIHtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuXHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3JlbW92ZUV2ZW50cy5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3NoaWZ0ID0gc2hpZnQ7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbCA9IHRkRWxlbWVudDtcclxuICAgICAgICB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsTmFtZSA9IHRkRWxlbWVudC5ub2RlTmFtZTtcclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRUYWJsZSA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHRkRWxlbWVudCwgJ1RBQkxFJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ2VsbHMgPSB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKCcuc2UtdGFibGUtc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZENlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhzZWxlY3RlZENlbGxzW2ldLCAnc2UtdGFibGUtc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHRkRWxlbWVudCwgJ3NlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICBcclxuICAgICAgICB0YWJsZVBsdWdpbi5fYmluZE9uU2VsZWN0ID0gdGFibGVQbHVnaW4uX29uQ2VsbE11bHRpU2VsZWN0LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uX2JpbmRPZmZTZWxlY3QgPSB0YWJsZVBsdWdpbi5fb2ZmQ2VsbE11bHRpU2VsZWN0LmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIGlmICghc2hpZnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fd2QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGFibGVQbHVnaW4uX2JpbmRPblNlbGVjdCwgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2hpZnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT24odGhpcy5jb250ZXh0LnRhYmxlLnJlc2l6ZURpdiwgdGhpcy5jb250ZXh0LnRhYmxlLnRhYmxlQ29udHJvbGxlciwgdGhpcy5wbHVnaW5zLnRhYmxlLmluaXQuYmluZCh0aGlzKSwgdGRFbGVtZW50LCAndGFibGUnKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGFibGVQbHVnaW4uX3JlZikgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl93ZC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2hpZnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5fd2QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGFibGVQbHVnaW4uX2JpbmRPblNlbGVjdCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fd2QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2VsZWN0LCBmYWxzZSk7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uX2luaXRCaW5kID0gdGFibGVQbHVnaW4uaW5pdC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3dkLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRhYmxlUGx1Z2luLl9pbml0QmluZCwgZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNsaWNrX3RhYmxlQ29udHJvbGxlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykgPyBlLnRhcmdldCA6IGUudGFyZ2V0LnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW9wdGlvbicpO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUGx1Z2luID0gdGhpcy5wbHVnaW5zLnRhYmxlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0eXBlb2YgdGFibGVQbHVnaW4uX2Nsb3NlU3BsaXRNZW51ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9jbG9zZVNwbGl0TWVudSgpO1xyXG4gICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gJ29uc3BsaXQnKSByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2luc2VydCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5lZGl0VGFibGUuY2FsbCh0aGlzLCB2YWx1ZSwgb3B0aW9uKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdoZWFkZXInOlxyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4udG9nZ2xlSGVhZGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnb25zcGxpdCc6XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5vcGVuU3BsaXRNZW51LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc3BsaXQnOlxyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uc3BsaXRDZWxscy5jYWxsKHRoaXMsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdtZXJnZSc6XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5tZXJnZUNlbGxzLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncmVzaXplJzpcclxuICAgICAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fbWF4V2lkdGggPSAhY29udGV4dFRhYmxlLl9tYXhXaWR0aDtcclxuICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnNldFRhYmxlU3R5bGUuY2FsbCh0aGlzLCAnd2lkdGgnKTtcclxuICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnNldFBvc2l0aW9uQ29udHJvbGxlclRvcC5jYWxsKHRoaXMsIGNvbnRleHRUYWJsZS5fZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRQb3NpdGlvbkNvbnRyb2xsZXJEaXYuY2FsbCh0aGlzLCBjb250ZXh0VGFibGUuX3RkRWxlbWVudCwgdGFibGVQbHVnaW4uX3NoaWZ0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdsYXlvdXQnOlxyXG4gICAgICAgICAgICAgICAgY29udGV4dFRhYmxlLl9maXhlZENvbHVtbiA9ICFjb250ZXh0VGFibGUuX2ZpeGVkQ29sdW1uO1xyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uc2V0VGFibGVTdHlsZS5jYWxsKHRoaXMsICdjb2x1bW4nKTtcclxuICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnNldFBvc2l0aW9uQ29udHJvbGxlclRvcC5jYWxsKHRoaXMsIGNvbnRleHRUYWJsZS5fZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRQb3NpdGlvbkNvbnRyb2xsZXJEaXYuY2FsbCh0aGlzLCBjb250ZXh0VGFibGUuX3RkRWxlbWVudCwgdGFibGVQbHVnaW4uX3NoaWZ0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdyZW1vdmUnOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZW1wdHlEaXYgPSBjb250ZXh0VGFibGUuX2VsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGNvbnRleHRUYWJsZS5fZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVtcHR5RGl2ICE9PSB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnKSB0aGlzLnV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMoZW1wdHlEaXYsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwOyB9LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnZm9ybWF0QmxvY2snLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5mb3JtYXRCbG9jayA9IHtcclxuICAgICAgICAgICAgdGFyZ2V0VGV4dDogdGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudHh0JyksXHJcbiAgICAgICAgICAgIHRhcmdldFRvb2x0aXA6IHRhcmdldEVsZW1lbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuc2UtdG9vbHRpcC10ZXh0JyksXHJcbiAgICAgICAgICAgIF9mb3JtYXRMaXN0OiBudWxsLFxyXG4gICAgICAgICAgICBjdXJyZW50Rm9ybWF0OiAnJ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja1VwLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGNvbnRleHQuZm9ybWF0QmxvY2suX2Zvcm1hdExpc3QgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsYW5nX3Rvb2xiYXIgPSBjb3JlLmxhbmcudG9vbGJhcjtcclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWZvcm1hdCc7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRGb3JtYXRzID0gWydwJywgJ2RpdicsICdibG9ja3F1b3RlJywgJ3ByZScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNiddO1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdExpc3QgPSAhb3B0aW9uLmZvcm1hdHMgfHwgb3B0aW9uLmZvcm1hdHMubGVuZ3RoID09PSAwID8gZGVmYXVsdEZvcm1hdHMgOiBvcHRpb24uZm9ybWF0cztcclxuXHJcbiAgICAgICAgbGV0IGxpc3QgPSAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj48dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZm9ybWF0TGlzdC5sZW5ndGgsIGZvcm1hdCwgdGFnTmFtZSwgY29tbWFuZCwgbmFtZSwgaCwgYXR0cnMsIGNsYXNzTmFtZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdExpc3RbaV07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycgJiYgZGVmYXVsdEZvcm1hdHMuaW5kZXhPZihmb3JtYXQpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRhZ05hbWUgPSBmb3JtYXQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0YWdOYW1lID09PSAnYmxvY2txdW90ZScgPyAncmFuZ2UnIDogdGFnTmFtZSA9PT0gJ3ByZScgPyAnZnJlZScgOiAncmVwbGFjZSc7XHJcbiAgICAgICAgICAgICAgICBoID0gL15oLy50ZXN0KHRhZ05hbWUpID8gdGFnTmFtZS5tYXRjaCgvXFxkKy8pWzBdIDogJyc7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gbGFuZ190b29sYmFyWyd0YWdfJyArIChoID8gJ2gnIDogdGFnTmFtZSldICsgaDtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgYXR0cnMgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRhZ05hbWUgPSBmb3JtYXQudGFnLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kID0gZm9ybWF0LmNvbW1hbmQ7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gZm9ybWF0Lm5hbWUgfHwgdGFnTmFtZTtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGZvcm1hdC5jbGFzcztcclxuICAgICAgICAgICAgICAgIGF0dHJzID0gY2xhc3NOYW1lID8gJyBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCInIDogJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0XCIgZGF0YS1jb21tYW5kPVwiJyArIGNvbW1hbmQgKyAnXCIgZGF0YS12YWx1ZT1cIicgKyB0YWdOYW1lICsgJ1wiIGRhdGEtY2xhc3M9XCInICsgY2xhc3NOYW1lICsgJ1wiIHRpdGxlPVwiJyArIG5hbWUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBuYW1lICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8JyArIHRhZ05hbWUgKyBhdHRycyArICc+JyArIG5hbWUgKyAnPC8nICsgdGFnTmFtZSArICc+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaXN0ICs9ICc8L3VsPjwvZGl2Pic7XHJcblxyXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gbGlzdDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlXHJcbiAgICAgKi9cclxuICAgIGFjdGl2ZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgZm9ybWF0VGl0bGUgPSB0aGlzLmxhbmcudG9vbGJhci5mb3JtYXRzO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuY29udGV4dC5mb3JtYXRCbG9jay50YXJnZXRUZXh0O1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dCh0YXJnZXQsIGZvcm1hdFRpdGxlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudXRpbC5pc0Zvcm1hdEVsZW1lbnQoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0Q29udGV4dCA9IHRoaXMuY29udGV4dC5mb3JtYXRCbG9jaztcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0TGlzdCA9IGZvcm1hdENvbnRleHQuX2Zvcm1hdExpc3Q7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSAoZWxlbWVudC5jbGFzc05hbWUubWF0Y2goLyhcXHN8XilfX3NlX19mb3JtYXRfX1teXFxzXSsvKSB8fCBbJyddKVswXS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZm9ybWF0TGlzdC5sZW5ndGgsIGY7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZiA9IGZvcm1hdExpc3RbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWUgPT09IGYuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgJiYgY2xhc3NOYW1lID09PSBmLmdldEF0dHJpYnV0ZSgnZGF0YS1jbGFzcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VGl0bGUgPSBmLnRpdGxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlVHh0KHRhcmdldCwgZm9ybWF0VGl0bGUpO1xyXG4gICAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgbm9kZU5hbWUpO1xyXG4gICAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLWNsYXNzJywgY2xhc3NOYW1lKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdENvbnRleHQgPSB0aGlzLmNvbnRleHQuZm9ybWF0QmxvY2s7XHJcbiAgICAgICAgY29uc3QgZm9ybWF0TGlzdCA9IGZvcm1hdENvbnRleHQuX2Zvcm1hdExpc3Q7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZm9ybWF0Q29udGV4dC50YXJnZXRUZXh0O1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb3JtYXQgPSAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpIHx8ICcnKSArICh0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNsYXNzJykgfHwgJycpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudEZvcm1hdCAhPT0gZm9ybWF0Q29udGV4dC5jdXJyZW50Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmb3JtYXRMaXN0Lmxlbmd0aCwgZjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmID0gZm9ybWF0TGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Rm9ybWF0ID09PSBmLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpICsgZi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2xhc3MnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhmLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhmLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvcm1hdENvbnRleHQuY3VycmVudEZvcm1hdCA9IGN1cnJlbnRGb3JtYXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwaWNrVXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICBsZXQgY29tbWFuZCA9IG51bGwsIHZhbHVlID0gbnVsbCwgdGFnID0gbnVsbCwgY2xhc3NOYW1lID0gJyc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgd2hpbGUgKCFjb21tYW5kICYmICEvVUwvaS50ZXN0KHRhcmdldC50YWdOYW1lKSkge1xyXG4gICAgICAgICAgICBjb21tYW5kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xyXG4gICAgICAgICAgICBjbGFzc05hbWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNsYXNzJyk7XHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0YWcgPSB0YXJnZXQuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIGJsb2NrcXVvdGVcclxuICAgICAgICBpZiAoY29tbWFuZCA9PT0gJ3JhbmdlJykge1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZUVsZW1lbnQgPSB0YWcuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBmcmVlLCByZXBsYWNlXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkRm9ybXN0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybXN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHJhbmdlLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkRm9ybXN0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybXN0cy5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3QgZW5kT2Zmc2V0ID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuICAgICAgICAgICAgbGV0IGZpcnN0ID0gc2VsZWN0ZWRGb3Jtc3RzWzBdO1xyXG4gICAgICAgICAgICBsZXQgbGFzdCA9IHNlbGVjdGVkRm9ybXN0c1tzZWxlY3RlZEZvcm1zdHMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0UGF0aCA9IHV0aWwuZ2V0Tm9kZVBhdGgocmFuZ2Uuc3RhcnRDb250YWluZXIsIGZpcnN0LCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKHJhbmdlLmVuZENvbnRhaW5lciwgbGFzdCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyByZW1vdmUgc2VsZWN0ZWQgbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBybGlzdCA9IHRoaXMuZGV0YWNoTGlzdChzZWxlY3RlZEZvcm1zdHMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHJsaXN0LnNjKSBmaXJzdCA9IHJsaXN0LnNjO1xyXG4gICAgICAgICAgICBpZiAocmxpc3QuZWMpIGxhc3QgPSBybGlzdC5lYztcclxuXHJcbiAgICAgICAgICAgIC8vIGNoYW5nZSBmb3JtYXQgdGFnXHJcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UodXRpbC5nZXROb2RlRnJvbVBhdGgoZmlyc3RQYXRoLCBmaXJzdCksIHN0YXJ0T2Zmc2V0LCB1dGlsLmdldE5vZGVGcm9tUGF0aChsYXN0UGF0aCwgbGFzdCksIGVuZE9mZnNldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkRm9ybXN0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gZnJlZSBmb3JtYXRcclxuICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdmcmVlJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuID0gbW9kaWZpZWRGb3Jtc3RzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50Tm9kZSA9IG1vZGlmaWVkRm9ybXN0c1tsZW5dLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICBsZXQgZnJlZUVsZW1lbnQgPSB0YWcuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzRWxlbWVudCA9IGZyZWVFbGVtZW50O1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gbGVuLCBmLCBodG1sLCBiZWZvcmUsIG5leHQsIGlubmVyLCBpc0NvbXAsIGZpcnN0ID0gdHJ1ZTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gbW9kaWZpZWRGb3Jtc3RzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmID09PSAoIW1vZGlmaWVkRm9ybXN0c1tpICsgMV0gPyBudWxsIDogbW9kaWZpZWRGb3Jtc3RzW2kgKyAxXS5wYXJlbnROb2RlKSkgY29udGludWU7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBpc0NvbXAgPSB1dGlsLmlzQ29tcG9uZW50KGYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBpc0NvbXAgPyAnJyA6IGYuaW5uZXJIVE1MLnJlcGxhY2UoLyg/IT4pXFxzKyg/PTwpfFxcbi9nLCAnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChmLCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC5wYXJlbnROb2RlID09PSBwYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUgIT09IGYucGFyZW50Tm9kZSB8fCBpc0NvbXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZyZWVFbGVtZW50LCBwYXJlbnROb2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShmcmVlRWxlbWVudCwgYmVmb3JlID8gYmVmb3JlLm5leHRTaWJsaW5nIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gZi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gZnJlZUVsZW1lbnQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIGZyZWVFbGVtZW50Lm5vZGVOYW1lID09PSBuZXh0Lm5vZGVOYW1lICYmIHV0aWwuaXNTYW1lQXR0cmlidXRlcyhmcmVlRWxlbWVudCwgbmV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVFbGVtZW50LmlubmVySFRNTCArPSAnPEJSPicgKyBuZXh0LmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShuZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJlZUVsZW1lbnQgPSB0YWcuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyID0gZnJlZUVsZW1lbnQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyZWVFbGVtZW50LmlubmVySFRNTCA9ICgoZmlyc3QgfHwgIWh0bWwgfHwgIWlubmVyIHx8IC88YnI+JC9pLnRlc3QoaHRtbCkpID8gaHRtbCA6IGh0bWwgKyAnPEJSPicpICsgaW5uZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZyZWVFbGVtZW50LCBmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGYubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIGZyZWVFbGVtZW50Lm5vZGVOYW1lID09PSBuZXh0Lm5vZGVOYW1lICYmIHV0aWwuaXNTYW1lQXR0cmlidXRlcyhmcmVlRWxlbWVudCwgbmV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVFbGVtZW50LmlubmVySFRNTCArPSAnPEJSPicgKyBuZXh0LmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShuZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGZyZWVFbGVtZW50LnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgJiYgZnJlZUVsZW1lbnQubm9kZU5hbWUgPT09IHByZXYubm9kZU5hbWUgJiYgdXRpbC5pc1NhbWVBdHRyaWJ1dGVzKGZyZWVFbGVtZW50LCBwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldi5pbm5lckhUTUwgKz0gJzxCUj4nICsgZnJlZUVsZW1lbnQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGZyZWVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0NvbXApIHV0aWwucmVtb3ZlSXRlbShmKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISFodG1sKSBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGZvY3VzRWxlbWVudCwgMCwgZm9jdXNFbGVtZW50LCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZXBsYWNlIGZvcm1hdFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBtb2RpZmllZEZvcm1zdHMubGVuZ3RoLCBub2RlLCBuZXdGb3JtYXQ7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBtb2RpZmllZEZvcm1zdHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IHZhbHVlLnRvTG93ZXJDYXNlKCkgfHwgKG5vZGUuY2xhc3NOYW1lLm1hdGNoKC8oXFxzfF4pX19zZV9fZm9ybWF0X19bXlxcc10rLykgfHwgWycnXSlbMF0udHJpbSgpICE9PSBjbGFzc05hbWUpICYmICF1dGlsLmlzQ29tcG9uZW50KG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Zvcm1hdCA9IHRhZy5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlGb3JtYXRBdHRyaWJ1dGVzKG5ld0Zvcm1hdCwgbm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Zvcm1hdC5pbm5lckhUTUwgPSBub2RlLmlubmVySFRNTDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0Zvcm1hdCwgbm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIGZpcnN0ID0gbmV3Rm9ybWF0IHx8IG5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGxlbiAtIDEpIGxhc3QgPSBuZXdGb3JtYXQgfHwgbm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdGb3JtYXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKHV0aWwuZ2V0Tm9kZUZyb21QYXRoKGZpcnN0UGF0aCwgZmlyc3QpLCBzdGFydE9mZnNldCwgdXRpbC5nZXROb2RlRnJvbVBhdGgobGFzdFBhdGgsIGxhc3QpLCBlbmRPZmZzZXQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE5NyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdsaW5lSGVpZ2h0JyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQubGluZUhlaWdodCA9IHtcclxuICAgICAgICAgICAgX3NpemVMaXN0OiBudWxsLFxyXG4gICAgICAgICAgICBjdXJyZW50U2l6ZTogLTFcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuICAgICAgICBsZXQgbGlzdFVsID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yKCd1bCcpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGxpc3RVbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICBjb250ZXh0LmxpbmVIZWlnaHQuX3NpemVMaXN0ID0gbGlzdFVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsLCBsaXN0VWwgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllcic7XHJcblxyXG4gICAgICAgIGNvbnN0IHNpemVMaXN0ID0gIW9wdGlvbi5saW5lSGVpZ2h0cyA/IFtcclxuICAgICAgICAgICAge3RleHQ6ICcxJywgdmFsdWU6IDF9LFxyXG4gICAgICAgICAgICB7dGV4dDogJzEuMTUnLCB2YWx1ZTogMS4xNX0sXHJcbiAgICAgICAgICAgIHt0ZXh0OiAnMS41JywgdmFsdWU6IDEuNX0sXHJcbiAgICAgICAgICAgIHt0ZXh0OiAnMicsIHZhbHVlOiAyfVxyXG4gICAgICAgIF0gOiBvcHRpb24ubGluZUhlaWdodHM7XHJcblxyXG4gICAgICAgIGxldCBsaXN0ID0gJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJkZWZhdWx0X3ZhbHVlIHNlLWJ0bi1saXN0XCIgdGl0bGU9XCInICsgbGFuZy50b29sYmFyLmRlZmF1bHQgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLnRvb2xiYXIuZGVmYXVsdCArICdcIj4oJyArIGxhbmcudG9vbGJhci5kZWZhdWx0ICsgJyk8L2J1dHRvbj48L2xpPic7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNpemVMaXN0Lmxlbmd0aCwgc2l6ZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHNpemUgPSBzaXplTGlzdFtpXTtcclxuICAgICAgICAgICAgbGlzdCArPSAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3RcIiBkYXRhLXZhbHVlPVwiJyArIHNpemUudmFsdWUgKyAnXCIgdGl0bGU9XCInICsgc2l6ZS50ZXh0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgc2l6ZS50ZXh0ICsgJ1wiPicgKyBzaXplLnRleHQgKyAnPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaXN0ICs9ICc8L3VsPjwvZGl2Pic7XHJcblxyXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gbGlzdDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBzdWJtZW51XHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgbGluZUhlaWdodENvbnRleHQgPSB0aGlzLmNvbnRleHQubGluZUhlaWdodDtcclxuICAgICAgICBjb25zdCBzaXplTGlzdCA9IGxpbmVIZWlnaHRDb250ZXh0Ll9zaXplTGlzdDtcclxuICAgICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLnV0aWwuZ2V0Rm9ybWF0RWxlbWVudCh0aGlzLmdldFNlbGVjdGlvbk5vZGUoKSk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFNpemUgPSAhZm9ybWF0ID8gJycgOiBmb3JtYXQuc3R5bGUubGluZUhlaWdodCArICcnO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudFNpemUgIT09IGxpbmVIZWlnaHRDb250ZXh0LmN1cnJlbnRTaXplKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzaXplTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTaXplID09PSBzaXplTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhzaXplTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3Moc2l6ZUxpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGluZUhlaWdodENvbnRleHQuY3VycmVudFNpemUgPSBjdXJyZW50U2l6ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoIS9eQlVUVE9OJC9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCAnJztcclxuICAgICAgICBjb25zdCBmb3JtYXRzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmb3JtYXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvcm1hdHNbaV0uc3R5bGUubGluZUhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcblxyXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAncGFyYWdyYXBoU3R5bGUnLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5wYXJhZ3JhcGhTdHlsZSA9IHtcclxuICAgICAgICAgICAgX2NsYXNzTGlzdDogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja1VwLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICBjb250ZXh0LnBhcmFncmFwaFN0eWxlLl9jbGFzc0xpc3QgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWZvcm1hdCc7XHJcblxyXG4gICAgICAgIGNvbnN0IG1lbnVMYW5nID0gY29yZS5sYW5nLm1lbnU7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdExpc3QgPSB7XHJcbiAgICAgICAgICAgIHNwYWNlZDoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbWVudUxhbmcuc3BhY2VkLFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdfX3NlX19wLXNwYWNlZCcsXHJcbiAgICAgICAgICAgICAgICBfY2xhc3M6ICcnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJvcmRlcmVkOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBtZW51TGFuZy5ib3JkZXJlZCxcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnX19zZV9fcC1ib3JkZXJlZCcsXHJcbiAgICAgICAgICAgICAgICBfY2xhc3M6ICcnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5lb246IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG1lbnVMYW5nLm5lb24sXHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ19fc2VfX3AtbmVvbicsXHJcbiAgICAgICAgICAgICAgICBfY2xhc3M6ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHBhcmFncmFwaFN0eWxlcyA9ICFvcHRpb24ucGFyYWdyYXBoU3R5bGVzIHx8IG9wdGlvbi5wYXJhZ3JhcGhTdHlsZXMubGVuZ3RoID09PSAwID8gWydzcGFjZWQnLCAnYm9yZGVyZWQnLCAnbmVvbiddIDogb3B0aW9uLnBhcmFncmFwaFN0eWxlcztcclxuXHJcbiAgICAgICAgbGV0IGxpc3QgPSAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj48dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFyYWdyYXBoU3R5bGVzLmxlbmd0aCwgcCwgbmFtZSwgYXR0cnMsIF9jbGFzczsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHAgPSBwYXJhZ3JhcGhTdHlsZXNbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0U3R5bGUgPSBkZWZhdWx0TGlzdFtwLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0U3R5bGUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgcCA9IGRlZmF1bHRTdHlsZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmFtZSA9IHAubmFtZTtcclxuICAgICAgICAgICAgYXR0cnMgPSBwLmNsYXNzID8gJyBjbGFzcz1cIicgKyBwLmNsYXNzICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgICAgICBfY2xhc3MgPSBwLl9jbGFzcztcclxuXHJcbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0JyArIChfY2xhc3MgPyAnICcgKyBfY2xhc3M6ICcnKSArICdcIiBkYXRhLXZhbHVlPVwiJyArIHAuY2xhc3MgKyAnXCIgdGl0bGU9XCInICsgbmFtZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIG5hbWUgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYnICsgYXR0cnMgKyAnPicgKyBuYW1lICsgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdCArPSAnPC91bD48L2Rpdj4nO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHBhcmFncmFwaENvbnRleHQgPSB0aGlzLmNvbnRleHQucGFyYWdyYXBoU3R5bGU7XHJcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoTGlzdCA9IHBhcmFncmFwaENvbnRleHQuX2NsYXNzTGlzdDtcclxuICAgICAgICBjb25zdCBjdXJyZW50Rm9ybWF0ID0gdGhpcy51dGlsLmdldEZvcm1hdEVsZW1lbnQodGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFyYWdyYXBoTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy51dGlsLmhhc0NsYXNzKGN1cnJlbnRGb3JtYXQsIHBhcmFncmFwaExpc3RbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MocGFyYWdyYXBoTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHBhcmFncmFwaExpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcGlja1VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICB3aGlsZSAoIS9eVUwkL2kudGVzdCh0YXJnZXQudGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkgYnJlYWs7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgc2VsZWN0ZWRGb3Jtc3RzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKCk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkRm9ybXN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRm9ybXN0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3Jtc3RzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2hhbmdlIGZvcm1hdCBjbGFzc1xyXG4gICAgICAgIGNvbnN0IHRvZ2dsZUNsYXNzID0gdGhpcy51dGlsLmhhc0NsYXNzKHRhcmdldCwgJ2FjdGl2ZScpID8gdGhpcy51dGlsLnJlbW92ZUNsYXNzLmJpbmQodGhpcy51dGlsKSA6IHRoaXMudXRpbC5hZGRDbGFzcy5iaW5kKHRoaXMudXRpbCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybXN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxlY3RlZEZvcm1zdHNbaV0sIHZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG5cclxuICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ3RleHRTdHlsZScsXHJcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0LnRleHRTdHlsZSA9IHtcclxuICAgICAgICAgICAgX3N0eWxlTGlzdDogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG4gICAgICAgIGxldCBsaXN0VWwgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJyk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgbGlzdFVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5waWNrdXAuYmluZChjb3JlKSk7XHJcblxyXG4gICAgICAgIGNvbnRleHQudGV4dFN0eWxlLl9zdHlsZUxpc3QgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsLCBsaXN0VWwgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWZvcm1hdCc7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRMaXN0ID0ge1xyXG4gICAgICAgICAgICBjb2RlOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBjb3JlLmxhbmcubWVudS5jb2RlLFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdfX3NlX190LWNvZGUnLFxyXG4gICAgICAgICAgICAgICAgdGFnOiAnY29kZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRyYW5zbHVjZW50OiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBjb3JlLmxhbmcubWVudS50cmFuc2x1Y2VudCxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiAnb3BhY2l0eTogMC41OycsXHJcbiAgICAgICAgICAgICAgICB0YWc6ICdzcGFuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hhZG93OiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBjb3JlLmxhbmcubWVudS5zaGFkb3csXHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ19fc2VfX3Qtc2hhZG93JyxcclxuICAgICAgICAgICAgICAgIHRhZzogJ3NwYW4nLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBzdHlsZUxpc3QgPSAhb3B0aW9uLnRleHRTdHlsZXMgPyBjb3JlLl93Lk9iamVjdC5rZXlzKGRlZmF1bHRMaXN0KSA6IG9wdGlvbi50ZXh0U3R5bGVzO1xyXG5cclxuICAgICAgICBsZXQgbGlzdCA9ICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1pbm5lclwiPjx1bCBjbGFzcz1cInNlLWxpc3QtYmFzaWNcIj4nO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdHlsZUxpc3QubGVuZ3RoLCB0LCB0YWcsIG5hbWUsIGF0dHJzLCBjb21tYW5kLCB2YWx1ZSwgX2NsYXNzOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdCA9IHN0eWxlTGlzdFtpXTtcclxuICAgICAgICAgICAgYXR0cnMgPSAnJywgdmFsdWUgPSAnJywgY29tbWFuZCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFN0eWxlID0gZGVmYXVsdExpc3RbdC50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdFN0eWxlKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIHQgPSBkZWZhdWx0U3R5bGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5hbWUgPSB0Lm5hbWU7XHJcbiAgICAgICAgICAgIHRhZyA9IHQudGFnIHx8ICdzcGFuJztcclxuICAgICAgICAgICAgX2NsYXNzID0gdC5fY2xhc3M7XHJcblxyXG4gICAgICAgICAgICBpZiAodC5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cnMgKz0gJyBzdHlsZT1cIicgKyB0LnN0eWxlICsgJ1wiJztcclxuICAgICAgICAgICAgICAgIHZhbHVlICs9IHQuc3R5bGUucmVwbGFjZSgvOlteO10rKDt8JClcXHMqL2csICcsJyk7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuY2xhc3MpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJzICs9ICcgY2xhc3M9XCInICsgdC5jbGFzcyArICdcIic7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAnLicgKyB0LmNsYXNzLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcsLicpO1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKCdjbGFzcycpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLywkLywgJycpO1xyXG5cclxuICAgICAgICAgICAgbGlzdCArPSAnPGxpPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3QnICsgKF9jbGFzcyA/ICcgJyArIF9jbGFzczogJycpICsgJ1wiIGRhdGEtY29tbWFuZD1cIicgKyB0YWcgKyAnXCIgZGF0YS12YWx1ZT1cIicgKyB2YWx1ZSArICdcIiB0aXRsZT1cIicgKyBuYW1lICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbmFtZSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPCcgKyB0YWcgKyBhdHRycyArICc+JyArIG5hbWUgKyAgJzwvJyArIHRhZyArICc+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaXN0ICs9ICc8L3VsPjwvZGl2Pic7XHJcblxyXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gbGlzdDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBzdWJtZW51XHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuICAgICAgICBjb25zdCB0ZXh0U3R5bGVDb250ZXh0ID0gdGhpcy5jb250ZXh0LnRleHRTdHlsZTtcclxuICAgICAgICBjb25zdCBzdHlsZUJ1dHRvbkxpc3QgPSB0ZXh0U3R5bGVDb250ZXh0Ll9zdHlsZUxpc3Q7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uTm9kZSA9IHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3R5bGVCdXR0b25MaXN0Lmxlbmd0aCwgYnRuLCBkYXRhLCBhY3RpdmU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBidG4gPSBzdHlsZUJ1dHRvbkxpc3RbaV07XHJcbiAgICAgICAgICAgIGRhdGEgPSBidG4uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IHYgPSAwLCBub2RlLCB2YWx1ZTsgdiA8IGRhdGEubGVuZ3RoOyB2KyspIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHdoaWxlIChub2RlICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChub2RlKSAmJiAhdXRpbC5pc0NvbXBvbmVudChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGJ0bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkYXRhW3ZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15cXC4vLnRlc3QodmFsdWUpID8gdXRpbC5oYXNDbGFzcyhub2RlLCB2YWx1ZS5yZXBsYWNlKC9eXFwuLywgJycpKSA6ICEhbm9kZS5zdHlsZVt2YWx1ZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghYWN0aXZlKSBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWN0aXZlID8gdXRpbC5hZGRDbGFzcyhidG4sICdhY3RpdmUnKSA6IHV0aWwucmVtb3ZlQ2xhc3MoYnRuLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0sXHJcblxyXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgbGV0IGNvbW1hbmQgPSBudWxsLCB0YWcgPSBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdoaWxlICghY29tbWFuZCAmJiAhL1VML2kudGVzdCh0YXJnZXQudGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICBpZiAoY29tbWFuZCkge1xyXG4gICAgICAgICAgICAgICAgdGFnID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghY29tbWFuZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBjaGVja1N0eWxlcyA9IHRhZy5zdHlsZS5jc3NUZXh0LnJlcGxhY2UoLzouKyg7fCQpL2csICcsJykuc3BsaXQoJywnKTtcclxuICAgICAgICBjaGVja1N0eWxlcy5wb3AoKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2xhc3NlcyA9IHRhZy5jbGFzc0xpc3Q7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNsYXNzZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY2hlY2tTdHlsZXMucHVzaCgnLicgKyBjbGFzc2VzW2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld05vZGUgPSB0aGlzLnV0aWwuaGFzQ2xhc3ModGFyZ2V0LCAnYWN0aXZlJykgPyBudWxsIDogdGFnLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlTm9kZXMgPSBuZXdOb2RlID8gbnVsbCA6IFt0YWcubm9kZU5hbWVdO1xyXG4gICAgICAgIHRoaXMubm9kZUNoYW5nZShuZXdOb2RlLCBjaGVja1N0eWxlcywgcmVtb3ZlTm9kZXMsIHRydWUpO1xyXG5cclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBmaWxlQnJvd3NlciBmcm9tICcuLi9tb2R1bGVzL2ZpbGVCcm93c2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdpbWFnZUdhbGxlcnknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICovXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29yZS5hZGRNb2R1bGUoW2ZpbGVCcm93c2VyXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5pbWFnZUdhbGxlcnkgPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBjb3JlLmxhbmcudG9vbGJhci5pbWFnZUdhbGxlcnksIC8vIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZUJyb3dzZXIgLSBGaWxlIGJyb3dzZXIgd2luZG93IHRpdGxlLlxyXG4gICAgICAgICAgICB1cmw6IGNvcmUub3B0aW9ucy5pbWFnZUdhbGxlcnlVcmwsIC8vIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZUJyb3dzZXIgLSBGaWxlIHNlcnZlciB1cmwuXHJcbiAgICAgICAgICAgIGhlYWRlcjogY29yZS5vcHRpb25zLmltYWdlR2FsbGVyeUhlYWRlciwgLy8gQFJlcXVpcmVkIEBPdmVycmlkZSBmaWxlQnJvd3NlciAtIEZpbGUgc2VydmVyIGh0dHAgaGVhZGVyLlxyXG4gICAgICAgICAgICBsaXN0Q2xhc3M6ICdzZS1pbWFnZS1saXN0JywgLy8gQFJlcXVpcmVkIEBPdmVycmlkZSBmaWxlQnJvd3NlciAtIENsYXNzIG5hbWUgb2YgbGlzdCBkaXYuXHJcbiAgICAgICAgICAgIGl0ZW1UZW1wbGF0ZUhhbmRsZXI6IHRoaXMuZHJhd0l0ZW1zLCAvLyBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVCcm93c2VyIC0gRnVuY3Rpb24gdGhhdCBkZWZpbmVzIHRoZSBIVE1MIG9mIGFuIGZpbGUgaXRlbS5cclxuICAgICAgICAgICAgc2VsZWN0b3JIYW5kbGVyOiB0aGlzLnNldEltYWdlLmJpbmQoY29yZSksIC8vIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZUJyb3dzZXIgLSBGdW5jdGlvbiB0aGF0IGFjdGlvbiB3aGVuIGl0ZW0gY2xpY2suXHJcbiAgICAgICAgICAgIGNvbHVtblNpemU6IDQgLy8gQE9wdGlvbiBAT3ZlcnJpZGUgZmlsZUJyb3dzZXIgLSBOdW1iZXIgb2YgXCJkaXYuc2UtZmlsZS1pdGVtLWNvbHVtblwiIHRvIGJlIGNyZWF0ZWQgKGRlZmF1bHQ6IDQpXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBmaWxlQnJvd3NlclxyXG4gICAgICogQGRlc2NyaXB0aW9uIE9wZW4gYSBmaWxlIGJyb3dzZXIuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHNlbGVjdG9ySGFuZGxlciBXaGVuIHRoZSBmdW5jdGlvbiBjb21lcyBhcyBhbiBhcmd1bWVudCB2YWx1ZSwgaXQgc3Vic3RpdHV0ZXMgXCJjb250ZXh0LnNlbGVjdG9ySGFuZGxlclwiLlxyXG4gICAgICovXHJcbiAgICBvcGVuOiBmdW5jdGlvbiAoc2VsZWN0b3JIYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLm9wZW4uY2FsbCh0aGlzLCAnaW1hZ2VHYWxsZXJ5Jywgc2VsZWN0b3JIYW5kbGVyKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVCcm93c2VyXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRGVmaW5lIHRoZSBIVE1MIG9mIHRoZSBpdGVtIHRvIGJlIHB1dCBpbiBcImRpdi5zZS1maWxlLWl0ZW0tY29sdW1uXCIuXHJcbiAgICAgKiBGb3JtYXQ6IFtcclxuICAgICAqICAgICAgeyBzcmM6IFwiaW1hZ2Ugc3JjXCIsIG5hbWU6IFwibmFtZShAb3B0aW9uKVwiLCBhbHQ6IFwiaW1hZ2UgYWx0KEBvcHRpb24pXCIsIHRhZzogXCJ0YWcgbmFtZShAb3B0aW9uKVwiIH1cclxuICAgICAqIF1cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIEl0ZW0gb2YgdGhlIHJlc3BvbnNlIGRhdGEncyBhcnJheVxyXG4gICAgICovXHJcbiAgICBkcmF3SXRlbXM6IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgY29uc3Qgc3JjTmFtZSA9IGl0ZW0uc3JjLnNwbGl0KCcvJykucG9wKCk7XHJcbiAgICAgICAgcmV0dXJuICAnPGRpdiBjbGFzcz1cInNlLWZpbGUtaXRlbS1pbWdcIj48aW1nIHNyYz1cIicgKyAoaXRlbS50aHVtYm5haWwgfHwgaXRlbS5zcmMpICsgJ1wiIGFsdD1cIicgKyAoaXRlbS5hbHQgfHwgc3JjTmFtZSkgKyAnXCIgZGF0YS1jb21tYW5kPVwicGlja1wiIGRhdGEtdmFsdWU9XCInICsgKGl0ZW0uc3JjIHx8IGl0ZW0udGh1bWJuYWlsKSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWZpbGUtaW1nLW5hbWUgc2UtZmlsZS1uYW1lLWJhY2tcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWZpbGUtaW1nLW5hbWUgX19zZV9faW1nX25hbWVcIj4nICsgKGl0ZW0ubmFtZSB8fCBzcmNOYW1lKSArICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRJbWFnZTogZnVuY3Rpb24gKHRhcmdldCwgZmlsZU5hbWUpIHtcclxuICAgICAgICB0aGlzLmNhbGxQbHVnaW4oJ2ltYWdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0ge25hbWU6IGZpbGVOYW1lLCBzaXplOiAwfTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmNyZWF0ZV9pbWFnZS5jYWxsKHRoaXMsIHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSwgbnVsbCwgdGhpcy5jb250ZXh0LmltYWdlLl9vcmlnaW5fdywgdGhpcy5jb250ZXh0LmltYWdlLl9vcmlnaW5faCwgJ25vbmUnLCBmaWxlLCB0YXJnZXQuYWx0KTtcclxuICAgICAgICB9LmJpbmQodGhpcyksIG51bGwpO1xyXG4gICAgfVxyXG59OyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMjAgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgIC8vIHJ0bCBpY29uXHJcbiAgIHJ0bDoge1xyXG4gICAgICBpdGFsaWM6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwLjUgMTUuOFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PHBhdGggZD1cIk0wLjMsMC4xYzAuMywwLDAuNSwwLDAuNywwYzEsMC4xLDEuNywwLjEsMi4yLDAuMUg0TDcuMiwwbDAuMiwxLjFIN2MtMC41LDAtMSwwLjEtMS41LDAuM3YwLjRsMC4zLDEuOUw2LDQuNEw2LjMsNiBsMC4xLDAuNGwwLjEsMC41YzAuMSwwLjIsMC4xLDAuNCwwLjIsMC43czAuMSwwLjYsMC4yLDAuOUw3LDkuMWwwLjYsMi44bDAuMywxLjRjMC4xLDAuNCwwLjIsMC43LDAuNCwxYzAuNCwwLjIsMC44LDAuMywxLjIsMC40IGwwLjgsMC4ybDAuMiwwLjlsLTEuMSwwYy0wLjktMC4xLTEuNS0wLjEtMS44LTAuMWgtMmMtMC45LDAuMS0xLjQsMC4yLTEuNSwwLjJjLTAuMSwwLTAuMiwwLTAuMywwSDMuNGMtMC4xLDAtMC4yLDAtMC4yLDAgbC0wLjEtMC40YzAtMC4yLTAuMS0wLjQtMC4xLTAuNmwwLjctMC4xYzAuNCwwLDAuOC0wLjEsMS4yLTAuMmMwLTAuMSwwLTAuMiwwLTAuM2wtMC4xLTAuNWwtMC40LTIuNEw0LDkuNkwzLjQsNi40IEMzLjIsNS43LDMsNC43LDIuNywzLjNjMC0wLjMtMC4xLTAuNS0wLjEtMC44QzIuNSwyLjEsMi40LDEuOSwyLjMsMS42QzIsMS40LDEuNiwxLjMsMS4zLDEuMkMwLjksMS4yLDAuNSwxLjEsMC4yLDAuOUwwLDAuNEwwLDAgTDAuMywwLjFMMC4zLDAuMXpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgICAgIGluZGVudDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNyAxMi40XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48Zz48Zz48cGF0aCBkPVwiTTE1LjUsMTAuMUwxNS41LDEwLjFjMC4xLDAsMC4zLDAuMSwwLjMsMC4zdjEuN2MwLDAuMSwwLDAuMS0wLjEsMC4yYy0wLjEsMC4xLTAuMSwwLjEtMC4yLDAuMWwtMTUuMiwwIGMtMC4xLDAtMC4xLDAtMC4yLTAuMUMwLDEyLjIsMCwxMi4yLDAsMTIuMWwwLTEuN2MwLTAuMSwwLTAuMSwwLjEtMC4yYzAuMS0wLjEsMC4xLTAuMSwwLjItMC4xQzAuMywxMC4xLDE1LjUsMTAuMSwxNS41LDEwLjF6IE05LjgsNi43YzAuMSwwLDAuMSwwLDAuMiwwLjFDMTAuMSw2LjksMTAuMSw3LDEwLjEsN3YxLjdjMCwwLjEsMCwwLjItMC4xLDAuMkMxMCw5LDkuOSw5LDkuOCw5TDAuMyw5QzAuMiw5LDAuMSw5LDAuMSw4LjkgQzAsOC45LDAsOC44LDAsOC43VjdDMCw3LDAsNi45LDAuMSw2LjhjMC4xLTAuMSwwLjEtMC4xLDAuMi0wLjFDMC4zLDYuNyw5LjgsNi43LDkuOCw2Ljd6IE0wLjMsMy40aDkuNmgwYzAuMSwwLDAuMywwLjEsMC4zLDAuMyB2MS43djBjMCwwLjEtMC4xLDAuMy0wLjMsMC4zSDAuM2MtMC4xLDAtMC4xLDAtMC4yLTAuMUMwLDUuNSwwLDUuNCwwLDUuM1YzLjZjMC0wLjEsMC0wLjEsMC4xLTAuMkMwLjEsMy40LDAuMiwzLjQsMC4zLDMuNCBMMC4zLDMuNHogTTAuMywwbDE1LjIsMGMwLjEsMCwwLjEsMCwwLjIsMC4xYzAuMSwwLjEsMC4xLDAuMSwwLjEsMC4yVjJjMCwwLjEsMCwwLjItMC4xLDAuMmMtMC4xLDAuMS0wLjEsMC4xLTAuMiwwLjFIMC4zIGMtMC4xLDAtMC4xLDAtMC4yLTAuMUMwLDIuMSwwLDIsMCwybDAtMS43YzAtMC4xLDAtMC4xLDAuMS0wLjJDMC4xLDAsMC4yLDAsMC4zLDB6XCIvPjwvZz48cGF0aCBkPVwiTTEzLjEsMy41TDE1LjcsNmMwLjEsMC4xLDAuMSwwLjMsMCwwLjRsLTIuNSwyLjVDMTMuMSw5LDEzLDksMTIuOSw5Yy0wLjEsMC0wLjEsMC0wLjItMC4xYy0wLjEtMC4xLTAuMS0wLjEtMC4xLTAuMlYzLjcgYzAtMC4xLDAtMC4yLDAuMS0wLjJjMC4xLTAuMSwwLjEtMC4xLDAuMi0wLjFDMTMsMy40LDEzLjEsMy40LDEzLjEsMy41elwiLz48L2c+PC9zdmc+JyxcclxuICAgICAgb3V0ZGVudDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNyAxMi40XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48Zz48Zz48cGF0aCBkPVwiTTE1LjUsMTAuMUwxNS41LDEwLjFjMC4xLDAsMC4zLDAuMSwwLjMsMC4zdjEuN2MwLDAuMSwwLDAuMS0wLjEsMC4yYy0wLjEsMC4xLTAuMSwwLjEtMC4yLDAuMWwtMTUuMiwwIGMtMC4xLDAtMC4xLDAtMC4yLTAuMUMwLDEyLjIsMCwxMi4yLDAsMTIuMWwwLTEuN2MwLTAuMSwwLTAuMSwwLjEtMC4yYzAuMS0wLjEsMC4xLTAuMSwwLjItMC4xQzAuMywxMC4xLDE1LjUsMTAuMSwxNS41LDEwLjF6IE05LjgsNi43YzAuMSwwLDAuMSwwLDAuMiwwLjFDMTAuMSw2LjksMTAuMSw3LDEwLjEsN3YxLjdjMCwwLjEsMCwwLjItMC4xLDAuMkMxMCw5LDkuOSw5LDkuOCw5TDAuMyw5QzAuMiw5LDAuMSw5LDAuMSw4LjkgQzAsOC45LDAsOC44LDAsOC43VjdDMCw3LDAsNi45LDAuMSw2LjhjMC4xLTAuMSwwLjEtMC4xLDAuMi0wLjFDMC4zLDYuNyw5LjgsNi43LDkuOCw2Ljd6IE0wLjMsMy40aDkuNmgwYzAuMSwwLDAuMywwLjEsMC4zLDAuMyB2MS43djBjMCwwLjEtMC4xLDAuMy0wLjMsMC4zSDAuM2MtMC4xLDAtMC4xLDAtMC4yLTAuMUMwLDUuNSwwLDUuNCwwLDUuM1YzLjZjMC0wLjEsMC0wLjEsMC4xLTAuMkMwLjEsMy40LDAuMiwzLjQsMC4zLDMuNCBMMC4zLDMuNHogTTAuMywwbDE1LjIsMGMwLjEsMCwwLjEsMCwwLjIsMC4xYzAuMSwwLjEsMC4xLDAuMSwwLjEsMC4yVjJjMCwwLjEsMCwwLjItMC4xLDAuMmMtMC4xLDAuMS0wLjEsMC4xLTAuMiwwLjFIMC4zIGMtMC4xLDAtMC4xLDAtMC4yLTAuMUMwLDIuMSwwLDIsMCwybDAtMS43YzAtMC4xLDAtMC4xLDAuMS0wLjJDMC4xLDAsMC4yLDAsMC4zLDB6XCIvPjwvZz48cGF0aCBkPVwiTTE1LjUsMy40YzAuMSwwLDAuMSwwLDAuMiwwLjFjMC4xLDAuMSwwLjEsMC4xLDAuMSwwLjJ2NS4xYzAsMC4xLDAsMC4xLTAuMSwwLjJDMTUuNiw5LDE1LjUsOSwxNS41LDkgYy0wLjEsMC0wLjEsMC0wLjItMC4xbC0yLjUtMi41Yy0wLjEtMC4xLTAuMS0wLjMsMC0wLjRsMi41LTIuNUMxNS4zLDMuNCwxNS40LDMuNCwxNS41LDMuNHpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgICAgIGxpc3RfYnVsbGV0czogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNyAxMi40XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48Zz48cGF0aCBkPVwiTTEyLjQsMTAuN2MwLDAuOSwwLjgsMS43LDEuNywxLjdjMC45LDAsMS43LTAuOCwxLjctMS43QzE1LjcsOS44LDE1LDksMTQuMSw5Yy0wLjQsMC0wLjksMC4yLTEuMiwwLjUgQzEyLjUsOS44LDEyLjQsMTAuMiwxMi40LDEwLjdDMTIuNCwxMC43LDEyLjQsMTAuNywxMi40LDEwLjd6IE0xMi40LDYuMmMwLDAuOSwwLjgsMS43LDEuNywxLjdjMC40LDAsMC45LTAuMiwxLjItMC41IGMwLjMtMC4zLDAuNC0wLjcsMC40LTEuMWMwLTAuOS0wLjctMS43LTEuNi0xLjdDMTMuMSw0LjYsMTIuNCw1LjMsMTIuNCw2LjJDMTIuNCw2LjIsMTIuNCw2LjIsMTIuNCw2LjJ6IE0wLDkuOHYxLjcgYzAsMC4xLDAsMC4xLDAuMSwwLjJjMC4xLDAuMSwwLjEsMC4xLDAuMiwwLjFsMTAuNywwYzAsMCwwLDAsMCwwYzAuMSwwLDAuMy0wLjEsMC4zLTAuM1Y5LjhjMC0wLjEsMC0wLjEtMC4xLTAuMiBDMTEuMSw5LjYsMTEsOS42LDExLDkuNmwtMTAuNywwYy0wLjEsMC0wLjEsMC0wLjIsMC4xQzAsOS43LDAsOS44LDAsOS44TDAsOS44eiBNMTIuOSwyLjljMC4zLDAuMywwLjcsMC41LDEuMiwwLjUgYzAuNCwwLDAuOS0wLjIsMS4yLTAuNWMwLjctMC43LDAuNy0xLjcsMC0yLjRDMTQuOSwwLjIsMTQuNSwwLDE0LjEsMGMtMC40LDAtMC45LDAuMi0xLjIsMC41Yy0wLjMsMC4zLTAuNSwwLjctMC41LDEuMiBDMTIuNCwyLjEsMTIuNSwyLjYsMTIuOSwyLjl6IE0wLDUuM1Y3YzAsMC4xLDAsMC4xLDAuMSwwLjJjMC4xLDAuMSwwLjEsMC4xLDAuMiwwLjFIMTFjMC4xLDAsMC4xLDAsMC4yLTAuMSBjMC4xLTAuMSwwLjEtMC4xLDAuMS0wLjJWNS4zYzAsMCwwLDAsMCwwYzAtMC4xLTAuMS0wLjMtMC4zLTAuM0gwLjNjLTAuMSwwLTAuMSwwLTAuMiwwLjFDMCw1LjIsMCw1LjMsMCw1LjNMMCw1LjN6IE0wLDAuOHYxLjcgYzAsMC4xLDAsMC4xLDAuMSwwLjJjMC4xLDAuMSwwLjEsMC4xLDAuMiwwLjFoMTAuN2MwLjEsMCwwLjEsMCwwLjItMC4xYzAsMCwwLjEtMC4xLDAuMS0wLjJWMC44YzAtMC4xLDAtMC4xLTAuMS0wLjIgYzAtMC4xLTAuMS0wLjEtMC4yLTAuMUgwLjNjLTAuMSwwLTAuMSwwLTAuMiwwLjFDMCwwLjcsMCwwLjgsMCwwLjhMMCwwLjh6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICAgICBsaXN0X251bWJlcjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNyAxNS43XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48Zz48cGF0aCBkPVwiTTAsMTEuNWwwLDEuN2MwLDAuMSwwLDAuMSwwLjEsMC4yYzAuMSwwLjEsMC4xLDAuMSwwLjIsMC4xSDExYzAuMSwwLDAuMiwwLDAuMi0wLjFjMC4xLTAuMSwwLjEtMC4xLDAuMS0wLjJ2LTEuNyBjMC0wLjEsMC0wLjEtMC4xLTAuMmMtMC4xLTAuMS0wLjEtMC4xLTAuMi0wLjFIMC4zYy0wLjEsMC0wLjIsMC0wLjIsMC4xQzAsMTEuNCwwLDExLjQsMCwxMS41TDAsMTEuNXogTTAsOC43YzAsMC4xLDAsMC4xLDAuMSwwLjIgQzAuMSw4LjksMC4yLDksMC4zLDlIMTFjMC4xLDAsMC4yLDAsMC4yLTAuMWMwLjEtMC4xLDAuMS0wLjEsMC4xLTAuMlY3YzAtMC4xLDAtMC4xLTAuMS0wLjJjLTAuMS0wLjEtMC4xLTAuMS0wLjItMC4xbC0xMC43LDAgYy0wLjEsMC0wLjIsMC0wLjIsMC4xQzAsNi44LDAsNi45LDAsN0MwLDcsMCw4LjcsMCw4Ljd6IE0wLDIuNXYxLjdjMCwwLjEsMCwwLjEsMC4xLDAuMmMwLDAsMC4xLDAuMSwwLjIsMC4xbDEwLjcsMCBjMC4xLDAsMC4yLDAsMC4yLTAuMWMwLjEtMC4xLDAuMS0wLjEsMC4xLTAuMlYyLjRjMC0wLjEsMC0wLjEtMC4xLTAuMmMtMC4xLDAtMC4xLDAtMC4yLDBIMC4zYy0wLjEsMC0wLjEsMC0wLjIsMCBDMCwyLjMsMCwyLjQsMCwyLjVMMCwyLjV6XCIvPjwvZz48cGF0aCBkPVwiTTE1LjYsMTQuMmMwLTAuMy0wLjEtMC42LTAuMy0wLjhjLTAuMi0wLjItMC40LTAuNC0wLjctMC40bDAuOS0xdi0wLjhoLTIuOXYxLjNoMC45di0wLjVoMC45bDAsMGMtMC4xLDAuMS0wLjIsMC4yLTAuMywwLjMgcy0wLjIsMC4zLTAuNCwwLjVsLTAuMywwLjNsMC4yLDAuNWMwLjYsMCwwLjksMC4xLDAuOSwwLjVjMCwwLjEtMC4xLDAuMy0wLjIsMC40Yy0wLjEsMC4xLTAuMywwLjEtMC40LDAuMWMtMC4zLDAtMC43LTAuMS0wLjktMC4zIGwtMC41LDAuOGMwLjQsMC40LDAuOSwwLjYsMS41LDAuNmMwLjQsMCwwLjktMC4xLDEuMi0wLjRDMTUuNSwxNS4xLDE1LjYsMTQuNywxNS42LDE0LjJ6XCIvPjxwYXRoIGQ9XCJNMTUuNiw4LjdoLTAuOXYwLjVoLTEuMWMwLTAuMiwwLjItMC40LDAuNC0wLjVjMC4yLTAuMiwwLjQtMC4zLDAuNy0wLjRjMC4zLTAuMiwwLjUtMC4zLDAuNy0wLjZjMC4yLTAuMiwwLjMtMC41LDAuMy0wLjggYzAtMC40LTAuMi0wLjgtMC41LTFjLTAuNi0wLjQtMS40LTAuNS0yLTAuMWMtMC4zLDAuMi0wLjUsMC40LTAuNiwwLjdMMTMuMyw3YzAuMS0wLjMsMC40LTAuNSwwLjctMC41YzAuMSwwLDAuMywwLDAuMywwLjEgYzAuMSwwLjEsMC4xLDAuMiwwLjEsMC4zYzAsMC4yLTAuMSwwLjMtMC4yLDAuNGMtMC4yLDAuMS0wLjMsMC4zLTAuNSwwLjRjLTAuMiwwLjEtMC40LDAuMy0wLjYsMC40Yy0wLjIsMC4yLTAuNCwwLjQtMC41LDAuNiBjLTAuMSwwLjItMC4yLDAuNS0wLjIsMC44YzAsMC4yLDAsMC4zLDAsMC41aDMuMkwxNS42LDguN0wxNS42LDguN3pcIi8+PHBhdGggZD1cIk0xNS42LDMuNmgtMVYwaC0wLjlsLTEuMiwxLjFsMC42LDAuN2MwLjItMC4xLDAuMy0wLjMsMC40LTAuNWwwLDB2Mi4yaC0wLjl2MC45aDNMMTUuNiwzLjZMMTUuNiwzLjZ6XCIvPjwvc3ZnPicsXHJcbiAgICAgIGxpbms6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjcgMTUuN1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PHBhdGggZD1cIk03LjQsOS45bDMuMSwzLjFjMC4zLDAuMywwLjgsMC41LDEuMywwLjVjMC41LDAsMC45LTAuMiwxLjMtMC41YzAsMCwwLDAsMCwwYzAuNy0wLjcsMC43LTEuOSwwLTIuNkw5LjksNy4zIGMwLTAuMSwwLTAuMiwwLTAuM0M5LjksNywxMCw3LDEwLjEsN2wyLjItMC4yYzAuMSwwLDAuMSwwLDAuMiwwLjFsMi4xLDIuMWMwLjQsMC40LDAuNywwLjgsMC45LDEuM2MwLjIsMC41LDAuMywxLDAuMywxLjUgYzAsMC41LTAuMSwxLTAuMywxLjVjLTAuOCwyLTMuMiwzLTUuMiwyLjJjLTAuNS0wLjItMC45LTAuNS0xLjMtMC45bC0yLjEtMi4xYy0wLjEsMC0wLjEtMC4xLTAuMS0wLjJMNywxMC4xQzcsMTAsNyw5LjksNy4xLDkuOSBDNy4yLDkuOCw3LjMsOS45LDcuNCw5Ljl6IE0xLjIsMS4xQzEuNiwwLjcsMiwwLjQsMi41LDAuM2MxLTAuNCwyLjEtMC40LDMuMSwwQzYsMC40LDYuNSwwLjcsNi44LDEuMUw5LDMuMkM5LDMuMyw5LjEsMy4zLDksMy40IEw4LjgsNS42YzAsMC4xLTAuMSwwLjItMC4yLDAuMmMtMC4xLDAuMS0wLjIsMC4xLTAuMywwTDUuMywyLjdDNSwyLjMsNC41LDIuMSw0LDIuMWMtMC41LDAtMC45LDAuMi0xLjMsMC41YzAsMCwwLDAsMCwwIEMyLDMuNCwyLDQuNSwyLjcsNS4ybDMuMSwzLjJjMC4xLDAuMSwwLjEsMC4yLDAsMC4zYzAsMC4xLTAuMSwwLjEtMC4yLDAuMUwzLjUsOUMzLjQsOSwzLjQsOSwzLjMsOC45TDEuMiw2LjhjMCwwLDAsMCwwLDAgQy0wLjQsNS4yLTAuNCwyLjcsMS4yLDEuMUwxLjIsMS4xeiBNMTQuMyw2aC0yLjZjMCwwLDAsMCwwLDBjLTAuMSwwLTAuMi0wLjEtMC4yLTAuMmMwLTAuMSwwLTAuMiwwLjEtMC4zbDIuNS0wLjcgYzAuMSwwLDAuMSwwLDAuMiwwYzAuMSwwLDAuMSwwLjEsMC4xLDAuMmwwLjEsMC44YzAsMC4xLDAsMC4xLTAuMSwwLjJDMTQuNSw2LDE0LjQsNiwxNC4zLDZMMTQuMyw2eiBNMTAuMiw0LjEgYzAsMC4xLTAuMSwwLjItMC4yLDAuMmwwLDBjMCwwLDAsMCwwLDBDOS44LDQuMiw5LjcsNC4xLDkuOCw0TDkuNywxLjRjMC0wLjEsMC0wLjEsMC4xLTAuMmMwLjEsMCwwLjEsMCwwLjIsMGgwLjggYzAuMSwwLDAuMSwwLDAuMiwwLjFjMCwwLjEsMCwwLjEsMCwwLjJMMTAuMiw0LjFMMTAuMiw0LjF6IE0xLjUsOS43aDEuM2gxLjNjMC4xLDAsMC4yLDAuMSwwLjIsMC4yYzAsMC4xLDAsMC4yLTAuMSwwLjNsLTIuNSwwLjYgSDEuNmMwLDAtMC4xLDAtMC4xLDBjLTAuMSwwLTAuMS0wLjEtMC4xLTAuMkwxLjIsOS45YzAtMC4xLDAtMC4xLDAuMS0wLjJjMC0wLjEsMC4xLTAuMSwwLjItMC4xTDEuNSw5Ljd6IE01LjYsMTEuNiBDNS42LDExLjYsNS42LDExLjYsNS42LDExLjZjMC0wLjEsMC4xLTAuMiwwLjMtMC4xYzAsMCwwLDAsMCwwYzAuMSwwLDAuMiwwLjEsMC4yLDAuMnYyLjZjMCwwLjEsMCwwLjEtMC4xLDAuMiBjMCwwLTAuMSwwLjEtMC4yLDAuMUw1LDE0LjVjLTAuMSwwLTAuMSwwLTAuMi0wLjFjMC0wLjEsMC0wLjEsMC0wLjJMNS42LDExLjZMNS42LDExLjZ6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICAgICB1bmxpbms6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjcgMTUuN1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PHBhdGggZD1cIk0xNC42LDE0LjZjMS42LTEuNiwxLjYtNC4xLDAtNS43bDAsMGwtMy4xLTMuMWwtMS4yLDEuNmwyLjksMi45YzAuNCwwLjQsMC42LDAuOSwwLjYsMS41YzAsMS4xLTAuOSwyLjEtMi4xLDIuMWwwLDAgYy0wLjYsMC0xLjEtMC4yLTEuNS0wLjZsLTAuNC0wLjRsLTEuNywxbDAuOCwwLjhDMTAuNCwxNi4yLDEzLDE2LjIsMTQuNiwxNC42TDE0LjYsMTQuNkwxNC42LDE0LjZ6IE0zLjYsNkMzLDUuOSwyLjYsNS41LDIuMyw1IFMxLjksNCwyLjEsMy40QzIuMywyLjksMi42LDIuNSwzLDIuMkMzLjUsMiw0LjEsMS45LDQuNiwybDMuMywxLjRsMC41LTJMNS4xLDAuMUM0LTAuMSwyLjksMCwyLDAuNUMxLjEsMS4xLDAuNCwxLjksMC4yLDMgQy0wLjEsNCwwLDUuMSwwLjYsNkMxLjEsNi45LDEuOSw3LjYsMyw3LjhsNS40LDJsMC41LTJMNi4yLDYuOUwzLjYsNnpcIi8+PC9nPjwvc3ZnPidcclxuICAgfSxcclxuICAgLy8gY29tbW9uLCBsdHIgaWNvblxyXG4gICByZWRvOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS41OSAxNC4xOFwiPjxnPjxwYXRoIGQ9XCJNMTEuNTgsMTguNDhhNi44NCw2Ljg0LDAsMSwxLDYuODUtNi44NXMwLC4yNiwwLC42N2E4LDgsMCwwLDEtLjIyLDEuNDRsLjkxLS41NWEuNTEuNTEsMCwwLDEsLjM2LDAsLjQ1LjQ1LDAsMCwxLC4yOS4yMi40Ny40NywwLDAsMSwuMDYuMzYuNDUuNDUsMCwwLDEtLjIyLjI5TDE3LjQyLDE1LjNsLS4xMiwwaC0uMjVsLS4xMi0uMDYtLjA5LS4wOS0uMDYtLjA3LDAtLjA2LS44Ny0yLjEyYS40My40MywwLDAsMSwwLS4zNy40OS40OSwwLDAsMSwuMjctLjI2LjQxLjQxLDAsMCwxLC4zNiwwLC41My41MywwLDAsMSwuMjcuMjZsLjQ0LDEuMDlhNi41MSw2LjUxLDAsMCwwLC4yNC0xLjM2LDQuNTgsNC41OCwwLDAsMCwwLS42NCw1LjgzLDUuODMsMCwwLDAtMS43My00LjE3LDUuODgsNS44OCwwLDAsMC04LjM0LDAsNS45LDUuOSwwLDAsMCw0LjE3LDEwLjA2LjUxLjUxLDAsMCwxLC4zMy4xNS40OC40OCwwLDAsMSwwLC42OC41My41MywwLDAsMS0uMzMuMTJaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQ4IC00LjU0KVwiLz48L2c+PC9zdmc+JyxcclxuICAgdW5kbzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNTkgMTQuMThcIj48Zz48cGF0aCBkPVwiTTUsMTRhLjQzLjQzLDAsMCwxLS4yMi0uMjkuNDYuNDYsMCwwLDEsLjA2LS4zNi40My40MywwLDAsMSwuMjktLjIyLjU2LjU2LDAsMCwxLC4zNiwwbC45MS41NWE4LjI3LDguMjcsMCwwLDEtLjIyLTEuNDUsNS4wNyw1LjA3LDAsMCwxLDAtLjY3QTYuODUsNi44NSwwLDEsMSwxMywxOC40N2EuNDQuNDQsMCwwLDEtLjMzLS4xMy40OC40OCwwLDAsMSwwLS42OC41MS41MSwwLDAsMSwuMzMtLjE1QTUuODksNS44OSwwLDAsMCwxNy4xNSw3LjQ1YTUuODgsNS44OCwwLDAsMC04LjMzLDAsNS44NCw1Ljg0LDAsMCwwLTEuNzMsNC4xN3MwLC4yNSwwLC42NWE2LjQ5LDYuNDksMCwwLDAsLjI0LDEuMzdsLjQ0LTEuMDlhLjU3LjU3LDAsMCwxLC4yNy0uMjYuNDEuNDEsMCwwLDEsLjM2LDAsLjUzLjUzLDAsMCwxLC4yNy4yNi40My40MywwLDAsMSwwLC4zN0w3LjgyLDE1bDAsLjA5LS4wOS4wOS0uMS4wNy0uMDYsMEg3LjI4bC0uMTMsMC0xLjA5LS42M2MtLjY1LS4zNi0xLS41Ny0xLjEtLjYzWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40OSAtNC41MylcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGJvbGQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDExLjc2IDE1Ljc1XCI+PGc+PHBhdGggZD1cIk02LjQsMy43NlYxOS41aDYuNzZhNS41NSw1LjU1LDAsMCwwLDItLjMyLDQuOTMsNC45MywwLDAsMCwxLjUyLTEsNC4yNyw0LjI3LDAsMCwwLDEuNDgtMy4zNCwzLjg3LDMuODcsMCwwLDAtLjY5LTIuMzcsNS43NCw1Ljc0LDAsMCwwLS43MS0uODMsMy40NCwzLjQ0LDAsMCwwLTEuMS0uNjUsMy42LDMuNiwwLDAsMCwxLjU4LTEuMzYsMy42NiwzLjY2LDAsMCwwLC41My0xLjkzLDMuNywzLjcsMCwwLDAtMS4yMS0yLjg3LDQuNjUsNC42NSwwLDAsMC0zLjI1LTEuMUg2LjRabTIuNDYsNi42NVY1LjU3aDMuNTJhNC45MSw0LjkxLDAsMCwxLDEuMzYuMTUsMi4zLDIuMywwLDAsMSwuODUuNDUsMi4wNiwyLjA2LDAsMCwxLC43NCwxLjcxLDIuMywyLjMsMCwwLDEtLjc4LDEuOTIsMi41NCwyLjU0LDAsMCwxLS44Ni40Niw0LjcsNC43LDAsMCwxLTEuMzIuMTVIOC44NlptMCw3LjI3VjEyLjE1SDEyLjdhNC41Niw0LjU2LDAsMCwxLDEuMzguMTcsMy40MywzLjQzLDAsMCwxLC45NS40OSwyLjI5LDIuMjksMCwwLDEsLjkyLDIsMi43MywyLjczLDAsMCwxLS44MywyLjEsMi42NiwyLjY2LDAsMCwxLS44My41OCwzLjI1LDMuMjUsMCwwLDEtMS4yNi4ySDguODZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC02LjQgLTMuNzUpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICB1bmRlcmxpbmU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDkuNzggMTUuNzRcIj48Zz48cGF0aCBkPVwiTTE0LjY0LDMuNzZoMi41MnY3LjcyYTQuNTEsNC41MSwwLDAsMS0uNTksMi4zMSwzLjc2LDMuNzYsMCwwLDEtMS43MSwxLjUzLDYuMTIsNi4xMiwwLDAsMS0yLjY0LjUzLDUsNSwwLDAsMS0zLjU3LTEuMTgsNC4xNyw0LjE3LDAsMCwxLTEuMjctMy4yNFYzLjc2SDkuOXY3LjNhMywzLDAsMCwwLC41NSwyLDIuMywyLjMsMCwwLDAsMS44My42NSwyLjI2LDIuMjYsMCwwLDAsMS44LS42NSwzLjA5LDMuMDksMCwwLDAsLjU1LTJWMy43NlptMi41MiwxMy4zMVYxOS41SDcuMzlWMTcuMDhoOS43N1pcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTcuMzggLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBpdGFsaWM6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwLjQ5IDE1Ljc2XCI+PGc+PHBhdGggZD1cIk0xNy4xNiwzLjc5bC4zNywwLS4wNi4zOC0uMTQuNTJBMTAsMTAsMCwwLDEsMTYuMjEsNWE5LjM3LDkuMzcsMCwwLDAtMSwuMzIsNi42OCw2LjY4LDAsMCwwLS4yNS44OWMtLjA2LjMxLS4xMS41OS0uMTQuODUtLjMsMS4zNi0uNTIsMi40MS0uNjgsMy4xNGwtLjYxLDMuMThMMTMuMSwxNWwtLjQzLDIuNC0uMTIuNDZhLjYyLjYyLDAsMCwwLDAsLjI4Yy40NC4xLjg1LjE3LDEuMjMuMjJsLjY4LjExYTQuNTEsNC41MSwwLDAsMS0uMDguNmwtLjA5LjQyYS45Mi45MiwwLDAsMC0uMjMsMGwtLjQzLDBhMS4zNywxLjM3LDAsMCwxLS4yOSwwYy0uMTMsMC0uNjMtLjA4LTEuNDktLjE2bC0yLDBjLS4yOCwwLS44NywwLTEuNzguMTJMNywxOS41bC4xNy0uODguOC0uMkE2LjYxLDYuNjEsMCwwLDAsOS4xOSwxOCwyLjYyLDIuNjIsMCwwLDAsOS42MSwxN2wuMjgtMS40MS41OC0yLjc1LjEyLS42NmMuMDUtLjMuMTEtLjU4LjE3LS44NnMuMTItLjUxLjE3LS42OWwuMTItLjQ4LjEyLS40My4zMS0xLjYuMTUtLjY1LjMxLTEuOTFWNS4xNGEzLjg2LDMuODYsMCwwLDAtMS40OC0uMjlsLS4zOCwwLC4yLTEuMDYsMy4yNC4xNC43NSwwYy40NSwwLDEuMTgsMCwyLjE4LS4wOS4yMywwLC40NiwwLC43MSwwWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNy4wNCAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHN0cmlrZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTQuOVwiPjxnPjxwYXRoIGQ9XCJNMTIuOTQsMTNhNC4yNyw0LjI3LDAsMCwxLDEuMzIuNTgsMS40NiwxLjQ2LDAsMCwxLC41NSwxLjIsMS44NywxLjg3LDAsMCwxLS44OCwxLjY0LDQuMTcsNC4xNywwLDAsMS0yLjM1LjU5LDQuNDQsNC40NCwwLDAsMS0yLjc0LS43MSwyLjcyLDIuNzIsMCwwLDEtMS0yLjE3SDUuNTdhNC41Niw0LjU2LDAsMCwwLDEuNTUsMy43LDcsNywwLDAsMCw0LjQ3LDEuMjMsNiw2LDAsMCwwLDQuMDctMS4zLDQuMjQsNC4yNCwwLDAsMCwxLjUyLTMuMzcsNCw0LDAsMCwwLS4yNi0xLjRoLTRaTTYuMzcsMTAuMjRBMy4yNywzLjI3LDAsMCwxLDYsOC42OGE0LDQsMCwwLDEsMS40OC0zLjMsNS45Miw1LjkyLDAsMCwxLDMuODgtMS4yMSw1LjU4LDUuNTgsMCwwLDEsMy45MSwxLjI0LDQuMzYsNC4zNiwwLDAsMSwxLjQ1LDMuMTdIMTQuNDRhMi4xMiwyLjEyLDAsMCwwLS45MS0xLjgxLDQuNDUsNC40NSwwLDAsMC0yLjQ0LS41NSwzLjY5LDMuNjksMCwwLDAtMiwuNTFBMS42NCwxLjY0LDAsMCwwLDguMyw4LjIyYTEuMywxLjMsMCwwLDAsLjQ4LDEuMTEsNyw3LDAsMCwwLDIuMS43OGwuMjguMDYuMjguMDhINi4zN1ptMTMuMDkuNjhhLjczLjczLDAsMCwxLC40OS4yMS42Ni42NiwwLDAsMSwuMi40OC42NC42NCwwLDAsMS0uMi40OC43MS43MSwwLDAsMS0uNDkuMTlINS4xYS42Ny42NywwLDAsMS0uNDktLjE5LjY2LjY2LDAsMCwxLS4yLS40OC42NC42NCwwLDAsMSwuMi0uNDguNzMuNzMsMCwwLDEsLjQ5LS4yMUgxOS40NlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTQuMTcpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBzdWJzY3JpcHQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc1IDE0LjYxXCI+PGc+PHBhdGggZD1cIk0xNS4zOCw0LjMzSDEyLjc0TDExLjE5LDdjLS4yOC40Ni0uNTEuODctLjY5LDEuMjFMMTAuMDcsOWgwbC0uNDQtLjhjLS4yMi0uNC0uNDUtLjgxLS43MS0xLjIzTDcuMzQsNC4zM0g0LjY4TDguMjYsMTAsNC40LDE2LjA4SDcuMWwxLjY5LTIuODNjLjM4LS42My43Mi0xLjIyLDEtMS43OGwuMjUtLjQ2aDBsLjQ5LjkyYy4yNC40NS40OC44OS43NCwxLjMyTDEzLDE2LjA4aDIuNjFMMTEuODQsMTBsMS43Ny0yLjg0LDEuNzctMi44NVptNC43NywxMy43NUgxN3YtLjE1YzAtLjQuMDUtLjY0LjE2LS43MmE0LjQyLDQuNDIsMCwwLDEsMS4xNi0uMzEsMy4zLDMuMywwLDAsMCwxLjU0LS41NkExLjg0LDEuODQsMCwwLDAsMjAuMTUsMTVhMS43OCwxLjc4LDAsMCwwLS40NC0xLjQxQTIuOCwyLjgsMCwwLDAsMTgsMTMuMjVhMi43MSwyLjcxLDAsMCwwLTEuNjkuMzcsMS44MywxLjgzLDAsMCwwLS40NCwxLjQzdi4yM0gxN3YtLjIzcTAtLjYzLjE4LS43OGExLjYyLDEuNjIsMCwwLDEsLjg4LS4xNSwxLjU5LDEuNTksMCwwLDEsLjg4LjE1cS4xOC4xNS4xOC43NXQtLjE4Ljc1YTMuNTgsMy41OCwwLDAsMS0xLjE4LjMzLDMuMzMsMy4zMywwLDAsMC0xLjUyLjUxLDEuNTcsMS41NywwLDAsMC0uMzIsMS4xOHYxLjE1aDQuMjd2LS44NlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNCAtNC4zMylcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHN1cGVyc2NyaXB0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NSAxNS40MlwiPjxnPjxwYXRoIGQ9XCJNMTIsMTMuMTRsMy42MS01LjgxSDEyLjk0TDExLjMzLDEwYy0uMjguNDYtLjUxLjg4LS42OSwxLjI1bC0uNDUuODNoMGwtLjQ1LS44NWMtLjIyLS40MS0uNDUtLjgyLS43MS0xLjI0TDcuNCw3LjMzSDQuNjhsMy42Niw1LjgxTDQuNCwxOS4zM0g3LjE0bDEuNzQtMi44N3EuNTgtMSwxLTEuODNsLjI1LS40OGgwbC41MS45NC43NSwxLjM3LDEuNzIsMi44N2gyLjY3bC0xLjkyLTMuMDljLTEuMTItMS44LTEuNzYtMi44My0xLjkyLTMuMVptNC44NC00LjQxaDBsMCwuMTVoMy4yN3YuODZIMTUuNzdWOC41OGExLjY2LDEuNjYsMCwwLDEsLjMzLTEuMjIsMy41MSwzLjUxLDAsMCwxLDEuNTYtLjUxLDMuNjgsMy42OCwwLDAsMCwxLjIxLS4zNGMuMTMtLjEuMTktLjM2LjE5LS43N1MxOSw1LjA3LDE4Ljg3LDVBMS42MywxLjYzLDAsMCwwLDE4LDQuOGExLjU4LDEuNTgsMCwwLDAtLjkxLjE3Yy0uMTMuMTEtLjE5LjM4LS4xOS44VjZIMTUuNzhWNS43NmExLjg3LDEuODcsMCwwLDEsLjQ1LTEuNDdBMi44NCwyLjg0LDAsMCwxLDE4LDMuOTFhMi44LDIuOCwwLDAsMSwxLjcyLjM4LDEuODQsMS44NCwwLDAsMSwuNDUsMS40NCwxLjkxLDEuOTEsMCwwLDEtLjM0LDEuMzUsMy4yNCwzLjI0LDAsMCwxLTEuNTguNTdBMy42OSwzLjY5LDAsMCwwLDE3LDhjLS4xMi4xLS4xNy4zNS0uMTcuNzZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTMuOTEpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBlcmFzZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTMuNzZcIj48Zz48cGF0aCBkPVwiTTEzLjY5LDE3LjJoNi40NnYxLjMxSDguNTZMNC40MSwxNC4zNywxNCw0Ljc1bDYuMDYsNi4wNkwxNi44OSwxNGwtMy4yLDMuMTlabS00LjYxLDBoMi43N0wxNC4wOSwxNSw5Ljg4LDEwLjc1LDYuMjUsMTQuMzhsMS40MSwxLjQxYy44NC44MiwxLjMxLDEuMjksMS40MiwxLjQxWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNC43NSlcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGluZGVudDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTIuMzZcIj48Zz48cGF0aCBkPVwiTTQuNjgsMTQuNDVhLjI3LjI3LDAsMCwxLS4xOS0uMDguMy4zLDAsMCwxLS4wOC0uMjFWOS4xYS4yNy4yNywwLDAsMSwuMDgtLjE5LjI4LjI4LDAsMCwxLC4yLS4wOC4yNS4yNSwwLDAsMSwuMTkuMDdsMi41NCwyLjU0YS4yOS4yOSwwLDAsMSwwLC40TDQuODgsMTQuMzZhLjI0LjI0LDAsMCwxLS4yLjA5Wm0xNS4xOSwxLjEyYS4yNy4yNywwLDAsMSwuMTkuMDguMjUuMjUsMCwwLDEsLjA4LjE5djEuNjlhLjI3LjI3LDAsMCwxLS4wOC4xOS4yNS4yNSwwLDAsMS0uMTkuMDhINC42OGEuMjcuMjcsMCwwLDEtLjE5LS4wOC4yNS4yNSwwLDAsMS0uMDgtLjE5VjE1Ljg0YS4yNy4yNywwLDAsMSwuMjctLjI3SDE5Ljg3Wm0wLTMuMzhhLjI3LjI3LDAsMCwxLC4xOS4wOC4yOC4yOCwwLDAsMSwuMDguMjF2MS42OGEuMzIuMzIsMCwwLDEtLjA4LjIxLjI1LjI1LDAsMCwxLS4xOS4wOEgxMC4zMWEuMjcuMjcsMCwwLDEtLjE5LS4wOC4zLjMsMCwwLDEtLjA4LS4yMVYxMi40OGEuMzIuMzIsMCwwLDEsLjA4LS4yMS4yNC4yNCwwLDAsMSwuMTktLjA4aDkuNTZabTAtMy4zN2EuMjcuMjcsMCwwLDEsLjE5LjA4LjI1LjI1LDAsMCwxLC4wOC4xOXYxLjY5YS4yNy4yNywwLDAsMS0uMDguMTkuMjUuMjUsMCwwLDEtLjE5LjA4SDEwLjMxYS4yNy4yNywwLDAsMS0uMjctLjI3VjkuMWEuMjcuMjcsMCwwLDEsLjI3LS4yN2g5LjU2Wm0uMi0zLjI5YS4yOC4yOCwwLDAsMSwuMDguMlY3LjQxYS4zMi4zMiwwLDAsMS0uMDguMjEuMjUuMjUsMCwwLDEtLjE5LjA4SDQuNjhhLjI3LjI3LDAsMCwxLS4xOS0uMDguMy4zLDAsMCwxLS4wOC0uMjFWNS43M2EuMzIuMzIsMCwwLDEsLjA4LS4yMS4yNS4yNSwwLDAsMSwuMTktLjA4SDE5Ljg3YS4yOC4yOCwwLDAsMSwuMi4wOVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTUuNDQpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBvdXRkZW50OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxMi4zNlwiPjxnPjxwYXRoIGQ9XCJNMTkuODcsMTUuNTdhLjI3LjI3LDAsMCwxLC4xOS4wOC4yNS4yNSwwLDAsMSwuMDguMTl2MS42OWEuMjcuMjcsMCwwLDEtLjA4LjE5LjI1LjI1LDAsMCwxLS4xOS4wOEg0LjY4YS4yNy4yNywwLDAsMS0uMTktLjA4LjI1LjI1LDAsMCwxLS4wOC0uMTlWMTUuODRhLjI3LjI3LDAsMCwxLC4yNy0uMjdIMTkuODdaTTcuNSwxNC40NWEuMjUuMjUsMCwwLDEtLjItLjA5TDQuNzYsMTEuODRhLjI5LjI5LDAsMCwxLDAtLjRMNy4zLDguOWEuMjkuMjksMCwwLDEsLjQsMCwuMzEuMzEsMCwwLDEsLjA3LjJ2NS4wNmEuMzIuMzIsMCwwLDEtLjA4LjIxLjI2LjI2LDAsMCwxLS4xOS4wOFpNMTkuODcsOC44MmEuMjcuMjcsMCwwLDEsLjE5LjA4LjI1LjI1LDAsMCwxLC4wOC4xOXYxLjY5YS4yNy4yNywwLDAsMS0uMDguMTkuMjUuMjUsMCwwLDEtLjE5LjA4SDEwLjMxYS4yNy4yNywwLDAsMS0uMjctLjI3VjkuMWEuMjcuMjcsMCwwLDEsLjI3LS4yN2g5LjU2Wm0wLDMuMzdhLjI3LjI3LDAsMCwxLC4xOS4wOC4yOC4yOCwwLDAsMSwuMDguMjF2MS42OGEuMzIuMzIsMCwwLDEtLjA4LjIxLjI1LjI1LDAsMCwxLS4xOS4wOEgxMC4zMWEuMjcuMjcsMCwwLDEtLjE5LS4wOC4zLjMsMCwwLDEtLjA4LS4yMVYxMi40OGEuMzIuMzIsMCwwLDEsLjA4LS4yMS4yNC4yNCwwLDAsMSwuMTktLjA4aDkuNTZabS4yLTYuNjZhLjI4LjI4LDAsMCwxLC4wOC4yVjcuNDFhLjMyLjMyLDAsMCwxLS4wOC4yMS4yNS4yNSwwLDAsMS0uMTkuMDhINC42OGEuMjcuMjcsMCwwLDEtLjE5LS4wOC4zLjMsMCwwLDEtLjA4LS4yMVY1LjczYS4zMi4zMiwwLDAsMSwuMDgtLjIxLjI1LjI1LDAsMCwxLC4xOS0uMDhIMTkuODdhLjI4LjI4LDAsMCwxLC4yLjA5WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNS40NClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGV4cGFuc2lvbjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTExLjgsMTMuMDZsLTUuMSw1LjFIOS41MVYxOS41SDQuNDFWMTQuNEg1Ljc1djIuODFMOC4zLDE0LjY2cTIuMjUtMi4yMywyLjU1LTIuNTVabTguMzUtOS4zdjUuMUgxOC44MVY2LjA1bC01LjEsNS4xLTEtMSw1LjEtNS4xSDE1LjA1VjMuNzZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgcmVkdWN0aW9uOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTQuOTEsMTBoMi44N3YxLjM4SDEyLjU1VjYuMTJoMS4zOFY5bDUuMjQtNS4yNC40OC40OS40OS40OFpNNi43NywxMS45MkgxMnY1LjIzSDEwLjYyVjE0LjI2TDUuMzcsMTkuNWwtMS0xTDkuNjMsMTMuM0g2Ljc3WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40IC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgY29kZV92aWV3OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43MyAxMS44XCI+PGc+PHBhdGggZD1cIk04LjA5LDcuOTRhLjc2Ljc2LDAsMCwxLC41My4yMi43Mi43MiwwLDAsMSwuMjEuNTIuNzYuNzYsMCwwLDEtLjIyLjU0TDYuMTgsMTEuNjNsMi40MywyLjQ0YS42OS42OSwwLDAsMSwuMi41MS42Ni42NiwwLDAsMS0uMjEuNTEuNzUuNzUsMCwwLDEtLjUxLjIyLjYzLjYzLDAsMCwxLS41MS0uMjFoMEw0LjYzLDEyLjE1YS43LjcsMCwwLDEtLjIyLS41My42Ny42NywwLDAsMSwuMjUtLjU1TDcuNTcsOC4xNmEuODIuODIsMCwwLDEsLjUyLS4yMlptMTIuMDUsMy42OWEuNy43LDAsMCwxLS4yMy41MkwxNywxNS4xaDBhLjY2LjY2LDAsMCwxLS41MS4yMS43My43MywwLDAsMS0uNTEtLjIyLjc1Ljc1LDAsMCwxLS4yMi0uNTEuNjMuNjMsMCwwLDEsLjIxLS41MWwyLjQzLTIuNDRMMTUuOTIsOS4yMmEuNzMuNzMsMCwwLDEtLjIyLS41M0EuNzQuNzQsMCwwLDEsMTcsOC4xOGgwbDIuOTEsMi45MWEuNjcuNjcsMCwwLDEsLjI3LjU0Wm0tNS45LTUuOWEuNzMuNzMsMCwwLDEsLjYxLjMyLjcxLjcxLDAsMCwxLC4wNy42OEwxMSwxN2ExLDEsMCwwLDEtLjIyLjMyLjYuNiwwLDAsMS0uMzUuMTYuNzUuNzUsMCwwLDEtLjY5LS4yNi42OS42OSwwLDAsMS0uMTItLjcyTDEzLjU2LDYuMjNhLjc1Ljc1LDAsMCwxLC4yNi0uMzUuNzQuNzQsMCwwLDEsLjQyLS4xNVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTUuNzMpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBwcmV2aWV3OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS42NSAxNS42NlwiPjxnPjxwYXRoIGQ9XCJNMTYuMTksMTQuNDNsMi40OSwyLjQ5YS43My43MywwLDAsMSwuMjEuNTIuNjcuNjcsMCwwLDEtLjIyLjUxLjcuNywwLDAsMS0uNTIuMjIuNjkuNjksMCwwLDEtLjUxLS4yMWwtMi40OS0yLjQ4YTUuMTcsNS4xNywwLDAsMS0xLjM0LjY5LDQuNjQsNC42NCwwLDAsMS0xLjQ4LjI0LDQuNzgsNC43OCwwLDEsMSwwLTkuNTYsNC43OSw0Ljc5LDAsMCwxLDEuODQuMzYsNC45LDQuOSwwLDAsMSwxLjU2LDEsNC43Nyw0Ljc3LDAsMCwxLC40Niw2LjE4Wk0xMCwxNGEzLjMsMy4zLDAsMCwwLDIuMzQuOTNBMy4zNywzLjM3LDAsMCwwLDE0LjcsMTRhMy4zLDMuMywwLDAsMC0xLjA4LTUuNDEsMy40NywzLjQ3LDAsMCwwLTIuNTYsMEEzLDMsMCwwLDAsMTAsOS4yOCwzLjMxLDMuMzEsMCwwLDAsMTAsMTRaTTE2LDRhMy44NiwzLjg2LDAsMCwxLDIuNzcsMS4xNEEzLjksMy45LDAsMCwxLDIwLDcuODV2NGEuNzcuNzcsMCwwLDEtLjIyLjUzLjcuNywwLDAsMS0uNTIuMjEuNzIuNzIsMCwwLDEtLjc0LS43NHYtNGEyLjQ2LDIuNDYsMCwwLDAtLjcyLTEuNzNBMi4zNywyLjM3LDAsMCwwLDE2LDUuNDVIOC41M0EyLjQyLDIuNDIsMCwwLDAsNi4wOCw3Ljg5djcuNTJhMi40MSwyLjQxLDAsMCwwLC43MSwxLjczLDIuNDYsMi40NiwwLDAsMCwxLjc0LjcyaDQuMDhhLjczLjczLDAsMCwxLDAsMS40Nkg4LjUzYTMuODUsMy44NSwwLDAsMS0yLjc4LTEuMTRBMy45MywzLjkzLDAsMCwxLDQuNiwxNS40VjcuODdBMy45NCwzLjk0LDAsMCwxLDUuNzYsNS4wOSwzLjg4LDMuODgsMCwwLDEsOC41NCw0SDE2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40NSAtMy44KVwiLz48L2c+PC9zdmc+JyxcclxuICAgcHJpbnQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE2LjA1IDE2LjA0XCI+PGc+PHBhdGggZD1cIk0xOS43NiwxNS44NGExLjI5LDEuMjksMCwwLDAsLjM5LS45MlY4LjM1QTIuMDUsMi4wNSwwLDAsMCwxOS41Nyw3YTEuOTMsMS45MywwLDAsMC0xLjM4LS41N0g2LjM3YTEuOTUsMS45NSwwLDAsMC0yLDJ2Ni41NmExLjIzLDEuMjMsMCwwLDAsLjM4LjkyLDEuMzUsMS4zNSwwLDAsMCwuOTMuMzhoMlYxNC45bC0yLDBWOC4zNWEuNjcuNjcsMCwwLDEsLjE4LS40Ny42Mi42MiwwLDAsMSwuNDgtLjE5SDE4LjE4YS42LjYsMCwwLDEsLjQ2LjE5LjY2LjY2LDAsMCwxLC4xOC40N1YxNC45aC0ydjEuMzJoMkExLjM1LDEuMzUsMCwwLDAsMTkuNzYsMTUuODRaTTE3LjUyLDcuNjlWNS4wNmExLjMxLDEuMzEsMCwwLDAtLjM4LS45MiwxLjM0LDEuMzQsMCwwLDAtLjk0LS4zOEg4LjM0QTEuMywxLjMsMCwwLDAsNyw1LjA2VjcuNjlIOC4zNFY1LjA2aDcuODdWNy42OWgxLjMxWk04LjM0LDEyLjkzaDcuODdsMCw1LjI2SDguMzRWMTIuOTNabTcuODcsNS4yNnYwWm0uNjUsMS4zMWEuNi42LDAsMCwwLC40Ni0uMTkuNzIuNzIsMCwwLDAsLjItLjQ3VjEyLjI5YS43NC43NCwwLDAsMC0uMi0uNDcuNi42LDAsMCwwLS40Ni0uMTlINy42OGEuNi42LDAsMCwwLS40Ni4xOS43Mi43MiwwLDAsMC0uMi40N3Y2LjU1YS43NC43NCwwLDAsMCwuMi40Ny42LjYsMCwwLDAsLjQ2LjE5aDkuMThaTTE2LjY3LDkuMjhhLjcuNywwLDAsMC0uOTQsMCwuNjMuNjMsMCwwLDAtLjE4LjQ2LjY3LjY3LDAsMCwwLC4xOC40Ny42OC42OCwwLDAsMCwuOTQsMCwuNjYuNjYsMCwwLDAsLjE4LS40N0EuNTguNTgsMCwwLDAsMTYuNjcsOS4yOFpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuMjUgLTMuNjEpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICB0ZW1wbGF0ZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTQuMjcgMTUuNjRcIj48Zz48cGF0aCBkPVwiTTE4LjE4LDE5LjE2YTEsMSwwLDAsMCwxLTFWNS43M2ExLDEsMCwwLDAtMS0xaC0ydjFoMlYxOC4xOUg2LjM3VjUuNzNoMnYtMWgtMkEuOTQuOTQsMCwwLDAsNS42OCw1YTEsMSwwLDAsMC0uMjkuN1YxOC4xOGEuOTQuOTQsMCwwLDAsLjI5LjY5LDEsMSwwLDAsMCwuNjkuMjlIMTguMThaTTkuODIsMTAuMzFoNC45MmEuNDkuNDksMCwwLDAsLjM1LS4xNS40Ny40NywwLDAsMCwuMTUtLjM1LjQ5LjQ5LDAsMCwwLS4xNS0uMzUuNDcuNDcsMCwwLDAtLjM1LS4xNUg5LjgyYS40OS40OSwwLDAsMC0uMzUuMTUuNDcuNDcsMCwwLDAtLjE1LjM1LjQ5LjQ5LDAsMCwwLC4xNS4zNS40Ny40NywwLDAsMCwuMzUuMTVabTUuOSw0LjkySDguODNhLjQ5LjQ5LDAsMCwwLS4zNS4xNS40Ny40NywwLDAsMC0uMTUuMzUuNDkuNDksMCwwLDAsLjE1LjM1LjQ3LjQ3LDAsMCwwLC4zNS4xNWg2Ljg5YS40OS40OSwwLDAsMCwuMzUtLjE1LjQ3LjQ3LDAsMCwwLC4xNS0uMzUuNTEuNTEsMCwwLDAtLjUtLjVaTTcuMzYsMTIuNzdhLjQ5LjQ5LDAsMCwwLC4xNS4zNS40Ny40NywwLDAsMCwuMzUuMTVoOC44NWEuNDkuNDksMCwwLDAsLjM1LS4xNS40Ny40NywwLDAsMCwuMTUtLjM1LjQ5LjQ5LDAsMCwwLS4xNS0uMzUuNDcuNDcsMCwwLDAtLjM1LS4xNUg3Ljg1YS40OS40OSwwLDAsMC0uMzUuMTUuNTIuNTIsMCwwLDAtLjE0LjM1WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNS4xNCAtMy43NylcIi8+PHBhdGggZD1cIk0xNC4yNCw2LjcxYTEsMSwwLDAsMCwxLTEsMSwxLDAsMCwwLTEtMSwxLDEsMCwwLDAtMS0xaC0yYS45NC45NCwwLDAsMC0uNjkuMjgsMSwxLDAsMCwwLS4yOS43QS45NC45NCwwLDAsMCw5LjYyLDVhLjkxLjkxLDAsMCwwLS4yOS42OSwxLDEsMCwwLDAsLjI5LjcsMSwxLDAsMCwwLC42OS4yOWgzLjkzWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNS4xNCAtMy43NylcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGxpbmVfaGVpZ2h0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NiAxMy41NlwiPjxnPjxwYXRoIGQ9XCJNNC40LDQuODhWOC4yNmEyLDIsMCwwLDAsLjUuMzlzLjEsMCwuMTgtLjEyYS42Mi42MiwwLDAsMCwuMTctLjI4Yy4wNi0uMTkuMTMtLjQ0LjIxLS43NHMuMTQtLjUyLjE5LS42NmEuNTguNTgsMCwwLDEsLjIxLS4zLDIuNDEsMi40MSwwLDAsMSwuNjMtLjIxLDMuODMsMy44MywwLDAsMSwuODgtLjEyLDkuMTUsOS4xNSwwLDAsMSwxLjMxLjA2LjE2LjE2LDAsMCwxLC4xMSwwLC4yNi4yNiwwLDAsMSwuMDYuMTQsNCw0LDAsMCwxLDAsLjQ5djJsLjA1LDMuNzdjMCwxLjQxLDAsMi42OC0uMDUsMy44MWExLjc5LDEuNzksMCwwLDEtLjExLjQ5LDEwLjY4LDEwLjY4LDAsMCwxLTEuNC40NSwxLjEyLDEuMTIsMCwwLDAtLjY5LjQzdi4zMWwwLC4yMi42MSwwYy44NS0uMDgsMS41NC0uMTIsMi4wNi0uMTJhMTkuNzYsMTkuNzYsMCwwLDEsMi4wOS4wOCwxNS4wOCwxNS4wOCwwLDAsMCwxLjY0LjA4LDEuNCwxLjQsMCwwLDAsLjI5LDAsMS41OCwxLjU4LDAsMCwwLDAtLjI2bC0uMDUtLjQzYTIuMjYsMi4yNiwwLDAsMC0uNDMtLjE3bC0uNzctLjIyLS4xNSwwYTIuNTUsMi41NSwwLDAsMS0uNzgtLjI4LDIuNTYsMi41NiwwLDAsMS0uMTEtLjc1bDAtMS4yOSwwLTMuMTVWNy41M2ExMC41MSwxMC41MSwwLDAsMSwuMDYtMS4yLDMuODMsMy44MywwLDAsMSwuNiwwbDEuODgsMGEyLjE4LDIuMTgsMCwwLDEsLjM4LDAsLjQ1LjQ1LDAsMCwxLC4yMy4xNy45LjksMCwwLDEsLjA1LjI1YzAsLjE2LjA2LjM1LjEuNThhMy4zMywzLjMzLDAsMCwwLC4xNC41NUE2LjM5LDYuMzksMCwwLDAsMTUsOWEyLjkxLDIuOTEsMCwwLDAsLjYtLjE1LDIuNzcsMi43NywwLDAsMCwwLS40NmwwLS41MSwwLTIuOTUtLjI1LDAtLjM4LDBMMTUsNC45NGEuNzEuNzEsMCwwLDEtLjE4LjE1LjQ1LjQ1LDAsMCwxLS4yNS4wN2wtLjI5LDBIOC43NWwtLjE1LDBINy40NWExNywxNywwLDAsMS0xLjg2LDBMNS4zNiw1bC0uMjUtLjEzWk0xOS43NSwxNi4xNGgtLjY5di05aC42OUEuNC40LDAsMCwwLDIwLjEzLDdjLjA2LS4xMSwwLS4yNC0uMS0uMzlMMTguOTIsNS4xNWEuNTIuNTIsMCwwLDAtLjg2LDBMMTcsNi41OGMtLjEyLjE1LS4xNi4yOC0uMS4zOXMuMTguMTYuMzguMTZoLjY5djloLS42OWEuNC40LDAsMCwwLS4zOC4xNmMtLjA2LjExLDAsLjI0LjEuMzlsMS4xMSwxLjQzYS41Mi41MiwwLDAsMCwuODYsMEwyMCwxNi42OWMuMTItLjE1LjE2LS4yOC4xLS4zOWEuNC40LDAsMCwwLS4zOC0uMTZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTQuODYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBwYXJhZ3JhcGhfc3R5bGU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDExLjgxIDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xOC4xOCwzLjc2djJoLTJWMTkuNWgtMlY1LjczaC0yVjE5LjVoLTJWMTEuNjNhMy45NCwzLjk0LDAsMCwxLDAtNy44N2g3Ljg3WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNi4zNyAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHRleHRfc3R5bGU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEzLjc2IDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xNy42OCw2LjcxYTIuMjIsMi4yMiwwLDAsMCwxLjA2LS4yMi43NC43NCwwLDAsMCwuNDItLjcuNzMuNzMsMCwwLDAtLjA4LS4zMy42Ny42NywwLDAsMC0uMTctLjIyLDEsMSwwLDAsMC0uMzEtLjE1TDE4LjI2LDVsLS40NS0uMDlBMTUuMjcsMTUuMjcsMCwwLDAsMTMuMjYsNVY0Ljc0YzAtLjY2LS42My0xLTEuOTItMS0uMjQsMC0uNDMuMTUtLjU5LjQ2YTQsNCwwLDAsMC0uMzYsMS4xNGgwdjBhMjYuNDUsMjYuNDUsMCwwLDEtMy41LjM1QTIsMiwwLDAsMCw1Ljc3LDZhLjg0Ljg0LDAsMCwwLS4zNy43OSwyLjE0LDIuMTQsMCwwLDAsLjQxLDEuMjksMS4yMywxLjIzLDAsMCwwLDEuMDUuNjMsMTYuNjIsMTYuNjIsMCwwLDAsMy4yOS0uNDVsLS4zNCwzLjM1Yy0uMTYsMS42MS0uMjksMi45LS4zNywzLjg2cy0uMTIsMS42Ni0uMTIsMi4wOWwwLC42NWE1LjE1LDUuMTUsMCwwLDAsLjA1LjYsMS4yOCwxLjI4LDAsMCwwLC4xNi41NC4zNC4zNCwwLDAsMCwuMjguMTgsMS4xNiwxLjE2LDAsMCwwLC43OS0uNDYsMy42NiwzLjY2LDAsMCwwLC42OC0xLDIyLjA4LDIyLjA4LDAsMCwwLDEtNC4zM3EuNDktMy4xLjc4LTYuMTVhMjQuNjksMjQuNjksMCwwLDEsNC42Mi0uODRaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC01LjQgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBzYXZlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTguNTMsMTkuNWwuMi0uMDVBMS43OCwxLjc4LDAsMCwwLDIwLjEzLDE4bDAtLjA5VjcuMTRhMiwyLDAsMCwwLS4yOC0uNjRBMy4xOCwzLjE4LDAsMCwwLDE5LjQzLDZjLS41LS41Mi0xLTEtMS41NS0xLjU0QTIuNTksMi41OSwwLDAsMCwxNy4zNyw0YTEuODMsMS44MywwLDAsMC0uNjEtLjI1SDZsLS4yMSwwYTEuNzgsMS43OCwwLDAsMC0xLjQsMS40OWwwLC4xVjE3Ljg3YTIuNDksMi40OSwwLDAsMCwuMDkuMzcsMS43OSwxLjc5LDAsMCwwLDEuNDQsMS4yM2wuMDksMFptLTYuMjUtLjZINi45MmEuNjEuNjEsMCwwLDEtLjY4LS40OC43OC43OCwwLDAsMSwwLS4yMlYxMi4zYS42Mi42MiwwLDAsMSwuNjktLjY4SDE3LjY0YS42Mi42MiwwLDAsMSwuNjkuNjlWMTguMmEuNjQuNjQsMCwwLDEtLjcxLjY5SDEyLjI4Wk0xMiw5LjgxSDguMTVhLjYzLjYzLDAsMCwxLS43Mi0uNzF2LTRhLjY0LjY0LDAsMCwxLC43Mi0uNzJoNy42NmEuNjQuNjQsMCwwLDEsLjcyLjcydjRhLjY1LjY1LDAsMCwxLS43NC43MlpNMTMuNSw1VjkuMThoMS43OFY1WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGJsb2NrcXVvdGU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDQ3NS4wODIgNDc1LjA4MVwiPjxnPjxwYXRoIGQ9XCJNMTY0LjQ1LDIxOS4yN2gtNjMuOTU0Yy03LjYxNCwwLTE0LjA4Ny0yLjY2NC0xOS40MTctNy45OTRjLTUuMzI3LTUuMzMtNy45OTQtMTEuODAxLTcuOTk0LTE5LjQxN3YtOS4xMzJjMC0yMC4xNzcsNy4xMzktMzcuNDAxLDIxLjQxNi01MS42NzhjMTQuMjc2LTE0LjI3MiwzMS41MDMtMjEuNDExLDUxLjY3OC0yMS40MTFoMTguMjcxYzQuOTQ4LDAsOS4yMjktMS44MDksMTIuODQ3LTUuNDI0YzMuNjE2LTMuNjE3LDUuNDI0LTcuODk4LDUuNDI0LTEyLjg0N1Y1NC44MTljMC00Ljk0OC0xLjgwOS05LjIzMy01LjQyNC0xMi44NWMtMy42MTctMy42MTItNy44OTgtNS40MjQtMTIuODQ3LTUuNDI0aC0xOC4yNzFjLTE5Ljc5NywwLTM4LjY4NCwzLjg1OC01Ni42NzMsMTEuNTYzYy0xNy45ODcsNy43MS0zMy41NDUsMTguMTMyLTQ2LjY4LDMxLjI2N2MtMTMuMTM0LDEzLjEyOS0yMy41NTMsMjguNjg4LTMxLjI2Miw0Ni42NzdDMy44NTUsMTQ0LjAzOSwwLDE2Mi45MzEsMCwxODIuNzI2djIwMC45OTFjMCwxNS4yMzUsNS4zMjcsMjguMTcxLDE1Ljk4NiwzOC44MzRjMTAuNjYsMTAuNjU3LDIzLjYwNiwxNS45ODUsMzguODMyLDE1Ljk4NWgxMDkuNjM5YzE1LjIyNSwwLDI4LjE2Ny01LjMyOCwzOC44MjgtMTUuOTg1YzEwLjY1Ny0xMC42NjMsMTUuOTg3LTIzLjU5OSwxNS45ODctMzguODM0VjI3NC4wODhjMC0xNS4yMzItNS4zMy0yOC4xNjgtMTUuOTk0LTM4LjgzMkMxOTIuNjIyLDIyNC42LDE3OS42NzUsMjE5LjI3LDE2NC40NSwyMTkuMjd6XCIvPjxwYXRoIGQ9XCJNNDU5LjEwMywyMzUuMjU2Yy0xMC42NTYtMTAuNjU2LTIzLjU5OS0xNS45ODYtMzguODI4LTE1Ljk4NmgtNjMuOTUzYy03LjYxLDAtMTQuMDg5LTIuNjY0LTE5LjQxLTcuOTk0Yy01LjMzMi01LjMzLTcuOTk0LTExLjgwMS03Ljk5NC0xOS40MTd2LTkuMTMyYzAtMjAuMTc3LDcuMTM5LTM3LjQwMSwyMS40MDktNTEuNjc4YzE0LjI3MS0xNC4yNzIsMzEuNDk3LTIxLjQxMSw1MS42ODItMjEuNDExaDE4LjI2N2M0Ljk0OSwwLDkuMjMzLTEuODA5LDEyLjg0OC01LjQyNGMzLjYxMy0zLjYxNyw1LjQyOC03Ljg5OCw1LjQyOC0xMi44NDdWNTQuODE5YzAtNC45NDgtMS44MTQtOS4yMzMtNS40MjgtMTIuODVjLTMuNjE0LTMuNjEyLTcuODk4LTUuNDI0LTEyLjg0OC01LjQyNGgtMTguMjY3Yy0xOS44MDgsMC0zOC42OTEsMy44NTgtNTYuNjg1LDExLjU2M2MtMTcuOTg0LDcuNzEtMzMuNTM3LDE4LjEzMi00Ni42NzIsMzEuMjY3Yy0xMy4xMzUsMTMuMTI5LTIzLjU1OSwyOC42ODgtMzEuMjY1LDQ2LjY3N2MtNy43MDcsMTcuOTg3LTExLjU2NywzNi44NzktMTEuNTY3LDU2LjY3NHYyMDAuOTkxYzAsMTUuMjM1LDUuMzMyLDI4LjE3MSwxNS45ODgsMzguODM0YzEwLjY1NywxMC42NTcsMjMuNiwxNS45ODUsMzguODI4LDE1Ljk4NWgxMDkuNjMzYzE1LjIyOSwwLDI4LjE3MS01LjMyOCwzOC44MjctMTUuOTg1YzEwLjY2NC0xMC42NjMsMTUuOTg1LTIzLjU5OSwxNS45ODUtMzguODM0VjI3NC4wODhDNDc1LjA4MiwyNTguODU1LDQ2OS43NiwyNDUuOTIsNDU5LjEwMywyMzUuMjU2elwiLz48L2c+PC9zdmc+JyxcclxuICAgYXJyb3dfZG93bjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzMgOC42N1wiPjxnPjxwYXRoIGQ9XCJNMTguNzksNy41MmEuOC44LDAsMCwxLC41Ni0uMjMuODIuODIsMCwwLDEsLjc5Ljc5LjguOCwwLDAsMS0uMjMuNTZsLTcuMDcsNy4wN2EuNzkuNzksMCwwLDEtLjU3LjI1Ljc3Ljc3LDAsMCwxLS41Ny0uMjVoMEw0LjY0LDguNjVhLjguOCwwLDAsMS0uMjMtLjU3LjgyLjgyLDAsMCwxLC43OS0uNzkuOC44LDAsMCwxLC41Ni4yM0wxMi4yOCwxNGwzLjI2LTMuMjYsMy4yNS0zLjI2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNy4yOSlcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGFsaWduX2p1c3RpZnk6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDEzLjc3XCI+PGc+PHBhdGggZD1cIk00LjQxLDQuNzR2MkgyMC4xNXYtMkg0LjQxWm0wLDUuOUgyMC4xNXYtMkg0LjQxdjJabTAsMy45NEgyMC4xNXYtMkg0LjQxdjJabTAsMy45M2g3Ljg3di0ySDQuNDF2MlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTQuNzQpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBhbGlnbl9sZWZ0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxMy43N1wiPjxnPjxwYXRoIGQ9XCJNNC40MSw0Ljc0djJIMjAuMTV2LTJINC40MVptMTEuOCwzLjk0SDQuNDF2MkgxNi4yMnYtMlptLTExLjgsNS45SDE4LjE4di0ySDQuNDF2MlptMCwzLjkzaDkuODR2LTJINC40MXYyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNC43NClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGFsaWduX3JpZ2h0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxMy43N1wiPjxnPjxwYXRoIGQ9XCJNNC40MSw0Ljc0djJIMjAuMTV2LTJINC40MVptMy45Myw1LjlIMjAuMTV2LTJIOC4zNHYyWm0tMiwzLjk0SDIwLjE0di0ySDYuMzd2MlptMy45NCwzLjkzaDkuODR2LTJIMTAuMzF2MlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTQuNzQpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBhbGlnbl9jZW50ZXI6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDEzLjc3XCI+PGc+PHBhdGggZD1cIk00LjQxLDQuNzR2MkgyMC4xNXYtMkg0LjQxWm0yLDMuOTR2MkgxOC4xOHYtMkg2LjM3Wm0tMSw1LjlIMTkuMTZ2LTJINS4zOXYyWm0yLDMuOTNIMTcuMnYtMkg3LjM2djJaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC00Ljc0KVwiLz48L2c+PC9zdmc+JyxcclxuICAgZm9udF9jb2xvcjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTQuNjFcIj48Zz48cGF0aCBkPVwiTTE4LjUsMTUuNTcsMTQuMjgsNC4zMmgtMy40TDYuNjUsMTUuNTdoM2wuOC0yLjI2aDQuMjNsLjgsMi4yNmgzWk0xNCwxMS4wN0gxMS4xNEwxMi41NCw3LDEzLjI1LDljLjQxLDEuMTguNjQsMS44Ni43LDJaTTQuNDEsMTYuNjl2Mi4yNEgyMC4xNVYxNi42OUg0LjQxWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNC4zMilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGhpZ2hsaWdodF9jb2xvcjonPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS42NiAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTIuMzIsOS4zMSwxMy4zOCwxM0gxMS4yMWwuNTItMS44M3EuNDYtMS42MS41NC0xLjgzWk00LjQ0LDMuNzZIMjAuMVYxOS41SDQuNDRWMy43NlpNMTQuNzEsMTcuMzJoMi42M0wxMy43LDZIMTAuODlMNy4yNiwxNy4zMkg5Ljg5bC42My0yLjI0aDMuNTVsLjMyLDEuMTJjLjE4LjY1LjI5LDEsLjMyLDEuMTJaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQ0IC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgbGlzdF9idWxsZXRzOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxMi4zN1wiPjxnPjxwYXRoIGQ9XCJNNy43NywxNi4xMmExLjU5LDEuNTksMCwwLDAtLjQ5LTEuMTgsMS42MiwxLjYyLDAsMCwwLTEuMTktLjQ5LDEuNjgsMS42OCwwLDEsMCwwLDMuMzYsMS42NywxLjY3LDAsMCwwLDEuNjgtMS42OVptMC00LjQ4QTEuNjcsMS42NywwLDAsMCw2LjA5LDEwLDEuNjgsMS42OCwwLDAsMCw0LjksMTIuODJhMS42MiwxLjYyLDAsMCwwLDEuMTkuNDksMS42NywxLjY3LDAsMCwwLDEuNjgtMS42N1ptMTIuMzgsMy42NGEuMjcuMjcsMCwwLDAtLjA4LS4xOS4yOC4yOCwwLDAsMC0uMi0uMDlIOS4xOWEuMjguMjgsMCwwLDAtLjIuMDguMjkuMjksMCwwLDAtLjA4LjE5VjE3YS4yNy4yNywwLDAsMCwuMjguMjhIMTkuODdhLjI3LjI3LDAsMCwwLC4xOS0uMDguMjQuMjQsMCwwLDAsLjA4LS4yVjE1LjI4Wk03Ljc3LDcuMTNhMS42MywxLjYzLDAsMCwwLS40OS0xLjIsMS42MSwxLjYxLDAsMCwwLTEuMTktLjQ5LDEuNjEsMS42MSwwLDAsMC0xLjE5LjQ5LDEuNzEsMS43MSwwLDAsMCwwLDIuNCwxLjYyLDEuNjIsMCwwLDAsMS4xOS40OSwxLjYxLDEuNjEsMCwwLDAsMS4xOS0uNDksMS42MywxLjYzLDAsMCwwLC40OS0xLjJabTEyLjM4LDMuNjZhLjI4LjI4LDAsMCwwLS4wOC0uMi4yOS4yOSwwLDAsMC0uMTktLjA4SDkuMTlhLjI3LjI3LDAsMCwwLS4yOC4yOHYxLjY5YS4yNy4yNywwLDAsMCwuMDguMTkuMjQuMjQsMCwwLDAsLjIuMDhIMTkuODdhLjI3LjI3LDAsMCwwLC4xOS0uMDguMjUuMjUsMCwwLDAsLjA4LS4xOVYxMC43OVptMC00LjVhLjI3LjI3LDAsMCwwLS4wOC0uMTlBLjI1LjI1LDAsMCwwLDE5Ljg4LDZIOS4xOUEuMjguMjgsMCwwLDAsOSw2LjFhLjI2LjI2LDAsMCwwLS4wOC4xOVY4QS4yNy4yNywwLDAsMCw5LDguMTdhLjI0LjI0LDAsMCwwLC4yLjA4SDE5Ljg3YS4yNy4yNywwLDAsMCwuMTktLjA4QS4yNS4yNSwwLDAsMCwyMC4xNCw4VjYuMjlaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC01LjQ0KVwiLz48L2c+PC9zdmc+JyxcclxuICAgbGlzdF9udW1iZXI6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjY5IDE1Ljc0XCI+PGc+PHBhdGggZD1cIk03LjY2LDE4YTEuMjQsMS4yNCwwLDAsMC0uMjYtLjc4LDEuMTcsMS4xNywwLDAsMC0uNzItLjQybC44NS0xVjE1SDQuNTh2MS4zNGguOTR2LS40NmwuODUsMGgwYy0uMTEuMTEtLjIyLjIzLS4zMi4zNXMtLjIzLjI3LS4zNy40N0w1LjM5LDE3bC4yMy41MWMuNjEtLjA1LjkyLjExLjkyLjQ5YS40Mi40MiwwLDAsMS0uMTguMzcuNzkuNzksMCwwLDEtLjQ1LjEyQTEuNDEsMS40MSwwLDAsMSw1LDE4LjE1bC0uNTEuNzdBMi4wNiwyLjA2LDAsMCwwLDYsMTkuNWExLjgsMS44LDAsMCwwLDEuMi0uNDFBMS4zOCwxLjM4LDAsMCwwLDcuNjYsMThabTAtNS41NEg2Ljc1VjEzSDUuNjNBLjcyLjcyLDAsMCwxLDYsMTIuNTFhNS40NSw1LjQ1LDAsMCwxLC42Ni0uNDUsMi43MSwyLjcxLDAsMCwwLC42Ny0uNTcsMS4xOSwxLjE5LDAsMCwwLC4zMS0uODEsMS4yOSwxLjI5LDAsMCwwLS40NS0xLDEuODYsMS44NiwwLDAsMC0yLS4xMSwxLjUxLDEuNTEsMCwwLDAtLjYyLjdsLjc0LjUyQS44Ny44NywwLDAsMSw2LDEwLjI4YS41MS41MSwwLDAsMSwuMzUuMTIuNDIuNDIsMCwwLDEsLjEzLjMzLjU1LjU1LDAsMCwxLS4yMS40LDMsMywwLDAsMS0uNS4zOGMtLjE5LjEzLS4zOS4yNy0uNTguNDJhMiwyLDAsMCwwLS41LjYsMS42MywxLjYzLDAsMCwwLS4yMS44MSwzLjg5LDMuODksMCwwLDAsLjA1LjQ4aDMuMlYxMi40NFptMTIuNDUsMi44MmEuMjcuMjcsMCwwLDAtLjA4LS4xOS4yOC4yOCwwLDAsMC0uMjEtLjA4SDkuMWEuMzIuMzIsMCwwLDAtLjIxLjA4LjI0LjI0LDAsMCwwLS4wOC4yVjE3YS4yNy4yNywwLDAsMCwuMDguMTkuMy4zLDAsMCwwLC4yMS4wOEgxOS44M2EuMzIuMzIsMCwwLDAsLjIxLS4wOC4yNS4yNSwwLDAsMCwuMDgtLjE5VjE1LjI2Wk03LjY5LDcuMzJoLTFWMy43Nkg1LjhMNC42LDQuODhsLjYzLjY4YTEuODUsMS44NSwwLDAsMCwuNDMtLjQ4aDBsMCwyLjI0SDQuNzRWOC4yaDNWNy4zMlptMTIuNDMsMy40MmEuMjcuMjcsMCwwLDAtLjA4LS4xOS4yOC4yOCwwLDAsMC0uMjEtLjA4SDkuMWEuMzIuMzIsMCwwLDAtLjIxLjA4LjI0LjI0LDAsMCwwLS4wOC4ydjEuNzFhLjI3LjI3LDAsMCwwLC4wOC4xOS4zLjMsMCwwLDAsLjIxLjA4SDE5LjgzYS4zMi4zMiwwLDAsMCwuMjEtLjA4LjI1LjI1LDAsMCwwLC4wOC0uMTlWMTAuNzRabTAtNC41MkEuMjcuMjcsMCwwLDAsMjAsNiwuMjguMjgsMCwwLDAsMTkuODMsNkg5LjFBLjMyLjMyLDAsMCwwLDguODksNmEuMjQuMjQsMCwwLDAtLjA4LjE5VjcuOTNhLjI3LjI3LDAsMCwwLC4wOC4xOS4zMi4zMiwwLDAsMCwuMjEuMDhIMTkuODNBLjMyLjMyLDAsMCwwLDIwLDguMTJhLjI2LjI2LDAsMCwwLC4wOC0uMlY2LjIyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MyAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHRhYmxlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNNC40MSw4LjA1VjMuNzZIOC43VjguMDVINC40MVptNS43MSwwVjMuNzZoNC4zVjguMDVoLTQuM1ptNS43NC00LjI5aDQuMjlWOC4wNUgxNS44NlYzLjc2Wm0tMTEuNDUsMTBWOS40OEg4Ljd2NC4zSDQuNDFabTUuNzEsMFY5LjQ4aDQuM3Y0LjNoLTQuM1ptNS43NCwwVjkuNDhoNC4yOXY0LjNIMTUuODZaTTQuNDEsMTkuNVYxNS4yMUg4LjdWMTkuNUg0LjQxWm01LjcxLDBWMTUuMjFoNC4zVjE5LjVoLTQuM1ptNS43NCwwVjE1LjIxaDQuMjlWMTkuNUgxNS44NlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBob3Jpem9udGFsX3J1bGU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDIuMjRcIj48Zz48cGF0aCBkPVwiTTIwLjE1LDEyLjc1VjEwLjUxSDQuNDF2Mi4yNEgyMC4xNVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTEwLjUxKVwiLz48L2c+PC9zdmc+JyxcclxuICAgc2hvd19ibG9ja3M6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjY2IDE1LjY3XCI+PGc+PHBhdGggZD1cIk0xOS43Miw1LjU4YTEuNjQsMS42NCwwLDAsMC0xLjY0LTEuNjRINi4yM2ExLjYyLDEuNjIsMCwwLDAtMS4xNi40OCwxLjYzLDEuNjMsMCwwLDAtLjQ4LDEuMTZWOS42M2ExLjYsMS42LDAsMCwwLC40OCwxLjE2LDEuNjIsMS42MiwwLDAsMCwxLjE2LjQ3SDE4LjA5YTEuNjcsMS42NywwLDAsMCwxLjE2LS40NywxLjYyLDEuNjIsMCwwLDAsLjQ4LTEuMTZWNS41OFptLS45NCw0LjA1YS42OC42OCwwLDAsMS0uNy43SDYuMjNhLjY2LjY2LDAsMCwxLS40OC0uMi43NC43NCwwLDAsMS0uMjEtLjVWNS41OGEuNjYuNjYsMCwwLDEsLjItLjQ4LjcxLjcxLDAsMCwxLC40OC0uMjFIMTguMDhhLjc0Ljc0LDAsMCwxLC41LjIxLjY2LjY2LDAsMCwxLC4yLjQ4Wk02LjQ4LDcuNzJhLjIxLjIxLDAsMCwwLC4xNy0uMDcuMjIuMjIsMCwwLDAsLjA3LS4xN1Y3LjA2YTEuMjcsMS4yNywwLDAsMSwuMTEtLjUyLjM3LjM3LDAsMCwxLC4zNi0uMjNIOC43N0EuMjUuMjUsMCwwLDAsOSw2LjE3YS4xOS4xOSwwLDAsMCwwLS4yMy4yNy4yNywwLDAsMC0uMi0uMTJINy4xOWEuODguODgsMCwwLDAtLjcyLjM5LDEuNTEsMS41MSwwLDAsMC0uMjMuODV2LjQyYS4yNC4yNCwwLDAsMCwuMjQuMjRabS0uMTkuODFhLjIxLjIxLDAsMCwwLC4xNy0uMDcuMjYuMjYsMCwwLDAsLjA3LS4xNy4yNC4yNCwwLDAsMC0uMjQtLjI0LjIuMiwwLDAsMC0uMTYuMDkuMi4yLDAsMCwwLS4wNy4xNi4yMi4yMiwwLDAsMCwuMDcuMTcuMjMuMjMsMCwwLDAsLjE2LjA2Wm04LjQ2LDUuMWExLjYzLDEuNjMsMCwwLDAtLjQ3LTEuMTZBMS42MSwxLjYxLDAsMCwwLDEzLjEyLDEySDYuMjNhMS42LDEuNiwwLDAsMC0xLjE2LjQ2LDEuNjIsMS42MiwwLDAsMC0uNDgsMS4xNnY0LjA1YTEuNjQsMS42NCwwLDAsMCwxLjY0LDEuNjRoNi44OWExLjYsMS42LDAsMCwwLDEuMTYtLjQ4LDEuNjIsMS42MiwwLDAsMCwuNDctMS4xNlptLS45NCw0YS43LjcsMCwwLDEtLjIuNDkuNjUuNjUsMCwwLDEtLjUuMkg2LjIzYS42Ni42NiwwLDAsMS0uNDgtLjIuNzUuNzUsMCwwLDEtLjIxLS40OXYtNGEuNzQuNzQsMCwwLDEsLjIxLS41LjY2LjY2LDAsMCwxLC40OC0uMmg2Ljg5YS42OC42OCwwLDAsMSwuNy43djRabTYuMTUsMHYtNGExLjYsMS42LDAsMCwwLS40OC0xLjE2QTEuNjcsMS42NywwLDAsMCwxOC4zMiwxMkgxNy4xYTEuNjMsMS42MywwLDAsMC0xLjE2LjQ3LDEuNjEsMS42MSwwLDAsMC0uNDcsMS4xNnY0YTEuNjcsMS42NywwLDAsMCwuNDcsMS4xNiwxLjYyLDEuNjIsMCwwLDAsMS4xNi40OGgxLjIyQTEuNjQsMS42NCwwLDAsMCwyMCwxNy42OFptLS45NC00djRhLjc1Ljc1LDAsMCwxLS4yMS40OS42Mi42MiwwLDAsMS0uNDguMkgxNy4xMWEuNjkuNjksMCwwLDEtLjUtLjIuNy43LDAsMCwxLS4yLS40OXYtNGEuNjguNjgsMCwwLDEsLjctLjdoMS4yMmEuNjYuNjYsMCwwLDEsLjQ4LjIuNzIuNzIsMCwwLDEsLjIxLjVaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQ0IC0zLjc5KVwiLz48L2c+PC9zdmc+JyxcclxuICAgY2FuY2VsOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTQuMTUsMTEuNjNsNS42MSw1LjYxYTEuMjksMS4yOSwwLDAsMSwuMzguOTMsMS4yNywxLjI3LDAsMCwxLS40LjkzLDEuMjUsMS4yNSwwLDAsMS0uOTIuNCwxLjMxLDEuMzEsMCwwLDEtLjk0LS40bC01LjYxLTUuNjFMNi42NywxOS4xYTEuMzEsMS4zMSwwLDAsMS0uOTQuNCwxLjI0LDEuMjQsMCwwLDEtLjkyLS40LDEuMjcsMS4yNywwLDAsMS0uNC0uOTMsMS4zMywxLjMzLDAsMCwxLC4zOC0uOTNsNS42MS01LjYzTDQuNzksNmExLjI2LDEuMjYsMCwwLDEtLjM4LS45MywxLjIyLDEuMjIsMCwwLDEsLjQtLjkyLDEuMjgsMS4yOCwwLDAsMSwuOTItLjM5LDEuMzgsMS4zOCwwLDAsMSwuOTQuMzhsNS42MSw1LjYxLDUuNjEtNS42MWExLjMzLDEuMzMsMCwwLDEsLjk0LS4zOCwxLjI2LDEuMjYsMCwwLDEsLjkyLjM5LDEuMjQsMS4yNCwwLDAsMSwuNC45MiwxLjI5LDEuMjksMCwwLDEtLjM5LjkzTDE3LDguODFsLTIuOCwyLjgyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGltYWdlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NSAxNS43N1wiPjxnPjxwYXRoIGQ9XCJNOC43Nyw4LjcyYS44OC44OCwwLDAsMS0uNjEtLjI3LjgyLjgyLDAsMCwxLS4yNS0uNjEuODkuODksMCwwLDEsLjI1LS42MkEuODIuODIsMCwwLDEsOC43Nyw3YS44MS44MSwwLDAsMSwuNjEuMjUuODMuODMsMCwwLDEsLjI3LjYyLjgxLjgxLDAsMCwxLS4yNS42MS45MS45MSwwLDAsMS0uNjMuMjdabTkuNjItNWExLjc0LDEuNzQsMCwwLDEsMS43NiwxLjc2VjE3Ljc2YTEuNzQsMS43NCwwLDAsMS0xLjc2LDEuNzZINi4xNkExLjc0LDEuNzQsMCwwLDEsNC40LDE3Ljc2VjUuNTFBMS43NCwxLjc0LDAsMCwxLDYuMTYsMy43NUgxOC4zOVptMCwxLjc1SDYuMTZ2OEw4LjUzLDExLjhhLjk0Ljk0LDAsMCwxLC41NC0uMTcuODYuODYsMCwwLDEsLjU0LjJMMTEuMDksMTNsMy42NC00LjU1YS43OC43OCwwLDAsMSwuMzQtLjI1Ljg1Ljg1LDAsMCwxLC40Mi0uMDcuODkuODksMCwwLDEsLjM5LjEyLjc4Ljc4LDAsMCwxLC4yOC4yOWwyLjI0LDMuNjdWNS41MVptMCwxMi4yNFYxNS42TDE1LjMsMTAuNTMsMTEuODksMTQuOGEuODkuODksMCwwLDEtLjU5LjMyLjgyLjgyLDAsMCwxLS42NC0uMThMOSwxMy42Miw2LjE2LDE1Ljc0djJaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTMuNzUpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICB2aWRlbzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTQuNTVcIj48Zz48cGF0aCBkPVwiTTIwLjE1LDEwLjI2VjE4LjlsLTMuOTQtMS41N3YxLjJINC40MVYxMC42NkgxNi4yMnYxLjIzbDItLjgxLDItLjgyWk0xNC42NCwxN2gwVjEyLjU0aDB2LS4zMUg2VjE3aDguNjdabTMuOTQtLjM3di00bC0yLjM3LDF2MmwxLjE4LjQ4LDEuMTkuNDhaTTcuOTQsOS44NkEyLjc3LDIuNzcsMCwwLDEsNS4xOSw3LjExYTIuNzYsMi43NiwwLDAsMSw1LjUxLDBBMi43OCwyLjc4LDAsMCwxLDcuOTQsOS44NlptMC0zLjkzYTEuMjEsMS4yMSwwLDAsMC0uODMuMzUsMS4xNSwxLjE1LDAsMCwwLS4zNC44NEExLjA5LDEuMDksMCwwLDAsNy4xMSw4LDEuMTUsMS4xNSwwLDAsMCw4LDguMjgsMS4xMywxLjEzLDAsMCwwLDkuMTEsNy4xMiwxLjE2LDEuMTYsMCwwLDAsNy45NCw1LjkzWm01LjksMy45M2EyLjM0LDIuMzQsMCwwLDEtMS42Ny0uNjgsMi4zLDIuMywwLDAsMS0uNjgtMS42NywyLjM1LDIuMzUsMCwwLDEsNC0xLjY3LDIuMzcsMi4zNywwLDAsMSwwLDMuMzQsMi4zMywyLjMzLDAsMCwxLTEuNjguNjhabTAtMy4xNGEuNzUuNzUsMCwxLDAsLjU1LjIyLjczLjczLDAsMCwwLS41NS0uMjJaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC00LjM1KVwiLz48L2c+PC9zdmc+JyxcclxuICAgbGluazogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzJcIj48Zz48cGF0aCBkPVwiTTEzLjA1LDEzLjYzYS4yNC4yNCwwLDAsMSwuMTUuMjJMMTMuNDIsMTZhLjE5LjE5LDAsMCwxLS4wOC4xOGwtMi4xMiwyLjE0YTQuMDgsNC4wOCwwLDAsMS0xLjI5Ljg1QTQsNCwwLDAsMSw0LjcxLDE3YTMuOTIsMy45MiwwLDAsMS0uMy0xLjUyQTQsNCwwLDAsMSw0LjcxLDE0YTMuOTEsMy45MSwwLDAsMSwuODctMS4zTDcuNywxMC41NmEuMjUuMjUsMCwwLDEsLjItLjA2bDIuMTcuMjJhLjIxLjIxLDAsMCwxLC4xOS4xNS4yNC4yNCwwLDAsMSwwLC4yNUw3LjEyLDE0LjIzYTEuODEsMS44MSwwLDAsMCwwLDIuNTgsMS43OCwxLjc4LDAsMCwwLDEuMjkuNTIsMS43NCwxLjc0LDAsMCwwLDEuMjgtLjUyTDEyLjgsMTMuN2EuMjQuMjQsMCwwLDEsLjI1LS4wN1pNMTksNC45MmE0LDQsMCwwLDEsMCw1LjY2TDE2Ljg2LDEyLjdhLjI1LjI1LDAsMCwxLS4xNy4wOGwtMi4yLS4yM2EuMjEuMjEsMCwwLDEtLjE5LS4xNS4yMi4yMiwwLDAsMSwwLS4yNUwxNy40NCw5YTEuODEsMS44MSwwLDAsMCwwLTIuNTgsMS43OCwxLjc4LDAsMCwwLTEuMjktLjUyLDEuNzQsMS43NCwwLDAsMC0xLjI4LjUyTDExLjc2LDkuNTdhLjIxLjIxLDAsMCwxLS4yNSwwLC4yNC4yNCwwLDAsMS0uMTYtLjIxbC0uMjItMi4xN2EuMTkuMTksMCwwLDEsLjA4LS4xOGwyLjEyLTIuMTRhNC4wOCw0LjA4LDAsMCwxLDEuMjktLjg1LDQuMDUsNC4wNSwwLDAsMSwzLjA2LDAsMy44NSwzLjg1LDAsMCwxLDEuMy44NVpNNS44NCw5LjgyYS4yNS4yNSwwLDAsMS0uMTgtLjA4LjE5LjE5LDAsMCwxLS4wNy0uMTlsLjExLS43N2EuMi4yLDAsMCwxLC4xMS0uMTcuMjQuMjQsMCwwLDEsLjIsMGwyLjUuNzJhLjI1LjI1LDAsMCwxLC4xNS4yNy4yMi4yMiwwLDAsMS0uMjMuMjFsLTIuNTksMFptNC4xMi0yLS43My0yLjVhLjI3LjI3LDAsMCwxLDAtLjJBLjIxLjIxLDAsMCwxLDkuNDEsNUwxMC4xOSw1YS4yNS4yNSwwLDAsMSwuMTksMCwuMjMuMjMsMCwwLDEsLjA4LjE4bC0uMDUsMi42MWEuMi4yLDAsMCwxLS4xOS4yM2gwQS4yMi4yMiwwLDAsMSwxMCw3Ljg1Wm04Ljc2LDUuNThhLjI1LjI1LDAsMCwxLC4xOC4wOC4yMy4yMywwLDAsMSwuMDYuMmwtLjExLjc3YS4yNS4yNSwwLDAsMS0uMTEuMTcuMjEuMjEsMCwwLDEtLjEyLDBsLS4wOCwwTDE2LDE0YS4yNS4yNSwwLDAsMS0uMTUtLjI3LjIyLjIyLDAsMCwxLC4yMi0uMjFsMS4yOSwwLDEuMzMsMFptLTQuMTIsMiwuNzQsMi41MWEuMjguMjgsMCwwLDEsMCwuMi4yMy4yMywwLDAsMS0uMTguMTFsLS44LjExYS4yMy4yMywwLDAsMS0uMTctLjA3LjI1LjI1LDAsMCwxLS4wOC0uMThsMC0yLjYxYS4yMi4yMiwwLDAsMSwuMjItLjIyLjIxLjIxLDAsMCwxLC4yNi4xNVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzcpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBtYXRoOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMS44MSAxNS43M1wiPjxnPjxwYXRoIGQ9XCJNMTcuMTksNS43M2ExLDEsMCwwLDAsLjcxLS4yOSwxLDEsMCwwLDAsLjI4LS43LDEsMSwwLDAsMC0xLTFINy4zNWExLDEsMCwwLDAtMSwxLC43Ny43NywwLDAsMCwuMTMuNDdoMGw0LjU4LDYuNDNMNi42OCwxNy44MWExLjI1LDEuMjUsMCwwLDAtLjI5LjcxLjk0Ljk0LDAsMCwwLC4yOC43LjkyLjkyLDAsMCwwLC42OS4yOEgxNy4yYTEsMSwwLDAsMCwuNzEtLjI4LDEsMSwwLDAsMCwwLTEuMzkuOTIuOTIsMCwwLDAtLjcxLS4yOUg5LjI2bDMuODctNS40M2EuODYuODYsMCwwLDAsMC0uOTVMOS4yNiw1LjczaDcuOTNaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC02LjM4IC0zLjc3KVwiLz48L2c+PC9zdmc+JyxcclxuICAgdW5saW5rOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxNS43MlwiPjxnPjxwYXRoIGQ9XCJNMTksMTguMzJhNCw0LDAsMCwwLDAtNS42OEwxNS44NSw5LjVsLTEuMTcsMS41NUwxNy41NywxNGEyLDIsMCwwLDEsLjYxLDEuNDcsMi4wOCwyLjA4LDAsMCwxLTIuMDksMi4wOSwyLDIsMCwwLDEtMS40Ny0uNjFsLS4zOC0uMzctMS43NCwxLC44Ljc4YTQsNCwwLDAsMCw1LjY4LDBaTTgsOS43N2EyLDIsMCwwLDEtMS4yNy0xLDEuODksMS44OSwwLDAsMS0uMjEtMS41N0EyLjEsMi4xLDAsMCwxLDcuNDUsNiwyLDIsMCwwLDEsOSw1Ljc2TDEyLjI3LDcuMmwuNDktMkw5LjQ4LDMuOWE0LDQsMCwwLDAtMy4wNi40MUEzLjgyLDMuODIsMCwwLDAsNC41Niw2LjczYTMuOCwzLjgsMCwwLDAsLjQsM0EzLjc4LDMuNzgsMCwwLDAsNy4zOSwxMS42bDUuMzgsMiwuNDktMi0yLjY0LS45NEw4LDkuNzdaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgdGFibGVfaGVhZGVyOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NSAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTcsMTkuNXYtLjc4SDE1LjV2Ljc4SDE3Wm0tMywwdi0uNzhIMTIuNXYuNzhIMTRabS0zLDB2LS43OEg5LjUzdi43OEgxMVptLTMsMHYtLjc4SDYuNTN2Ljc4SDhabTEwLjU1LDBhMS43MywxLjczLDAsMCwwLC44NS0uMzUsMS42NywxLjY3LDAsMCwwLC41Ni0uNzZsLS43MS0uMzFhMS4yMSwxLjIxLDAsMCwxLS4zNS40LDEuMzQsMS4zNCwwLDAsMS0uNTMuMjNsLjA4LjM4Yy4wNi4yNC4wOS4zOC4xLjQxWm0tMTMuNy0uNjMuNTUtLjU1QS43Ny43NywwLDAsMSw1LjI1LDE4YTEuMzEsMS4zMSwwLDAsMS0uMDYtLjM4di0uMzhINC40MXYuMzhhMiwyLDAsMCwwLC4xMi42OCwxLjYsMS42LDAsMCwwLC4zNS41N1ptMTUuMjctMi4xMlYxNS4yNmgtLjc4djEuNDloLjc4Wm0tMTUtMVYxNC4yM0g0LjQxdjEuNDloLjc4Wm0xNS0yVjEyLjI2aC0uNzh2MS40OWguNzhabS0xNS0xVjExLjIySDQuNDF2MS41MWguNzhabTE1LTJWOS4yNmgtLjc4djEuNTFoLjc4Wm0tMTUtMVY4LjE3SDQuNDFWOS43NGguNzhabTE1LTJWNi4yOGgtLjc4VjcuNzdoLjc4Wm0tMTUtMS4xMVY1LjMzTDQuNDgsNS4xYS43Ny43NywwLDAsMC0uMDcuMjcsMi43MiwyLjcyLDAsMCwwLDAsLjI4djFoLjc5Wk0xOS4yMSw1bC42My0uNEExLjYyLDEuNjIsMCwwLDAsMTkuMTYsNGExLjk0LDEuOTQsMCwwLDAtLjkxLS4yMnYuNzhhMS4zMSwxLjMxLDAsMCwxLC41Ni4xMi44OC44OCwwLDAsMSwuNC4zNlpNNiw0LjU0SDcuNzhWMy43Nkg2YS44Mi44MiwwLDAsMC0uMjguMDZsLjEyLjM1Yy4wNy4yMS4xLjMzLjExLjM2Wm0xMC44LDBWMy43NkgxNS4yOHYuNzhoMS40OVptLTMsMFYzLjc2SDEyLjI4di43OGgxLjQ5Wm0tMywwVjMuNzZIOS4yOHYuNzhoMS41MVpNNiwxMC44NGgxMi42VjYuOTFINlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNCAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1lcmdlX2NlbGw6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc2IDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xOC45MiwxMy41aDEuMjN2NC4xNUExLjg0LDEuODQsMCwwLDEsMTguMywxOS41SDE0VjE4LjI3SDE4LjNhLjYuNiwwLDAsMCwuNDQtLjE4LjU5LjU5LDAsMCwwLC4xOC0uNDRWMTMuNVpNMTguMywzLjc2YTEuODQsMS44NCwwLDAsMSwxLjg1LDEuODVWOS44MkgxOC45MlY1LjZhLjYuNiwwLDAsMC0uMTgtLjQ0QS41OS41OSwwLDAsMCwxOC4zLDVIMTRWMy43NkgxOC4zWm0xLjg1LDguNTFIMTUuNkwxNy4yNiwxNGwtLjg2Ljg2LTMuMTQtMy4xN0wxNi40LDguNTFsLjg2Ljg2TDE1LjYyLDExaDQuNTR2MS4yNFptLTEzLjksNmg0LjI3VjE5LjVINi4yNUExLjg0LDEuODQsMCwwLDEsNC40LDE3LjY1VjEzLjVINS42M3Y0LjE1YS42MS42MSwwLDAsMCwuNjIuNjJabTAtMTQuNTFoNC4yN1Y1SDYuMjVhLjYuNiwwLDAsMC0uNDQuMTguNTcuNTcsMCwwLDAtLjE3LjQzVjkuODFINC40MVY1LjZBMS44MywxLjgzLDAsMCwxLDYuMjUsMy43NlptNSw3LjlMOC4xNSwxNC44Myw3LjMsMTQsOSwxMi4yN0g0LjQxVjExSDguOTRMNy4zLDkuMzgsNy43Myw5bC40My0uNDNaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBzcGxpdF9jZWxsOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NSAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTAuMzcsMTIuMjVINi43NEw4LjQsMTMuOTRsLS44Ny44Nkw0LjQxLDExLjYzLDcuNTMsOC41bC44Ny44Nkw2Ljc0LDExaDMuNjJ2MS4yM1ptOS43OC0uNjFMMTcsMTQuODEsMTYuMTMsMTRsMS42Ni0xLjY5SDE0LjE2VjExaDMuNjNMMTYuMTMsOS4zN2wuNDMtLjQzQTUuMjQsNS4yNCwwLDAsMSwxNyw4LjUxWk0xOC45LDguMjJWNS42MWEuNTcuNTcsMCwwLDAtLjE4LS40M0EuNjUuNjUsMCwwLDAsMTguMjksNUgxMi44OFYxOC4yOGg1LjQxYS43LjcsMCwwLDAsLjQ0LS4xOC41Ny41NywwLDAsMCwuMTgtLjQzVjE1aDEuMjN2Mi42NGExLjg0LDEuODQsMCwwLDEtMS44NSwxLjgzaC0xMkExLjg0LDEuODQsMCwwLDEsNC45NCwxOWExLjgxLDEuODEsMCwwLDEtLjU0LTEuMjlWMTVINS42M3YyLjY0YS41Ny41NywwLDAsMCwuMTguNDMuNjcuNjcsMCwwLDAsLjQ0LjE4aDUuNDFWNUg2LjI1YS43LjcsMCwwLDAtLjQ0LjE4LjU2LjU2LDAsMCwwLS4xNy40M1Y4LjIySDQuNDFWNS42MUExLjgsMS44LDAsMCwxLDUsNC4zMWExLjkxLDEuOTEsMCwwLDEsMS4zMS0uNTVoMTJhMS44OSwxLjg5LDAsMCwxLDEuMzEuNTUsMS44LDEuOCwwLDAsMSwuNTQsMS4zVjguMjNIMTguOVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNCAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGNhcHRpb246ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDEzLjc5XCI+PGc+PHBhdGggZD1cIk00LjQxLDE4LjUySDIwLjE1di0ySDQuNDFaTTIwLDQuNzNIMTguMDdWNmguNjV2LjY1SDIwVjQuNzNaTTE3LDZWNC43M0gxNC41NVY2SDE3Wk0xMy40OSw2VjQuNzNIMTFWNmgyLjQ3Wk0xMCw2VjQuNzNINy41VjZIMTBaTTUuNzksNmguNjVWNC43M0g0LjVWNi42N0g1LjhWNlpNNC41LDExLjM0SDUuNzlWOC40OEg0LjVaTTYuNDQsMTMuOEg1Ljc5di0uNjVINC41djEuOTRINi40NFpNMTcsMTUuMDlWMTMuOEgxNC41NXYxLjI5SDE3Wm0tMy41MiwwVjEzLjhIMTF2MS4yOWgyLjQ3Wm0tMy41MywwVjEzLjhINy41djEuMjlIMTBaTTIwLDEzLjE2SDE4Ljcydi42NWgtLjY1VjE1LjFIMjBabS0xLjI5LTEuODJIMjBWOC40OGgtMS4zdjIuODZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC00LjczKVwiLz48L2c+PC9zdmc+JyxcclxuICAgZWRpdDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzNcIj48Zz48cGF0aCBkPVwiTTcuNTEsNS42OGg2bDEuNTItMS41N0g2Ljk0YTIuNCwyLjQsMCwwLDAtMS43OS44MkEyLjgsMi44LDAsMCwwLDQuNDEsNi44VjE3YTIuNTUsMi41NSwwLDAsMCwuNzUsMS44QTIuNDgsMi40OCwwLDAsMCw3LDE5LjVIMTcuMjJhMi41NywyLjU3LDAsMCwwLDEuODMtLjc0LDIuNTIsMi41MiwwLDAsMCwuNzctMS44VjguODNsLTEuNTgsMS41NHY2YTEuNTQsMS41NCwwLDAsMS0xLjUzLDEuNTNINy41MUExLjU0LDEuNTQsMCwwLDEsNiwxNi40MVY3LjIxQTEuNTIsMS41MiwwLDAsMSw3LjUxLDUuNjhabTUuNjMsNy40N2gwTDEwLjcsMTAuNzRsLTEsMy4zOCwxLjcxLS40OCwxLjctLjQ5Wm0uMzQtLjM0aDBsNS4zNi01LjMyTDE2LjQsNS4wOCwxMSwxMC40bDEuMjMsMS4yMSwxLjIxLDEuMlpNMTkuOTMsNi40YS44Mi44MiwwLDAsMCwuMjItLjQ4QS41NC41NCwwLDAsMCwyMCw1LjQ3TDE4LjQ1LDRBLjY3LjY3LDAsMCwwLDE4LDMuNzdhLjcuNywwLDAsMC0uNDguMjFsLS43NC43MiwyLjQ0LDIuNDMuMzctLjM3LjM1LS4zNlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzcpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBkZWxldGU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjczIDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xOS4xNiw2LjcxYS45NC45NCwwLDAsMCwuNjktLjI4LjkxLjkxLDAsMCwwLC4yOS0uNjhBMSwxLDAsMCwwLDE5Ljg1LDVhLjkzLjkzLDAsMCwwLS42OS0uM0gxNC4yNEEuOTQuOTQsMCwwLDAsMTQsNC4wNmEuOTIuOTIsMCwwLDAtLjctLjNoLTJhMSwxLDAsMCwwLS43LjMuOTMuOTMsMCwwLDAtLjI4LjY4SDUuMzlBLjkyLjkyLDAsMCwwLDQuNyw1YTEsMSwwLDAsMC0uMjkuNzEuOTEuOTEsMCwwLDAsLjI5LjY4LDEsMSwwLDAsMCwuNjkuMjhIMTkuMTZabS0xMi43OSwxYTEsMSwwLDAsMC0uNy4zLjk0Ljk0LDAsMCwwLS4yOC42OXY4Ljg1QTEuODgsMS44OCwwLDAsMCw2LDE4LjkzYTEuOSwxLjksMCwwLDAsMS4zOS41N0gxNy4yYTEuODcsMS44NywwLDAsMCwxLjM5LS41OCwxLjkxLDEuOTEsMCwwLDAsLjU4LTEuMzlWOC42OEExLDEsMCwwLDAsMTguODgsOGEuODkuODksMCwwLDAtLjctLjI5LDEsMSwwLDAsMC0uNjkuMjkuOTIuOTIsMCwwLDAtLjI5LjY4djcuODdhMSwxLDAsMCwxLTEsMUg4LjM0YS45NC45NCwwLDAsMS0uNjktLjI4LDEsMSwwLDAsMS0uMjktLjcxVjguNjhhMSwxLDAsMCwwLTEtMVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBtb2RpZnk6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjcgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTE5Ljc5LDE1LjIzYS42Ni42NiwwLDAsMSwuMy4zOC41OS41OSwwLDAsMS0uMDcuNDhsLS44LDEuMzhhLjY2LjY2LDAsMCwxLS4zOC4zLjU5LjU5LDAsMCwxLS40OC0uMDdsLS42OC0uMzhhNC41NSw0LjU1LDAsMCwxLTEuMzQuNzd2Ljc4YS42NC42NCwwLDAsMS0uMTguNDUuNjEuNjEsMCwwLDEtLjQ1LjE4aC0xLjZhLjYuNiwwLDAsMS0uNDQtLjE4LjY2LjY2LDAsMCwxLS4xOS0uNDV2LS43OGE0LjM2LDQuMzYsMCwwLDEtMS4zMi0uNzdsLS42OS4zOGEuNTguNTgsMCwwLDEtLjQ4LjA3LjY2LjY2LDAsMCwxLS4zOC0uM2wtLjM4LS42NmguODNhMS43NywxLjc3LDAsMCwwLDEuMjMtLjUyLDEuNzIsMS43MiwwLDAsMCwuNTEtMS4yM3YtLjE4YTMsMywwLDAsMCwuNDktLjI4bC4xNS4wOWExLjgzLDEuODMsMCwwLDAsLjg4LjIzQTEuNzUsMS43NSwwLDAsMCwxNS44NCwxNGwuODgtMS41MmExLjcsMS43LDAsMCwwLC4xNy0xLjMyLDEuNjYsMS42NiwwLDAsMC0uMy0uNjEsMS44NCwxLjg0LDAsMCwwLS41MS0uNDVsLS4xNS0uMDksMC0uMjksMC0uMjguMTUtLjA5YTEsMSwwLDAsMCwuMjYtLjE4bDAsLjA2di43OGE0LjM0LDQuMzQsMCwwLDEsMS4zNC43N2wuNjgtLjM4YS42OC42OCwwLDAsMSwuNDgtLjA2LjY0LjY0LDAsMCwxLC4zOC4yOWwuOCwxLjM4YS41OC41OCwwLDAsMSwuMDcuNDguNjMuNjMsMCwwLDEtLjMuMzhsLS42OC40YTMuODQsMy44NCwwLDAsMSwuMDguNzYsNC4xMyw0LjEzLDAsMCwxLS4wOC43OGwuMzQuMTguMzIuMlpNMTAuMTcsNy44NmExLjksMS45LDAsMCwxLDEuMzUsMy4yMywxLjg1LDEuODUsMCwwLDEtMS4zNS41NUExLjksMS45LDAsMCwxLDguODMsOC40MWExLjkyLDEuOTIsMCwwLDEsMS4zNC0uNTVabTEuNTgsNy4yYS43My43MywwLDAsMS0uMjEuNDkuNjYuNjYsMCwwLDEtLjQ4LjJIOS4yOWEuNjguNjgsMCwwLDEtLjY5LS42OVYxNC4yYTQuNzUsNC43NSwwLDAsMS0xLjQ4LS44NmwtLjc1LjQ1YS43My43MywwLDAsMS0uNywwLC42My42MywwLDAsMS0uMjUtLjI2TDQuNTQsMTJhLjY3LjY3LDAsMCwxLS4wOC0uNTMuNzEuNzEsMCwwLDEsLjMyLS40MmwuNzUtLjQzYTQuOCw0LjgsMCwwLDEtLjA4LS44NSw0LjcxLDQuNzEsMCwwLDEsLjA4LS44NWwtLjc0LS40NGEuNzEuNzEsMCwwLDEtLjMyLS40Mi42NS42NSwwLDAsMSwuMDctLjU0TDUuNDIsNmEuNjYuNjYsMCwwLDEsLjQyLS4zMmwuMTgsMGEuNzMuNzMsMCwwLDEsLjM1LjA5bC43NS40M0E0LjY4LDQuNjgsMCwwLDEsOC42LDUuMzNWNC40NWEuNjguNjgsMCwwLDEsLjY5LS42OWgxLjc3YS42NC42NCwwLDAsMSwuNDguMi43My43MywwLDAsMSwuMjEuNDl2Ljg4YTQuNzUsNC43NSwwLDAsMSwxLjQ4Ljg1TDE0LDUuNzVhLjY3LjY3LDAsMCwxLC4zNC0uMDlsLjE4LDBhLjcxLjcxLDAsMCwxLC40Mi4zMmwuODksMS41NGEuNjcuNjcsMCwwLDEsLjA2LjUyLjczLjczLDAsMCwxLS4zMi40M2wtLjc1LjQyYTQuOCw0LjgsMCwwLDEsLjA4Ljg1LDQuNzEsNC43MSwwLDAsMS0uMDguODVsLjc1LjQzYS42Ni42NiwwLDAsMSwuMzIuNDIuNzMuNzMsMCwwLDEtLjA2LjU0bC0uODksMS41MmEuNjkuNjksMCwwLDEtLjI1LjI2LjcuNywwLDAsMS0uMzUuMDkuNjQuNjQsMCwwLDEtLjM0LS4wOWwtLjc1LS40NWE0Ljg3LDQuODcsMCwwLDEtMS40OC44NnYuODdaTTcuMjMsOS43NWEzLDMsMCwwLDAsLjg2LDIuMDgsMi45NCwyLjk0LDAsMSwwLDQuMTYtNC4xNiwzLDMsMCwwLDAtMi4wOC0uODVBMi45NCwyLjk0LDAsMCwwLDcuMjMsOS43NVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDQgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICByZXZlcnQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc2IDE0LjY5XCI+PGc+PHBhdGggZD1cIk0xOC4yNiwxNVYxMi4zbDEuODktMlYxNWEyLjU4LDIuNTgsMCwwLDEtLjI0LDFjLS4yLjU4LS43NS45Mi0xLjY1LDFINy41NnYyTDQuNDEsMTUuNjMsNy41NiwxM3YyaDEwLjdaTTYuMyw4LjI4VjExTDQuNDEsMTNWOC4yOGEyLjU4LDIuNTgsMCwwLDEsLjI0LTFjLjItLjU4Ljc1LS45MiwxLjY1LTFIMTd2LTJsMy4xNSwzLjM0TDE3LDEwLjN2LTJINi4zWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40IC00LjI4KVwiLz48L2c+PC9zdmc+JyxcclxuICAgYXV0b19zaXplOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNNi43MSwxNy4xOSw2Ljg5LDE2bDEuMjEtLjE1QTYsNiwwLDAsMSw2LjgxLDEzLjlhNS43OCw1Ljc4LDAsMCwxLS40NS0yLjI3QTYsNiwwLDAsMSw4LjEsNy40NWE1LjgzLDUuODMsMCwwLDEsNC4xNy0xLjczbDEtMS0xLTFBNy44OSw3Ljg5LDAsMCwwLDUsMTQuNjRhNy43Myw3LjczLDAsMCwwLDEuNzEsMi41NVptNS41NywyLjMxaDBBNy44Niw3Ljg2LDAsMCwwLDE3Ljg1LDYuMDdMMTcuNjcsNy4zbC0xLjIxLjE1YTUuOSw1LjksMCwwLDEsMS4yOSwxLjkyLDUuODEsNS44MSwwLDAsMSwuNDUsMi4yNiw1LjkxLDUuOTEsMCwwLDEtNS45LDUuOWwtMSwxLC40OS40OS40Ny41WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGluc2VydF9yb3dfYmVsb3c6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjggMTUuOFwiPjxnPjxwYXRoIGQ9XCJNMTUuNywxLjNjLTAuMS0wLjEtMC4xLTAuMi0wLjItMC4yTDE1LjMsMUgwLjRMMC4zLDEuMWMwLDAtMC4xLDAuMS0wLjEsMC4xYzAsMC0wLjEsMC4xLTAuMSwwLjFMMCwxLjR2Ny43bDAuMSwwLjFjMCwwLjEsMC4xLDAuMSwwLjIsMC4ybDAuMSwwLjFoMi4zVjkuM2wwLjEtMC41TDMsOC41bDAuMS0wLjJjLTAuMSwwLTAuMiwwLTAuMywwSDEuMnYtNmgxMy4zdjZoLTEuNmMtMC4xLDAtMC4yLDAtMC4zLDBsMC4xLDAuMmwwLjIsMC40QzEyLjksOSwxMyw5LjIsMTMsOS4zdjAuMWgyLjNsMC4yLTAuMWMwLjEsMCwwLjEtMC4xLDAuMi0wLjJsMC4xLTAuMVYxLjRMMTUuNywxLjN6XCIvPjxwYXRoIGQ9XCJNMTAuNSw3LjVDOS45LDcuMSw5LjMsNi44LDguNiw2LjdjLTAuMiwwLTAuNS0wLjEtMC43LDBjLTAuMiwwLTAuNSwwLTAuNywwQzYuNiw2LjcsNi4xLDYuOSw1LjYsNy4zQzUuMiw3LjYsNC43LDgsNC40LDguNEM0LjMsOC42LDQuMiw4LjgsNC4yLDguOUM0LjEsOS4xLDQsOS4zLDMuOSw5LjRDMy45LDkuNiwzLjgsOS43LDMuOCw5LjljMCwwLjItMC4xLDAuMy0wLjEsMC41di0wLjFjLTAuMSwwLjgsMC4xLDEuNiwwLjUsMi40YzAuNCwwLjcsMSwxLjMsMS43LDEuN2MwLjMsMC4yLDAuNiwwLjMsMC45LDAuM2MwLjMsMC4xLDAuNywwLjEsMSwwLjFjMC4zLDAsMC43LDAsMS0wLjFjMC4zLTAuMSwwLjYtMC4yLDAuOS0wLjNjMC41LTAuMywwLjktMC42LDEuMy0xYzAuMy0wLjQsMC42LTAuOCwwLjgtMS4zYzAuMS0wLjQsMC4yLTAuOSwwLjItMS40YzAtMC41LTAuMS0xLTAuMy0xLjRDMTEuNSw4LjYsMTEuMSw4LDEwLjUsNy41eiBNMTAuMSwxMS4zSDguNXYxLjZIOEg3LjlINy4zdjB2LTAuMXYtMS40SDUuN3YtMC40di0wLjJ2LTAuNmgwaDEuNVY4LjVoMS4ydjEuNmgxLjZWMTEuM3pcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGluc2VydF9yb3dfYWJvdmU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjggMTUuOFwiPjxnPjxwYXRoIGQ9XCJNMC4xLDE0LjVjMC4xLDAuMSwwLjEsMC4yLDAuMiwwLjJsMC4xLDAuMWgxNC45bDAuMS0wLjFjMCwwLDAuMS0wLjEsMC4xLTAuMWMwLDAsMC4xLTAuMSwwLjEtMC4xbDAuMS0wLjFWNi43bC0wLjEtMC4xYzAtMC4xLTAuMS0wLjEtMC4yLTAuMmwtMC4xLTAuMWgtMi4zdjAuMWwtMC4xLDAuNWwtMC4yLDAuNGwtMC4xLDAuMmMwLjEsMCwwLjIsMCwwLjMsMGgxLjZ2NkgxLjN2LTZoMS42YzAuMSwwLDAuMiwwLDAuMywwTDMuMSw3LjNMMi45LDYuOUMyLjgsNi44LDIuOCw2LjYsMi43LDYuNVY2LjNIMC40TDAuMyw2LjRjLTAuMSwwLTAuMSwwLjEtMC4yLDAuMkwwLDYuN3Y3LjdMMC4xLDE0LjV6XCIvPjxwYXRoIGQ9XCJNNS4zLDguM2MwLjYsMC41LDEuMiwwLjgsMS45LDAuOWMwLjIsMCwwLjUsMC4xLDAuNywwYzAuMiwwLDAuNSwwLDAuNywwYzAuNi0wLjEsMS4xLTAuMywxLjYtMC42YzAuNS0wLjMsMC45LTAuNywxLjItMS4yYzAuMS0wLjIsMC4yLTAuMywwLjMtMC41YzAuMS0wLjIsMC4yLTAuNCwwLjItMC41YzAuMS0wLjEsMC4xLTAuMywwLjEtMC40QzEyLDUuOCwxMiw1LjYsMTIsNS40djAuMWMwLjEtMC44LTAuMS0xLjYtMC41LTIuNGMtMC40LTAuNy0xLTEuMy0xLjctMS43QzkuNSwxLjMsOS4yLDEuMiw4LjksMS4xQzguNSwxLDguMiwxLDcuOSwxYy0wLjMsMC0wLjcsMC0xLDAuMUM2LjYsMS4yLDYuMywxLjMsNiwxLjRDNS41LDEuNyw1LjEsMiw0LjcsMi40QzQuNCwyLjgsNC4xLDMuMywzLjksMy44QzMuOCw0LjIsMy43LDQuNywzLjcsNS4yYzAsMC41LDAuMSwxLDAuMywxLjRDNC4zLDcuMiw0LjcsNy44LDUuMyw4LjN6IE01LjcsNC41aDEuNlYyLjloMC41aDAuMWgwLjZ2MHYwLjF2MS40SDEwdjAuNHYwLjJ2MC42aDBIOC41djEuNkg3LjNWNS43SDUuN1Y0LjV6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICBpbnNlcnRfY29sdW1uX2xlZnQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjggMTUuOFwiPjxnPjxwYXRoIGQ9XCJNMTQuNSwxNS43YzAuMS0wLjEsMC4yLTAuMSwwLjItMC4ybDAuMS0wLjFWMC40bC0wLjEtMC4xYzAsMC0wLjEtMC4xLTAuMS0wLjFjMCwwLTAuMS0wLjEtMC4xLTAuMUwxNC40LDBINi43TDYuNiwwLjFjLTAuMSwwLTAuMSwwLjEtMC4yLDAuMkw2LjMsMC40djIuM2gwLjFsMC41LDAuMUw3LjMsM2wwLjIsMC4xYzAtMC4xLDAtMC4yLDAtMC4zVjEuMmg2djEzLjNoLTZ2LTEuNmMwLTAuMSwwLTAuMiwwLTAuM2wtMC4yLDAuMWwtMC40LDAuMkM2LjcsMTIuOSw2LjYsMTMsNi40LDEzSDYuM3YyLjNsMC4xLDAuMmMwLDAuMSwwLjEsMC4xLDAuMiwwLjJsMC4xLDAuMWg3LjdMMTQuNSwxNS43elwiLz48cGF0aCBkPVwiTTguMywxMC41QzguNywxMCw5LDkuMyw5LjEsOC42YzAtMC4yLDAuMS0wLjUsMC0wLjdjMC0wLjIsMC0wLjUsMC0wLjdDOSw2LjcsOC44LDYuMSw4LjUsNS43QzguMiw1LjIsNy44LDQuOCw3LjMsNC41QzcuMiw0LjQsNyw0LjMsNi45LDQuMkM2LjcsNC4xLDYuNSw0LDYuNCw0QzYuMiwzLjksNi4xLDMuOSw1LjksMy44Yy0wLjIsMC0wLjMtMC4xLTAuNS0wLjFoMC4xQzQuNywzLjcsMy44LDMuOSwzLjEsNC4zQzIuNCw0LjcsMS44LDUuMywxLjQsNkMxLjMsNi4zLDEuMiw2LjYsMS4xLDYuOUMxLDcuMiwxLDcuNiwxLDcuOWMwLDAuMywwLDAuNywwLjEsMWMwLjEsMC4zLDAuMiwwLjYsMC4zLDAuOWMwLjMsMC41LDAuNiwwLjksMSwxLjNjMC40LDAuMywwLjgsMC42LDEuMywwLjhDNC4yLDEyLDQuNywxMi4xLDUuMSwxMmMwLjUsMCwxLTAuMSwxLjQtMC4zQzcuMiwxMS41LDcuOCwxMS4xLDguMywxMC41ek00LjUsMTAuMVY4LjVIMi45VjhWNy45VjcuM2gwSDNoMS40VjUuN2gwLjRoMC4yaDAuNnYwdjEuNWgxLjZ2MS4ySDUuN3YxLjZINC41elwiLz48L2c+PC9zdmc+JyxcclxuICAgaW5zZXJ0X2NvbHVtbl9yaWdodDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuOCAxNS44XCI+PGc+PHBhdGggZD1cIk0xLjMsMC4xQzEuMiwwLjIsMS4xLDAuMiwxLjEsMC4zTDEsMC40djE0LjlsMC4xLDAuMWMwLDAsMC4xLDAuMSwwLjEsMC4xYzAsMCwwLjEsMC4xLDAuMSwwLjFsMC4xLDAuMWg3LjdsMC4xLTAuMWMwLjEsMCwwLjEtMC4xLDAuMi0wLjJsMC4xLTAuMXYtMi4zSDkuM2wtMC41LTAuMWwtMC40LTAuMmwtMC4yLTAuMWMwLDAuMSwwLDAuMiwwLDAuM3YxLjZoLTZWMS4zaDZ2MS42YzAsMC4xLDAsMC4yLDAsMC4zbDAuMi0wLjFsMC40LTAuMkM5LDIuOSw5LjIsMi44LDkuMywyLjhoMC4xVjAuNUw5LjQsMC4zYzAtMC4xLTAuMS0wLjEtMC4yLTAuMkw5LjEsMEgxLjRMMS4zLDAuMXpcIi8+PHBhdGggZD1cIk03LjUsNS4zQzcsNS44LDYuNyw2LjUsNi42LDcuMmMwLDAuMi0wLjEsMC41LDAsMC43YzAsMC4yLDAsMC41LDAsMC43YzAuMSwwLjYsMC4zLDEuMSwwLjYsMS42YzAuMywwLjUsMC43LDAuOSwxLjIsMS4yYzAuMiwwLjEsMC4zLDAuMiwwLjUsMC4zYzAuMiwwLjEsMC40LDAuMiwwLjUsMC4yYzAuMSwwLjEsMC4zLDAuMSwwLjQsMC4xYzAuMiwwLDAuMywwLjEsMC41LDAuMWgtMC4xYzAuOCwwLjEsMS42LTAuMSwyLjQtMC41YzAuNy0wLjQsMS4zLTEsMS43LTEuN2MwLjItMC4zLDAuMy0wLjYsMC4zLTAuOWMwLjEtMC4zLDAuMS0wLjcsMC4xLTFjMC0wLjMsMC0wLjctMC4xLTFjLTAuMS0wLjMtMC4yLTAuNi0wLjMtMC45Yy0wLjMtMC41LTAuNi0wLjktMS0xLjNDMTMsNC40LDEyLjUsNC4yLDEyLDRjLTAuNC0wLjEtMC45LTAuMi0xLjQtMC4yYy0wLjUsMC0xLDAuMS0xLjQsMC4yQzguNSw0LjMsNy45LDQuNyw3LjUsNS4zeiBNMTEuMyw1Ljd2MS42aDEuNnYwLjV2MC4xdjAuNmgwaC0wLjFoLTEuNHYxLjZoLTAuNGgtMC4yaC0wLjZ2MFY4LjVIOC41VjcuM2gxLjZWNS43SDExLjN6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICBkZWxldGVfcm93OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NSAxMy44M1wiPjxnPjxwYXRoIGQ9XCJNNC43LDE4LjQ2bC4xMi4wOEgxOS43M2wuMTItLjA4YS41OC41OCwwLDAsMCwuMjItLjIybC4wOC0uMTIsMC03LjY5LS4wOC0uMTFhLjc3Ljc3LDAsMCwwLS4xOC0uMThsLS4xMS0uMDgtMi4zMSwwLS4wOC4yOC0uMS4yOWExLjU4LDEuNTgsMCwwLDEtLjEyLjI5bC0uMTQuMzRzMCwwLC4xOCwwSDE4Ljl2Nkg1LjY0di02SDcuMzVjLjE0LDAsLjIsMCwuMTgsMGwtLjE0LS4zNGEyLjg1LDIuODUsMCwwLDEtLjEyLS4yOWwtLjEtLjI5LS4wNy0uMjctMi4zMSwwLS4xMS4wOGEuNzcuNzcsMCwwLDAtLjE4LjE4bC0uMDguMTEsMCw3LjY5LjA4LjEyYS40Ny40NywwLDAsMCwuMDkuMTJsLjEzLjA5Wk0xMi4xMSwxM2E0LDQsMCwwLDAsMS40Ni0uMjEsNC41MSw0LjUxLDAsMCwwLDEuMzEtLjcxQTQsNCwwLDAsMCwxNi4yNiwxMGE0LjMyLDQuMzIsMCwwLDAtLjA4LTIuNTQsNC4zNCw0LjM0LDAsMCwwLTEtMS41Miw0LjE1LDQuMTUsMCwwLDAtMS41NC0xLDQuMzQsNC4zNCwwLDAsMC0xLjM1LS4yMkE0LjA3LDQuMDcsMCwwLDAsMTEsNC45MywzLjk0LDMuOTQsMCwwLDAsOS4yNCw2LjA3LDMuOTIsMy45MiwwLDAsMCw4LjE1LDguODhhMy45MSwzLjkxLDAsMCwwLC4xMi45NUE0LjE2LDQuMTYsMCwwLDAsMTIuMTEsMTNabTIuMzUtNC4xNHYuNThIMTAuMDlWOC4yN2g0LjM3di41OFpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNCAtNC43MSlcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGRlbGV0ZV9jb2x1bW46ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEzLjgxIDE1Ljc0XCI+PGc+PHBhdGggZD1cIk01LjY2LDE5LjQybC4xMi4wOCw3LjY5LDAsLjExLS4wOGEuNzcuNzcsMCwwLDAsLjE4LS4xOGwuMDgtLjExLDAtMi4zMi0uMTUsMC0uNDUtLjE1LS40Mi0uMTgtLjE3LS4wN2ExLDEsMCwwLDAsMCwuMjd2MS42M2gtNlY1aDZWNi42MmEuOS45LDAsMCwwLDAsLjI2bC4xNy0uMDcuNDItLjE3YTMuOTEsMy45MSwwLDAsMSwuNDUtLjE1bC4xNSwwLDAtMi4zMkwxMy43NSw0YS43Ny43NywwLDAsMC0uMTgtLjE4bC0uMTEtLjA4SDUuNzlsLS4xMy4wN2EuNjMuNjMsMCwwLDAtLjIxLjIybC0uMDguMTJWMTkuMDhsLjA4LjEyYS40Ny40NywwLDAsMCwuMDkuMTIuMzUuMzUsMCwwLDAsLjEyLjFabTktMy42N2E0LjE2LDQuMTYsMCwwLDAsMi4zNi0uNTEsNC4wOCw0LjA4LDAsMCwwLDEuNjctMS43Miw0LDQsMCwwLDAsLjM1LS45MSwzLjc5LDMuNzksMCwwLDAsLjEtMSw0LjcxLDQuNzEsMCwwLDAtLjExLTEsNSw1LDAsMCwwLS4zLS44Nyw0LjI1LDQuMjUsMCwwLDAtMS0xLjI1LDQuNDksNC40OSwwLDAsMC0xLjM0LS44MUE0LjI2LDQuMjYsMCwwLDAsMTUsNy40OGEzLjg4LDMuODgsMCwwLDAtMS40MS4yNUE0LjMyLDQuMzIsMCwwLDAsMTEuODYsOSw0LDQsMCwwLDAsMTEsMTAuOTRhNC40LDQuNCwwLDAsMC0uMDUuNjgsNC41LDQuNSwwLDAsMCwuMDUuNjgsMy45MywzLjkzLDAsMCwwLC42MSwxLjU3LDQuMjIsNC4yMiwwLDAsMCwxLjE4LDEuMiw0LjU5LDQuNTksMCwwLDAsLjQ4LjI3Yy4yLjEuMzcuMTcuNS4yMmEyLjQ0LDIuNDQsMCwwLDAsLjQ1LjEyLDQuNjEsNC42MSwwLDAsMCwuNS4wN1ptMi41NC00LjEydi41OEgxMi44N1YxMWg0LjM3di41OVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTUuMzcgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBmaXhlZF9jb2x1bW5fd2lkdGg6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk02LDVIMThBMSwxIDAgMCwxIDE5LDZBMSwxIDAgMCwxIDE4LDdINkExLDEgMCAwLDEgNSw2QTEsMSAwIDAsMSA2LDVNMjEsMlY0SDNWMkgyMU0xNSw4SDE3VjIySDE1VjhNNyw4SDlWMjJIN1Y4TTExLDhIMTNWMjJIMTFWOFpcIiAvPjwvc3ZnPicsXHJcbiAgIHJvdGF0ZV9sZWZ0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS44IDE1LjhcIj48Zz48cGF0aCBkPVwiTTAuNSwxMC4yYzAsMC4xLDAsMC4yLDAsMC4zdjAuMmwwLDBjMC4xLDAuMywwLjMsMC42LDAuNCwwLjlsMCwwQzEsMTEuOCwxLjMsMTIsMS41LDExLjloMC4xaDAuMmgwLjFjMC4xLTAuMSwwLjMtMC4zLDAuNC0wLjV2LTAuMmMwLTAuMSwwLTAuMi0wLjEtMC4zbDAsMGMtMC4yLTAuMi0wLjMtMC40LTAuMy0wLjdsMCwwQzEuOCwxMCwxLjcsOS45LDEuNSw5LjhjLTAuMSwwLTAuMiwwLTAuMywwSDAuOUMwLjcsOS45LDAuNiwxMCwwLjUsMTAuMkwwLjUsMTAuMnpcIi8+PHBhdGggZD1cIk0yLjIsMTEuNUwyLjIsMTEuNUwyLjIsMTEuNXpcIi8+PHBhdGggZD1cIk01LjksMy42TDUuOSwzLjZMNS45LDMuNnpcIi8+PHBhdGggZD1cIk0wLjEsNy45YzAsMC4zLDAsMC42LDAsMC45bDAsMGwwLDBsMCwwbDAsMGMwLDAuMiwwLjEsMC4zLDAuMiwwLjRsMCwwYzAuMiwwLjEsMC4zLDAuMiwwLjUsMC4ybDAsMGwwLDBjMC4yLDAsMC40LTAuMSwwLjUtMC4zbDAsMGMwLTAuMSwwLjEtMC4zLDAuMS0wLjRWOC42bDAsMGMwLTAuMiwwLTAuNSwwLTAuN2wwLDBjMC0wLjItMC4xLTAuNC0wLjItMC41QzEuMSw3LjMsMC45LDcuMiwwLjcsNy4yUzAuMyw3LjMsMC4yLDcuNEMwLjEsNy41LDAsNy43LDAuMSw3Ljl6XCIvPjxwYXRoIGQ9XCJNMS45LDEyLjdMMS45LDEyLjdjMCwwLjIsMCwwLjQsMC4yLDAuNWwwLDBsMC4yLDAuM2wwLDBjMC4yLDAuMSwwLjMsMC4yLDAuNSwwLjRsMCwwbDAsMGwwLDBsMCwwQzIuOSwxNCwzLDE0LjEsMy4yLDE0LjFzMC40LTAuMSwwLjUtMC4yYzAuMS0wLjIsMC4yLTAuMywwLjItMC41di0wLjFjMC0wLjItMC4xLTAuNC0wLjItMC41bDAsMGwtMC40LTAuNGwtMC4yLTAuMmwwLDBDMywxMi4xLDIuOCwxMiwyLjYsMTJsMCwwYy0wLjIsMC0wLjQsMC4xLTAuNSwwLjJsMCwwQzIsMTIuMywxLjksMTIuNSwxLjksMTIuN3pcIi8+PHBhdGggZD1cIk02LjYsMTVjMCwwLjIsMC4xLDAuNCwwLjIsMC41YzAuMSwwLjEsMC4yLDAuMiwwLjQsMC4zbDAsMGMwLjMsMCwwLjUsMCwwLjcsMGgwLjNsMCwwYzAuMiwwLDAuNC0wLjEsMC41LTAuMmMwLjEtMC4yLDAuMi0wLjMsMC4yLTAuNWwwLDBsMCwwYzAtMC4yLTAuMS0wLjQtMC4yLTAuNWwwLDBjLTAuMS0wLjEtMC4zLTAuMi0wLjUtMC4ybDAsMEg3LjljLTAuMSwwLTAuMywwLTAuNSwwbDAsMEg3LjNjLTAuMi0wLjEtMC4zLDAtMC41LDAuMWwwLDBDNi43LDE0LjYsNi42LDE0LjgsNi42LDE1TDYuNiwxNUw2LjYsMTVMNi42LDE1elwiLz48cGF0aCBkPVwiTTQuMiw3LjRDNCw3LjUsNCw3LjcsNCw3LjljMCwwLjIsMCwwLjQsMC4yLDAuNWwwLDBsMy4yLDMuMmwwLDBjMC4xLDAuMSwwLjMsMC4yLDAuNSwwLjJzMC4zLTAuMSwwLjUtMC4ybDAsMGwzLjItMy4ybDAsMGMwLjEtMC4xLDAuMi0wLjMsMC4yLTAuNWMwLTAuMi0wLjEtMC40LTAuMi0wLjVsMCwwQzExLjUsNy4zLDExLDYuNywxMCw1LjhsMCwwTDguNCw0LjJsMCwwQzguMyw0LjEsOC4xLDQsNy45LDRTNy41LDQuMSw3LjQsNC4yTDQuMiw3LjRMNC4yLDcuNHogTTYuOCw5TDUuNyw3LjlsMi4yLTIuMmwyLjMsMi4ybC0yLjMsMi4yQzcuNyw5LjksNy4zLDkuNSw2LjgsOUw2LjgsOXpcIi8+PHBhdGggZD1cIk00LjEsMTQuMUM0LDE0LjIsNCwxNC4zLDQsMTQuNHYwLjJsMCwwYzAuMSwwLjEsMC4yLDAuMywwLjQsMC40bDAsMGMwLjMsMC4xLDAuNiwwLjIsMC45LDAuNGgwLjFoMC4xbDAsMGMwLjIsMCwwLjMtMC4xLDAuNS0wLjFsMCwwYzAuMi0wLjEsMC4zLTAuMywwLjMtMC40bDAsMGwwLDBsMCwwbDAsMHYtMC4yYzAtMC4xLTAuMS0wLjItMC4xLTAuM2wwLDBDNi4xLDE0LjIsNiwxNC4xLDUuOCwxNGwwLDBjLTAuMy0wLjEtMC41LTAuMi0wLjgtMC4ybDAsMGMtMC4xLTAuMS0wLjItMC4xLTAuMy0wLjFINC41QzQuMywxMy43LDQuMiwxMy45LDQuMSwxNC4xelwiLz48cGF0aCBkPVwiTTkuMywxNC40YzAsMC4xLTAuMSwwLjMsMCwwLjRWMTVsMCwwYzAsMC4xLDAuMSwwLjMsMC41LDAuNGMwLjEsMC4xLDAuMywwLjEsMC40LDAuMWwwLDBoMC4xbDAsMGMwLjMtMC4xLDAuNi0wLjIsMC45LTAuM2wwLDBjMC4xLTAuMSwwLjItMC4yLDAuMy0wLjRsMC4xLTAuM2MwLTAuMS0wLjEtMC4yLTAuMS0wLjNsMCwwYy0wLjEtMC4yLTAuMi0wLjMtMC40LTAuNGwwLDBoLTAuM2MtMC4xLDAtMC4yLDAtMC4zLDBsMCwwYy0wLjIsMC4xLTAuNSwwLjItMC44LDAuM2wwLDBDOS41LDE0LjEsOS40LDE0LjIsOS4zLDE0LjRMOS4zLDE0LjR6XCIvPjxwYXRoIGQ9XCJNMTEuNCwxNC43TDExLjQsMTQuN0wxMS40LDE0Ljd6XCIvPjxwYXRoIGQ9XCJNOS41LDE1LjNMOS41LDE1LjNMOS41LDE1LjN6XCIvPjxwYXRoIGQ9XCJNMTUuOSw3LjljMC0xLTAuMi0yLTAuNi0zbDAsMGMtMC40LTEtMS0xLjktMS43LTIuNkMxMi44LDEuNiwxMiwxLDExLDAuNmwwLDBDMTAuMSwwLjIsOSwwLDgsMEM3LjMsMCw2LjUsMC4xLDUuOCwwLjNsMCwwQzUuMiwwLjUsNC42LDAuOCw0LDEuMUwzLjEsMC4ybDAsMEMyLjksMC4xLDIuOCwwLDIuNiwwSDIuNGwwLDBDMi4yLDAsMiwwLjIsMS45LDAuNGwwLDBMMC4xLDQuOWwwLDBDMCw1LDAsNS4xLDAsNS4yYzAsMC4yLDAuMSwwLjQsMC4yLDAuNWwwLDBjMC4yLDAuMSwwLjMsMC4yLDAuNSwwLjJoMC4xSDFsMCwwbDQuNy0xLjhsMCwwQzUuOSw0LDYuMSwzLjgsNi4xLDMuNlYzLjRDNi4xLDMuMiw2LDMsNS45LDIuOWwwLDBMNS4xLDIuMWMwLjQtMC4yLDAuOC0wLjQsMS4zLTAuNWMwLjUtMC4xLDEuMS0wLjIsMS43LTAuMmMwLjksMCwxLjcsMC4yLDIuNSwwLjVsMCwwYzAuOCwwLjMsMS41LDAuOCwyLjEsMS40YzAuNiwwLjYsMS4xLDEuMywxLjQsMi4xbDAsMGMwLjMsMC44LDAuNSwxLjYsMC41LDIuNXMtMC4yLDEuNy0wLjUsMi41bDAsMGMtMC4zLDAuOC0wLjgsMS41LTEuNCwyLjFjLTAuMiwwLjItMC40LDAuMy0wLjYsMC41bDAsMGMtMC4yLDAuMS0wLjMsMC4zLTAuMywwLjV2MC4xYzAsMC4xLDAsMC4zLDAuMSwwLjRsMCwwYzAuMSwwLjIsMC4zLDAuMywwLjUsMC4zbDAsMGMwLjEsMCwwLjMtMC4xLDAuNC0wLjJsMCwwbDAsMGwwLDBsMCwwYzAuMi0wLjIsMC41LTAuNCwwLjctMC42bDAsMGwwLDBsMCwwbDAsMGMwLjctMC44LDEuMy0xLjYsMS43LTIuNkMxNS42LDEwLDE1LjgsOSwxNS45LDcuOXogTTEuOSw0QzIsMy44LDIuMSwzLjUsMi4zLDMuMWwwLDBMMi43LDJsMS4yLDEuMkwxLjksNHpcIi8+PHBhdGggZD1cIk02LjgsMTUuNUw2LjgsMTUuNUw2LjgsMTUuNXpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHJvdGF0ZV9yaWdodDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuOCAxNS44XCI+PGc+PHBhdGggZD1cIk05LjksMTUuM0w5LjksMTUuM0w5LjksMTUuM3pcIi8+PHBhdGggZD1cIk02LjksMTUuMUw2LjksMTUuMWMwLDAuMSwwLjEsMC4zLDAuMiwwLjRsMCwwYzAuMSwwLjIsMC4zLDAuMywwLjUsMC4zbDAsMGgwLjNjMC4yLDAsMC40LDAsMC43LDBsMCwwYzAuMi0wLjEsMC4zLTAuMiwwLjQtMC4zYzAuMS0wLjEsMC4yLTAuMiwwLjItMC40VjE1YzAtMC4yLTAuMS0wLjQtMC4yLTAuNGMtMC4yLTAuMS0wLjMtMC4yLTAuNS0wLjJIOC40bDAsMGMtMC4xLDAtMC4zLDAtMC41LDBINy42bDAsMGMtMC4yLDAtMC40LDAuMS0wLjUsMC4yQzcsMTQuNyw2LjksMTQuOSw2LjksMTUuMXpcIi8+PHBhdGggZD1cIk02LjUsMTQuNEw2LjUsMTQuNEw2LjUsMTQuNHpcIi8+PHBhdGggZD1cIk01LjgsNS44TDUuOCw1LjhjLTEsMC45LTEuNSwxLjUtMS43LDEuNmwwLDBDNCw3LjUsNCw3LjcsNCw3LjljMCwwLjIsMCwwLjQsMC4yLDAuNWwwLDBsMy4yLDMuMmwwLDBjMC4yLDAuMSwwLjMsMC4yLDAuNSwwLjJzMC40LTAuMSwwLjUtMC4ybDAsMGwzLjItMy4ybDAsMGMwLjEtMC4xLDAuMi0wLjMsMC4yLTAuNWMwLTAuMi0wLjEtMC40LTAuMi0wLjVsMCwwTDguNCw0LjJDOC4zLDQuMSw4LjEsNCw3LjksNEM3LjcsNCw3LjUsNC4xLDcuNCw0LjJsMCwwTDUuOCw1Ljh6IE01LjYsNy45bDIuMy0yLjJsMi4yLDIuMkw5LDlsMCwwbDAsMGwwLDBsMCwwYy0wLjUsMC42LTAuOSwwLjktMS4xLDEuMUw1LjYsNy45elwiLz48cGF0aCBkPVwiTTksMTUuNUw5LDE1LjVMOSwxNS41elwiLz48cGF0aCBkPVwiTTkuNiwxNC43djAuMmwwLDBsMCwwbDAsMGwwLDBjMC4xLDAuMiwwLjEsMC4zLDAuMywwLjNjMC4xLDAuMSwwLjMsMC4xLDAuNCwwLjFsMCwwaDAuMWgwLjFjMC4zLTAuMSwwLjYtMC4zLDAuOS0wLjRsMCwwYzAuMS0wLjEsMC4yLTAuMiwwLjMtMC40bDAsMHYtMC4yYzAtMC4xLDAtMC4yLTAuMS0wLjNjLTAuMS0wLjItMC4yLTAuMy0wLjQtMC40SDExYy0wLjEsMC0wLjIsMC4xLTAuMywwLjFsMCwwYy0wLjIsMC4xLTAuNCwwLjItMC43LDAuM2wwLDBsMCwwYy0wLjEsMC4xLTAuMywwLjItMC40LDAuNEM5LjYsMTQuNSw5LjYsMTQuNiw5LjYsMTQuN3pcIi8+PHBhdGggZD1cIk05LDE0LjVMOSwxNC41TDksMTQuNXpcIi8+PHBhdGggZD1cIk05LjYsMTQuNEw5LjYsMTQuNEw5LjYsMTQuNHpcIi8+PHBhdGggZD1cIk0xMS43LDE0TDExLjcsMTRMMTEuNywxNHpcIi8+PHBhdGggZD1cIk0xNS42LDcuNEwxNS42LDcuNEwxNS42LDcuNHpcIi8+PHBhdGggZD1cIk0xNSw5LjRjMC4yLDAsMC40LDAsMC42LTAuMmwwLDBjMC4xLTAuMSwwLjItMC4yLDAuMi0wLjRsMCwwbDAsMGwwLDBsMCwwYzAtMC4zLDAtMC42LDAtMC45YzAtMC4yLTAuMS0wLjQtMC4yLTAuNWMtMC4xLTAuMS0wLjMtMC4yLTAuNS0wLjJzLTAuNCwwLjEtMC41LDAuMmMtMC4xLDAuMS0wLjIsMC4zLTAuMiwwLjVsMCwwYzAsMC4yLDAsMC40LDAsMC43bDAsMHYwLjFjMCwwLjEsMCwwLjMsMC4xLDAuNGwwLDBDMTQuNiw5LjMsMTQuOCw5LjQsMTUsOS40TDE1LDkuNEwxNSw5LjR6XCIvPjxwYXRoIGQ9XCJNMTQsMTJoMC4xaDAuMmgwLjFjMC4yLDAsMC41LTAuMiwwLjYtMC40bDAsMGMwLjItMC4zLDAuMy0wLjYsMC40LTAuOWwwLDB2LTAuMmMwLTAuMS0wLjEtMC4yLTAuMS0wLjNjLTAuMS0wLjItMC4yLTAuMy0wLjQtMC40aC0wLjNjLTAuMSwwLTAuMiwwLTAuMywwQzE0LjIsOS45LDE0LDEwLDE0LDEwLjNsMCwwYy0wLjEsMC4yLTAuMiwwLjUtMC4zLDAuN2wwLDBjLTAuMSwwLjEtMC4xLDAuMi0wLjEsMC4zdjAuMmwwLDBsMCwwQzEzLjYsMTEuNiwxMy44LDExLjgsMTQsMTJ6XCIvPjxwYXRoIGQ9XCJNMTQuNiw3LjRMMTQuNiw3LjRMMTQuNiw3LjR6XCIvPjxwYXRoIGQ9XCJNNC40LDE0LjJjLTAuMSwwLjEtMC4xLDAuMi0wLjEsMC4zbDAuMSwwLjJjMCwwLjIsMC4yLDAuMywwLjMsMC40bDAsMGMwLjMsMC4xLDAuNiwwLjMsMS4xLDAuNGwwLDBoMC4xbDAsMGMwLjEsMCwwLjItMC4xLDAuNC0wLjJjMC4xLDAsMC4yLTAuMiwwLjMtMC4zbDAsMHYtMC4yYzAtMC4xLTAuMS0wLjMtMC4yLTAuNGMtMC4xLTAuMS0wLjItMC4yLTAuNC0wLjNsMCwwYy0wLjItMC4xLTAuNS0wLjItMC43LTAuM2wwLDBjLTAuMSwwLTAuMiwwLTAuMywwSDQuN2wwLDBDNC42LDEzLjksNC40LDE0LDQuNCwxNC4yTDQuNCwxNC4yelwiLz48cGF0aCBkPVwiTTExLjksMTMuM2MwLDAuMiwwLjEsMC40LDAuMiwwLjZjMC4xLDAuMSwwLjMsMC4yLDAuNSwwLjJzMC40LTAuMSwwLjUtMC4ybDAsMGwwLDBsMCwwbDAsMGMwLjEtMC4xLDAuMy0wLjMsMC40LTAuNGwwLDBsMC4yLTAuM2wwLDBjMC4xLTAuMiwwLjItMC4zLDAuMi0wLjVsMCwwYzAtMC4yLTAuMS0wLjQtMC4yLTAuNWwwLDBjLTAuMS0wLjEtMC4zLTAuMi0wLjUtMC4ybDAsMGMtMC4yLDAtMC40LDAuMS0wLjUsMC4ybDAsMGwtMC4yLDAuMmwtMC40LDAuNGwwLDBDMTIsMTMsMTEuOSwxMy4xLDExLjksMTMuM0wxMS45LDEzLjN6XCIvPjxwYXRoIGQ9XCJNMTIuMSwxMy44TDEyLjEsMTMuOEwxMi4xLDEzLjh6XCIvPjxwYXRoIGQ9XCJNMTEuOSwxMy4zTDExLjksMTMuM0wxMS45LDEzLjN6XCIvPjxwYXRoIGQ9XCJNMTUuOSw1LjJjMC0wLjEtMC4xLTAuMi0wLjEtMC4zbDAsMEwxNCwwLjRsMCwwQzEzLjksMC4yLDEzLjcsMCwxMy41LDBsMCwwbDAsMGgtMC4yYy0wLjIsMC0wLjQsMC4xLTAuNSwwLjJsMCwwbC0wLjksMC45Yy0wLjUtMC4zLTEuMS0wLjYtMS44LTAuOGwwLDBDOS40LDAuMSw4LjcsMCw3LjksMGMtMSwwLTIsMC4yLTMsMC42UzMsMS42LDIuMywyLjNDMS42LDMuMSwxLDMuOSwwLjYsNC45bDAsMEMwLjIsNS44LDAsNi44LDAsNy45YzAsMSwwLjIsMiwwLjYsM3MwLjksMS44LDEuNywyLjZsMCwwbDAsMGwwLDBsMCwwYzAuMiwwLjIsMC41LDAuNCwwLjcsMC42bDAsMGwwLDBsMCwwbDAsMGMwLjIsMC4xLDAuMywwLjIsMC41LDAuMmwwLDBjMC4yLDAsMC40LTAuMSwwLjYtMC4zbDAsMGMwLjEtMC4xLDAuMS0wLjMsMC4xLTAuNHYtMC4xbDAsMEM0LjEsMTMuMyw0LDEzLjEsMy45LDEzbDAsMGMtMC4yLTAuMS0wLjQtMC4zLTAuNi0wLjVjLTAuNi0wLjYtMS4xLTEuMy0xLjQtMi4xbDAsMEMxLjYsOS42LDEuNCw4LjgsMS40LDcuOXMwLjItMS43LDAuNS0yLjVsMCwwYzAuMy0wLjgsMC44LTEuNSwxLjQtMi4xYzAuNi0wLjYsMS4zLTEuMSwyLjEtMS40bDAsMEM2LjIsMS42LDcsMS40LDcuOSwxLjRjMC42LDAsMS4xLDAuMSwxLjcsMC4yYzAuNSwwLjEsMC45LDAuMywxLjMsMC41bC0wLjgsMC44bDAsMEMxMCwzLjEsOS45LDMuMiw5LjksMy40djAuMmwwLDBsMCwwYzAsMC4yLDAuMiwwLjQsMC40LDAuNWwwLDBsNC41LDEuOGwwLDBIMTVoMC4xYzAuMiwwLDAuNC0wLjEsMC41LTAuMmwwLDBDMTUuNyw1LjYsMTUuOCw1LjQsMTUuOSw1LjJ6IE0xMS44LDMuMkwxMywybDAuNCwxLjFsMCwwYzAuMiwwLjQsMC4zLDAuNywwLjQsMC45TDExLjgsMy4yelwiLz48L2c+PC9zdmc+JyxcclxuICAgbWlycm9yX2hvcml6b250YWw6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE0Ljc1IDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xMy43NSwzLjc2bDUuOSwxNS43NGgtNS45VjMuNzZaTTQuOSwxOS41LDEwLjgsMy43NlYxOS41SDQuOVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuOSAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1pcnJvcl92ZXJ0aWNhbDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTQuNzVcIj48Zz48cGF0aCBkPVwiTTIwLjE1LDEzLjEsNC40MSwxOVYxMy4xSDIwLjE1Wk00LjQxLDQuMjVsMTUuNzQsNS45SDQuNDFWNC4yNVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTQuMjUpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBjaGVja2VkOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NSAxMi4xXCI+PGc+PHBhdGggZD1cIk00LjU5LDEyLjIzbC4xMi4xOEw5LjQzLDE3LjVhLjU4LjU4LDAsMCwwLC44NCwwTDIwLDcuNDVoMGEuNTguNTgsMCwwLDAsMC0uODRsLS44NS0uODVhLjU4LjU4LDAsMCwwLS44NCwwSDE4LjJsLTguMTIsOC40MWEuMjkuMjksMCwwLDEtLjQyLDBsLTMuNC0zLjYzYS41OC41OCwwLDAsMC0uODQsMGwtLjg1Ljg1YS42LjYsMCwwLDAtLjE0LjIxLjUxLjUxLDAsMCwwLDAsLjQ0Yy4wNS4wNi4xLjEzLjE2LjE5WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC4zOCAtNS41OClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGxpbmVfYnJlYWs6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xOSw2YTEsMSwwLDAsMC0xLDF2NGExLDEsMCwwLDEtMSwxSDcuNDFsMS4zLTEuMjlBMSwxLDAsMCwwLDcuMjksOS4yOWwtMywzYTEsMSwwLDAsMC0uMjEuMzMsMSwxLDAsMCwwLDAsLjc2LDEsMSwwLDAsMCwuMjEuMzNsMywzYTEsMSwwLDAsMCwxLjQyLDAsMSwxLDAsMCwwLDAtMS40Mkw3LjQxLDE0SDE3YTMsMywwLDAsMCwzLTNWN0ExLDEsMCwwLDAsMTksNlpcIi8+PC9zdmc+JyxcclxuICAgYXVkaW86ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xNCwzLjIzVjUuMjlDMTYuODksNi4xNSAxOSw4LjgzIDE5LDEyQzE5LDE1LjE3IDE2Ljg5LDE3Ljg0IDE0LDE4LjdWMjAuNzdDMTgsMTkuODYgMjEsMTYuMjggMjEsMTJDMjEsNy43MiAxOCw0LjE0IDE0LDMuMjNNMTYuNSwxMkMxNi41LDEwLjIzIDE1LjUsOC43MSAxNCw3Ljk3VjE2QzE1LjUsMTUuMjkgMTYuNSwxMy43NiAxNi41LDEyTTMsOVYxNUg3TDEyLDIwVjRMNyw5SDNaXCIgLz48L3N2Zz4nLFxyXG4gICBpbWFnZV9nYWxsZXJ5OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjMwIDMwIDE1MCAxNTBcIj48Zz48cGF0aCBkPVwiTTE1Mi43NzUsMTIwLjU0OFY1MS42NTFjMC0xMi4yNzEtOS45ODQtMjIuMjU0LTIyLjI1NC0yMi4yNTRINDMuNzI3Yy0xMi4yNzEsMC0yMi4yNTQsOS45ODMtMjIuMjU0LDIyLjI1NHY2OC44OTZjMCwxMi4yNyw5Ljk4MywyMi4yNTQsMjIuMjU0LDIyLjI1NGg4Ni43OTVDMTQyLjc5MSwxNDIuODAyLDE1Mi43NzUsMTMyLjgxNywxNTIuNzc1LDEyMC41NDh6IE0zNi4zOTQsNTEuNjUxYzAtNC4wNDIsMy4yOTEtNy4zMzMsNy4zMzMtNy4zMzNoODYuNzk1YzQuMDQyLDAsNy4zMzIsMy4yOTEsNy4zMzIsNy4zMzN2MjMuOTE3bC0xNC45MzgtMTcuNzY3Yy0xLjQxLTEuNjc4LTMuNDg3LTIuNjQ5LTUuNjgtMi42NThoLTAuMDI5Yy0yLjE4NCwwLTQuMjU1LDAuOTU0LTUuNjc0LDIuNjEzTDc2LjcwOSw5OC41MTlsLTkuMDk2LTkuMzk4Yy0xLjQyNy0xLjQ3NC0zLjM5Mi0yLjI5MS01LjQ0OC0yLjI3M2MtMi4wNTIsMC4wMjUtNC4wMDQsMC44OTMtNS4zOTYsMi40TDM2LjM5NCwxMTEuMzJWNTEuNjUxeiBNNDEuNjg0LDEyNy41ODVsMjAuNjk3LTIyLjQxNmw5LjMxMiw5LjYyMmMxLjQ2MSwxLjUxMSwzLjQ4OSwyLjMzNCw1LjU5MiwyLjI3YzIuMTAxLTAuMDY2LDQuMDc1LTEuMDEzLDUuNDQtMi42MTJsMzQuNDM2LTQwLjMwOGwyMC42OTMsMjQuNjEzdjIxLjc5NGMwLDQuMDQyLTMuMjksNy4zMzItNy4zMzIsNy4zMzJINDMuNzI3QzQzLjAxOCwxMjcuODgsNDIuMzM0LDEyNy43NzUsNDEuNjg0LDEyNy41ODV6IE0xODIuNjE2LDE1Mi41Vjc1LjY1N2MwLTQuMTItMy4zNC03LjQ2LTcuNDYxLTcuNDZjLTQuMTE5LDAtNy40NiwzLjM0LTcuNDYsNy40NlYxNTIuNWMwLDQuMTEyLTMuMzQ3LDcuNDYtNy40NjEsNy40NmgtOTRjLTQuMTE5LDAtNy40NiwzLjMzOS03LjQ2LDcuNDU5YzAsNC4xMjMsMy4zNDEsNy40NjIsNy40Niw3LjQ2Mmg5NEMxNzIuNTc2LDE3NC44ODEsMTgyLjYxNiwxNjQuODQxLDE4Mi42MTYsMTUyLjV6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICBib29rbWFyazogJzxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTcsM0g3QTIsMiAwIDAsMCA1LDVWMjFMMTIsMThMMTksMjFWNUMxOSwzLjg5IDE4LjEsMyAxNywzWlwiIC8+PC9zdmc+JyxcclxuICAgZG93bmxvYWQ6ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTIgMTJINFYxN0gyMFYxMkgyMlYxN0MyMiAxOC4xMSAyMS4xMSAxOSAyMCAxOUg0QzIuOSAxOSAyIDE4LjExIDIgMTdWMTJNMTIgMTVMMTcuNTUgOS41NEwxNi4xMyA4LjEzTDEzIDExLjI1VjJIMTFWMTEuMjVMNy44OCA4LjEzTDYuNDYgOS41NUwxMiAxNVpcIiAvPjwvc3ZnPicsXHJcbiAgIGRpcl9sdHI6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0wIDBoMjR2MjRIMFYwelwiIGZpbGw9XCJub25lXCIvPjxwYXRoIGQ9XCJNOSA0djRjLTEuMSAwLTItLjktMi0ycy45LTIgMi0ybTgtMkg5QzYuNzkgMiA1IDMuNzkgNSA2czEuNzkgNCA0IDR2NWgyVjRoMnYxMWgyVjRoMlYyem0wIDEydjNINXYyaDEydjNsNC00LTQtNHpcIi8+PC9zdmc+JyxcclxuICAgZGlyX3J0bDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTAgMGgyNHYyNEgwVjB6XCIgZmlsbD1cIm5vbmVcIi8+PHBhdGggZD1cIk0xMCA0djRjLTEuMSAwLTItLjktMi0ycy45LTIgMi0ybTgtMmgtOEM3Ljc5IDIgNiAzLjc5IDYgNnMxLjc5IDQgNCA0djVoMlY0aDJ2MTFoMlY0aDJWMnpNOCAxNGwtNCA0IDQgNHYtM2gxMnYtMkg4di0zelwiLz48L3N2Zz4nLFxyXG4gICAvLyBFcnJvclxyXG4gICBhbGVydF9vdXRsaW5lOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTEsMTVIMTNWMTdIMTFWMTVNMTEsN0gxM1YxM0gxMVY3TTEyLDJDNi40NywyIDIsNi41IDIsMTJBMTAsMTAgMCAwLDAgMTIsMjJBMTAsMTAgMCAwLDAgMjIsMTJBMTAsMTAgMCAwLDAgMTIsMk0xMiwyMEE4LDggMCAwLDEgNCwxMkE4LDggMCAwLDEgMTIsNEE4LDggMCAwLDEgMjAsMTJBOCw4IDAgMCwxIDEyLDIwWlwiIC8+PC9zdmc+JyxcclxuICAgLy8gTW9yZSBpY29uc1xyXG4gICBtb3JlX3RleHQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMTAgMTAgMTgwIDE4MFwiPjxnPjxwYXRoIGQ9XCJNNDkuNzExLDE0Mi4xODhoNDkuMDI3YzIuMzI4LDAuMDAyLDQuMzk0LDEuNDkyLDUuMTI5LDMuNjk5bDkuNzQyLDI5LjI1MmMwLjM2MywxLjA5MiwxLjM4NSwxLjgyOCwyLjUzNywxLjgzbDE1Ljg4MywwLjAxYzAuODU5LDAsMS42NjctMC40MTIsMi4xNy0xLjEwOXMwLjY0MS0xLjU5NCwwLjM3LTIuNDFsLTE2LjYyNS01MC4wNDVMODYuNTAzLDI4Ljk1M2MtMC4zNi0xLjA5Ny0xLjM4My0xLjgzOS0yLjUzNy0xLjg0Mkg2NC41MzJjLTEuMTUzLTAuMDAxLTIuMTc4LDAuNzM2LTIuNTQyLDEuODMxTDEzLjg0NywxNzMuNDU3Yy0wLjI3MSwwLjgxNi0wLjEzNSwxLjcxMywwLjM2OSwyLjQxMmMwLjUwMywwLjY5NywxLjMxMSwxLjEwOSwyLjE3MSwxLjEwOWgxNS44NzJjMS4xNTEsMCwyLjE3My0wLjczNiwyLjUzNy0xLjgyOGw5Ljc5My0yOS4yODdDNDUuMzI1LDE0My42Niw0Ny4zOSwxNDIuMTgsNDkuNzExLDE0Mi4xODhMNDkuNzExLDE0Mi4xODh6IE01My40OTMsMTE5LjA5OGwxNS42MDctNDYuOWMwLjc0NC0yLjE5NiwyLjgwNi0zLjY3NCw1LjEyNS0zLjY3NHM0LjM4MSwxLjQ3OCw1LjEyNSwzLjY3NGwxNS42MDcsNDYuOTA0YzAuNTM3LDEuNjIxLDAuMjYzLDMuNDAyLTAuNzM2LDQuNzg5Yy0xLjAxOCwxLjQwOC0yLjY0OSwyLjI0LTQuMzg2LDIuMjRINTguNjE1Yy0xLjczNiwwLTMuMzY4LTAuODMyLTQuMzg2LTIuMjRDNTMuMjMsMTIyLjUwNCw1Mi45NTYsMTIwLjcyMSw1My40OTMsMTE5LjA5OEw1My40OTMsMTE5LjA5OHogTTE5MC40NjUsNjMuMzJjMC0yLjkxOS0xLjAxNS01LjM5Ni0zLjA1OS03LjQyOGMtMi4wMjktMi4wMzEtNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMTYtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDMyLTMuMDU2LDQuNDk4LTMuMDU2LDcuMzg2YzAsMi44ODksMS4wMjYsNS4zNTQsMy4wNTYsNy4zODVjMi4wMzIsMi4wMzIsNC40OTksMy4wNTksNy4zODgsMy4wNTljMi44ODcsMCw1LjM1NC0xLjAyNiw3LjM4My0zLjA1OUMxODkuNDUsNjguNjMzLDE5MC40NjUsNjYuMTc4LDE5MC40NjUsNjMuMzJMMTkwLjQ2NSw2My4zMnogTTE5MC40NjUsMTAxLjk5NGMwLTIuODU4LTEuMDE1LTUuMzEzLTMuMDU5LTcuMzMzYy0yLjAyOS0yLjA0Mi00LjQ5Ni0zLjA0Ny03LjM4My0zLjA0N2MtMi44ODksMC01LjM1NSwxLjAwNS03LjM4OCwzLjA0N2MtMi4wMjksMi4wMjEtMy4wNTYsNC40ODYtMy4wNTYsNy4zNzZjMCwyLjg4NywxLjAyNiw1LjM1MiwzLjA1Niw3LjM5NWMyLjAzMiwyLjAyMSw0LjQ5OSwzLjA0Nyw3LjM4OCwzLjA0N2MyLjg4NywwLDUuMzU0LTEuMDI1LDcuMzgzLTMuMDQ3QzE4OS40NSwxMDcuMzg5LDE5MC40NjUsMTA0LjkxNCwxOTAuNDY1LDEwMS45OTRMMTkwLjQ2NSwxMDEuOTk0eiBNMTkwLjQ2NSwxNDAuNzZjMC0yLjkxOC0xLjAxNS01LjM5NS0zLjA1OS03LjQzOGMtMi4wMjktMi4wNDEtNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMDYtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDQzLTMuMDU2LDQuNTItMy4wNTYsNy40MzhjMCwyLjkyMiwxLjAyNiw1LjM5OCwzLjA1Niw3LjQzOWMyLjAzMiwyLjAyMSw0LjQ5OSwzLjA0Nyw3LjM4OCwzLjA0N2MyLjg4NywwLDUuMzU0LTEuMDI1LDcuMzgzLTMuMDQ3QzE4OS40NSwxNDYuMTU4LDE5MC40NjUsMTQzLjY4MiwxOTAuNDY1LDE0MC43NkwxOTAuNDY1LDE0MC43NnpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1vcmVfcGFyYWdyYXBoOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjEwIDEwIDE4MCAxODBcIj48Zz48cGF0aCBkPVwiTTEyOC4zOSwyOC40OTlINjMuNDkzYy0yNS41NTgsMC00Ni4zNTQsMjAuNzk2LTQ2LjM1NCw0Ni4zNTRjMCwyNS41NTksMjAuNzk2LDQ2LjM1Myw0Ni4zNTQsNDYuMzUzaDkuMjcxdjU1LjYyNWgxOC41NDJWNDcuMDRoOS4yNzFWMTc2LjgzaDE4LjU0M1Y0Ny4wNGg5LjI3MVYyOC40OTl6IE03Mi43NjQsMTAyLjY2NGgtOS4yNzFjLTE1LjMzNywwLTI3LjgxMy0xMi40NzUtMjcuODEzLTI3LjgxMmMwLTE1LjMzNiwxMi40NzYtMjcuODEzLDI3LjgxMy0yNy44MTNoOS4yNzFWMTAyLjY2NHogTTE5MC40NjUsNjMuMzJjMC0yLjkxOS0xLjAxNS01LjM5Ni0zLjA1OS03LjQyOGMtMi4wMjktMi4wMzEtNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMTYtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDMyLTMuMDU2LDQuNDk4LTMuMDU2LDcuMzg2YzAsMi44ODksMS4wMjYsNS4zNTQsMy4wNTYsNy4zODVjMi4wMzIsMi4wMzIsNC40OTksMy4wNTksNy4zODgsMy4wNTljMi44ODcsMCw1LjM1NC0xLjAyNiw3LjM4My0zLjA1OUMxODkuNDUsNjguNjMzLDE5MC40NjUsNjYuMTc4LDE5MC40NjUsNjMuMzJMMTkwLjQ2NSw2My4zMnogTTE5MC40NjUsMTAxLjk5NGMwLTIuODU4LTEuMDE1LTUuMzEzLTMuMDU5LTcuMzMzYy0yLjAyOS0yLjA0Mi00LjQ5Ni0zLjA0Ny03LjM4My0zLjA0N2MtMi44ODksMC01LjM1NSwxLjAwNS03LjM4OCwzLjA0N2MtMi4wMjksMi4wMjEtMy4wNTYsNC40ODYtMy4wNTYsNy4zNzZjMCwyLjg4NywxLjAyNiw1LjM1MiwzLjA1Niw3LjM5NWMyLjAzMiwyLjAyMSw0LjQ5OSwzLjA0Nyw3LjM4OCwzLjA0N2MyLjg4NywwLDUuMzU0LTEuMDI1LDcuMzgzLTMuMDQ3QzE4OS40NSwxMDcuMzg5LDE5MC40NjUsMTA0LjkxNCwxOTAuNDY1LDEwMS45OTRMMTkwLjQ2NSwxMDEuOTk0eiBNMTkwLjQ2NSwxNDAuNzZjMC0yLjkxOC0xLjAxNS01LjM5NS0zLjA1OS03LjQzOGMtMi4wMjktMi4wNDEtNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMDYtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDQzLTMuMDU2LDQuNTItMy4wNTYsNy40MzhjMCwyLjkyMiwxLjAyNiw1LjM5OCwzLjA1Niw3LjQzOWMyLjAzMiwyLjAyMSw0LjQ5OSwzLjA0Nyw3LjM4OCwzLjA0N2MyLjg4NywwLDUuMzU0LTEuMDI1LDcuMzgzLTMuMDQ3QzE4OS40NSwxNDYuMTU4LDE5MC40NjUsMTQzLjY4MiwxOTAuNDY1LDE0MC43NkwxOTAuNDY1LDE0MC43NnpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1vcmVfcGx1czogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIzNSAzMCAxNDAgMTQwXCI+PGc+PHBhdGggZD1cIk0xMzcuMjE1LDEwMi4wNDVjMCwzLjQ5OC0yLjgzNSw2LjMzMi02LjMzMyw2LjMzMkgyNC41NDljLTMuNDk4LDAtNi4zMzQtMi44MzQtNi4zMzQtNi4zMzJsMCwwYzAtMy40OTgsMi44MzYtNi4zMzMsNi4zMzQtNi4zMzNoMTA2LjMzM0MxMzQuMzgsOTUuNzExLDEzNy4yMTUsOTguNTQ3LDEzNy4yMTUsMTAyLjA0NUwxMzcuMjE1LDEwMi4wNDV6IE03Ny43MTUsMTYxLjU0NWMtMy40OTgsMC02LjMzMy0yLjgzNi02LjMzMy02LjMzNFY0OC44NzhjMC0zLjQ5OCwyLjgzNi02LjMzMyw2LjMzMy02LjMzM2wwLDBjMy40OTgsMCw2LjMzNCwyLjgzNSw2LjMzNCw2LjMzM3YxMDYuMzMzQzg0LjA0OSwxNTguNzA5LDgxLjIxMywxNjEuNTQ1LDc3LjcxNSwxNjEuNTQ1TDc3LjcxNSwxNjEuNTQ1eiBNMTkwLjQ2NSw2My4zMmMwLTIuOTE5LTEuMDE1LTUuMzk2LTMuMDU5LTcuNDI4Yy0yLjAyOS0yLjAzMS00LjQ5Ni0zLjA0Ny03LjM4My0zLjA0N2MtMi44ODksMC01LjM1NSwxLjAxNi03LjM4OCwzLjA0N2MtMi4wMjksMi4wMzItMy4wNTYsNC40OTgtMy4wNTYsNy4zODZjMCwyLjg4OSwxLjAyNiw1LjM1NCwzLjA1Niw3LjM4NWMyLjAzMiwyLjAzMiw0LjQ5OSwzLjA1OSw3LjM4OCwzLjA1OWMyLjg4NywwLDUuMzU0LTEuMDI2LDcuMzgzLTMuMDU5QzE4OS40NSw2OC42MzIsMTkwLjQ2NSw2Ni4xNzcsMTkwLjQ2NSw2My4zMkwxOTAuNDY1LDYzLjMyeiBNMTkwLjQ2NSwxMDEuOTkzYzAtMi44NTgtMS4wMTUtNS4zMTMtMy4wNTktNy4zMzNjLTIuMDI5LTIuMDQyLTQuNDk2LTMuMDQ3LTcuMzgzLTMuMDQ3Yy0yLjg4OSwwLTUuMzU1LDEuMDA1LTcuMzg4LDMuMDQ3Yy0yLjAyOSwyLjAyMS0zLjA1Niw0LjQ4Ni0zLjA1Niw3LjM3NmMwLDIuODg4LDEuMDI2LDUuMzUzLDMuMDU2LDcuMzk2YzIuMDMyLDIuMDIxLDQuNDk5LDMuMDQ3LDcuMzg4LDMuMDQ3YzIuODg3LDAsNS4zNTQtMS4wMjUsNy4zODMtMy4wNDdDMTg5LjQ1LDEwNy4zODksMTkwLjQ2NSwxMDQuOTE0LDE5MC40NjUsMTAxLjk5M0wxOTAuNDY1LDEwMS45OTN6IE0xOTAuNDY1LDE0MC43NmMwLTIuOTE4LTEuMDE1LTUuMzk1LTMuMDU5LTcuNDM4Yy0yLjAyOS0yLjA0MS00LjQ5Ni0zLjA0Ny03LjM4My0zLjA0N2MtMi44ODksMC01LjM1NSwxLjAwNi03LjM4OCwzLjA0N2MtMi4wMjksMi4wNDMtMy4wNTYsNC41Mi0zLjA1Niw3LjQzOGMwLDIuOTIyLDEuMDI2LDUuMzk4LDMuMDU2LDcuNDM5YzIuMDMyLDIuMDIxLDQuNDk5LDMuMDQ3LDcuMzg4LDMuMDQ3YzIuODg3LDAsNS4zNTQtMS4wMjUsNy4zODMtMy4wNDdDMTg5LjQ1LDE0Ni4xNTgsMTkwLjQ2NSwxNDMuNjgyLDE5MC40NjUsMTQwLjc2TDE5MC40NjUsMTQwLjc2elwiLz48L2c+PC9zdmc+JyxcclxuICAgbW9yZV9ob3Jpem9udGFsOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NiAzLjU4XCI+PGc+PHBhdGggZD1cIk00LjY0LDEwLjczYTEuODQsMS44NCwwLDAsMSwuNjUtLjY1LDEuNzYsMS43NiwwLDAsMSwxLjc5LDBBMS43OSwxLjc5LDAsMCwxLDgsMTEuNjNhMS44NCwxLjg0LDAsMCwxLS4yNS45LDEuNjksMS42OSwwLDAsMS0uNjUuNjUsMS44LDEuOCwwLDAsMS0yLjY5LTEuNTVBMi4wOCwyLjA4LDAsMCwxLDQuNjQsMTAuNzNabTYuMDksMGExLjg0LDEuODQsMCwwLDEsLjY1LS42NSwxLjc4LDEuNzgsMCwwLDEsMi42NywxLjU1LDEuNzMsMS43MywwLDAsMS0uMjQuOSwxLjg0LDEuODQsMCwwLDEtLjY1LjY1LDEuNzYsMS43NiwwLDAsMS0xLjc5LDAsMS43OSwxLjc5LDAsMCwxLS42NC0yLjQ0Wm02LjA4LDBhMS42OSwxLjY5LDAsMCwxLC42NS0uNjUsMS43NiwxLjc2LDAsMCwxLDEuNzksMCwxLjc5LDEuNzksMCwwLDEsLjksMS41NCwxLjczLDEuNzMsMCwwLDEtLjI0LjksMS44NCwxLjg0LDAsMCwxLS42NS42NSwxLjgsMS44LDAsMCwxLTIuNjktMS41NUEyLDIsMCwwLDEsMTYuODEsMTAuNzNaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjM5IC05Ljg0KVwiLz48L2c+PC9zdmc+JyxcclxuICAgbW9yZV92ZXJ0aWNhbDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMy45NCAxNS43NVwiPjxnPjxwYXRoIGQ9XCJNMTIuMjgsNy42OWExLjkyLDEuOTIsMCwwLDEtMS4zOS0uNTgsMiwyLDAsMCwxLS41OC0xLjM5LDEuOTIsMS45MiwwLDAsMSwuNTgtMS4zOSwyLDIsMCwwLDEsMS4zOS0uNTgsMS45MiwxLjkyLDAsMCwxLDEuMzkuNTgsMiwyLDAsMCwxLC41OCwxLjM5LDEuOTIsMS45MiwwLDAsMS0uNTgsMS4zOSwyLDIsMCwwLDEtMS4zOS41OFptMCwyYTEuOTIsMS45MiwwLDAsMSwxLjM5LjU4LDIsMiwwLDAsMSwuNTgsMS4zOUExLjkyLDEuOTIsMCwwLDEsMTMuNjcsMTNhMiwyLDAsMCwxLTEuMzkuNThBMS45MiwxLjkyLDAsMCwxLDEwLjg5LDEzYTIsMiwwLDAsMS0uNTgtMS4zOSwyLDIsMCwwLDEsMi0yWm0wLDUuOWExLjkyLDEuOTIsMCwwLDEsMS4zOS41OCwyLDIsMCwwLDEsLjU4LDEuMzksMS45MiwxLjkyLDAsMCwxLS41OCwxLjM5LDIsMiwwLDAsMS0xLjM5LjU4LDEuOTIsMS45MiwwLDAsMS0xLjM5LS41OCwyLDIsMCwwLDEtLjU4LTEuMzksMS45MiwxLjkyLDAsMCwxLC41OC0xLjM5LDEuOTQsMS45NCwwLDAsMSwxLjM5LS41OFpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTEwLjMxIC0zLjc1KVwiLz48L2c+PC9zdmc+JyxcclxuICAgLy8gTm90IGN1cnJlbnRseSB1c2VkXHJcbiAgIGF0dGFjaG1lbnQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDguMzggMTUuNjhcIj48Zz48cGF0aCBkPVwiTTE1LjIzLDZoMXY5Ljc4YTMuODgsMy44OCwwLDAsMS0xLjMxLDIuNDUsNCw0LDAsMCwxLTYuNTctMi40NVY3QTMsMywwLDAsMSw5LjIsNC44OWEzLDMsMCwwLDEsNSwyLjA5djguMzFhMS45MiwxLjkyLDAsMCwxLS41OCwxLjM5LDIsMiwwLDAsMS0xLjM5LjU4LDEuOTIsMS45MiwwLDAsMS0xLjM5LS41OCwyLDIsMCwwLDEtLjU4LTEuMzlWOGgxdjcuMzJhMSwxLDAsMCwwLC4yOS42OSwxLDEsMCwwLDAsLjY5LjI4QS45LjksMCwwLDAsMTMsMTZhMSwxLDAsMCwwLC4yOS0uNjlWN2ExLjkyLDEuOTIsMCwwLDAtLjU4LTEuMzlBMiwyLDAsMCwwLDExLjI3LDVhMS45MiwxLjkyLDAsMCwwLTEuMzkuNThBMiwyLDAsMCwwLDkuMzMsN3Y4LjMxYTMsMywwLDEsMCw1LjksMFY2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtOC4wOCAtMy43OClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1hcDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTEuNyAxNS42MlwiPjxnPjxwYXRoIGQ9XCJNMTIuMDUsMTIuNDJhMi45MywyLjkzLDAsMSwxLDIuMDctNUEyLjg4LDIuODgsMCwwLDEsMTUsOS40OWEzLDMsMCwwLDEtLjg2LDIuMDcsMi44OSwyLjg5LDAsMCwxLTIuMDcuODZabTAtNS4zNmEyLjQzLDIuNDMsMCwwLDAtMS43Miw0LjE2LDIuNDgsMi40OCwwLDAsMCwxLjcyLjcyLDIuNDQsMi40NCwwLDAsMCwwLTQuODhabTAtMy4zQTUuODQsNS44NCwwLDAsMSwxNy45LDkuNjJhOS45NCw5Ljk0LDAsMCwxLTEuNzMsNUEzMy41OSwzMy41OSwwLDAsMSwxMi44NCwxOWExLjUyLDEuNTIsMCwwLDEtLjIzLjIsMSwxLDAsMCwxLS41NS4yaDBhMSwxLDAsMCwxLS41NS0uMiwxLjUyLDEuNTIsMCwwLDEtLjIzLS4yLDMzLjU5LDMzLjU5LDAsMCwxLTMuMzMtNC4zMiw5LjkzLDkuOTMsMCwwLDEtMS43Mi01LDUuODQsNS44NCwwLDAsMSw1Ljg1LTUuODZaTTEyLDE4LjM0bC4wOC4wNS4wNi0uMDZhMzUuNTgsMzUuNTgsMCwwLDAsMy4wNi0zLjkzLDkuMzUsOS4zNSwwLDAsMCwxLjc0LTQuNzcsNC44OCw0Ljg4LDAsMCwwLTQuODgtNC44OEE0Ljc5LDQuNzksMCwwLDAsOC42LDYuMTcsNC44NCw0Ljg0LDAsMCwwLDcuMTcsOS42Miw5LjI5LDkuMjksMCwwLDAsOC45MSwxNC40LDM2LDM2LDAsMCwwLDEyLDE4LjM0WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNi4yIC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgbWFnaWNfc3RpY2s6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjczIDE1Ljc1XCI+PGc+PHBhdGggZD1cIk0xOS44NiwxOS4yMWExLDEsMCwwLDAsLjI4LS42OCwxLDEsMCwwLDAtLjI4LS43TDEzLDEwLjkzYTEsMSwwLDAsMC0uNy0uMjgsMSwxLDAsMCwwLS42OCwxLjY1bDYuOSw2LjlhMSwxLDAsMCwwLC42OS4yOS45My45MywwLDAsMCwuNjktLjI4Wk05LjE5LDguNTVhMywzLDAsMCwwLDEuNjgsMCwxNC4xMiwxNC4xMiwwLDAsMCwxLjQxLS4zMkExMS4yNiwxMS4yNiwwLDAsMCwxMC44LDcuMDZjLS41Ni0uMzYtLjg2LS41Ni0uOTEtLjU4UzEwLDUuOTEsMTAsNS4xMXMwLTEuMjYtLjE1LTEuMzdhNC4zNSw0LjM1LDAsMCwwLTEuMTkuNzFjLS41My40LS44MS42Mi0uODcuNjhhOSw5LDAsMCwwLTItLjYsNi44NCw2Ljg0LDAsMCwwLS43Ni0uMDlzMCwuMjcuMDguNzdhOC42LDguNiwwLDAsMCwuNjEsMnEtLjA5LjA5LS42OS44N2EzLjU5LDMuNTksMCwwLDAtLjY4LDEuMTdjLjEyLjE3LjU3LjIzLDEuMzYuMTVTNyw5LjI2LDcuMTUsOS4yM3MuMjEuMzYuNTcuOTFhMTAuNDksMTAuNDksMCwwLDAsMS4xNCwxLjQ4YzAtLjEuMTQtLjU3LjMxLTEuNGEzLDMsMCwwLDAsMC0xLjY3WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtMy43NClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGVtcHR5X2ZpbGU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEyLjc4IDE1Ljc1XCI+PGc+PHBhdGggZD1cIk0xNC43MywzLjc2LDE4LjY3LDcuN3Y5Ljg0YTIsMiwwLDAsMS0yLDJINy44NGExLjg5LDEuODksMCwwLDEtMS4zOC0uNTgsMiwyLDAsMCwxLS41Ny0xLjM5VjUuNzNhMS45MywxLjkzLDAsMCwxLC41Ny0xLjM4LDIsMiwwLDAsMSwxLjM4LS41OGg2LjYybC4yNiwwdjBabTIuOTUsNC45MmgtMmExLjkzLDEuOTMsMCwwLDEtMS4zOC0uNTcsMiwyLDAsMCwxLS41OC0xLjRWNi4xN2MwLS4zNiwwLS44NCwwLTEuNDNINy44NWExLDEsMCwwLDAtLjcuMjksMSwxLDAsMCwwLS4yOS43VjE3LjU0YTEsMSwwLDAsMCwuMjkuNjksMSwxLDAsMCwwLC42OS4yOWg4Ljg1YTEsMSwwLDAsMCwuNzEtLjI5LjkyLjkyLDAsMCwwLC4yOC0uNjlabTAtMUwxNC43Myw0Ljc0djJBMSwxLDAsMCwwLDE1LDcuNGExLDEsMCwwLDAsLjY5LjI5WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNS44OSAtMy43NilcIi8+PC9nPjwvc3ZnPidcclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gdXRpbGl0eSBmdW5jdGlvblxyXG4gKi9cclxuY29uc3QgdXRpbCA9IHtcclxuICAgIF9kOiBudWxsLFxyXG4gICAgX3c6IG51bGwsXHJcbiAgICBpc0lFOiBudWxsLFxyXG4gICAgaXNJRV9FZGdlOiBudWxsLFxyXG4gICAgaXNPU1hfSU9TOiBudWxsLFxyXG4gICAgaXNDaHJvbWl1bTogbnVsbCxcclxuICAgIGlzTW9iaWxlOiBudWxsLFxyXG4gICAgaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZDogbnVsbCxcclxuICAgIF9wcm9wZXJ0aWVzSW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fZCA9ICBkb2N1bWVudDtcclxuICAgICAgICB0aGlzLl93ID0gd2luZG93O1xyXG4gICAgICAgIHRoaXMuaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID4gLTE7XHJcbiAgICAgICAgdGhpcy5pc0lFX0VkZ2UgPSAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPiAtMSkgfHwgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ0VkZ2UnKSA+IC0xKTtcclxuICAgICAgICB0aGlzLmlzT1NYX0lPUyA9IC8oTWFjfGlQaG9uZXxpUG9kfGlQYWQpLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XHJcbiAgICAgICAgdGhpcy5pc0Nocm9taXVtID0gISF3aW5kb3cuY2hyb21lO1xyXG4gICAgICAgIHRoaXMuaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCA9ICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicpO1xyXG4gICAgICAgIHRoaXMuaXNNb2JpbGUgPSAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwO1xyXG4gICAgfSxcclxuXHJcbiAgICBfYWxsb3dlZEVtcHR5Tm9kZUxpc3Q6ICcuc2UtY29tcG9uZW50LCBwcmUsIGJsb2NrcXVvdGUsIGhyLCBsaSwgdGFibGUsIGltZywgaWZyYW1lLCB2aWRlbywgYXVkaW8sIGNhbnZhcycsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSFRNTCBSZXNlcnZlZCBXb3JkIENvbnZlcnRlci5cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZW50cyBcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IEhUTUwgc3RyaW5nXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfSFRNTENvbnZlcnRvcjogZnVuY3Rpb24gKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgY29uc3QgZWMgPSB7JyYnOiAnJmFtcDsnLCAnXFx1MDBBMCc6ICcmbmJzcDsnLCAnXFwnJzogJyZhcG9zOycsICdcIic6ICcmcXVvdDsnLCAnPCc6ICcmbHQ7JywgJz4nOiAnJmd0Oyd9O1xyXG4gICAgICAgIHJldHVybiBjb250ZW50cy5yZXBsYWNlKC8mfFxcdTAwQTB8J3xcInw8fD4vZywgZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgZWNbbV0gPT09ICdzdHJpbmcnKSA/IGVjW21dIDogbTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gVW5pY29kZSBDaGFyYWN0ZXIgJ1pFUk8gV0lEVEggU1BBQ0UnIChcXHUyMDBCKVxyXG4gICAgICovXHJcbiAgICB6ZXJvV2lkdGhTcGFjZTogU3RyaW5nLmZyb21DaGFyQ29kZSg4MjAzKSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gZmluZCAnemVybyB3aWR0aCBzcGFjZScgKC9cXHUyMDBCL2cpXHJcbiAgICAgKi9cclxuICAgIHplcm9XaWR0aFJlZ0V4cDogbmV3IFJlZ0V4cChTdHJpbmcuZnJvbUNoYXJDb2RlKDgyMDMpLCAnZycpLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBmaW5kIG9ubHkgJ3plcm8gd2lkdGggc3BhY2UnICgvXlxcdTIwMEIrJC8pXHJcbiAgICAgKi9cclxuICAgIG9ubHlaZXJvV2lkdGhSZWdFeHA6IG5ldyBSZWdFeHAoJ14nICsgU3RyaW5nLmZyb21DaGFyQ29kZSg4MjAzKSArICcrJCcpLFxyXG5cclxuICAgIGZvbnRWYWx1ZU1hcDoge1xyXG4gICAgICAgICd4eC1zbWFsbCc6IDEsXHJcbiAgICAgICAgJ3gtc21hbGwnOiAyLFxyXG4gICAgICAgICdzbWFsbCc6IDMsXHJcbiAgICAgICAgJ21lZGl1bSc6IDQsXHJcbiAgICAgICAgJ2xhcmdlJzogNSxcclxuICAgICAgICAneC1sYXJnZSc6IDYsXHJcbiAgICAgICAgJ3h4LWxhcmdlJzogN1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBBIG1ldGhvZCB0aGF0IGNoZWNrcyBJZiB0aGUgdGV4dCBpcyBibGFuayBvciB0byBzZWUgaWYgaXQgY29udGFpbnMgJ1pFUk8gV0lEVEggU1BBQ0UnIG9yIGVtcHR5ICh1dGlsLnplcm9XaWR0aFNwYWNlKVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8Tm9kZX0gdGV4dCBTdHJpbmcgdmFsdWUgb3IgTm9kZVxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIG9ubHlaZXJvV2lkdGhTcGFjZTogZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICBpZiAodGV4dCA9PT0gbnVsbCB8fCB0ZXh0ID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB0ZXh0ID0gdGV4dC50ZXh0Q29udGVudDtcclxuICAgICAgICByZXR1cm4gdGV4dCA9PT0gJycgfHwgdGhpcy5vbmx5WmVyb1dpZHRoUmVnRXhwLnRlc3QodGV4dCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldHMgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0XHJcbiAgICAgKiBAcmV0dXJucyB7WE1MSHR0cFJlcXVlc3R8QWN0aXZlWE9iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0WE1MSHR0cFJlcXVlc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvKiogSUUgKi9cclxuICAgICAgICBpZiAodGhpcy5fdy5BY3RpdmVYT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZTEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogbmV0c2NhcGUgKi9cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl93LlhNTEh0dHBSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIGZhaWwgKi9cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBPYmplY3QudmFsdWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdHxudWxsfSBvYmogT2JqZWN0IHBhcmFtZXRlci5cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWVzOiBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuICFvYmogPyBbXSA6IHRoaXMuX3cuT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9ialtpXTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydCB0aGUgQ2FtZWxDYXNlIFRvIHRoZSBLZWJhYkNhc2UuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gcGFyYW0gW0NhbWVsIHN0cmluZ11cclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGNhbWVsVG9LZWJhYkNhc2U6IGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbS5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAobGV0dGVyKSB7IHJldHVybiBcIi1cIiArIGxldHRlci50b0xvd2VyQ2FzZSgpOyB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW0ubWFwKGZ1bmN0aW9uKHN0cikgeyByZXR1cm4gdXRpbC5jYW1lbFRvS2ViYWJDYXNlKHN0cik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydCB0aGUgS2ViYWJDYXNlIFRvIHRoZSBDYW1lbENhc2UuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gcGFyYW0gW0tlYmFiQ2FzZSBzdHJpbmddXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfEFycmF5fVxyXG4gICAgICovXHJcbiAgICBrZWJhYlRvQ2FtZWxDYXNlOiBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW0ucmVwbGFjZSgvLVthLXpBLVpdL2csIGZ1bmN0aW9uIChsZXR0ZXIpIHsgcmV0dXJuIGxldHRlci5yZXBsYWNlKCctJywgJycpLnRvVXBwZXJDYXNlKCk7IH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbS5tYXAoZnVuY3Rpb24oc3RyKSB7IHJldHVybiB1dGlsLmNhbWVsVG9LZWJhYkNhc2Uoc3RyKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgRWxlbWVudCBub2RlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudE5hbWUgRWxlbWVudCBuYW1lXHJcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnROYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QuY3JlYXRlRWxlbWVudChlbGVtZW50TmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSB0ZXh0IG5vZGVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IHRleHQgY29udGVudHNcclxuICAgICAqIEByZXR1cm5zIHtOb2RlfVxyXG4gICAgICovXHJcbiAgICBjcmVhdGVUZXh0Tm9kZTogZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZC5jcmVhdGVUZXh0Tm9kZSh0ZXh0IHx8ICcnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gVGhlIGVkaXRvciBjaGVja3MgdGFncyBieSBzdHJpbmcuXHJcbiAgICAgKiBJZiB0aGVyZSBpcyBcIjxcIiBvciBcIj5cIiBpbiB0aGUgYXR0cmlidXRlIG9mIHRhZywgSFRNTCBpcyBicm9rZW4gd2hlbiBjaGVja2luZyB0aGUgdGFnLlxyXG4gICAgICogV2hlbiB1c2luZyBhbiBhdHRyaWJ1dGUgd2l0aCBcIjxcIiBvciBcIj5cIiwgdXNlIFwiSFRNTEVuY29kZXJcIiB0byBzYXZlLiAoZXg6IG1hdGgoa2F0ZXgpKVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIEhUTUwgb3IgVGV4dCBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIEhUTUxFbmNvZGVyOiBmdW5jdGlvbiAoY29udGVudHMpIHtcclxuICAgICAgICBjb25zdCBlYyA9IHsnPCc6ICckbHQ7JywgJz4nOiAnJGd0Oyd9O1xyXG4gICAgICAgIHJldHVybiBjb250ZW50cy5yZXBsYWNlKC88fD4vZywgZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgZWNbbV0gPT09ICdzdHJpbmcnKSA/IGVjW21dIDogbTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gVGhlIGVkaXRvciBjaGVja3MgdGFncyBieSBzdHJpbmcuXHJcbiAgICAgKiBJZiB0aGVyZSBpcyBcIjxcIiBvciBcIj5cIiBpbiB0aGUgYXR0cmlidXRlIG9mIHRhZywgSFRNTCBpcyBicm9rZW4gd2hlbiBjaGVja2luZyB0aGUgdGFnLlxyXG4gICAgICogRGVjb2RlciBvZiBkYXRhIHN0b3JlZCBhcyBcIkhUTUxFbmNvZGVyXCIgKGV4OiBtYXRoKGthdGV4KSlcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZW50cyBIVE1MIG9yIFRleHQgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBIVE1MRGVjb2RlcjogZnVuY3Rpb24gKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgY29uc3QgZWMgPSB7JyRsdDsnOiAnPCcsICckZ3Q7JzogJz4nfTtcclxuICAgICAgICByZXR1cm4gY29udGVudHMucmVwbGFjZSgvXFwkbHQ7fFxcJGd0Oy9nLCBmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBlY1ttXSA9PT0gJ3N0cmluZycpID8gZWNbbV0gOiBtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBydW4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iaiBPYmplY3RcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgb2JqLmtleVxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGhhc093bjogZnVuY3Rpb24gKG9iaiwga2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc093bi5jYWxsKG9iaiwga2V5KTtcclxuICAgIH0sXHJcbiAgICBfaGFzT3duOiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIHRoZSB0YWcgcGF0aCBvZiB0aGUgYXJndW1lbnRzIHZhbHVlXHJcbiAgICAgKiBJZiBub3QgZm91bmQsIHJldHVybiB0aGUgZmlyc3QgZm91bmQgdmFsdWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG5hbWVBcnJheSBGaWxlIG5hbWUgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBleHRlbnNpb24ganMsIGNzc1xyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SW5jbHVkZVBhdGg6IGZ1bmN0aW9uIChuYW1lQXJyYXksIGV4dGVuc2lvbikge1xyXG4gICAgICAgIGxldCBwYXRoID0gJyc7XHJcbiAgICAgICAgY29uc3QgcGF0aExpc3QgPSBbXTtcclxuICAgICAgICBjb25zdCB0YWdOYW1lID0gZXh0ZW5zaW9uID09PSAnanMnID8gJ3NjcmlwdCcgOiAnbGluayc7XHJcbiAgICAgICAgY29uc3Qgc3JjID0gZXh0ZW5zaW9uID09PSAnanMnID8gJ3NyYycgOiAnaHJlZic7XHJcblxyXG4gICAgICAgIGxldCBmaWxlTmFtZSA9ICcoPzonO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBuYW1lQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZmlsZU5hbWUgKz0gbmFtZUFycmF5W2ldICsgKGkgPCBsZW4gLSAxID8gJ3wnIDogJyknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyB0aGlzLl93LlJlZ0V4cCgnKF58LipbXFxcXC9dKScgKyBmaWxlTmFtZSArICcoXFxcXC5bXlxcXFwvXSspP1xcLicgKyBleHRlbnNpb24gKyAnKD86XFxcXD8uKnw7LiopPyQnLCAnaScpO1xyXG4gICAgICAgIGNvbnN0IGV4dFJlZ0V4cCA9IG5ldyB0aGlzLl93LlJlZ0V4cCgnLitcXFxcLicgKyBleHRlbnNpb24gKyAnKD86XFxcXD8uKnw7LiopPyQnLCAnaScpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBjID0gdGhpcy5fZC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSwgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChleHRSZWdFeHAudGVzdChjW2ldW3NyY10pKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoTGlzdC5wdXNoKGNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBlZGl0b3JUYWcgPSBwYXRoTGlzdFtpXVtzcmNdLm1hdGNoKHJlZ0V4cCk7XHJcbiAgICAgICAgICAgIGlmIChlZGl0b3JUYWcpIHtcclxuICAgICAgICAgICAgICAgIHBhdGggPSBlZGl0b3JUYWdbMF07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhdGggPT09ICcnKSBwYXRoID0gcGF0aExpc3QubGVuZ3RoID4gMCA/IHBhdGhMaXN0WzBdW3NyY10gOiAnJztcclxuXHJcbiAgICAgICAgLTEgPT09IHBhdGguaW5kZXhPZignOi8nKSAmJiAnLy8nICE9PSBwYXRoLnNsaWNlKDAsIDIpICYmIChwYXRoID0gMCA9PT0gcGF0aC5pbmRleE9mKCcvJykgPyBsb2NhdGlvbi5ocmVmLm1hdGNoKC9eLio/OlxcL1xcL1teXFwvXSovKVswXSArIHBhdGggOiBsb2NhdGlvbi5ocmVmLm1hdGNoKC9eW15cXD9dKlxcLyg/OikvKVswXSArIHBhdGgpO1xyXG5cclxuICAgICAgICBpZiAoIXBhdGgpIHRocm93ICdbU1VORURJVE9SLnV0aWwuZ2V0SW5jbHVkZVBhdGguZmFpbF0gVGhlIFNVTkVESVRPUiBpbnN0YWxsYXRpb24gcGF0aCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBkZXRlY3RlZC4gKG5hbWU6ICsnICsgbmFtZSArICcsIGV4dGVuc2lvbjogJyArIGV4dGVuc2lvbiArICcpJztcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBDU1MgdGV4dCB0aGF0IGhhcyBiZWVuIGFwcGxpZWQgdG8gdGhlIGN1cnJlbnQgcGFnZS5cclxuICAgICAqIEBwYXJhbSB7RG9jdW1lbnR8bnVsbH0gZG9jIFRvIGdldCB0aGUgQ1NTIHRleHQgb2YgYW4gZG9jdW1lbnQoY29yZS5fd2QpLiBJZiBudWxsIGdldCB0aGUgY3VycmVudCBkb2N1bWVudC5cclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFN0eWxlcyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgZ2V0UGFnZVN0eWxlOiBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgbGV0IGNzc1RleHQgPSAnJztcclxuICAgICAgICBjb25zdCBzaGVldHMgPSAoZG9jIHx8IHRoaXMuX2QpLnN0eWxlU2hlZXRzO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2hlZXRzLmxlbmd0aCwgcnVsZXM7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcnVsZXMgPSBzaGVldHNbaV0uY3NzUnVsZXM7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocnVsZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gcnVsZXMubGVuZ3RoOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSBydWxlc1tjXS5jc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY3NzVGV4dDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBhcmd1bWVudCBpZnJhbWUncyBkb2N1bWVudCBvYmplY3RcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gaWZyYW1lIElmcmFtZSBlbGVtZW50IChjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKVxyXG4gICAgICogQHJldHVybnMge0RvY3VtZW50fVxyXG4gICAgICovXHJcbiAgICBnZXRJZnJhbWVEb2N1bWVudDogZnVuY3Rpb24gKGlmcmFtZSkge1xyXG4gICAgICAgIGxldCB3RG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdyB8fCBpZnJhbWUuY29udGVudERvY3VtZW50O1xyXG4gICAgICAgIGlmICh3RG9jdW1lbnQuZG9jdW1lbnQpIHdEb2N1bWVudCA9IHdEb2N1bWVudC5kb2N1bWVudDtcclxuICAgICAgICByZXR1cm4gd0RvY3VtZW50O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgYXR0cmlidXRlcyBvZiBhcmd1bWVudCBlbGVtZW50IHRvIHN0cmluZyAoJ2NsYXNzPVwiLS0tXCIgbmFtZT1cIi0tLVwiICcpXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvYmplY3RcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8bnVsbH0gZXhjZXB0QXR0cnMgQXJyYXkgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGV4Y2x1ZGUgZnJvbSB0aGUgcmVzdWx0XHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRBdHRyaWJ1dGVzVG9TdHJpbmc6IGZ1bmN0aW9uIChlbGVtZW50LCBleGNlcHRBdHRycykge1xyXG4gICAgICAgIGlmICghZWxlbWVudC5hdHRyaWJ1dGVzKSByZXR1cm4gJyc7XHJcblxyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gZWxlbWVudC5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGxldCBhdHRyU3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhdHRycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZXhjZXB0QXR0cnMgJiYgZXhjZXB0QXR0cnMuaW5kZXhPZihhdHRyc1tpXS5uYW1lKSA+IC0xKSBjb250aW51ZTtcclxuICAgICAgICAgICAgYXR0clN0cmluZyArPSBhdHRyc1tpXS5uYW1lICsgJz1cIicgKyBhdHRyc1tpXS52YWx1ZSArICdcIiAnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGF0dHJTdHJpbmc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uR2V0cyBHZXQgdGhlIGxlbmd0aCBpbiBieXRlcyBvZiBhIHN0cmluZy5cclxuICAgICAqIHJlZmVyZW5jaW5nIGNvZGU6IFwiaHR0cHM6Ly9naXRodWIuY29tL3NoYWFuMTk3NC9teXJkaW4vYmxvYi9tYXN0ZXIvZXhwcmVzc2lvbnMvc3RyaW5nLmpzI0wxMVwiXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBTdHJpbmcgdGV4dFxyXG4gICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAqL1xyXG4gICAgZ2V0Qnl0ZUxlbmd0aDogZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICAgIGlmICghdGV4dCB8fCAhdGV4dC50b1N0cmluZykgcmV0dXJuIDA7XHJcbiAgICAgICAgdGV4dCA9IHRleHQudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IHRoaXMuX3cuZW5jb2RlVVJJQ29tcG9uZW50O1xyXG4gICAgICAgIGxldCBjciwgY2w7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNJRV9FZGdlKSB7XHJcbiAgICAgICAgICAgIGNsID0gdGhpcy5fdy51bmVzY2FwZShlbmNvZGVyKHRleHQpKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNyID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbmNvZGVyKHRleHQpLm1hdGNoKC8oJTBBfCUwRCkvZ2kpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjciA9IGVuY29kZXIodGV4dCkubWF0Y2goLyglMEF8JTBEKS9naSkubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY2wgKyBjcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjbCA9IChuZXcgdGhpcy5fdy5UZXh0RW5jb2RlcigndXRmLTgnKS5lbmNvZGUodGV4dCkpLmxlbmd0aDtcclxuICAgICAgICAgICAgY3IgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGVuY29kZXIodGV4dCkubWF0Y2goLyglMEF8JTBEKS9naSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNyID0gZW5jb2Rlcih0ZXh0KS5tYXRjaCgvKCUwQXwlMEQpL2dpKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjbCArIGNyO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIGVkaXQgcmVnaW9uIHRvcCBkaXYgZWxlbWVudCBvciBpZnJhbWUncyBib2R5IHRhZy5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgbm9kZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzV3lzaXd5Z0RpdjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmICh0aGlzLmhhc0NsYXNzKGVsZW1lbnQsICdzZS13cmFwcGVyLXd5c2l3eWcnKSB8fCAvXkJPRFkkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGp1ZGdlZCB3aGV0aGVyIGl0IGlzIHRoZSBjb250ZW50ZWRpdGFibGUgcHJvcGVydHkgaXMgZmFsc2UuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc05vbkVkaXRhYmxlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpID09PSAnZmFsc2UnO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyBhIG5vZGUgcmVsYXRlZCB0byB0aGUgdGV4dCBzdHlsZS5cclxuICAgICAqIChzdHJvbmd8c3Bhbnxmb250fGJ8dmFyfGl8ZW18dXxpbnN8c3xzdHJpa2V8ZGVsfHN1YnxzdXB8bWFya3xhfGxhYmVsfGNvZGUpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc1RleHRTdHlsZUVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSAhPT0gMyAmJiAvXihzdHJvbmd8c3Bhbnxmb250fGJ8dmFyfGl8ZW18dXxpbnN8c3xzdHJpa2V8ZGVsfHN1YnxzdXB8bWFya3xhfGxhYmVsfGNvZGV8c3VtbWFyeSkkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIGlucHV0IGVsZW1lbnQgKElOUFVULCBURVhUQVJFQSlcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgbm9kZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIGlzSW5wdXRFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEgJiYgL14oSU5QVVR8VEVYVEFSRUEpJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGp1ZGdlZCB3aGV0aGVyIGl0IGlzIHRoZSBmb3JtYXQgZWxlbWVudCAoUCwgRElWLCBIWzEtNl0sIFBSRSwgTEkgfCBjbGFzcz1cIl9fc2VfX2Zvcm1hdF9fcmVwbGFjZV94eHhcIilcclxuICAgICAqIEZvcm1hdCBlbGVtZW50IGFsc28gY29udGFpbiBcImZyZWUgZm9ybWF0IEVsZW1lbnRcIlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNGb3JtYXRFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEgJiYgKC9eKFB8RElWfEhbMS02XXxQUkV8TEl8VEh8VER8REVUQUlMUykkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSB8fCB0aGlzLmhhc0NsYXNzKGVsZW1lbnQsICcoXFxcXHN8XilfX3NlX19mb3JtYXRfX3JlcGxhY2VfLisoXFxcXHN8JCl8KFxcXFxzfF4pX19zZV9fZm9ybWF0X19mcmVlXy4rKFxcXFxzfCQpJykpICYmICF0aGlzLmlzQ29tcG9uZW50KGVsZW1lbnQpICYmICF0aGlzLmlzV3lzaXd5Z0RpdihlbGVtZW50KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIHJhbmdlIGZvcm1hdCBlbGVtZW50LiAoQkxPQ0tRVU9URSwgT0wsIFVMLCBGSUdDQVBUSU9OLCBUQUJMRSwgVEhFQUQsIFRCT0RZLCBUUiwgVEgsIFREIHwgY2xhc3M9XCJfX3NlX19mb3JtYXRfX3JhbmdlX3h4eFwiKVxyXG4gICAgICogUmFuZ2UgZm9ybWF0IGVsZW1lbnQgaXMgd3JhcCB0aGUgXCJmb3JtYXQgZWxlbWVudFwiIGFuZCBcImNvbXBvbmVudFwiXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc1JhbmdlRm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmICgvXihCTE9DS1FVT1RFfE9MfFVMfEZJR0NBUFRJT058VEFCTEV8VEhFQUR8VEJPRFl8VFJ8VEh8VER8REVUQUlMUykkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSB8fCB0aGlzLmhhc0NsYXNzKGVsZW1lbnQsICcoXFxcXHN8XilfX3NlX19mb3JtYXRfX3JhbmdlXy4rKFxcXFxzfCQpJykpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyB0aGUgY2xvc3VyZSByYW5nZSBmb3JtYXQgZWxlbWVudC4gKFRILCBURCB8IGNsYXNzPVwiX19zZV9fZm9ybWF0X19yYW5nZV9fY2xvc3VyZV94eHhcIilcclxuICAgICAqIENsb3N1cmUgcmFuZ2UgZm9ybWF0IGVsZW1lbnRzIGlzIGluY2x1ZGVkIGluIHRoZSByYW5nZSBmb3JtYXQgZWxlbWVudC5cclxuICAgICAqICAtIENsb3N1cmUgcmFuZ2UgZm9ybWF0IGVsZW1lbnQgaXMgd3JhcCB0aGUgXCJmb3JtYXQgZWxlbWVudFwiIGFuZCBcImNvbXBvbmVudFwiXHJcbiAgICAgKiDigLsgWW91IGNhbm5vdCBleGl0IHRoaXMgZm9ybWF0IHdpdGggdGhlIEVudGVyIGtleSBvciBCYWNrc3BhY2Uga2V5LlxyXG4gICAgICog4oC7IFVzZSBpdCBvbmx5IGluIHNwZWNpYWwgY2FzZXMuIChbZXhdIGZvcm1hdCBvZiB0YWJsZSBjZWxscylcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgbm9kZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzQ2xvc3VyZVJhbmdlRm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmICgvXihUSHxURCkkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSB8fCB0aGlzLmhhc0NsYXNzKGVsZW1lbnQsICcoXFxcXHN8XilfX3NlX19mb3JtYXRfX3JhbmdlX19jbG9zdXJlXy4rKFxcXFxzfCQpJykpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyB0aGUgZnJlZSBmb3JtYXQgZWxlbWVudC4gKFBSRSB8IGNsYXNzPVwiX19zZV9fZm9ybWF0X19mcmVlX3h4eFwiKVxyXG4gICAgICogRnJlZSBmb3JtYXQgZWxlbWVudHMgaXMgaW5jbHVkZWQgaW4gdGhlIGZvcm1hdCBlbGVtZW50LlxyXG4gICAgICogRnJlZSBmb3JtYXQgZWxlbWVudHMncyBsaW5lIGJyZWFrIGlzIFwiQlJcIiB0YWcuXHJcbiAgICAgKiDigLsgRW50ZXJpbmcgdGhlIEVudGVyIGtleSBpbiB0aGUgc3BhY2Ugb24gdGhlIGxhc3QgbGluZSBlbmRzIFwiRnJlZSBGb3JtYXRcIiBhbmQgYXBwZW5kcyBcIkZvcm1hdFwiLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNGcmVlRm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmICgvXlBSRSQvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpIHx8IHRoaXMuaGFzQ2xhc3MoZWxlbWVudCwgJyhcXFxcc3xeKV9fc2VfX2Zvcm1hdF9fZnJlZV8uKyhcXFxcc3wkKScpKSAmJiAhdGhpcy5pc0NvbXBvbmVudChlbGVtZW50KSAmJiAhdGhpcy5pc1d5c2l3eWdEaXYoZWxlbWVudCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGp1ZGdlZCB3aGV0aGVyIGl0IGlzIHRoZSBjbG9zdXJlIGZyZWUgZm9ybWF0IGVsZW1lbnQuIChjbGFzcz1cIl9fc2VfX2Zvcm1hdF9fZnJlZV9fY2xvc3VyZV94eHhcIilcclxuICAgICAqIENsb3N1cmUgZnJlZSBmb3JtYXQgZWxlbWVudHMgaXMgaW5jbHVkZWQgaW4gdGhlIGZyZWUgZm9ybWF0IGVsZW1lbnQuXHJcbiAgICAgKiAgLSBDbG9zdXJlIGZyZWUgZm9ybWF0IGVsZW1lbnRzJ3MgbGluZSBicmVhayBpcyBcIkJSXCIgdGFnLlxyXG4gICAgICog4oC7IFlvdSBjYW5ub3QgZXhpdCB0aGlzIGZvcm1hdCB3aXRoIHRoZSBFbnRlciBrZXkgb3IgQmFja3NwYWNlIGtleS5cclxuICAgICAqIOKAuyBVc2UgaXQgb25seSBpbiBzcGVjaWFsIGNhc2VzLiAoW2V4XSBmb3JtYXQgb2YgdGFibGUgY2VsbHMpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0Nsb3N1cmVGcmVlRm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmIHRoaXMuaGFzQ2xhc3MoZWxlbWVudCwgJyhcXFxcc3xeKV9fc2VfX2Zvcm1hdF9fZnJlZV9fY2xvc3VyZV8uKyhcXFxcc3wkKScpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyB0aGUgY29tcG9uZW50W2ltZywgaWZyYW1lLCB2aWRlbywgYXVkaW8sIHRhYmxlXSBjb3ZlcihjbGFzcz1cInNlLWNvbXBvbmVudFwiKSBhbmQgdGFibGUsIGhyXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0NvbXBvbmVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiAoL3NlLWNvbXBvbmVudC8udGVzdChlbGVtZW50LmNsYXNzTmFtZSkgfHwgL14oVEFCTEV8SFIpJC8udGVzdChlbGVtZW50Lm5vZGVOYW1lKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrcyBmb3IgXCJfX3NlX191bmVkaXRhYmxlXCIgaW4gdGhlIGNsYXNzIGxpc3QuXHJcbiAgICAgKiBDb21wb25lbnRzIHdpdGggY2xhc3MgXCJfX3NlX191bmVkaXRhYmxlXCIgY2Fubm90IGJlIG1vZGlmaWVkLlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNVbmVkaXRhYmxlQ29tcG9uZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIHRoaXMuaGFzQ2xhc3MoZWxlbWVudCwgJ19fc2VfX3VuZWRpdGFibGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIGNvbXBvbmVudCBbaW1nLCBpZnJhbWVdIGNvdmVyKGNsYXNzPVwic2UtY29tcG9uZW50XCIpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc01lZGlhQ29tcG9uZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIC9zZS1jb21wb25lbnQvLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyB0aGUgbm90IGNoZWNraW5nIG5vZGUuIChjbGFzcz1cImthdGV4XCIsIFwiX19zZV9fdGFnXCIpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc05vdENoZWNraW5nTm9kZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiAva2F0ZXh8X19zZV9fdGFnLy50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSWYgYSBwYXJlbnQgbm9kZSB0aGF0IGNvbnRhaW5zIGFuIGFyZ3VtZW50IG5vZGUgZmluZHMgYSBmb3JtYXQgbm9kZSAodXRpbC5pc0Zvcm1hdEVsZW1lbnQpLCBpdCByZXR1cm5zIHRoYXQgbm9kZS5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBSZWZlcmVuY2Ugbm9kZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdmFsaWRhdGlvbiBBZGRpdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb24uXHJcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRGb3JtYXRFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsaWRhdGlvbikge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKCF2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNXeXNpd3lnRGl2KGVsZW1lbnQpKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSYW5nZUZvcm1hdEVsZW1lbnQoZWxlbWVudCkpIGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRm9ybWF0RWxlbWVudChlbGVtZW50KSAmJiB2YWxpZGF0aW9uKGVsZW1lbnQpKSByZXR1cm4gZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSWYgYSBwYXJlbnQgbm9kZSB0aGF0IGNvbnRhaW5zIGFuIGFyZ3VtZW50IG5vZGUgZmluZHMgYSBmb3JtYXQgbm9kZSAodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudCksIGl0IHJldHVybnMgdGhhdCBub2RlLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFJlZmVyZW5jZSBub2RlLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIEFkZGl0aW9uYWwgdmFsaWRhdGlvbiBmdW5jdGlvbi5cclxuICAgICAqIEByZXR1cm5zIHtFbGVtZW50fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFJhbmdlRm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbGlkYXRpb24pIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmICghdmFsaWRhdGlvbikge1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzV3lzaXd5Z0RpdihlbGVtZW50KSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGVsZW1lbnQpICYmICEvXihUSEVBRHxUQk9EWXxUUikkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSAmJiB2YWxpZGF0aW9uKGVsZW1lbnQpKSByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJZiBhIHBhcmVudCBub2RlIHRoYXQgY29udGFpbnMgYW4gYXJndW1lbnQgbm9kZSBmaW5kcyBhIGZyZWUgZm9ybWF0IG5vZGUgKHV0aWwuaXNGcmVlRm9ybWF0RWxlbWVudCksIGl0IHJldHVybnMgdGhhdCBub2RlLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFJlZmVyZW5jZSBub2RlLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIEFkZGl0aW9uYWwgdmFsaWRhdGlvbiBmdW5jdGlvbi5cclxuICAgICAqIEByZXR1cm5zIHtFbGVtZW50fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEZyZWVGb3JtYXRFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsaWRhdGlvbikge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKCF2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNXeXNpd3lnRGl2KGVsZW1lbnQpKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNGcmVlRm9ybWF0RWxlbWVudChlbGVtZW50KSAmJiB2YWxpZGF0aW9uKGVsZW1lbnQpKSByZXR1cm4gZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSWYgYSBwYXJlbnQgbm9kZSB0aGF0IGNvbnRhaW5zIGFuIGFyZ3VtZW50IG5vZGUgZmluZHMgYSBjbG9zdXJlIGZyZWUgZm9ybWF0IG5vZGUgKHV0aWwuaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQpLCBpdCByZXR1cm5zIHRoYXQgbm9kZS5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBSZWZlcmVuY2Ugbm9kZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdmFsaWRhdGlvbiBBZGRpdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb24uXHJcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gbnVsbDtcclxuICAgICAgICBpZiAoIXZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgdmFsaWRhdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aGlsZSAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1d5c2l3eWdEaXYoZWxlbWVudCkpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Nsb3N1cmVGcmVlRm9ybWF0RWxlbWVudChlbGVtZW50KSAmJiB2YWxpZGF0aW9uKGVsZW1lbnQpKSByZXR1cm4gZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQWRkIHN0eWxlIGFuZCBjbGFzc05hbWUgb2YgY29weUVsIHRvIG9yaWdpbkVsXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG9yaWdpbkVsIE9yaWdpbiBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvcHlFbCBFbGVtZW50IHRvIGNvcHlcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8bnVsbH0gYmxhY2tsaXN0IEJsYWNrbGlzdCBhcnJheShMb3dlckNhc2UpXHJcbiAgICAgKi9cclxuICAgIGNvcHlUYWdBdHRyaWJ1dGVzOiBmdW5jdGlvbiAob3JpZ2luRWwsIGNvcHlFbCwgYmxhY2tsaXN0KSB7XHJcbiAgICAgICAgaWYgKGNvcHlFbC5zdHlsZS5jc3NUZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvcHlTdHlsZXMgPSBjb3B5RWwuc3R5bGU7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjb3B5U3R5bGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5FbC5zdHlsZVtjb3B5U3R5bGVzW2ldXSA9IGNvcHlTdHlsZXNbY29weVN0eWxlc1tpXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gY29weUVsLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aCwgbmFtZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBhdHRyc1tpXS5uYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGlmICgoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdC5pbmRleE9mKG5hbWUpID4gLTEpIHx8ICFhdHRyc1tpXS52YWx1ZSkgb3JpZ2luRWwucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lICE9PSAnc3R5bGUnKSBvcmlnaW5FbC5zZXRBdHRyaWJ1dGUoYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0udmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29weSBhbmQgYXBwbHkgYXR0cmlidXRlcyBvZiBmb3JtYXQgdGFnIHRoYXQgc2hvdWxkIGJlIG1haW50YWluZWQuIChzdHlsZSwgY2xhc3MpIElnbm9yZSBcIl9fc2VfX2Zvcm1hdF9fXCIgY2xhc3NcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gb3JpZ2luRWwgT3JpZ2luIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY29weUVsIEVsZW1lbnQgdG8gY29weVxyXG4gICAgICovXHJcbiAgICBjb3B5Rm9ybWF0QXR0cmlidXRlczogZnVuY3Rpb24gKG9yaWdpbkVsLCBjb3B5RWwpIHtcclxuICAgICAgICBjb3B5RWwgPSBjb3B5RWwuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICBjb3B5RWwuY2xhc3NOYW1lID0gY29weUVsLmNsYXNzTmFtZS5yZXBsYWNlKC8oXFxzfF4pX19zZV9fZm9ybWF0X19bXlxcc10rL2csICcnKTtcclxuICAgICAgICB0aGlzLmNvcHlUYWdBdHRyaWJ1dGVzKG9yaWdpbkVsLCBjb3B5RWwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIGl0ZW0gZnJvbSB0aGUgYXJyYXkgdGhhdCBtYXRjaGVzIHRoZSBjb25kaXRpb24uXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSBhcnJheSBBcnJheSB0byBnZXQgaXRlbVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIENvbmRpdGlvbmFsIGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG11bHRpIElmIHRydWUsIHJldHVybnMgYWxsIGl0ZW1zIHRoYXQgbWVldCB0aGUgY3JpdGVyaWEgb3RoZXJ3aXNlLCByZXR1cm5zIGFuIGVtcHR5IGFycmF5LlxyXG4gICAgICogSWYgZmFsc2UsIHJldHVybnMgb25seSBvbmUgaXRlbSB0aGF0IG1lZXQgdGhlIGNyaXRlcmlhIG90aGVyd2lzZSByZXR1cm4gbnVsbC5cclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxOb2RlfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEFycmF5SXRlbTogZnVuY3Rpb24gKGFycmF5LCB2YWxpZGF0aW9uLCBtdWx0aSkge1xyXG4gICAgICAgIGlmICghYXJyYXkgfHwgYXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFsaWRhdGlvbiA9IHZhbGlkYXRpb24gfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aCwgYTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGEgPSBhcnJheVtpXTtcclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRpb24oYSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbXVsdGkpIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBhcnIucHVzaChhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICFtdWx0aSA/IG51bGwgOiBhcnI7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIGlmIGFuIGFycmF5IGNvbnRhaW5zIGFuIGVsZW1lbnQgXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSBhcnJheSBlbGVtZW50IGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hlY2sgZm9yXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgYXJyYXlJbmNsdWRlczogZnVuY3Rpb24oYXJyYXksIGVsZW1lbnQpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhcnJheVtpXSA9PT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB2YWx1ZSBpbiB0aGUgZWxlbWVudCBhcnJheVxyXG4gICAgICogQHBhcmFtIHtBcnJheXxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gYXJyYXkgZWxlbWVudCBhcnJheVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGZpbmQgaW5kZXhcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldEFycmF5SW5kZXg6IGZ1bmN0aW9uIChhcnJheSwgZWxlbWVudCkge1xyXG4gICAgICAgIGxldCBpZHggPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFycmF5W2ldID09PSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpZHg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgbmV4dCBpbmRleCBvZiB0aGUgYXJndW1lbnQgdmFsdWUgaW4gdGhlIGVsZW1lbnQgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IGFycmF5IGVsZW1lbnQgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gaXRlbSBUaGUgZWxlbWVudCB0byBmaW5kIGluZGV4XHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBuZXh0SWR4OiBmdW5jdGlvbiAoYXJyYXksIGl0ZW0pIHtcclxuICAgICAgICBsZXQgaWR4ID0gdGhpcy5nZXRBcnJheUluZGV4KGFycmF5LCBpdGVtKTtcclxuICAgICAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuIC0xO1xyXG4gICAgICAgIHJldHVybiBpZHggKyAxO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIHByZXZpb3VzIGluZGV4IG9mIHRoZSBhcmd1bWVudCB2YWx1ZSBpbiB0aGUgZWxlbWVudCBhcnJheVxyXG4gICAgICogQHBhcmFtIHtBcnJheXxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gYXJyYXkgRWxlbWVudCBhcnJheVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBpdGVtIFRoZSBlbGVtZW50IHRvIGZpbmQgaW5kZXhcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHByZXZJZHg6IGZ1bmN0aW9uIChhcnJheSwgaXRlbSkge1xyXG4gICAgICAgIGxldCBpZHggPSB0aGlzLmdldEFycmF5SW5kZXgoYXJyYXksIGl0ZW0pO1xyXG4gICAgICAgIGlmIChpZHggPT09IC0xKSByZXR1cm4gLTE7XHJcbiAgICAgICAgcmV0dXJuIGlkeCAtIDE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGluZGV4IGNvbXBhcmVkIHRvIG90aGVyIHNpYmxpbmcgbm9kZXMuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIE5vZGUgdG8gZmluZCBpbmRleFxyXG4gICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAqL1xyXG4gICAgZ2V0UG9zaXRpb25JbmRleDogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICBsZXQgaWR4ID0gMDtcclxuICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZykpIHtcclxuICAgICAgICAgICAgaWR4ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpZHg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBcIm5vZGVcIiBpbiB0aGUgXCJwYXJlbnROb2RlXCIgaW4gYSBudW1lcmljYWwgYXJyYXkuXHJcbiAgICAgKiBleCkgPHA+PHNwYW4+YWE8L3NwYW4+PHNwYW4+YmI8L3NwYW4+PC9wPiA6IGdldE5vZGVQYXRoKG5vZGU6IFwiYmJcIiwgcGFyZW50Tm9kZTogXCI8UD5cIikgLT4gWzEsIDBdXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIE5vZGUgdG8gZmluZCBwb3NpdGlvbiBwYXRoXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8bnVsbH0gcGFyZW50Tm9kZSBQYXJlbnQgbm9kZS4gSWYgbnVsbCwgd3lzaXd5ZyBkaXYgYXJlYVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gX25ld09mZnNldHMgSWYgeW91IHNlbmQgYW4gb2JqZWN0IG9mIHRoZSBmb3JtIFwie3M6IDAsIGU6IDB9XCIsIHRoZSB0ZXh0IG5vZGVzIHRoYXQgYXJlIGF0dGFjaGVkIHRvZ2V0aGVyIGFyZSBtZXJnZWQgaW50byBvbmUsIGNlbnRlcmVkIG9uIHRoZSBcIm5vZGVcIiBhcmd1bWVudC5cclxuICAgICAqIFwiX25ld09mZnNldHMuc1wiIHN0b3JlcyB0aGUgbGVuZ3RoIG9mIHRoZSBjb21iaW5lZCBjaGFyYWN0ZXJzIGFmdGVyIFwibm9kZVwiIGFuZCBcIl9uZXdPZmZzZXRzLmVcIiBzdG9yZXMgdGhlIGxlbmd0aCBvZiB0aGUgY29tYmluZWQgY2hhcmFjdGVycyBiZWZvcmUgXCJub2RlXCIuXHJcbiAgICAgKiBEbyBub3QgdXNlIHVubGVzcyBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS5cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZ2V0Tm9kZVBhdGg6IGZ1bmN0aW9uIChub2RlLCBwYXJlbnROb2RlLCBfbmV3T2Zmc2V0cykge1xyXG4gICAgICAgIGNvbnN0IHBhdGggPSBbXTtcclxuICAgICAgICBsZXQgZmluZHMgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmdldFBhcmVudEVsZW1lbnQobm9kZSwgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGlmIChlbCA9PT0gcGFyZW50Tm9kZSkgZmluZHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGZpbmRzICYmICF0aGlzLmlzV3lzaXd5Z0RpdihlbCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIG1lcmdlIHRleHQgbm9kZXNcclxuICAgICAgICAgICAgICAgIGlmIChfbmV3T2Zmc2V0cyAmJiBlbC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbnVsbCwgdGVtcFRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIF9uZXdPZmZzZXRzLnMgPSBfbmV3T2Zmc2V0cy5lID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzID0gZWwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcmV2aW91cyAmJiBwcmV2aW91cy5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wVGV4dCA9IHByZXZpb3VzLnRleHRDb250ZW50LnJlcGxhY2UodGhpcy56ZXJvV2lkdGhSZWdFeHAsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX25ld09mZnNldHMucyArPSB0ZW1wVGV4dC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gdGVtcFRleHQgKyBlbC50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcCA9IHByZXZpb3VzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyA9IHByZXZpb3VzLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKHRlbXApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSBlbC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCAmJiBuZXh0Lm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBUZXh0ID0gbmV4dC50ZXh0Q29udGVudC5yZXBsYWNlKHRoaXMuemVyb1dpZHRoUmVnRXhwLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9uZXdPZmZzZXRzLmUgKz0gdGVtcFRleHQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCArPSB0ZW1wVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcCA9IG5leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW0odGVtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGluZGV4IHB1c2hcclxuICAgICAgICAgICAgICAgIHBhdGgucHVzaChlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwYXRoLm1hcCh0aGlzLmdldFBvc2l0aW9uSW5kZXgpLnJldmVyc2UoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgbm9kZSBpbiB0aGUgbG9jYXRpb24gb2YgdGhlIHBhdGggYXJyYXkgb2J0YWluZWQgZnJvbSBcInV0aWwuZ2V0Tm9kZVBhdGhcIi5cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9mZnNldHMgUG9zaXRpb24gYXJyYXksIGFycmF5IG9idGFpbmVkIGZyb20gXCJ1dGlsLmdldE5vZGVQYXRoXCJcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZSBCYXNlIHBhcmVudCBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX1cclxuICAgICAqL1xyXG4gICAgZ2V0Tm9kZUZyb21QYXRoOiBmdW5jdGlvbiAob2Zmc2V0cywgcGFyZW50Tm9kZSkge1xyXG4gICAgICAgIGxldCBjdXJyZW50ID0gcGFyZW50Tm9kZTtcclxuICAgICAgICBsZXQgbm9kZXM7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBvZmZzZXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5vZGVzID0gY3VycmVudC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09PSAwKSBicmVhaztcclxuICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA8PSBvZmZzZXRzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbm9kZXNbbm9kZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbm9kZXNbb2Zmc2V0c1tpXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDb21wYXJlcyB0aGUgc3R5bGUgYW5kIGNsYXNzIGZvciBlcXVhbCB2YWx1ZXMuXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYm90aCBhcmUgdGV4dCBub2Rlcy5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gYSBOb2RlIHRvIGNvbXBhcmVcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gYiBOb2RlIHRvIGNvbXBhcmVcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc1NhbWVBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIGlmIChhLm5vZGVUeXBlID09PSAzICYmIGIubm9kZVR5cGUgPT09IDMpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGlmIChhLm5vZGVUeXBlID09PSAzIHx8IGIubm9kZVR5cGUgPT09IDMpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3R5bGVfYSA9IGEuc3R5bGU7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVfYiA9IGIuc3R5bGU7XHJcbiAgICAgICAgbGV0IGNvbXBTdHlsZSA9IDA7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdHlsZV9hLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzdHlsZV9hW3N0eWxlX2FbaV1dID09PSBzdHlsZV9iW3N0eWxlX2FbaV1dKSBjb21wU3R5bGUrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNsYXNzX2EgPSBhLmNsYXNzTGlzdDtcclxuICAgICAgICBjb25zdCBjbGFzc19iID0gYi5jbGFzc0xpc3Q7XHJcbiAgICAgICAgY29uc3QgcmVnID0gdGhpcy5fdy5SZWdFeHA7XHJcbiAgICAgICAgbGV0IGNvbXBDbGFzcyA9IDA7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjbGFzc19hLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWcoJyhcXHN8XiknICsgY2xhc3NfYVtpXSArICcoXFxzfCQpJykudGVzdChjbGFzc19iLnZhbHVlKSkgY29tcENsYXNzKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKGNvbXBTdHlsZSA9PT0gc3R5bGVfYi5sZW5ndGggJiYgY29tcFN0eWxlID09PSBzdHlsZV9hLmxlbmd0aCkgJiYgKGNvbXBDbGFzcyA9PT0gY2xhc3NfYi5sZW5ndGggJiYgY29tcENsYXNzID09PSBjbGFzc19hLmxlbmd0aCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBsaW5lIGVsZW1lbnQodXRpbC5pc0Zvcm1hdEVsZW1lbnQpIGlzIGVtcHR5LlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEZvcm1hdCBlbGVtZW50IG5vZGVcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0VtcHR5TGluZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50Tm9kZSB8fCAoIWVsZW1lbnQucXVlcnlTZWxlY3RvcignSU1HLCBJRlJBTUUsIEFVRElPLCBWSURFTywgQ0FOVkFTLCBUQUJMRScpICYmIGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwICYmIHRoaXMub25seVplcm9XaWR0aFNwYWNlKGVsZW1lbnQudGV4dENvbnRlbnQpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIHNwYW4ncyBhdHRyaWJ1dGVzIGFyZSBlbXB0eS5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxudWxsfSBlbGVtZW50IEVsZW1lbnQgbm9kZVxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzU3BhbldpdGhvdXRBdHRyOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiAhIWVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiAvXlNQQU4kL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSAmJiAhZWxlbWVudC5jbGFzc05hbWUgJiYgIWVsZW1lbnQuc3R5bGUuY3NzVGV4dDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIG5vZGUgaXMgYSBsaXN0IChvbCwgdWwpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBub2RlIFRoZSBlbGVtZW50IG9yIGVsZW1lbnQgbmFtZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzTGlzdDogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZSAmJiAvXihPTHxVTCkkL2kudGVzdCh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgPyBub2RlIDogbm9kZS5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBub2RlIGlzIGEgbGlzdCBjZWxsIChsaSlcclxuICAgICAqIEBwYXJhbSB7Tm9kZXxTdHJpbmd9IG5vZGUgVGhlIGVsZW1lbnQgb3IgZWxlbWVudCBuYW1lIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNMaXN0Q2VsbDogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZSAmJiAvXkxJJC9pLnRlc3QodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnID8gbm9kZSA6IG5vZGUubm9kZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayB0aGUgbm9kZSBpcyBhIHRhYmxlICh0YWJsZSwgdGhlYWQsIHRib2R5LCB0ciwgdGgsIHRkKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gbm9kZSBUaGUgZWxlbWVudCBvciBlbGVtZW50IG5hbWUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc1RhYmxlOiBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBub2RlICYmIC9eKFRBQkxFfFRIRUFEfFRCT0RZfFRSfFRIfFREKSQvaS50ZXN0KHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IG5vZGUgOiBub2RlLm5vZGVOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIG5vZGUgaXMgYSB0YWJsZSBjZWxsICh0ZCwgdGgpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBub2RlIFRoZSBlbGVtZW50IG9yIGVsZW1lbnQgbmFtZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzQ2VsbDogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZSAmJiAvXihURHxUSCkkL2kudGVzdCh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgPyBub2RlIDogbm9kZS5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBub2RlIGlzIGEgYnJlYWsgbm9kZSAoQlIpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBub2RlIFRoZSBlbGVtZW50IG9yIGVsZW1lbnQgbmFtZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzQnJlYWs6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgL15CUiQvaS50ZXN0KHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IG5vZGUgOiBub2RlLm5vZGVOYW1lKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBub2RlIGlzIGEgYW5jaG9yIG5vZGUgKEEpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBub2RlIFRoZSBlbGVtZW50IG9yIGVsZW1lbnQgbmFtZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzQW5jaG9yOiBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBub2RlICYmIC9eQSQvaS50ZXN0KHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IG5vZGUgOiBub2RlLm5vZGVOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIG5vZGUgaXMgYSBtZWRpYSBub2RlIChpbWcsIGlmcmFtZSwgYXVkaW8sIHZpZGVvLCBjYW52YXMpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBub2RlIFRoZSBlbGVtZW50IG9yIGVsZW1lbnQgbmFtZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzTWVkaWE6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgL14oSU1HfElGUkFNRXxBVURJT3xWSURFT3xDQU5WQVMpJC9pLnRlc3QodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnID8gbm9kZSA6IG5vZGUubm9kZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayB0aGUgbm9kZSBpcyBhIGZpZ3VyZSB0YWcgb3IgdXRpbC5pc01lZGlhKClcclxuICAgICAqIEBwYXJhbSB7Tm9kZXxTdHJpbmd9IG5vZGUgVGhlIGVsZW1lbnQgb3IgZWxlbWVudCBuYW1lIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNGaWd1cmVzOiBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBub2RlICYmICh0aGlzLmlzTWVkaWEobm9kZSkgfHwgL14oRklHVVJFKSQvaS50ZXN0KHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IG5vZGUgOiBub2RlLm5vZGVOYW1lKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrcyBmb3IgbnVtZXJpYyAod2l0aCBkZWNpbWFsIHBvaW50KS5cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdGV4dCBUZXh0IHN0cmluZyBvciBudW1iZXJcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc051bWJlcjogZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICByZXR1cm4gISF0ZXh0ICYmIC9eLT9cXGQrKFxcLlxcZCspPyQvLnRlc3QodGV4dCArICcnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IGEgbnVtYmVyLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB0ZXh0IFRleHQgc3RyaW5nIG9yIG51bWJlclxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG1heERlYyBNYXhpbXVtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAoLTEgOiBJbmZpbml0eSlcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldE51bWJlcjogZnVuY3Rpb24gKHRleHQsIG1heERlYykge1xyXG4gICAgICAgIGlmICghdGV4dCkgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGxldCBudW1iZXIgPSAodGV4dCArICcnKS5tYXRjaCgvLT9cXGQrKFxcLlxcZCspPy8pO1xyXG4gICAgICAgIGlmICghbnVtYmVyIHx8ICFudW1iZXJbMF0pIHJldHVybiAwO1xyXG5cclxuICAgICAgICBudW1iZXIgPSBudW1iZXJbMF07XHJcbiAgICAgICAgcmV0dXJuIG1heERlYyA8IDAgPyBudW1iZXIgKiAxIDogbWF4RGVjID09PSAwID8gdGhpcy5fdy5NYXRoLnJvdW5kKG51bWJlciAqIDEpIDogKG51bWJlciAqIDEpLnRvRml4ZWQobWF4RGVjKSAqIDE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCBhbGwgXCJjaGlsZHJlblwiIG9mIHRoZSBhcmd1bWVudCB2YWx1ZSBlbGVtZW50IChXaXRob3V0IHRleHQgbm9kZXMpXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgZWxlbWVudCB0byBnZXQgY2hpbGQgbm9kZVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIENvbmRpdGlvbmFsIGZ1bmN0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGdldExpc3RDaGlsZHJlbjogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbGlkYXRpb24pIHtcclxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5jaGlsZHJlbiB8fCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNoaWxkcmVuO1xyXG5cclxuICAgICAgICB2YWxpZGF0aW9uID0gdmFsaWRhdGlvbiB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xyXG5cclxuICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSBjdXJyZW50ICYmIHZhbGlkYXRpb24oY3VycmVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghIWN1cnJlbnQuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjdXJyZW50LmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjdXJyZW50LmNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGRyZW47XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCBhbGwgXCJjaGlsZE5vZGVzXCIgb2YgdGhlIGFyZ3VtZW50IHZhbHVlIGVsZW1lbnQgKEluY2x1ZGUgdGV4dCBub2RlcylcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBlbGVtZW50IHRvIGdldCBjaGlsZCBub2RlXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHZhbGlkYXRpb24gQ29uZGl0aW9uYWwgZnVuY3Rpb25cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZ2V0TGlzdENoaWxkTm9kZXM6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNoaWxkcmVuO1xyXG5cclxuICAgICAgICB2YWxpZGF0aW9uID0gdmFsaWRhdGlvbiB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xyXG5cclxuICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSBjdXJyZW50ICYmIHZhbGlkYXRpb24oY3VycmVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY3VycmVudC5jaGlsZE5vZGVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGRyZW47XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIG51bWJlciBvZiBwYXJlbnRzIG5vZGVzLlxyXG4gICAgICogXCIwXCIgd2hlbiB0aGUgcGFyZW50IG5vZGUgaXMgdGhlIFdZU0lXWUcgYXJlYS5cclxuICAgICAqIFwiLTFcIiB3aGVuIHRoZSBlbGVtZW50IGFyZ3VtZW50IGlzIHRoZSBXWVNJV1lHIGFyZWEuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldEVsZW1lbnREZXB0aDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgdGhpcy5pc1d5c2l3eWdEaXYoZWxlbWVudCkpIHJldHVybiAtMTtcclxuXHJcbiAgICAgICAgbGV0IGRlcHRoID0gMDtcclxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgICB3aGlsZSAoZWxlbWVudCAmJiAhdGhpcy5pc1d5c2l3eWdEaXYoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgZGVwdGggKz0gMTtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkZXB0aDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29tcGFyZXMgdHdvIGVsZW1lbnRzIHRvIGZpbmQgYSBjb21tb24gYW5jZXN0b3IsIGFuZCByZXR1cm5zIHRoZSBvcmRlciBvZiB0aGUgdHdvIGVsZW1lbnRzLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBhIE5vZGUgdG8gY29tcGFyZS5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gYiBOb2RlIHRvIGNvbXBhcmUuXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7IGFuY2Vzc3RvciwgYSwgYiwgcmVzdWx0OiAoYSA+IGIgPyAxIDogYSA8IGIgPyAtMSA6IDApIH07XHJcbiAgICAgKi9cclxuICAgIGNvbXBhcmVFbGVtZW50czogZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBsZXQgYU5vZGUgPSBhLCBiTm9kZSA9IGI7XHJcbiAgICAgICAgd2hpbGUgKGFOb2RlICYmIGJOb2RlICYmIGFOb2RlLnBhcmVudE5vZGUgIT09IGJOb2RlLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgYU5vZGUgPSBhTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBiTm9kZSA9IGJOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWFOb2RlIHx8ICFiTm9kZSkgcmV0dXJuIHsgYW5jZXN0b3I6IG51bGwsIGE6IGEsIGI6IGIsIHJlc3VsdDogMCB9O1xyXG5cclxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGFOb2RlLnBhcmVudE5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICBjb25zdCBhSW5kZXggPSB0aGlzLmdldEFycmF5SW5kZXgoY2hpbGRyZW4sIGFOb2RlKTtcclxuICAgICAgICBjb25zdCBiSW5kZXggPSB0aGlzLmdldEFycmF5SW5kZXgoY2hpbGRyZW4sIGJOb2RlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYW5jZXN0b3I6IGFOb2RlLnBhcmVudE5vZGUsXHJcbiAgICAgICAgICAgIGE6IGFOb2RlLFxyXG4gICAgICAgICAgICBiOiBiTm9kZSxcclxuICAgICAgICAgICAgcmVzdWx0OiBhSW5kZXggPiBiSW5kZXggPyAxIDogYUluZGV4IDwgYkluZGV4ID8gLTEgOiAwXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBwYXJlbnQgZWxlbWVudCBvZiB0aGUgYXJndW1lbnQgdmFsdWUuXHJcbiAgICAgKiBBIHRhZyB0aGF0IHNhdGlzZmllcyB0aGUgcXVlcnkgY29uZGl0aW9uIGlzIGltcG9ydGVkLlxyXG4gICAgICogUmV0dXJucyBudWxsIGlmIG5vdCBmb3VuZC5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBSZWZlcmVuY2UgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHF1ZXJ5IFF1ZXJ5IFN0cmluZyAobm9kZU5hbWUsIC5jbGFzc05hbWUsICNJRCwgOm5hbWUpIG9yIHZhbGlkYXRpb24gZnVuY3Rpb24uXHJcbiAgICAgKiBOb3QgdXNlIGl0IGxpa2UganF1ZXJ5LlxyXG4gICAgICogT25seSBvbmUgY29uZGl0aW9uIGNhbiBiZSBlbnRlcmVkIGF0IGEgdGltZS5cclxuICAgICAqIEByZXR1cm5zIHtFbGVtZW50fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFBhcmVudEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBxdWVyeSkge1xyXG4gICAgICAgIGxldCBjaGVjaztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjaGVjayA9IHF1ZXJ5O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBhdHRyO1xyXG4gICAgICAgICAgICBpZiAoL15cXC4vLnRlc3QocXVlcnkpKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyID0gJ2NsYXNzTmFtZSc7XHJcbiAgICAgICAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LnNwbGl0KCcuJylbMV07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL14jLy50ZXN0KHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgYXR0ciA9ICdpZCc7XHJcbiAgICAgICAgICAgICAgICBxdWVyeSA9ICdeJyArIHF1ZXJ5LnNwbGl0KCcjJylbMV0gKyAnJCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL146Ly50ZXN0KHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgYXR0ciA9ICduYW1lJztcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gJ14nICsgcXVlcnkuc3BsaXQoJzonKVsxXSArICckJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSAnbm9kZU5hbWUnO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkgPSAnXicgKyBxdWVyeSArICckJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVnRXhwID0gbmV3IHRoaXMuX3cuUmVnRXhwKHF1ZXJ5LCAnaScpO1xyXG4gICAgICAgICAgICBjaGVjayA9IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ0V4cC50ZXN0KGVsW2F0dHJdKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChlbGVtZW50ICYmICFjaGVjayhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1d5c2l3eWdEaXYoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgcHJldmlvdXMgc2libGluZyBsYXN0IGNoaWxkLiBJZiB0aGVyZSBpcyBubyBzaWJsaW5nLCB0aGVuIGl0J2xsIHRha2UgaXQgZnJvbSB0aGUgY2xvc2VzdCBhbmNlc3RvciB3aXRoIGNoaWxkXHJcbiAgICAgKiBSZXR1cm5zIG51bGwgaWYgbm90IGZvdW5kLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIFJlZmVyZW5jZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge05vZGV8bnVsbH0gY2VpbGluZyBIaWdoZXN0IGJvdW5kYXJ5IGFsbG93ZWRcclxuICAgICAqIEByZXR1cm5zIHtOb2RlfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFByZXZpb3VzRGVlcGVzdE5vZGU6IGZ1bmN0aW9uIChub2RlLCBjZWlsaW5nKSB7XHJcbiAgICAgICAgbGV0IHByZXZpb3VzTm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgIGlmICghcHJldmlvdXNOb2RlKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7IHBhcmVudE5vZGU7IHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlID09PSBjZWlsaW5nKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IHBhcmVudE5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghcHJldmlvdXNOb2RlKSByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKHByZXZpb3VzTm9kZS5sYXN0Q2hpbGQpIHByZXZpb3VzTm9kZSA9IHByZXZpb3VzTm9kZS5sYXN0Q2hpbGQ7XHJcblxyXG4gICAgICAgIHJldHVybiBwcmV2aW91c05vZGU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIG5leHQgc2libGluZyBmaXJzdCBjaGlsZC4gSWYgdGhlcmUgaXMgbm8gc2libGluZywgdGhlbiBpdCdsbCB0YWtlIGl0IGZyb20gdGhlIGNsb3Nlc3QgYW5jZXN0b3Igd2l0aCBjaGlsZFxyXG4gICAgICogUmV0dXJucyBudWxsIGlmIG5vdCBmb3VuZC5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBSZWZlcmVuY2UgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtOb2RlfG51bGx9IGNlaWxpbmcgSGlnaGVzdCBib3VuZGFyeSBhbGxvd2VkXHJcbiAgICAgKiBAcmV0dXJucyB7Tm9kZXxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXROZXh0RGVlcGVzdE5vZGU6IGZ1bmN0aW9uIChub2RlLCBjZWlsaW5nKSB7XHJcbiAgICAgICAgbGV0IG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcclxuICAgICAgICBpZiAoIW5leHROb2RlKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7IHBhcmVudE5vZGU7IHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlID09PSBjZWlsaW5nKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlLm5leHRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBwYXJlbnROb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghbmV4dE5vZGUpIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAobmV4dE5vZGUuZmlyc3RDaGlsZCkgbmV4dE5vZGUgPSBuZXh0Tm9kZS5maXJzdENoaWxkO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV4dE5vZGU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgY2hpbGQgZWxlbWVudCBvZiB0aGUgYXJndW1lbnQgdmFsdWUuXHJcbiAgICAgKiBBIHRhZyB0aGF0IHNhdGlzZmllcyB0aGUgcXVlcnkgY29uZGl0aW9uIGlzIGltcG9ydGVkLlxyXG4gICAgICogUmV0dXJucyBudWxsIGlmIG5vdCBmb3VuZC5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBSZWZlcmVuY2UgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHF1ZXJ5IFF1ZXJ5IFN0cmluZyAobm9kZU5hbWUsIC5jbGFzc05hbWUsICNJRCwgOm5hbWUpIG9yIHZhbGlkYXRpb24gZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxhc3QgSWYgdHJ1ZSByZXR1cm5zIHRoZSBsYXN0IG5vZGUgYW1vbmcgdGhlIGZvdW5kIGNoaWxkIG5vZGVzLiAoZGVmYXVsdDogZmlyc3Qgbm9kZSlcclxuICAgICAqIE5vdCB1c2UgaXQgbGlrZSBqcXVlcnkuXHJcbiAgICAgKiBPbmx5IG9uZSBjb25kaXRpb24gY2FuIGJlIGVudGVyZWQgYXQgYSB0aW1lLlxyXG4gICAgICogQHJldHVybnMge0VsZW1lbnR8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0Q2hpbGRFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgcXVlcnksIGxhc3QpIHtcclxuICAgICAgICBsZXQgY2hlY2s7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY2hlY2sgPSBxdWVyeTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgYXR0cjtcclxuICAgICAgICAgICAgaWYgKC9eXFwuLy50ZXN0KHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgYXR0ciA9ICdjbGFzc05hbWUnO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkgPSBxdWVyeS5zcGxpdCgnLicpWzFdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eIy8udGVzdChxdWVyeSkpIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSAnaWQnO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkgPSAnXicgKyBxdWVyeS5zcGxpdCgnIycpWzFdICsgJyQnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eOi8udGVzdChxdWVyeSkpIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSAnbmFtZSc7XHJcbiAgICAgICAgICAgICAgICBxdWVyeSA9ICdeJyArIHF1ZXJ5LnNwbGl0KCc6JylbMV0gKyAnJCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyID0gJ25vZGVOYW1lJztcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gJ14nICsgKHF1ZXJ5ID09PSAndGV4dCcgPyAnIycgKyBxdWVyeSA6IHF1ZXJ5KSArICckJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVnRXhwID0gbmV3IHRoaXMuX3cuUmVnRXhwKHF1ZXJ5LCAnaScpO1xyXG4gICAgICAgICAgICBjaGVjayA9IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ0V4cC50ZXN0KGVsW2F0dHJdKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNoaWxkTGlzdCA9IHRoaXMuZ2V0TGlzdENoaWxkTm9kZXMoZWxlbWVudCwgZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrKGN1cnJlbnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGRMaXN0W2xhc3QgPyBjaGlsZExpc3QubGVuZ3RoIC0gMSA6IDBdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiAxLiBUaGUgZmlyc3Qgbm9kZSBvZiBhbGwgdGhlIGNoaWxkIG5vZGVzIG9mIHRoZSBcImZpcnN0XCIgZWxlbWVudCBpcyByZXR1cm5lZC5cclxuICAgICAqIDIuIFRoZSBsYXN0IG5vZGUgb2YgYWxsIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgXCJsYXN0XCIgZWxlbWVudCBpcyByZXR1cm5lZC5cclxuICAgICAqIDMuIFdoZW4gdGhlcmUgaXMgbm8gXCJsYXN0XCIgZWxlbWVudCwgdGhlIGZpcnN0IGFuZCBsYXN0IG5vZGVzIG9mIGFsbCB0aGUgY2hpbGRyZW4gb2YgdGhlIFwiZmlyc3RcIiBlbGVtZW50IGFyZSByZXR1cm5lZC5cclxuICAgICAqIHsgc2M6IFwiZmlyc3RcIiwgZWM6IFwibGFzdFwiIH1cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZmlyc3QgRmlyc3QgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtOb2RlfG51bGx9IGxhc3QgTGFzdCBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRFZGdlQ2hpbGROb2RlczogZnVuY3Rpb24gKGZpcnN0LCBsYXN0KSB7XHJcbiAgICAgICAgaWYgKCFmaXJzdCkgcmV0dXJuO1xyXG4gICAgICAgIGlmICghbGFzdCkgbGFzdCA9IGZpcnN0O1xyXG5cclxuICAgICAgICB3aGlsZSAoZmlyc3QgJiYgZmlyc3Qubm9kZVR5cGUgPT09IDEgJiYgZmlyc3QuY2hpbGROb2Rlcy5sZW5ndGggPiAwICYmICF0aGlzLmlzQnJlYWsoZmlyc3QpKSBmaXJzdCA9IGZpcnN0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgd2hpbGUgKGxhc3QgJiYgbGFzdC5ub2RlVHlwZSA9PT0gMSAmJiBsYXN0LmNoaWxkTm9kZXMubGVuZ3RoID4gMCAmJiAgIXRoaXMuaXNCcmVhayhsYXN0KSkgbGFzdCA9IGxhc3QubGFzdENoaWxkO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzYzogZmlyc3QsXHJcbiAgICAgICAgICAgIGVjOiBsYXN0IHx8IGZpcnN0XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIGxlZnQgYW5kIHRvcCBvZiBhcmd1bWVudC4ge2xlZnQ6MCwgdG9wOjB9XHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGFyZ2V0IG5vZGVcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxudWxsfSB3eXNpd3lnRnJhbWUgV2hlbiB1c2UgaWZyYW1lIG9wdGlvbiwgaWZyYW1lIG9iamVjdCBzaG91bGQgYmUgc2VudCAoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZSlcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9mZnNldDogZnVuY3Rpb24gKGVsZW1lbnQsIHd5c2l3eWdGcmFtZSkge1xyXG4gICAgICAgIGxldCBvZmZzZXRMZWZ0ID0gMDtcclxuICAgICAgICBsZXQgb2Zmc2V0VG9wID0gMDtcclxuICAgICAgICBsZXQgb2Zmc2V0RWxlbWVudCA9IGVsZW1lbnQubm9kZVR5cGUgPT09IDMgPyBlbGVtZW50LnBhcmVudEVsZW1lbnQgOiBlbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IHd5c2l3eWcgPSB0aGlzLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdGhpcy5pc1d5c2l3eWdEaXYuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHdoaWxlIChvZmZzZXRFbGVtZW50ICYmICF0aGlzLmhhc0NsYXNzKG9mZnNldEVsZW1lbnQsICdzZS1jb250YWluZXInKSAmJiBvZmZzZXRFbGVtZW50ICE9PSB3eXNpd3lnKSB7XHJcbiAgICAgICAgICAgIG9mZnNldExlZnQgKz0gb2Zmc2V0RWxlbWVudC5vZmZzZXRMZWZ0O1xyXG4gICAgICAgICAgICBvZmZzZXRUb3AgKz0gb2Zmc2V0RWxlbWVudC5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgIG9mZnNldEVsZW1lbnQgPSBvZmZzZXRFbGVtZW50Lm9mZnNldFBhcmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IHd5c2l3eWdGcmFtZSAmJiAvaWZyYW1lL2kudGVzdCh3eXNpd3lnRnJhbWUubm9kZU5hbWUpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsZWZ0OiBvZmZzZXRMZWZ0ICsgKGlmcmFtZSA/IHd5c2l3eWdGcmFtZS5wYXJlbnRFbGVtZW50Lm9mZnNldExlZnQgOiAwKSxcclxuICAgICAgICAgICAgdG9wOiAob2Zmc2V0VG9wIC0gKHd5c2l3eWcgPyB3eXNpd3lnLnNjcm9sbFRvcCA6IDApKSArIChpZnJhbWUgPyB3eXNpd3lnRnJhbWUucGFyZW50RWxlbWVudC5vZmZzZXRUb3AgOiAwKVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGNvbXBhcmVzIHRoZSBzdGFydCBhbmQgZW5kIGluZGV4ZXMgb2YgXCJhXCIgYW5kIFwiYlwiIGFuZCByZXR1cm5zIHRoZSBudW1iZXIgb2Ygb3ZlcmxhcHBpbmcgaW5kZXhlcyBpbiB0aGUgcmFuZ2UuXHJcbiAgICAgKiBleCkgMSwgNSwgNCwgNiA9PiBcIjJcIiAoNCB+IDUpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYVN0YXJ0IFN0YXJ0IGluZGV4IG9mIFwiYVwiXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYUVuZCBFbmQgaW5kZXggb2YgXCJhXCJcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiU3RhcnQgU3RhcnQgaW5kZXggb2YgXCJiXCJcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiRW5kIFN0YXJ0IGluZGV4IG9mIFwiYlwiXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBnZXRPdmVybGFwUmFuZ2VBdEluZGV4OiBmdW5jdGlvbiAoYVN0YXJ0LCBhRW5kLCBiU3RhcnQsIGJFbmQpIHtcclxuICAgICAgICBpZiAoYVN0YXJ0IDw9IGJFbmQgPyBhRW5kIDwgYlN0YXJ0IDogYUVuZCA+IGJTdGFydCkgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGNvbnN0IG92ZXJsYXAgPSAoYVN0YXJ0ID4gYlN0YXJ0ID8gYVN0YXJ0IDogYlN0YXJ0KSAtIChhRW5kIDwgYkVuZCA/IGFFbmQgOiBiRW5kKTtcclxuICAgICAgICByZXR1cm4gKG92ZXJsYXAgPCAwID8gb3ZlcmxhcCAqIC0xIDogb3ZlcmxhcCkgKyAxO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgdGhlIHRleHQgY29udGVudCB2YWx1ZSBvZiB0aGUgYXJndW1lbnQgdmFsdWUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IEVsZW1lbnQgdG8gcmVwbGFjZSB0ZXh0IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eHQgVGV4dCB0byBiZSBhcHBsaWVkXHJcbiAgICAgKi9cclxuICAgIGNoYW5nZVR4dDogZnVuY3Rpb24gKGVsZW1lbnQsIHR4dCkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCB8fCAhdHh0KSByZXR1cm47XHJcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHR4dDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVwbGFjZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR9IG5ld0VsZW1lbnQgU3RyaW5nIG9yIGVsZW1lbnQgb2YgdGhlIG5ldyBlbGVtZW50IHRvIGFwcGx5XHJcbiAgICAgKi9cclxuICAgIGNoYW5nZUVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBuZXdFbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdFbGVtZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5vdXRlckhUTUwpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQub3V0ZXJIVE1MID0gbmV3RWxlbWVudDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IHRoaXMuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgICAgICBkb2MuaW5uZXJIVE1MID0gbmV3RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQgPSBkb2MuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3RWxlbWVudCwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKG5ld0VsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdFbGVtZW50LCBlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFNldCBzdHlsZSwgaWYgYWxsIHN0eWxlcyBhcmUgZGVsZXRlZCwgdGhlIHN0eWxlIHByb3BlcnRpZXMgYXJlIGRlbGV0ZWQuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBzZXQgc3R5bGVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZU5hbWUgU3R5bGUgYXR0cmlidXRlIG5hbWUgKG1hcmdpbkxlZnQsIHRleHRBbGlnbi4uLilcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsdWUgU3R5bGUgdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0U3R5bGU6IGZ1bmN0aW9uIChlbGVtZW50LCBzdHlsZU5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZVtzdHlsZU5hbWVdID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICghdmFsdWUgJiYgIWVsZW1lbnQuc3R5bGUuY3NzVGV4dCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIERldGVybWluZSB3aGV0aGVyIGFueSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50cyBhcmUgYXNzaWduZWQgdGhlIGdpdmVuIGNsYXNzXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudHMgdG8gc2VhcmNoIGNsYXNzIG5hbWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc05hbWUgQ2xhc3MgbmFtZSB0byBzZWFyY2ggZm9yXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaGFzQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybjtcclxuXHJcbiAgICAgICAgcmV0dXJuIChuZXcgdGhpcy5fdy5SZWdFeHAoY2xhc3NOYW1lKSkudGVzdChlbGVtZW50LmNsYXNzTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEFwcGVuZCB0aGUgY2xhc3NOYW1lIHZhbHVlIG9mIHRoZSBhcmd1bWVudCB2YWx1ZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudHMgdG8gYWRkIGNsYXNzIG5hbWVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc05hbWUgQ2xhc3MgbmFtZSB0byBiZSBhZGRcclxuICAgICAqL1xyXG4gICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2sgPSBuZXcgdGhpcy5fdy5SZWdFeHAoJyhcXFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzfCQpJyk7XHJcbiAgICAgICAgaWYgKGNoZWNrLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpKSByZXR1cm47XHJcblxyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9IChlbGVtZW50LmNsYXNzTmFtZS5sZW5ndGggPiAwID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgdGhlIGNsYXNzTmFtZSB2YWx1ZSBvZiB0aGUgYXJndW1lbnQgdmFsdWUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRzIHRvIHJlbW92ZSBjbGFzcyBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIENsYXNzIG5hbWUgdG8gYmUgcmVtb3ZlXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGNoZWNrID0gbmV3IHRoaXMuX3cuUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShjaGVjaywgJyAnKS50cmltKCk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudC5jbGFzc05hbWUudHJpbSgpKSBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQXJndW1lbnQgdmFsdWUgSWYgdGhlcmUgaXMgbm8gY2xhc3MgbmFtZSwgaW5zZXJ0IGl0IGFuZCBkZWxldGUgdGhlIGNsYXNzIG5hbWUgaWYgaXQgZXhpc3RzXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudHMgdG8gcmVwbGFjZSBjbGFzcyBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIENsYXNzIG5hbWUgdG8gYmUgY2hhbmdlXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnx1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm47XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCBjaGVjayA9IG5ldyB0aGlzLl93LlJlZ0V4cCgnKFxcXFxzfF4pJyArIGNsYXNzTmFtZSArICcoXFxcXHN8JCknKTtcclxuICAgICAgICBpZiAoY2hlY2sudGVzdChlbGVtZW50LmNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKGNoZWNrLCAnICcpLnRyaW0oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQuY2xhc3NOYW1lLnRyaW0oKSkgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrcyBpZiBlbGVtZW50IGNhbid0IGJlIGVhc2lseSBlbmFibGVkXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVjayBmb3JcclxuICAgICAqL1xyXG4gICAgaXNJbXBvcnRhbnREaXNhYmxlZDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtaW1wb3J0YW50LWRpc2FibGVkJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEluIHRoZSBwcmVkZWZpbmVkIGNvZGUgdmlldyBtb2RlLCB0aGUgYnV0dG9ucyBleGNlcHQgdGhlIGV4ZWN1dGFibGUgYnV0dG9uIGFyZSBjaGFuZ2VkIHRvIHRoZSAnZGlzYWJsZWQnIHN0YXRlLlxyXG4gICAgICogY29yZS5jb2RlVmlld0Rpc2FibGVkQnV0dG9ucyAoQW4gYXJyYXkgb2YgYnV0dG9ucyB3aG9zZSBjbGFzcyBuYW1lIGlzIG5vdCBcInNlLWNvZGUtdmlldy1lbmFibGVkXCIpXHJcbiAgICAgKiBjb3JlLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zIChBbiBhcnJheSBvZiBidXR0b25zIHdob3NlIGNsYXNzIG5hbWUgaXMgbm90IFwic2UtcmVzaXppbmctZW5hYmxlZFwiKVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCBEaXNhYmxlZCB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtBcnJheXxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gYnV0dG9uTGlzdCBCdXR0b24gYXJyYXlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaW1wb3J0YW50IElmIHByaXZlbGVnZWQgbW9kZSBzaG91bGQgYmUgdXNlZCAoTmVjZXNzYXJ5IHRvIHN3aXRjaCBpbXBvcnRhbnREaXNhYmxlZCBidXR0b25zKVxyXG4gICAgICovXHJcbiAgICBzZXREaXNhYmxlZEJ1dHRvbnM6IGZ1bmN0aW9uIChkaXNhYmxlZCwgYnV0dG9uTGlzdCwgaW1wb3J0YW50KSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGJ1dHRvbkxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGJ1dHRvbiA9IGJ1dHRvbkxpc3RbaV07XHJcbiAgICAgICAgICAgIGlmIChpbXBvcnRhbnQgfHwgIXRoaXMuaXNJbXBvcnRhbnREaXNhYmxlZChidXR0b24pKSBidXR0b24uZGlzYWJsZWQgPSBkaXNhYmxlZDtcclxuICAgICAgICAgICAgaWYgKGltcG9ydGFudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1pbXBvcnRhbnQtZGlzYWJsZWQnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW1wb3J0YW50LWRpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIERlbGV0ZSBhcmd1bWVudSB2YWx1ZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGl0ZW0gTm9kZSB0byBiZSByZW1vdmVcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAoIWl0ZW0pIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYodHlwZW9mIGl0ZW0ucmVtb3ZlID09PSAnZnVuY3Rpb24nKSBpdGVtLnJlbW92ZSgpO1xyXG4gICAgICAgIGVsc2UgaWYgKGl0ZW0ucGFyZW50Tm9kZSkgaXRlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGl0ZW0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgYWxsIHBhcmVudCBub2RlcyB0aGF0IG1hdGNoIHRoZSBjb25kaXRpb24uXHJcbiAgICAgKiBSZXR1cm5zIGFuIHtzYzogcHJldmlvdXNTaWJsaW5nLCBlYzogbmV4dFNpYmxpbmd9KHRoZSBkZWxldGVkIG5vZGUgcmVmZXJlbmNlKSBvciBudWxsLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBpdGVtIE5vZGUgdG8gYmUgcmVtb3ZlXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHZhbGlkYXRpb24gVmFsaWRhdGlvbiBmdW5jdGlvbi4gZGVmYXVsdChEZWxldGVkIGlmIGl0IG9ubHkgaGF2ZSBicmVha0xpbmUgYW5kIGJsYW5rcylcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxudWxsfSBzdG9wUGFyZW50IFN0b3Agd2hlbiB0aGUgcGFyZW50IG5vZGUgcmVhY2hlcyBzdG9wUGFyZW50XHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IHtzYzogcHJldmlvdXNTaWJsaW5nLCBlYzogbmV4dFNpYmxpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUl0ZW1BbGxQYXJlbnRzOiBmdW5jdGlvbiAoaXRlbSwgdmFsaWRhdGlvbiwgc3RvcFBhcmVudCkge1xyXG4gICAgICAgIGlmICghaXRlbSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgbGV0IGNjID0gbnVsbDtcclxuICAgICAgICBpZiAoIXZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgdmFsaWRhdGlvbiA9IGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gc3RvcFBhcmVudCB8fCB0aGlzLmlzQ29tcG9uZW50KGN1cnJlbnQpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gY3VycmVudC50ZXh0Q29udGVudC50cmltKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC5sZW5ndGggPT09IDAgfHwgL14oXFxufFxcdTIwMEIpKyQvLnRlc3QodGV4dCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIChmdW5jdGlvbiByZWN1cnNpb25GdW5jIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1d5c2l3eWdEaXYoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgdmFsaWRhdGlvbihlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNjID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYzogZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYzogZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmdcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKHBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KGl0ZW0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNjO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEZXRhY2ggTmVzdGVkIGFsbCBuZXN0ZWQgbGlzdHMgdW5kZXIgdGhlIFwiYmFzZU5vZGVcIi5cclxuICAgICAqIFJldHVybnMgYSBsaXN0IHdpdGggbmVzdGVkIHJlbW92ZWQuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGJhc2VOb2RlIEVsZW1lbnQgb24gd2hpY2ggdG8gYmFzZS5cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYWxsIElmIHRydWUsIGl0IGFsc28gZGV0YWNoIGFsbCBuZXN0ZWQgbGlzdHMgb2YgYSByZXR1cm5lZCBsaXN0LlxyXG4gICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGRldGFjaE5lc3RlZExpc3Q6IGZ1bmN0aW9uIChiYXNlTm9kZSwgYWxsKSB7XHJcbiAgICAgICAgY29uc3Qgck5vZGUgPSB0aGlzLl9kZWxldGVOZXN0ZWRMaXN0KGJhc2VOb2RlKTtcclxuICAgICAgICBsZXQgcmFuZ2VFbGVtZW50LCBjTm9kZXM7XHJcblxyXG4gICAgICAgIGlmIChyTm9kZSkge1xyXG4gICAgICAgICAgICByYW5nZUVsZW1lbnQgPSByTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICBjTm9kZXMgPSByTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0UG9zaXRpb25JbmRleChiYXNlTm9kZSk7XHJcbiAgICAgICAgICAgIHdoaWxlIChjTm9kZXNbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY05vZGVzW2luZGV4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByYW5nZUVsZW1lbnQgPSBiYXNlTm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByQ2hpbGRyZW47XHJcbiAgICAgICAgaWYgKCFhbGwpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVwdGggPSB0aGlzLmdldEVsZW1lbnREZXB0aChiYXNlTm9kZSkgKyAyO1xyXG4gICAgICAgICAgICByQ2hpbGRyZW4gPSB0aGlzLmdldExpc3RDaGlsZHJlbihiYXNlTm9kZSwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMuaXNMaXN0Q2VsbChjdXJyZW50KSAmJiAhY3VycmVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmIHRoaXMuZ2V0RWxlbWVudERlcHRoKGN1cnJlbnQpID09PSBkZXB0aDsgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByQ2hpbGRyZW4gPSB0aGlzLmdldExpc3RDaGlsZHJlbihyYW5nZUVsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiB0aGlzLmlzTGlzdENlbGwoY3VycmVudCkgJiYgIWN1cnJlbnQucHJldmlvdXNFbGVtZW50U2libGluZzsgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVsZXRlTmVzdGVkTGlzdChyQ2hpbGRyZW5baV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJOb2RlKSB7XHJcbiAgICAgICAgICAgIHJOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHJhbmdlRWxlbWVudCwgck5vZGUubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICBpZiAoY05vZGVzICYmIGNOb2Rlcy5sZW5ndGggPT09IDApIHRoaXMucmVtb3ZlSXRlbShyTm9kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmFuZ2VFbGVtZW50ID09PSBiYXNlTm9kZSA/IHJhbmdlRWxlbWVudC5wYXJlbnROb2RlIDogcmFuZ2VFbGVtZW50O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBTdWIgZnVuY3Rpb24gb2YgdXRpbC5kZXRhY2hOZXN0ZWRMaXN0IG1ldGhvZC5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9kZWxldGVOZXN0ZWRMaXN0OiBmdW5jdGlvbiAoYmFzZU5vZGUpIHtcclxuICAgICAgICBjb25zdCBiYXNlUGFyZW50ID0gYmFzZU5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICBsZXQgc2libGluZyA9IGJhc2VQYXJlbnQ7XHJcbiAgICAgICAgbGV0IHBhcmVudCA9IHNpYmxpbmcucGFyZW50Tm9kZTtcclxuICAgICAgICBsZXQgbGlTaWJsaW5nLCBsaVBhcmVudCwgY2hpbGQsIGluZGV4LCBjO1xyXG5cclxuICAgICAgICB3aGlsZSAodGhpcy5pc0xpc3RDZWxsKHBhcmVudCkpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmdldFBvc2l0aW9uSW5kZXgoYmFzZU5vZGUpO1xyXG4gICAgICAgICAgICBsaVNpYmxpbmcgPSBwYXJlbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICBsaVBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBjaGlsZCA9IHNpYmxpbmc7XHJcbiAgICAgICAgICAgIHdoaWxlKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nID0gc2libGluZy5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGlzdChjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gY2hpbGQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlQYXJlbnQuaW5zZXJ0QmVmb3JlKGNbaW5kZXhdLCBsaVNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5sZW5ndGggPT09IDApIHRoaXMucmVtb3ZlSXRlbShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpUGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoaWxkID0gc2libGluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzaWJsaW5nID0gbGlQYXJlbnQ7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IGxpUGFyZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYmFzZVBhcmVudC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHRoaXMucmVtb3ZlSXRlbShiYXNlUGFyZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpUGFyZW50O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBTcGxpdCBhbGwgdGFncyBiYXNlZCBvbiBcImJhc2VOb2RlXCJcclxuICAgICAqIFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgc3BsaXRlZCB0YWcuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGJhc2VOb2RlIEVsZW1lbnQgb3IgdGV4dCBub2RlIG9uIHdoaWNoIHRvIGJhc2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfE5vZGV8bnVsbH0gb2Zmc2V0IFRleHQgb2Zmc2V0IG9mIFwiYmFzZU5vZGVcIiAoT25seSB2YWxpZCB3aGVuIFwiYmFzZU5vZGVcIiBpcyBhIHRleHQgbm9kZSlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZXB0aCBUaGUgbmVzdGluZyBkZXB0aCBvZiB0aGUgZWxlbWVudCBiZWluZyBzcGxpdC4gKGRlZmF1bHQ6IDApXHJcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cclxuICAgICAqL1xyXG4gICAgc3BsaXRFbGVtZW50OiBmdW5jdGlvbiAoYmFzZU5vZGUsIG9mZnNldCwgZGVwdGgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1d5c2l3eWdEaXYoYmFzZU5vZGUpKSByZXR1cm4gYmFzZU5vZGU7XHJcblxyXG4gICAgICAgIGlmIChvZmZzZXQgJiYgIXRoaXMuaXNOdW1iZXIob2Zmc2V0KSkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9ICBiYXNlTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmdldFBvc2l0aW9uSW5kZXgob2Zmc2V0KTtcclxuICAgICAgICAgICAgY29uc3QgcHJldiA9IGJhc2VOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBiYXNlTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgaW5kZXgpIHByZXYuYXBwZW5kQ2hpbGQoY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA+IGluZGV4KSBuZXh0LmFwcGVuZENoaWxkKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICBsZW4tLTtcclxuICAgICAgICAgICAgICAgIGluZGV4LS07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwcmV2LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkgYmFzZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocHJldiwgYmFzZU5vZGUpO1xyXG4gICAgICAgICAgICBpZiAobmV4dC5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIGJhc2VOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5leHQsIGJhc2VOb2RlLm5leHRFbGVtZW50U2libGluZyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYmFzZU5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBicCA9IGJhc2VOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgICBsZXQgc3VmZml4SW5kZXggPSAxO1xyXG4gICAgICAgIGxldCBuZXh0ID0gdHJ1ZTtcclxuICAgICAgICBsZXQgbmV3RWwsIGNoaWxkcmVuLCB0ZW1wO1xyXG4gICAgICAgIGlmICghZGVwdGggfHwgZGVwdGggPCAwKSBkZXB0aCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChiYXNlTm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuZ2V0UG9zaXRpb25JbmRleChiYXNlTm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gMCAmJiBiYXNlTm9kZS5sZW5ndGggIT09IG9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgYmFzZU5vZGUuc3BsaXRUZXh0KG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhZnRlciA9IHRoaXMuZ2V0Tm9kZUZyb21QYXRoKFtpbmRleCArIDFdLCBicCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbmx5WmVyb1dpZHRoU3BhY2UoYWZ0ZXIpKSBhZnRlci5kYXRhID0gdGhpcy56ZXJvV2lkdGhTcGFjZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoYmFzZU5vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGJhc2VOb2RlLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlTm9kZSA9IGJhc2VOb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYmFzZU5vZGUubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZnRlciA9IHRoaXMuY3JlYXRlVGV4dE5vZGUodGhpcy56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYWZ0ZXIsIGJhc2VOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlTm9kZSA9IGFmdGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYmFzZU5vZGUucHJldmlvdXNTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRFbGVtZW50RGVwdGgoYmFzZU5vZGUpID09PSBkZXB0aCkgbmV4dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYmFzZU5vZGUgPSBiYXNlTm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChiYXNlTm9kZS5ub2RlVHlwZSA9PT0gMSkgc3VmZml4SW5kZXggPSAwO1xyXG4gICAgICAgIGxldCBkZXB0aEVsID0gYmFzZU5vZGU7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuZ2V0RWxlbWVudERlcHRoKGRlcHRoRWwpID4gZGVwdGgpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmdldFBvc2l0aW9uSW5kZXgoZGVwdGhFbCkgKyBzdWZmaXhJbmRleDtcclxuICAgICAgICAgICAgZGVwdGhFbCA9IGRlcHRoRWwucGFyZW50Tm9kZTtcclxuXHJcbiAgICAgICAgICAgIHRlbXAgPSBuZXdFbDtcclxuICAgICAgICAgICAgbmV3RWwgPSBkZXB0aEVsLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gZGVwdGhFbC5jaGlsZE5vZGVzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRlbXApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGlzdENlbGwobmV3RWwpICYmIHRoaXMuaXNMaXN0KHRlbXApICYmIHRlbXAuZmlyc3RFbGVtZW50Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdFbC5pbm5lckhUTUwgPSB0ZW1wLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odGVtcC5maXJzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXAuY2hpbGRyZW4ubGVuZ3RoID4gMCkgbmV3RWwuYXBwZW5kQ2hpbGQodGVtcCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VsLmFwcGVuZENoaWxkKHRlbXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAoY2hpbGRyZW5baW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdFbC5hcHBlbmRDaGlsZChjaGlsZHJlbltpbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGVwdGhFbC5jaGlsZE5vZGVzLmxlbmd0aCA8PSAxICYmICghZGVwdGhFbC5maXJzdENoaWxkIHx8IGRlcHRoRWwuZmlyc3RDaGlsZC50ZXh0Q29udGVudC5sZW5ndGggPT09IDApKSBkZXB0aEVsLmlubmVySFRNTCA9ICc8YnI+JztcclxuXHJcbiAgICAgICAgY29uc3QgcEVsZW1lbnQgPSBkZXB0aEVsLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKG5leHQpIGRlcHRoRWwgPSBkZXB0aEVsLm5leHRTaWJsaW5nO1xyXG4gICAgICAgIGlmICghbmV3RWwpIHJldHVybiBkZXB0aEVsO1xyXG5cclxuICAgICAgICB0aGlzLm1lcmdlU2FtZVRhZ3MobmV3RWwsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm1lcmdlTmVzdGVkVGFncyhuZXdFbCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMuaXNMaXN0KGN1cnJlbnQpOyB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBpZiAobmV3RWwuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSBwRWxlbWVudC5pbnNlcnRCZWZvcmUobmV3RWwsIGRlcHRoRWwpO1xyXG4gICAgICAgIGVsc2UgbmV3RWwgPSBkZXB0aEVsO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0xpc3RDZWxsKG5ld0VsKSAmJiBuZXdFbC5jaGlsZHJlbiAmJiB0aGlzLmlzTGlzdChuZXdFbC5jaGlsZHJlblswXSkpIHtcclxuICAgICAgICAgICAgbmV3RWwuaW5zZXJ0QmVmb3JlKHRoaXMuY3JlYXRlRWxlbWVudCgnQlInKSwgbmV3RWwuY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJwLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB0aGlzLnJlbW92ZUl0ZW0oYnApO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3RWw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFVzZSB3aXRoIFwibnBkZVBhdGggKHV0aWwuZ2V0Tm9kZVBhdGgpXCIgdG8gbWVyZ2UgdGhlIHNhbWUgYXR0cmlidXRlcyBhbmQgdGFncyBpZiB0aGV5IGFyZSBwcmVzZW50IGFuZCBtb2RpZnkgdGhlIG5vZGVwYXRoLlxyXG4gICAgICogSWYgXCJvZmZzZXRcIiBoYXMgYmVlbiBjaGFuZ2VkLCBpdCB3aWxsIHJldHVybiBhcyBtdWNoIFwib2Zmc2V0XCIgYXMgaXQgaGFzIGJlZW4gbW9kaWZpZWQuXHJcbiAgICAgKiBBbiBhcnJheSBjb250YWluaW5nIGNoYW5nZSBvZmZzZXRzIGlzIHJldHVybmVkIGluIHRoZSBvcmRlciBvZiB0aGUgXCJub2RlUGF0aEFycmF5XCIgYXJyYXkuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtBcnJheXxudWxsfSBub2RlUGF0aEFycmF5IEFycmF5IG9mIE5vZGVQYXRoIG9iamVjdCAoW3V0aWwuZ2V0Tm9kZVBhdGgoKSwgLi5dKVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbmx5VGV4dCBJZiB0cnVlLCBub24tdGV4dCBub2RlcyghdXRpbC5faXNJZ25vcmVOb2RlQ2hhbmdlKSBsaWtlICdzcGFuJywgJ3N0cm9uZycuLiBhcmUgaWdub3JlZC5cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gW29mZnNldCwgLi5dXHJcbiAgICAgKi9cclxuICAgIG1lcmdlU2FtZVRhZ3M6IGZ1bmN0aW9uIChlbGVtZW50LCBub2RlUGF0aEFycmF5LCBvbmx5VGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGluc3QgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IG5vZGVQYXRoTGVuID0gbm9kZVBhdGhBcnJheSA/IG5vZGVQYXRoQXJyYXkubGVuZ3RoIDogMDtcclxuICAgICAgICBsZXQgb2Zmc2V0cyA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChub2RlUGF0aExlbikge1xyXG4gICAgICAgICAgICBvZmZzZXRzID0gdGhpcy5fdy5BcnJheS5hcHBseShudWxsLCBuZXcgdGhpcy5fdy5BcnJheShub2RlUGF0aExlbikpLm1hcCh0aGlzLl93Lk51bWJlci5wcm90b3R5cGUudmFsdWVPZiwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBkZXB0aCwgZGVwdGhJbmRleCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGgsIGNoaWxkLCBuZXh0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gY2hpbGRyZW5baSArIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBpZigob25seVRleHQgJiYgaW5zdC5faXNJZ25vcmVOb2RlQ2hhbmdlKGNoaWxkKSkgfHwgKCFvbmx5VGV4dCAmJiAoaW5zdC5pc1RhYmxlKGNoaWxkKSB8fCBpbnN0LmlzTGlzdENlbGwoY2hpbGQpIHx8IChpbnN0LmlzRm9ybWF0RWxlbWVudChjaGlsZCkgJiYgIWluc3QuaXNGcmVlRm9ybWF0RWxlbWVudChjaGlsZCkpKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdC5pc1RhYmxlKGNoaWxkKSB8fCBpbnN0LmlzTGlzdENlbGwoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGRlcHRoICsgMSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PT0gMSAmJiBjdXJyZW50Lm5vZGVOYW1lID09PSBjaGlsZC5ub2RlTmFtZSAmJiBjdXJyZW50LnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgbm9kZVBhdGhcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVBhdGhMZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGgsIGMsIHAsIGNEZXB0aCwgc3BsaWNlRGVwdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgbm9kZVBhdGhMZW47IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IG5vZGVQYXRoQXJyYXlbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0aCAmJiBwYXRoW2RlcHRoXSA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaGlsZCwgcCA9IGN1cnJlbnQsIGNEZXB0aCA9IGRlcHRoLCBzcGxpY2VEZXB0aCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNEZXB0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0LmdldEFycmF5SW5kZXgocC5jaGlsZE5vZGVzLCBjKSAhPT0gcGF0aFtjRGVwdGhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpY2VEZXB0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGNoaWxkLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBjLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNEZXB0aC0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaWNlRGVwdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5zcGxpY2UoZGVwdGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoW2RlcHRoXSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBtZXJnZSB0YWdcclxuICAgICAgICAgICAgICAgICAgICBpbnN0LmNvcHlUYWdBdHRyaWJ1dGVzKGNoaWxkLCBjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkLCBjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0LnJlbW92ZUl0ZW0oY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGRlcHRoICsgMSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVOYW1lID09PSBuZXh0Lm5vZGVOYW1lICYmIGluc3QuaXNTYW1lQXR0cmlidXRlcyhjaGlsZCwgbmV4dCkgJiYgY2hpbGQuaHJlZiA9PT0gbmV4dC5ocmVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGRzID0gY2hpbGQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRMZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG4gPSAwLCBuTGVuID0gY2hpbGRzLmxlbmd0aDsgbiA8IG5MZW47IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRzW25dLnRleHRDb250ZW50Lmxlbmd0aCA+IDApIGNoaWxkTGVuZ3RoKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsID0gY2hpbGQubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXh0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFkZE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGwgJiYgcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0T2Zmc2V0ID0gbC5ub2RlVHlwZSA9PT0gMyAmJiByLm5vZGVUeXBlID09PSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRPZmZzZXQgPSBsLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBMID0gbC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKHRlbXBMICYmIHRlbXBMLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRPZmZzZXQgKz0gdGVtcEwudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEwgPSB0ZW1wTC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZExlbmd0aCA+IDAgJiYgbC5ub2RlVHlwZSA9PT0gMyAmJiByLm5vZGVUeXBlID09PSAzICYmIChsLnRleHRDb250ZW50Lmxlbmd0aCA+IDAgfHwgci50ZXh0Q29udGVudC5sZW5ndGggPiAwKSkgY2hpbGRMZW5ndGgtLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlUGF0aExlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBub2RlUGF0aExlbjsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IG5vZGVQYXRoQXJyYXlbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGggJiYgcGF0aFtkZXB0aF0gPiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcGF0aFtkZXB0aCAtIDFdICE9PSBkZXB0aEluZGV4KSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbZGVwdGhdIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2RlcHRoICsgMV0gPj0gMCAmJiBwYXRoW2RlcHRoXSA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtkZXB0aCArIDFdICs9IGNoaWxkTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobCAmJiBsLm5vZGVUeXBlID09PSAzICYmIHIgJiYgci5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRzW25dICs9IGFkZE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRPZmZzZXQgPSBjaGlsZC50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnRleHRDb250ZW50ICs9IG5leHQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlUGF0aExlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBub2RlUGF0aExlbjsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IG5vZGVQYXRoQXJyYXlbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGggJiYgcGF0aFtkZXB0aF0gPiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcGF0aFtkZXB0aCAtIDFdICE9PSBkZXB0aEluZGV4KSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbZGVwdGhdIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2RlcHRoICsgMV0gPj0gMCAmJiBwYXRoW2RlcHRoXSA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtkZXB0aCArIDFdICs9IGNoaWxkTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0c1tuXSArPSBhZGRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5pbm5lckhUTUwgKz0gbmV4dC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbnN0LnJlbW92ZUl0ZW0obmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGRlcHRoICsgMSwgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KShlbGVtZW50LCAwLCAwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9mZnNldHM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSBuZXN0ZWQgdGFncyB3aXRob3V0IG90aGVyIGNoaWxkIG5vZGVzLlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ3xudWxsfSB2YWxpZGF0aW9uIFZhbGlkYXRpb24gZnVuY3Rpb24gLyBTdHJpbmcoXCJ0YWcxfHRhZzIuLlwiKSAvIElmIG51bGwsIGFsbCB0YWdzIGFyZSBhcHBsaWNhYmxlLlxyXG4gICAgICovXHJcbiAgICBtZXJnZU5lc3RlZFRhZ3M6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWxpZGF0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uID0gZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMudGVzdChjdXJyZW50LnRhZ05hbWUpOyB9LmJpbmQobmV3IHRoaXMuX3cuUmVnRXhwKCdeKCcgKyAodmFsaWRhdGlvbiA/IHZhbGlkYXRpb24gOiAnLisnKSArICcpJCcsICdpJykpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbGlkYXRpb24gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGxldCBjaGlsZHJlbiA9IGN1cnJlbnQuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgY2hpbGRyZW5bMF0ubm9kZU5hbWUgPT09IGN1cnJlbnQubm9kZU5hbWUgJiYgdmFsaWRhdGlvbihjdXJyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSB0ZW1wLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5hcHBlbmRDaGlsZChjaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnJlbW92ZUNoaWxkKHRlbXApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY3VycmVudC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjdXJyZW50LmNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKGVsZW1lbnQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgYSBlbXB0eSBjaGlsZCBub2RlIG9mIGFyZ3VtZW50IGVsZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBub2RlXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8bnVsbH0gbm90UmVtb3ZlTm9kZSBEbyBub3QgcmVtb3ZlIG5vZGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2VEZWxldGUgV2hlbiBhbGwgY2hpbGQgbm9kZXMgYXJlIGRlbGV0ZWQsIHRoZSBwYXJlbnQgbm9kZSBpcyBhbHNvIGRlbGV0ZWQuXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUVtcHR5Tm9kZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5vdFJlbW92ZU5vZGUsIGZvcmNlRGVsZXRlKSB7XHJcbiAgICAgICAgY29uc3QgaW5zdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChub3RSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgIG5vdFJlbW92ZU5vZGUgPSBpbnN0LmdldFBhcmVudEVsZW1lbnQobm90UmVtb3ZlTm9kZSwgZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50ID09PSBjdXJyZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCkge1xyXG4gICAgICAgICAgICBpZiAoaW5zdC5fbm90VGV4dE5vZGUoY3VycmVudCkgfHwgY3VycmVudCA9PT0gbm90UmVtb3ZlTm9kZSB8fCBpbnN0LmlzTm9uRWRpdGFibGUoY3VycmVudCkpIHJldHVybiAwO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudCAhPT0gZWxlbWVudCAmJiBpbnN0Lm9ubHlaZXJvV2lkdGhTcGFjZShjdXJyZW50LnRleHRDb250ZW50KSAmJiAoIWN1cnJlbnQuZmlyc3RDaGlsZCB8fCAhaW5zdC5pc0JyZWFrKGN1cnJlbnQuZmlyc3RDaGlsZCkpICYmICFjdXJyZW50LnF1ZXJ5U2VsZWN0b3IoaW5zdC5fYWxsb3dlZEVtcHR5Tm9kZUxpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gY3VycmVudC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGgsIHIgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuW2kgKyByXSB8fCBpbnN0LmlzQ29tcG9uZW50KGNoaWxkcmVuW2kgKyByXSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHIgKz0gcmVjdXJzaW9uRnVuYyhjaGlsZHJlbltpICsgcl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9KShlbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGZvcmNlRGVsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlIHdoaXRlc3BhY2UgYmV0d2VlbiB0YWdzIGluIEhUTUwgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGh0bWwgSFRNTCBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGh0bWxSZW1vdmVXaGl0ZVNwYWNlOiBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgIGlmICghaHRtbCkgcmV0dXJuICcnO1xyXG4gICAgICAgIHJldHVybiBodG1sLnRyaW0oKS5yZXBsYWNlKC88XFwvPyg/IXN0cm9uZ3xzcGFufGZvbnR8Ynx2YXJ8aXxlbXx1fGluc3xzfHN0cmlrZXxkZWx8c3VifHN1cHxtYXJrfGF8bGFiZWx8Y29kZXxzdW1tYXJ5KVtePl48XSs+XFxzKyg/PTwpL2lnLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5yZXBsYWNlKC9cXG4vZywgJycpLnJlcGxhY2UoL1xccysvLCAnICcpOyB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSFRNTCBjb2RlIGNvbXByZXNzaW9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaHRtbCBIVE1MIHN0cmluZ1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gSFRNTCBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgaHRtbENvbXByZXNzOiBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoL1xcbi9nLCAnJykucmVwbGFjZSgvKD4pKD86XFxzKykoPCkvZywgJyQxJDInKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU29ydCBhIGVsZW1lbnQgYXJyYXkgYnkgZGVwdGggb2YgZWxlbWVudC5cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IEFycmF5IG9iamVjdFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBkZXMgdHJ1ZTogZGVzY2VuZGluZyBvcmRlciAvIGZhbHNlOiBhc2NlbmRpbmcgb3JkZXJcclxuICAgICAqL1xyXG4gICAgc29ydEJ5RGVwdGg6IGZ1bmN0aW9uIChhcnJheSwgZGVzKSB7XHJcbiAgICAgICAgY29uc3QgdCA9ICFkZXMgPyAtMSA6IDE7XHJcbiAgICAgICAgY29uc3QgZiA9IHQgKiAtMTtcclxuXHJcbiAgICAgICAgYXJyYXkuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNMaXN0Q2VsbChhKSB8fCAhdGhpcy5pc0xpc3RDZWxsKGIpKSByZXR1cm4gMDtcclxuICAgICAgICAgICAgYSA9IHRoaXMuZ2V0RWxlbWVudERlcHRoKGEpO1xyXG4gICAgICAgICAgICBiID0gdGhpcy5nZXRFbGVtZW50RGVwdGgoYik7XHJcbiAgICAgICAgICAgIHJldHVybiBhID4gYiA/IHQgOiBhIDwgYiA/IGYgOiAwO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBFc2NhcGUgYSBzdHJpbmcgZm9yIHNhZmUgdXNlIGluIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBlc2NhcGVcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGVzY2FwZVN0cmluZ1JlZ2V4cDogZnVuY3Rpb24gKHN0cmluZykge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgd2l0aCBzcGVjaWFsIG1lYW5pbmcgZWl0aGVyIGluc2lkZSBvciBvdXRzaWRlIGNoYXJhY3RlciBzZXRzLlxyXG4gICAgICAgIC8vIFVzZSBhIHNpbXBsZSBiYWNrc2xhc2ggZXNjYXBlIHdoZW4gaXTigJlzIGFsd2F5cyB2YWxpZCwgYW5kIGEgYFxceG5uYCBlc2NhcGUgd2hlbiB0aGUgc2ltcGxlciBmb3JtIHdvdWxkIGJlIGRpc2FsbG93ZWQgYnkgVW5pY29kZSBwYXR0ZXJuc+KAmSBzdHJpY3RlciBncmFtbWFyLlxyXG4gICAgICAgIHJldHVybiBzdHJpbmdcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLCAnXFxcXCQmJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgJ1xcXFx4MmQnKTtcclxuICAgIH0sXHJcblxyXG4gICAgX2lzRXhjbHVkZVNlbGVjdGlvbkVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuICEvRklHQ0FQVElPTi9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgJiYgKHRoaXMuaXNDb21wb25lbnQoZWxlbWVudCkgfHwgL0ZJR1VSRS9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBOb2RlcyB0aGF0IG5lZWQgdG8gYmUgYWRkZWQgd2l0aG91dCBtb2RpZmljYXRpb24gd2hlbiBjaGFuZ2luZyB0ZXh0IG5vZGVzXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfaXNJZ25vcmVOb2RlQ2hhbmdlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDMgJiYgKHRoaXMuaXNOb25FZGl0YWJsZShlbGVtZW50KSB8fCAhdGhpcy5pc1RleHRTdHlsZUVsZW1lbnQoZWxlbWVudCkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBOb2RlcyB0aGF0IG11c3QgcmVtYWluIHVuZGV0YWNoZWQgd2hlbiBjaGFuZ2luZyB0ZXh0IG5vZGVzIChBLCBMYWJlbCwgQ29kZSwgU3Bhbjpmb250LXNpemUpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2lzTWFpbnRhaW5lZE5vZGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSAhPT0gMyAmJiAvXihhfGxhYmVsfGNvZGV8c3VtbWFyeSkkL2kudGVzdCh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgPyBlbGVtZW50IDogZWxlbWVudC5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIE5vZGUgd2l0aCBmb250LXNpemUgc3R5bGVcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBFbGVtZW50IHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9pc1NpemVOb2RlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDMgJiYgdGhpcy5pc1RleHRTdHlsZUVsZW1lbnQoZWxlbWVudCkgJiYgISFlbGVtZW50LnN0eWxlLmZvbnRTaXplO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBOb2RlcyB3aXRob3V0IHRleHRcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBFbGVtZW50IHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9ub3RUZXh0Tm9kZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlICE9PSAzICYmICh0aGlzLmlzQ29tcG9uZW50KGVsZW1lbnQpIHx8IC9eKGJyfGlucHV0fHNlbGVjdHxjYW52YXN8aW1nfGlmcmFtZXxhdWRpb3x2aWRlbykkL2kudGVzdCh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgPyBlbGVtZW50IDogZWxlbWVudC5ub2RlTmFtZSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgZGlzYWxsb3dlZCB0YWdzXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfZGlzYWxsb3dlZFRhZ3M6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIC9eKG1ldGF8c2NyaXB0fGxpbmt8c3R5bGV8W2Etel0rXFw6W2Etel0rKSQvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgd2hpdGVsaXN0IFJlZ0V4cCBvYmplY3QuXHJcbiAgICAgKiBSZXR1cm4gUmVnRXhwIGZvcm1hdDogbmV3IFJlZ0V4cChcIjxcXFxcLz9cXFxcYig/IVwiICsgbGlzdCArIFwiKVxcXFxiW14+XjxdKis+XCIsIFwiZ2lcIilcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsaXN0IFRhZ3MgbGlzdCAoXCJicnxwfGRpdnxwcmUuLi5cIilcclxuICAgICAqIEByZXR1cm5zIHtSZWdFeHB9XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVRhZ3NXaGl0ZWxpc3Q6IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJzxcXFxcLz9cXFxcYig/IVxcXFxiJyArIChsaXN0IHx8ICcnKS5yZXBsYWNlKC9cXHwvZywgJ1xcXFxifFxcXFxiJykgKyAnXFxcXGIpW14+XSo+JywgJ2dpJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSBibGFja2xpc3QgUmVnRXhwIG9iamVjdC5cclxuICAgICAqIFJldHVybiBSZWdFeHAgZm9ybWF0OiBuZXcgUmVnRXhwKFwiPFxcXFwvP1xcXFxiKD86XCIgKyBsaXN0ICsgXCIpXFxcXGJbXj5ePF0qKz5cIiwgXCJnaVwiKVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxpc3QgVGFncyBsaXN0IChcImJyfHB8ZGl2fHByZS4uLlwiKVxyXG4gICAgICogQHJldHVybnMge1JlZ0V4cH1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlVGFnc0JsYWNrbGlzdDogZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnPFxcXFwvP1xcXFxiKD86XFxcXGInICsgKGxpc3QgfHwgJ14nKS5yZXBsYWNlKC9cXHwvZywgJ1xcXFxifFxcXFxiJykgKyAnXFxcXGIpW14+XSo+JywgJ2dpJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEZpeCB0YWdzIHRoYXQgZG8gbm90IGZpdCB0aGUgZWRpdG9yIGZvcm1hdC5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZG9jdW1lbnRGcmFnbWVudCBEb2N1bWVudCBmcmFnbWVudCBcIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREVcIiAobm9kZVR5cGUgPT09IDExKVxyXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IGh0bWxDaGVja1doaXRlbGlzdFJlZ0V4cCBFZGl0b3IgdGFncyB3aGl0ZWxpc3QgKGNvcmUuX2h0bWxDaGVja1doaXRlbGlzdFJlZ0V4cClcclxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBodG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAgRWRpdG9yIHRhZ3MgYmxhY2tsaXN0IChjb3JlLl9odG1sQ2hlY2tCbGFja2xpc3RSZWdFeHApXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjbGFzc05hbWVGaWx0ZXIgQ2xhc3MgbmFtZSBmaWx0ZXIgZnVuY3Rpb25cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jb25zaXN0ZW5jeUNoZWNrT2ZIVE1MOiBmdW5jdGlvbiAoZG9jdW1lbnRGcmFnbWVudCwgaHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwLCBodG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAsIGNsYXNzTmFtZUZpbHRlcikge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEl0IGlzIGNhbiB1c2UgXCIuY2hpbGRyZW4odXRpbC5nZXRMaXN0Q2hpbGRyZW4pXCIgdG8gZXhjbHVkZSB0ZXh0IG5vZGVzLCBidXQgXCJkb2N1bWVudEZyYWdtZW50LmNoaWxkcmVuXCIgaXMgbm90IHN1cHBvcnRlZCBpbiBJRS5cclxuICAgICAgICAgKiBTbyBjaGVjayB0aGUgbm9kZSB0eXBlIGFuZCBleGNsdWRlIHRoZSB0ZXh0IG5vIChjdXJyZW50Lm5vZGVUeXBlICE9PSAxKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZVRhZ3MgPSBbXSwgZW1wdHlUYWdzID0gW10sIHdyb25nTGlzdCA9IFtdLCB3aXRob3V0Rm9ybWF0Q2VsbHMgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gd3JvbmcgcG9zaXRpb25cclxuICAgICAgICBjb25zdCB3cm9uZ1RhZ3MgPSB0aGlzLmdldExpc3RDaGlsZE5vZGVzKGRvY3VtZW50RnJhZ21lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Lm5vZGVUeXBlICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xpc3QoY3VycmVudC5wYXJlbnRFbGVtZW50KSkgcmVtb3ZlVGFncy5wdXNoKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB3aGl0ZSBsaXN0XHJcbiAgICAgICAgICAgIGlmIChodG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAudGVzdChjdXJyZW50Lm5vZGVOYW1lKSB8fCAoIWh0bWxDaGVja1doaXRlbGlzdFJlZ0V4cC50ZXN0KGN1cnJlbnQubm9kZU5hbWUpICYmIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgJiYgdGhpcy5pc05vdENoZWNraW5nTm9kZShjdXJyZW50KSkpIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRhZ3MucHVzaChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZW1wdHkgdGFnc1xyXG4gICAgICAgICAgICBjb25zdCBucnRhZyA9ICF0aGlzLmdldFBhcmVudEVsZW1lbnQoY3VycmVudCwgdGhpcy5pc05vdENoZWNraW5nTm9kZSk7XHJcbiAgICAgICAgICAgIGlmICgoIXRoaXMuaXNUYWJsZShjdXJyZW50KSAmJiAhdGhpcy5pc0xpc3RDZWxsKGN1cnJlbnQpICYmICF0aGlzLmlzQW5jaG9yKGN1cnJlbnQpKSAmJiAodGhpcy5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudCkgfHwgdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KSB8fCB0aGlzLmlzVGV4dFN0eWxlRWxlbWVudChjdXJyZW50KSkgJiYgY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBucnRhZykge1xyXG4gICAgICAgICAgICAgICAgZW1wdHlUYWdzLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHdyb25nIGxpc3RcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNMaXN0KGN1cnJlbnQucGFyZW50Tm9kZSkgJiYgIXRoaXMuaXNMaXN0KGN1cnJlbnQpICYmICF0aGlzLmlzTGlzdENlbGwoY3VycmVudCkpIHtcclxuICAgICAgICAgICAgICAgIHdyb25nTGlzdC5wdXNoKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB0YWJsZSBjZWxsc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0NlbGwoY3VycmVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZlbCA9IGN1cnJlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNGb3JtYXRFbGVtZW50KGZlbCkgJiYgIXRoaXMuaXNSYW5nZUZvcm1hdEVsZW1lbnQoZmVsKSAmJiAhdGhpcy5pc0NvbXBvbmVudChmZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2l0aG91dEZvcm1hdENlbGxzLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjbGFzcyBmaWx0ZXJcclxuICAgICAgICAgICAgaWYgKG5ydGFnICYmIGN1cnJlbnQuY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBuZXcgdGhpcy5fdy5BcnJheShjdXJyZW50LmNsYXNzTGlzdCkubWFwKGNsYXNzTmFtZUZpbHRlcikuam9pbignICcpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIGN1cnJlbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBjdXJyZW50LnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY3VycmVudC5wYXJlbnROb2RlICE9PSBkb2N1bWVudEZyYWdtZW50ICYmIG5ydGFnICYmXHJcbiAgICAgICAgICAgICAgICAoKHRoaXMuaXNMaXN0Q2VsbChjdXJyZW50KSAmJiAhdGhpcy5pc0xpc3QoY3VycmVudC5wYXJlbnROb2RlKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAoKHRoaXMuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpIHx8IHRoaXMuaXNDb21wb25lbnQoY3VycmVudCkpICYmICF0aGlzLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGN1cnJlbnQucGFyZW50Tm9kZSkgJiYgIXRoaXMuZ2V0UGFyZW50RWxlbWVudChjdXJyZW50LCB0aGlzLmlzQ29tcG9uZW50KSkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmVtb3ZlVGFncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW0ocmVtb3ZlVGFnc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjaGVja1RhZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gd3JvbmdUYWdzLmxlbmd0aCwgdCwgcDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHQgPSB3cm9uZ1RhZ3NbaV07XHJcbiAgICAgICAgICAgIHAgPSB0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIGlmICghcCB8fCAhcC5wYXJlbnROb2RlKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdldFBhcmVudEVsZW1lbnQodCwgdGhpcy5pc0xpc3RDZWxsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbENoaWxkcmVuID0gdC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGNlbGxDaGlsZHJlbi5sZW5ndGggLSAxOyBsZW4gPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5pbnNlcnRCZWZvcmUodCwgY2VsbENoaWxkcmVuW2pdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoZWNrVGFncy5wdXNoKHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCBwKTtcclxuICAgICAgICAgICAgICAgIGNoZWNrVGFncy5wdXNoKHApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hlY2tUYWdzLmxlbmd0aCwgdDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHQgPSBjaGVja1RhZ3NbaV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9ubHlaZXJvV2lkdGhTcGFjZSh0LnRleHRDb250ZW50LnRyaW0oKSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVtcHR5VGFncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oZW1wdHlUYWdzW2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB3cm9uZ0xpc3QubGVuZ3RoLCB0LCB0cCwgY2hpbGRyZW4sIHA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0ID0gd3JvbmdMaXN0W2ldO1xyXG4gICAgICAgICAgICBwID0gdC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAoIXApIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgdHAgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Zvcm1hdEVsZW1lbnQodCkpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gdC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHAuYXBwZW5kQ2hpbGQoY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcC5pbnNlcnRCZWZvcmUodHAsIHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdCA9IHQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICB0cC5hcHBlbmRDaGlsZCh3cm9uZ0xpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgcC5pbnNlcnRCZWZvcmUodHAsIHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gd2l0aG91dEZvcm1hdENlbGxzLmxlbmd0aCwgdCwgZjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHQgPSB3aXRob3V0Rm9ybWF0Q2VsbHNbaV07XHJcbiAgICAgICAgICAgIGYgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICBmLmlubmVySFRNTCA9ICh0LnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGggPT09IDAgJiYgdC5jaGlsZHJlbi5sZW5ndGggPT09IDApID8gJzxicj4nIDogdC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgIHQuaW5uZXJIVE1MID0gZi5vdXRlckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0RGVmYXVsdE9wdGlvblN0eWxlOiBmdW5jdGlvbiAob3B0aW9ucywgZGVmYXVsdFN0eWxlKSB7XHJcbiAgICAgICAgbGV0IG9wdGlvblN0eWxlID0gJyc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0KSBvcHRpb25TdHlsZSArPSAnaGVpZ2h0OicgKyBvcHRpb25zLmhlaWdodCArICc7JztcclxuICAgICAgICBpZiAob3B0aW9ucy5taW5IZWlnaHQpIG9wdGlvblN0eWxlICs9ICdtaW4taGVpZ2h0OicgKyBvcHRpb25zLm1pbkhlaWdodCArICc7JztcclxuICAgICAgICBpZiAob3B0aW9ucy5tYXhIZWlnaHQpIG9wdGlvblN0eWxlICs9ICdtYXgtaGVpZ2h0OicgKyBvcHRpb25zLm1heEhlaWdodCArICc7JztcclxuICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbikgb3B0aW9uU3R5bGUgKz0gJ3Bvc2l0aW9uOicgKyBvcHRpb25zLnBvc2l0aW9uICsgJzsnO1xyXG4gICAgICAgIGlmIChvcHRpb25zLndpZHRoKSBvcHRpb25TdHlsZSArPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAnOyc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubWluV2lkdGgpIG9wdGlvblN0eWxlICs9ICdtaW4td2lkdGg6JyArIG9wdGlvbnMubWluV2lkdGggKyAnOyc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4V2lkdGgpIG9wdGlvblN0eWxlICs9ICdtYXgtd2lkdGg6JyArIG9wdGlvbnMubWF4V2lkdGggKyAnOyc7XHJcblxyXG4gICAgICAgIGxldCB0b3AgPSAnJywgZnJhbWUgPSAnJywgZWRpdG9yID0gJyc7XHJcbiAgICAgICAgZGVmYXVsdFN0eWxlID0gb3B0aW9uU3R5bGUgKyBkZWZhdWx0U3R5bGU7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVBcnIgPSBkZWZhdWx0U3R5bGUuc3BsaXQoJzsnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3R5bGVBcnIubGVuZ3RoLCBzOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IHN0eWxlQXJyW2ldLnRyaW0oKTtcclxuICAgICAgICAgICAgaWYgKCFzKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKC9eKG1pbi18bWF4LSk/d2lkdGhcXHMqOi8udGVzdChzKSB8fCAvXih6LWluZGV4fHBvc2l0aW9uKVxccyo6Ly50ZXN0KHMpKSB7XHJcbiAgICAgICAgICAgICAgICB0b3AgKz0gcyArICc7JztcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgvXihtaW4tfG1heC0pP2hlaWdodFxccyo6Ly50ZXN0KHMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoL15oZWlnaHQvLnRlc3QocykgJiYgcy5zcGxpdCgnOicpWzFdLnRyaW0oKSA9PT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oZWlnaHQgPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmcmFtZSArPSBzICsgJzsnO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWRpdG9yICs9IHMgKyAnOyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b3A6IHRvcCxcclxuICAgICAgICAgICAgZnJhbWU6IGZyYW1lLFxyXG4gICAgICAgICAgICBlZGl0b3I6IGVkaXRvclxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRJZnJhbWVEb2N1bWVudDogZnVuY3Rpb24gKGZyYW1lLCBvcHRpb25zKSB7XHJcbiAgICAgICAgZnJhbWUuc2V0QXR0cmlidXRlKCdzY3JvbGxpbmcnLCAnYXV0bycpO1xyXG4gICAgICAgIGZyYW1lLmNvbnRlbnREb2N1bWVudC5oZWFkLmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgJzxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiIC8+JyArXHJcbiAgICAgICAgICAgICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MVwiPicgK1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRJZnJhbWVDc3NUYWdzKG9wdGlvbnMpO1xyXG4gICAgICAgIGZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3M7XHJcbiAgICAgICAgZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCB0cnVlKTtcclxuICAgICAgICBmcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keS5zZXRBdHRyaWJ1dGUoJ2F1dG9jb3JyZWN0JywgXCJvZmZcIik7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRJZnJhbWVDc3NUYWdzOiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IGxpbmtOYW1lcyA9IG9wdGlvbnMuaWZyYW1lQ1NTRmlsZU5hbWU7XHJcbiAgICAgICAgY29uc3Qgd1JlZ0V4cCA9IHRoaXMuX3cuUmVnRXhwO1xyXG4gICAgICAgIGxldCB0YWdTdHJpbmcgPSAnJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZiA9IDAsIGxlbiA9IGxpbmtOYW1lcy5sZW5ndGgsIHBhdGg7IGYgPCBsZW47IGYrKykge1xyXG4gICAgICAgICAgICBwYXRoID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoLyheaHR0cHM/OlxcL1xcLyl8KF5kYXRhOnRleHRcXC9jc3MsKS8udGVzdChsaW5rTmFtZXNbZl0pKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoLnB1c2gobGlua05hbWVzW2ZdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IENTU0ZpbGVOYW1lID0gbmV3IHdSZWdFeHAoJyhefC4qW1xcXFwvXSknICsgbGlua05hbWVzW2ZdICsgJyhcXFxcLi4rKT9cXFxcLmNzcyg/OlxcXFw/Lip8Oy4qKT8kJywgJ2knKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpLCBpID0gMCwgbGVuID0gYy5sZW5ndGgsIHN0eWxlVGFnOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVRhZyA9IGNbaV0uaHJlZi5tYXRjaChDU1NGaWxlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlVGFnKSBwYXRoLnB1c2goc3R5bGVUYWdbMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXBhdGggfHwgcGF0aC5sZW5ndGggPT09IDApIHRocm93ICdbU1VORURJVE9SLmNvbnN0cnVjdG9yLmlmcmFtZS5mYWlsXSBUaGUgc3VuZWRpdG9yIENTUyBmaWxlcyBpbnN0YWxsYXRpb24gcGF0aCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBkZXRlY3RlZC4gUGxlYXNlIHNldCB0aGUgb3B0aW9uIHByb3BlcnR5IFwiaWZyYW1lQ1NTRmlsZU5hbWVcIiBiZWZvcmUgY3JlYXRpbmcgZWRpdG9yIGluc3RhbmNlcy4nO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhdGgubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRhZ1N0cmluZyArPSAnPGxpbmsgaHJlZj1cIicgKyBwYXRoW2ldICsgJ1wiIHJlbD1cInN0eWxlc2hlZXRcIj4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGFnU3RyaW5nICsgKG9wdGlvbnMuaGVpZ2h0ID09PSAnYXV0bycgPyAnPHN0eWxlPlxcbi8qKiBJZnJhbWUgaGVpZ2h0IGF1dG8gKi9cXG5ib2R5e2hlaWdodDogbWluLWNvbnRlbnQ7IG92ZXJmbG93OiBoaWRkZW47fVxcbjwvc3R5bGU+JyA6ICcnKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHV0aWw7IiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBfaWNvbnMgZnJvbSAnLi4vYXNzZXRzL2RlZmF1bHRJY29ucyc7XHJcbmltcG9ydCBfZGVmYXVsdExhbmcgZnJvbSAnLi4vbGFuZy9lbic7XHJcbmltcG9ydCB1dGlsIGZyb20gJy4vdXRpbCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBkb2N1bWVudCBjcmVhdGVcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUZXh0YXJlYVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSBvcHRpb25zID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IGRvYyA9IGRvY3VtZW50O1xyXG5cclxuICAgICAgICAvKiogLS0tIGluaXQgb3B0aW9ucyAtLS0gKi9cclxuICAgICAgICB0aGlzLl9pbml0T3B0aW9ucyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgIFxyXG4gICAgICAgIC8vIHN1bmVkaXRvciBkaXZcclxuICAgICAgICBjb25zdCB0b3BfZGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIHRvcF9kaXYuY2xhc3NOYW1lID0gJ3N1bi1lZGl0b3InICsgKG9wdGlvbnMucnRsID8gJyBzZS1ydGwnIDogJycpO1xyXG4gICAgICAgIGlmIChlbGVtZW50LmlkKSB0b3BfZGl2LmlkID0gJ3N1bmVkaXRvcl8nICsgZWxlbWVudC5pZDtcclxuICAgIFxyXG4gICAgICAgIC8vIHJlbGF0aXZlIGRpdlxyXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIHJlbGF0aXZlLmNsYXNzTmFtZSA9ICdzZS1jb250YWluZXInO1xyXG4gICAgXHJcbiAgICAgICAgLy8gdG9vbGJhclxyXG4gICAgICAgIGNvbnN0IHRvb2xfYmFyID0gdGhpcy5fY3JlYXRlVG9vbEJhcihkb2MsIG9wdGlvbnMuYnV0dG9uTGlzdCwgb3B0aW9ucy5wbHVnaW5zLCBvcHRpb25zKTtcclxuICAgICAgICBjb25zdCB0b29sYmFyU2hhZG93ID0gdG9vbF9iYXIuZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgIHRvb2xiYXJTaGFkb3cuY2xhc3NOYW1lICs9ICcgc2UtdG9vbGJhci1zaGFkb3cnO1xyXG4gICAgICAgIHRvb2xfYmFyLmVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIGlmICh0b29sX2Jhci5wbHVnaW5DYWxsQnV0dG9ucy5tYXRoKSB0aGlzLl9jaGVja0thdGV4TWF0aChvcHRpb25zLmthdGV4KTtcclxuICAgICAgICBjb25zdCBhcnJvdyA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBhcnJvdy5jbGFzc05hbWUgPSAnc2UtYXJyb3cnO1xyXG5cclxuICAgICAgICAvLyBzdGlja3kgdG9vbGJhciBkdW1teVxyXG4gICAgICAgIGNvbnN0IHN0aWNreV9kdW1teSA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBzdGlja3lfZHVtbXkuY2xhc3NOYW1lID0gJ3NlLXRvb2xiYXItc3RpY2t5LWR1bW15JztcclxuICAgIFxyXG4gICAgICAgIC8vIGlubmVyIGVkaXRvciBkaXZcclxuICAgICAgICBjb25zdCBlZGl0b3JfZGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGVkaXRvcl9kaXYuY2xhc3NOYW1lID0gJ3NlLXdyYXBwZXInO1xyXG5cclxuICAgICAgICAvKiogLS0tIGluaXQgZWxlbWVudHMgYW5kIGNyZWF0ZSBib3R0b20gYmFyIC0tLSAqL1xyXG4gICAgICAgIGNvbnN0IGluaXRFbGVtZW50cyA9IHRoaXMuX2luaXRFbGVtZW50cyhvcHRpb25zLCB0b3BfZGl2LCB0b29sX2Jhci5lbGVtZW50LCBhcnJvdyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvdHRvbUJhciA9IGluaXRFbGVtZW50cy5ib3R0b21CYXI7XHJcbiAgICAgICAgY29uc3Qgd3lzaXd5Z19kaXYgPSBpbml0RWxlbWVudHMud3lzaXd5Z0ZyYW1lO1xyXG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyX3NwYW4gPSBpbml0RWxlbWVudHMucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgbGV0IHRleHRhcmVhID0gaW5pdEVsZW1lbnRzLmNvZGVWaWV3O1xyXG5cclxuICAgICAgICAvLyByZXNpemluZyBiYXJcclxuICAgICAgICBjb25zdCByZXNpemluZ19iYXIgPSBib3R0b21CYXIucmVzaXppbmdCYXI7XHJcbiAgICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IGJvdHRvbUJhci5uYXZpZ2F0aW9uO1xyXG4gICAgICAgIGNvbnN0IGNoYXJfd3JhcHBlciA9IGJvdHRvbUJhci5jaGFyV3JhcHBlcjtcclxuICAgICAgICBjb25zdCBjaGFyX2NvdW50ZXIgPSBib3R0b21CYXIuY2hhckNvdW50ZXI7XHJcbiAgICBcclxuICAgICAgICAvLyBsb2FkaW5nIGJveFxyXG4gICAgICAgIGNvbnN0IGxvYWRpbmdfYm94ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGxvYWRpbmdfYm94LmNsYXNzTmFtZSA9ICdzZS1sb2FkaW5nLWJveCBzdW4tZWRpdG9yLWNvbW1vbic7XHJcbiAgICAgICAgbG9hZGluZ19ib3guaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJzZS1sb2FkaW5nLWVmZmVjdFwiPjwvZGl2Pic7XHJcblxyXG4gICAgICAgIC8vIGVudGVyIGxpbmVcclxuICAgICAgICBjb25zdCBsaW5lX2JyZWFrZXIgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgbGluZV9icmVha2VyLmNsYXNzTmFtZSA9ICdzZS1saW5lLWJyZWFrZXInO1xyXG4gICAgICAgIGxpbmVfYnJlYWtlci5pbm5lckhUTUwgPSAnPGJ1dHRvbiBjbGFzcz1cInNlLWJ0blwiPicgKyBvcHRpb25zLmljb25zLmxpbmVfYnJlYWsgKyAnPC9idXR0b24+JztcclxuICAgICAgICBjb25zdCBsaW5lX2JyZWFrZXJfdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBsaW5lX2JyZWFrZXJfdC5jbGFzc05hbWUgKz0gJ3NlLWxpbmUtYnJlYWtlci1jb21wb25lbnQnO1xyXG4gICAgICAgIGNvbnN0IGxpbmVfYnJlYWtlcl9iID0gbGluZV9icmVha2VyX3QuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIGxpbmVfYnJlYWtlcl90LmlubmVySFRNTCA9IGxpbmVfYnJlYWtlcl9iLmlubmVySFRNTCA9IG9wdGlvbnMuaWNvbnMubGluZV9icmVhaztcclxuICAgIFxyXG4gICAgICAgIC8vIHJlc2l6ZSBvcGVyYXRpb24gYmFja2dyb3VuZFxyXG4gICAgICAgIGNvbnN0IHJlc2l6ZV9iYWNrID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIHJlc2l6ZV9iYWNrLmNsYXNzTmFtZSA9ICdzZS1yZXNpemluZy1iYWNrJztcclxuXHJcbiAgICAgICAgLy8vIGZvY3VzIHRlbXBcclxuICAgICAgICBjb25zdCBmb2N1c1RlbXAgPSBkb2MuY3JlYXRlRWxlbWVudCgnSU5QVVQnKTtcclxuICAgICAgICBmb2N1c1RlbXAudGFiSW5kZXggPSAtMTtcclxuICAgICAgICBmb2N1c1RlbXAuc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDsgdG9wOiAtMTAwMDBweCAhaW1wb3J0YW50OyBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OyB3aWR0aDogMCAhaW1wb3J0YW50OyBoZWlnaHQ6IDAgIWltcG9ydGFudDsgbWFyZ2luOiAwICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDAgIWltcG9ydGFudDsnO1xyXG5cclxuICAgICAgICAvLyB0b29sYmFyIGNvbnRhaW5lclxyXG4gICAgICAgIGNvbnN0IHRvb2xiYXJDb250YWluZXIgPSBvcHRpb25zLnRvb2xiYXJDb250YWluZXI7XHJcbiAgICAgICAgaWYgKHRvb2xiYXJDb250YWluZXIpIHtcclxuICAgICAgICAgICAgdG9vbGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b29sX2Jhci5lbGVtZW50KTtcclxuICAgICAgICAgICAgdG9vbGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b29sYmFyU2hhZG93KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc2l6aW5nYmFyXHJcbiAgICAgICAgY29uc3QgcmVzaXppbmdCYXJDb250YWluZXIgPSBvcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyO1xyXG4gICAgICAgIGlmIChyZXNpemluZ19iYXIgJiYgcmVzaXppbmdCYXJDb250YWluZXIpIHJlc2l6aW5nQmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHJlc2l6aW5nX2Jhcik7XHJcbiAgICBcclxuICAgICAgICAvKiogYXBwZW5kIGh0bWwgKi9cclxuICAgICAgICBlZGl0b3JfZGl2LmFwcGVuZENoaWxkKHRleHRhcmVhKTtcclxuICAgICAgICBpZiAocGxhY2Vob2xkZXJfc3BhbikgZWRpdG9yX2Rpdi5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcl9zcGFuKTtcclxuICAgICAgICBpZiAoIXRvb2xiYXJDb250YWluZXIpIHtcclxuICAgICAgICAgICAgcmVsYXRpdmUuYXBwZW5kQ2hpbGQodG9vbF9iYXIuZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKHRvb2xiYXJTaGFkb3cpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChzdGlja3lfZHVtbXkpO1xyXG4gICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKGVkaXRvcl9kaXYpO1xyXG4gICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKHJlc2l6ZV9iYWNrKTtcclxuICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChsb2FkaW5nX2JveCk7XHJcbiAgICAgICAgcmVsYXRpdmUuYXBwZW5kQ2hpbGQobGluZV9icmVha2VyKTtcclxuICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChsaW5lX2JyZWFrZXJfdCk7XHJcbiAgICAgICAgcmVsYXRpdmUuYXBwZW5kQ2hpbGQobGluZV9icmVha2VyX2IpO1xyXG4gICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKGZvY3VzVGVtcCk7XHJcbiAgICAgICAgaWYgKHJlc2l6aW5nX2JhciAmJiAhcmVzaXppbmdCYXJDb250YWluZXIpIHJlbGF0aXZlLmFwcGVuZENoaWxkKHJlc2l6aW5nX2Jhcik7XHJcbiAgICAgICAgdG9wX2Rpdi5hcHBlbmRDaGlsZChyZWxhdGl2ZSk7XHJcblxyXG4gICAgICAgIHRleHRhcmVhID0gdGhpcy5fY2hlY2tDb2RlTWlycm9yKG9wdGlvbnMsIHRleHRhcmVhKTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdGVkOiB7XHJcbiAgICAgICAgICAgICAgICBfdG9wOiB0b3BfZGl2LFxyXG4gICAgICAgICAgICAgICAgX3JlbGF0aXZlOiByZWxhdGl2ZSxcclxuICAgICAgICAgICAgICAgIF90b29sQmFyOiB0b29sX2Jhci5lbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgX3Rvb2xiYXJTaGFkb3c6IHRvb2xiYXJTaGFkb3csXHJcbiAgICAgICAgICAgICAgICBfbWVudVRyYXk6IHRvb2xfYmFyLl9tZW51VHJheSxcclxuICAgICAgICAgICAgICAgIF9lZGl0b3JBcmVhOiBlZGl0b3JfZGl2LFxyXG4gICAgICAgICAgICAgICAgX3d5c2l3eWdBcmVhOiB3eXNpd3lnX2RpdixcclxuICAgICAgICAgICAgICAgIF9jb2RlQXJlYTogdGV4dGFyZWEsXHJcbiAgICAgICAgICAgICAgICBfcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyX3NwYW4sXHJcbiAgICAgICAgICAgICAgICBfcmVzaXppbmdCYXI6IHJlc2l6aW5nX2JhcixcclxuICAgICAgICAgICAgICAgIF9uYXZpZ2F0aW9uOiBuYXZpZ2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgX2NoYXJXcmFwcGVyOiBjaGFyX3dyYXBwZXIsXHJcbiAgICAgICAgICAgICAgICBfY2hhckNvdW50ZXI6IGNoYXJfY291bnRlcixcclxuICAgICAgICAgICAgICAgIF9sb2FkaW5nOiBsb2FkaW5nX2JveCxcclxuICAgICAgICAgICAgICAgIF9saW5lQnJlYWtlcjogbGluZV9icmVha2VyLFxyXG4gICAgICAgICAgICAgICAgX2xpbmVCcmVha2VyX3Q6IGxpbmVfYnJlYWtlcl90LFxyXG4gICAgICAgICAgICAgICAgX2xpbmVCcmVha2VyX2I6IGxpbmVfYnJlYWtlcl9iLFxyXG4gICAgICAgICAgICAgICAgX3Jlc2l6ZUJhY2s6IHJlc2l6ZV9iYWNrLFxyXG4gICAgICAgICAgICAgICAgX3N0aWNreUR1bW15OiBzdGlja3lfZHVtbXksXHJcbiAgICAgICAgICAgICAgICBfYXJyb3c6IGFycm93LFxyXG4gICAgICAgICAgICAgICAgX2ZvY3VzVGVtcDogZm9jdXNUZW1wXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgIHBsdWdpbnM6IHRvb2xfYmFyLnBsdWdpbnMsXHJcbiAgICAgICAgICAgIHBsdWdpbkNhbGxCdXR0b25zOiB0b29sX2Jhci5wbHVnaW5DYWxsQnV0dG9ucyxcclxuICAgICAgICAgICAgX3Jlc3BvbnNpdmVCdXR0b25zOiB0b29sX2Jhci5yZXNwb25zaXZlQnV0dG9uc1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBDb2RlTWlycm9yIG9wdGlvbiB0byBhcHBseSB0aGUgQ29kZU1pcnJvciBhbmQgcmV0dXJuIHRoZSBDb2RlTWlycm9yIGVsZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRleHRhcmVhIHRleHRhcmVhIGVsZW1lbnRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jaGVja0NvZGVNaXJyb3I6IGZ1bmN0aW9uIChvcHRpb25zLCB0ZXh0YXJlYSkge1xyXG4gICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc3QgY21PcHRpb25zID0gW3tcclxuICAgICAgICAgICAgICAgIG1vZGU6ICdodG1sbWl4ZWQnLFxyXG4gICAgICAgICAgICAgICAgaHRtbE1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZVxyXG4gICAgICAgICAgICB9LCAob3B0aW9ucy5jb2RlTWlycm9yLm9wdGlvbnMgfHwge30pXS5yZWR1Y2UoZnVuY3Rpb24gKGluaXQsIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmhhc093bihvcHRpb24sIGtleSkpIGluaXRba2V5XSA9IG9wdGlvbltrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluaXQ7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICBjbU9wdGlvbnMudmlld3BvcnRNYXJnaW4gPSBJbmZpbml0eTtcclxuICAgICAgICAgICAgICAgIGNtT3B0aW9ucy5oZWlnaHQgPSAnYXV0byc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGNtID0gb3B0aW9ucy5jb2RlTWlycm9yLnNyYy5mcm9tVGV4dEFyZWEodGV4dGFyZWEsIGNtT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGNtLmRpc3BsYXkud3JhcHBlci5zdHlsZS5jc3NUZXh0ID0gdGV4dGFyZWEuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvciA9IGNtO1xyXG4gICAgICAgICAgICB0ZXh0YXJlYSA9IGNtLmRpc3BsYXkud3JhcHBlcjtcclxuICAgICAgICAgICAgdGV4dGFyZWEuY2xhc3NOYW1lICs9ICcgc2Utd3JhcHBlci1jb2RlLW1pcnJvcic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGV4dGFyZWE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIGZvciBhIGthdGV4IG9iamVjdC5cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBrYXRleCBrYXRleCBvYmplY3RcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jaGVja0thdGV4TWF0aDogZnVuY3Rpb24gKGthdGV4KSB7XHJcbiAgICAgICAgaWYgKCFrYXRleCkgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY3JlYXRlLmZhaWxdIFRvIHVzZSB0aGUgbWF0aCBidXR0b24geW91IG5lZWQgdG8gYWRkIGEgXCJrYXRleFwiIG9iamVjdCB0byB0aGUgb3B0aW9ucy4nKTtcclxuXHJcbiAgICAgICAgY29uc3Qga2F0ZXhPcHRpb25zID0gW3tcclxuICAgICAgICAgICAgdGhyb3dPbkVycm9yOiBmYWxzZSxcclxuICAgICAgICB9LCAoa2F0ZXgub3B0aW9ucyB8fCB7fSldLnJlZHVjZShmdW5jdGlvbiAoaW5pdCwgb3B0aW9uKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmhhc093bihvcHRpb24sIGtleSkpIGluaXRba2V5XSA9IG9wdGlvbltrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpbml0O1xyXG4gICAgICAgIH0sIHt9KTtcclxuXHJcbiAgICAgICAga2F0ZXgub3B0aW9ucyA9IGthdGV4T3B0aW9ucztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQWRkIG9yIHJlc2V0IG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtZXJnZU9wdGlvbnMgTmV3IG9wdGlvbnMgcHJvcGVydHlcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IENvbnRleHQgb2JqZWN0IG9mIGNvcmVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcmlnaW5PcHRpb25zIE9yaWdpbiBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBwbHVnaW5DYWxsQnV0dG9uc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3NldE9wdGlvbnM6IGZ1bmN0aW9uIChtZXJnZU9wdGlvbnMsIGNvbnRleHQsIG9yaWdpbk9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLl9pbml0T3B0aW9ucyhjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudCwgbWVyZ2VPcHRpb25zKTtcclxuXHJcbiAgICAgICAgY29uc3QgZWwgPSBjb250ZXh0LmVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgcmVsYXRpdmUgPSBlbC5yZWxhdGl2ZTtcclxuICAgICAgICBjb25zdCBlZGl0b3JBcmVhID0gZWwuZWRpdG9yQXJlYTtcclxuICAgICAgICBjb25zdCBpc05ld1Rvb2xiYXJDb250YWluZXIgPSBtZXJnZU9wdGlvbnMudG9vbGJhckNvbnRhaW5lciAmJiBtZXJnZU9wdGlvbnMudG9vbGJhckNvbnRhaW5lciAhPT0gb3JpZ2luT3B0aW9ucy50b29sYmFyQ29udGFpbmVyO1xyXG4gICAgICAgIGNvbnN0IGlzTmV3VG9vbGJhciA9IG1lcmdlT3B0aW9ucy5sYW5nICE9PSBvcmlnaW5PcHRpb25zLmxhbmcgfHwgbWVyZ2VPcHRpb25zLmJ1dHRvbkxpc3QgIT09IG9yaWdpbk9wdGlvbnMuYnV0dG9uTGlzdCB8fCBtZXJnZU9wdGlvbnMubW9kZSAhPT0gb3JpZ2luT3B0aW9ucy5tb2RlIHx8IGlzTmV3VG9vbGJhckNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgY29uc3QgdG9vbF9iYXIgPSB0aGlzLl9jcmVhdGVUb29sQmFyKGRvY3VtZW50LCAoaXNOZXdUb29sYmFyID8gbWVyZ2VPcHRpb25zLmJ1dHRvbkxpc3QgOiBvcmlnaW5PcHRpb25zLmJ1dHRvbkxpc3QpLCBtZXJnZU9wdGlvbnMucGx1Z2lucywgbWVyZ2VPcHRpb25zKTtcclxuICAgICAgICBpZiAodG9vbF9iYXIucGx1Z2luQ2FsbEJ1dHRvbnMubWF0aCkgdGhpcy5fY2hlY2tLYXRleE1hdGgobWVyZ2VPcHRpb25zLmthdGV4KTtcclxuICAgICAgICBjb25zdCBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGFycm93LmNsYXNzTmFtZSA9ICdzZS1hcnJvdyc7XHJcblxyXG4gICAgICAgIGlmIChpc05ld1Rvb2xiYXIpIHtcclxuICAgICAgICAgICAgdG9vbF9iYXIuZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIC8vIHRvb2xiYXIgY29udGFpbmVyXHJcbiAgICAgICAgICAgIGlmIChpc05ld1Rvb2xiYXJDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIG1lcmdlT3B0aW9ucy50b29sYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvb2xfYmFyLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWwudG9vbGJhci5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsLnRvb2xiYXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwudG9vbGJhci5wYXJlbnRFbGVtZW50LnJlcGxhY2VDaGlsZCh0b29sX2Jhci5lbGVtZW50LCBlbC50b29sYmFyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWwudG9vbGJhciA9IHRvb2xfYmFyLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGVsLl9tZW51VHJheSA9IHRvb2xfYmFyLl9tZW51VHJheTtcclxuICAgICAgICAgICAgZWwuX2Fycm93ID0gYXJyb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGluaXRFbGVtZW50cyA9IHRoaXMuX2luaXRFbGVtZW50cyhtZXJnZU9wdGlvbnMsIGVsLnRvcEFyZWEsIChpc05ld1Rvb2xiYXIgPyB0b29sX2Jhci5lbGVtZW50IDogZWwudG9vbGJhciksIGFycm93KTtcclxuXHJcbiAgICAgICAgY29uc3QgYm90dG9tQmFyID0gaW5pdEVsZW1lbnRzLmJvdHRvbUJhcjtcclxuICAgICAgICBjb25zdCB3eXNpd3lnRnJhbWUgPSBpbml0RWxlbWVudHMud3lzaXd5Z0ZyYW1lO1xyXG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyX3NwYW4gPSBpbml0RWxlbWVudHMucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgbGV0IGNvZGUgPSBpbml0RWxlbWVudHMuY29kZVZpZXc7XHJcblxyXG4gICAgICAgIGlmIChlbC5yZXNpemluZ0JhcikgdXRpbC5yZW1vdmVJdGVtKGVsLnJlc2l6aW5nQmFyKTtcclxuICAgICAgICBpZiAoYm90dG9tQmFyLnJlc2l6aW5nQmFyKSB7XHJcbiAgICAgICAgICAgIGlmIChtZXJnZU9wdGlvbnMucmVzaXppbmdCYXJDb250YWluZXIgJiYgbWVyZ2VPcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyICE9PSBvcmlnaW5PcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBtZXJnZU9wdGlvbnMucmVzaXppbmdCYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoYm90dG9tQmFyLnJlc2l6aW5nQmFyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKGJvdHRvbUJhci5yZXNpemluZ0Jhcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVkaXRvckFyZWEuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgZWRpdG9yQXJlYS5hcHBlbmRDaGlsZChjb2RlKTtcclxuICAgICAgICBpZiAocGxhY2Vob2xkZXJfc3BhbikgZWRpdG9yQXJlYS5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcl9zcGFuKTtcclxuXHJcbiAgICAgICAgY29kZSA9IHRoaXMuX2NoZWNrQ29kZU1pcnJvcihtZXJnZU9wdGlvbnMsIGNvZGUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGVsLnJlc2l6aW5nQmFyID0gYm90dG9tQmFyLnJlc2l6aW5nQmFyO1xyXG4gICAgICAgIGVsLm5hdmlnYXRpb24gPSBib3R0b21CYXIubmF2aWdhdGlvbjtcclxuICAgICAgICBlbC5jaGFyV3JhcHBlciA9IGJvdHRvbUJhci5jaGFyV3JhcHBlcjtcclxuICAgICAgICBlbC5jaGFyQ291bnRlciA9IGJvdHRvbUJhci5jaGFyQ291bnRlcjtcclxuICAgICAgICBlbC53eXNpd3lnRnJhbWUgPSB3eXNpd3lnRnJhbWU7XHJcbiAgICAgICAgZWwuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgZWwucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcl9zcGFuO1xyXG5cclxuICAgICAgICBpZiAobWVyZ2VPcHRpb25zLnJ0bCkgdXRpbC5hZGRDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcbiAgICAgICAgZWxzZSB1dGlsLnJlbW92ZUNsYXNzKGVsLnRvcEFyZWEsICdzZS1ydGwnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2FsbEJ1dHRvbnM6IHRvb2xfYmFyLnBsdWdpbkNhbGxCdXR0b25zLFxyXG4gICAgICAgICAgICBwbHVnaW5zOiB0b29sX2Jhci5wbHVnaW5zLFxyXG4gICAgICAgICAgICB0b29sYmFyOiB0b29sX2JhclxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemUgcHJvcGVydHkgb2Ygc3VuZWRpdG9yIGVsZW1lbnRzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRvcERpdiBTdW5lZGl0b3IgdG9wIGRpdlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0b29sQmFyIFRvb2wgYmFyXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRvb2xCYXJBcnJvdyBUb29sIGJhciBhcnJvdyAoYmFsbG9vbiBlZGl0b3IpXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBCb3R0b20gYmFyIGVsZW1lbnRzIChyZXNpemluZ0JhciwgbmF2aWdhdGlvbiwgY2hhcldyYXBwZXIsIGNoYXJDb3VudGVyKVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2luaXRFbGVtZW50czogZnVuY3Rpb24gKG9wdGlvbnMsIHRvcERpdiwgdG9vbEJhciwgdG9vbEJhckFycm93KSB7XHJcbiAgICAgICAgLyoqIHRvcCBkaXYgKi9cclxuICAgICAgICB0b3BEaXYuc3R5bGUuY3NzVGV4dCA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcy50b3A7XHJcblxyXG4gICAgICAgIC8qKiB0b29sYmFyICovXHJcbiAgICAgICAgaWYgKC9pbmxpbmUvaS50ZXN0KG9wdGlvbnMubW9kZSkpIHtcclxuICAgICAgICAgICAgdG9vbEJhci5jbGFzc05hbWUgKz0gJyBzZS10b29sYmFyLWlubGluZSc7XHJcbiAgICAgICAgICAgIHRvb2xCYXIuc3R5bGUud2lkdGggPSBvcHRpb25zLnRvb2xiYXJXaWR0aDtcclxuICAgICAgICB9IGVsc2UgaWYgKC9iYWxsb29uL2kudGVzdChvcHRpb25zLm1vZGUpKSB7XHJcbiAgICAgICAgICAgIHRvb2xCYXIuY2xhc3NOYW1lICs9ICcgc2UtdG9vbGJhci1iYWxsb29uJztcclxuICAgICAgICAgICAgdG9vbEJhci5zdHlsZS53aWR0aCA9IG9wdGlvbnMudG9vbGJhcldpZHRoO1xyXG4gICAgICAgICAgICB0b29sQmFyLmFwcGVuZENoaWxkKHRvb2xCYXJBcnJvdyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiogZWRpdG9yICovXHJcbiAgICAgICAgLy8gd3lzaXd5ZyBkaXYgb3IgaWZyYW1lXHJcbiAgICAgICAgY29uc3Qgd3lzaXd5Z0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIW9wdGlvbnMuaWZyYW1lID8gJ0RJVicgOiAnSUZSQU1FJyk7XHJcbiAgICAgICAgd3lzaXd5Z0Rpdi5jbGFzc05hbWUgPSAnc2Utd3JhcHBlci1pbm5lciBzZS13cmFwcGVyLXd5c2l3eWcnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghb3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgd3lzaXd5Z0Rpdi5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xyXG4gICAgICAgICAgICB3eXNpd3lnRGl2LnNldEF0dHJpYnV0ZSgnYXV0b2NvcnJlY3QnLCBcIm9mZlwiKTtcclxuICAgICAgICAgICAgd3lzaXd5Z0Rpdi5zZXRBdHRyaWJ1dGUoJ3Njcm9sbGluZycsICdhdXRvJyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvcHRpb25zLmlmcmFtZUF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHd5c2l3eWdEaXYuc2V0QXR0cmlidXRlKGtleSwgb3B0aW9ucy5pZnJhbWVBdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuY2xhc3NOYW1lICs9ICcgJyArIG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3M7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuc3R5bGUuY3NzVGV4dCA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcy5mcmFtZSArIG9wdGlvbnMuX2VkaXRvclN0eWxlcy5lZGl0b3I7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuY2xhc3NOYW1lICs9IG9wdGlvbnMuY2xhc3NOYW1lO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuYWxsb3dGdWxsc2NyZWVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgd3lzaXd5Z0Rpdi5mcmFtZUJvcmRlciA9IDA7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuc3R5bGUuY3NzVGV4dCA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcy5mcmFtZTtcclxuICAgICAgICAgICAgd3lzaXd5Z0Rpdi5jbGFzc05hbWUgKz0gb3B0aW9ucy5jbGFzc05hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0ZXh0YXJlYSBmb3IgY29kZSB2aWV3XHJcbiAgICAgICAgY29uc3QgdGV4dGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdURVhUQVJFQScpO1xyXG4gICAgICAgIHRleHRhcmVhLmNsYXNzTmFtZSA9ICdzZS13cmFwcGVyLWlubmVyIHNlLXdyYXBwZXItY29kZScgKyBvcHRpb25zLmNsYXNzTmFtZTtcclxuICAgICAgICB0ZXh0YXJlYS5zdHlsZS5jc3NUZXh0ID0gb3B0aW9ucy5fZWRpdG9yU3R5bGVzLmZyYW1lO1xyXG4gICAgICAgIHRleHRhcmVhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ID09PSAnYXV0bycpIHRleHRhcmVhLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgIC8qKiByZXNpemUgYmFyICovXHJcbiAgICAgICAgbGV0IHJlc2l6aW5nQmFyID0gbnVsbDtcclxuICAgICAgICBsZXQgbmF2aWdhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgbGV0IGNoYXJXcmFwcGVyID0gbnVsbDtcclxuICAgICAgICBsZXQgY2hhckNvdW50ZXIgPSBudWxsO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnJlc2l6aW5nQmFyKSB7XHJcbiAgICAgICAgICAgIHJlc2l6aW5nQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIHJlc2l6aW5nQmFyLmNsYXNzTmFtZSA9ICdzZS1yZXNpemluZy1iYXIgc3VuLWVkaXRvci1jb21tb24nO1xyXG5cclxuICAgICAgICAgICAgLyoqIG5hdmlnYXRpb24gKi9cclxuICAgICAgICAgICAgbmF2aWdhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uLmNsYXNzTmFtZSA9ICdzZS1uYXZpZ2F0aW9uIHN1bi1lZGl0b3ItY29tbW9uJztcclxuICAgICAgICAgICAgcmVzaXppbmdCYXIuYXBwZW5kQ2hpbGQobmF2aWdhdGlvbik7XHJcblxyXG4gICAgICAgICAgICAvKiogY2hhciBjb3VudGVyICovXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNoYXJDb3VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjaGFyV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICAgICAgY2hhcldyYXBwZXIuY2xhc3NOYW1lID0gJ3NlLWNoYXItY291bnRlci13cmFwcGVyJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jaGFyQ291bnRlckxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnU1BBTicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJMYWJlbC5jbGFzc05hbWUgPSAnc2UtY2hhci1sYWJlbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhckxhYmVsLnRleHRDb250ZW50ID0gb3B0aW9ucy5jaGFyQ291bnRlckxhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJXcmFwcGVyLmFwcGVuZENoaWxkKGNoYXJMYWJlbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGNoYXJDb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnU1BBTicpO1xyXG4gICAgICAgICAgICAgICAgY2hhckNvdW50ZXIuY2xhc3NOYW1lID0gJ3NlLWNoYXItY291bnRlcic7XHJcbiAgICAgICAgICAgICAgICBjaGFyQ291bnRlci50ZXh0Q29udGVudCA9ICcwJztcclxuICAgICAgICAgICAgICAgIGNoYXJXcmFwcGVyLmFwcGVuZENoaWxkKGNoYXJDb3VudGVyKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4Q2hhckNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJfbWF4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnU1BBTicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJfbWF4LnRleHRDb250ZW50ID0gJyAvICcgKyBvcHRpb25zLm1heENoYXJDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyV3JhcHBlci5hcHBlbmRDaGlsZChjaGFyX21heCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzaXppbmdCYXIuYXBwZW5kQ2hpbGQoY2hhcldyYXBwZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBwbGFjZWhvbGRlciA9IG51bGw7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTmFtZSA9ICdzZS1wbGFjZWhvbGRlcic7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmlubmVyVGV4dCA9IG9wdGlvbnMucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBib3R0b21CYXI6IHtcclxuICAgICAgICAgICAgICAgIHJlc2l6aW5nQmFyOiByZXNpemluZ0JhcixcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IG5hdmlnYXRpb24sXHJcbiAgICAgICAgICAgICAgICBjaGFyV3JhcHBlcjogY2hhcldyYXBwZXIsXHJcbiAgICAgICAgICAgICAgICBjaGFyQ291bnRlcjogY2hhckNvdW50ZXJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd3lzaXd5Z0ZyYW1lOiB3eXNpd3lnRGl2LFxyXG4gICAgICAgICAgICBjb2RlVmlldzogdGV4dGFyZWEsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlclxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemUgb3B0aW9uc1xyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IE9wdGlvbnMgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2luaXRPcHRpb25zOiBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHBsdWdpbnMgPSB7fTtcclxuICAgICAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9wbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zO1xyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW5zVmFsdWVzID0gX3BsdWdpbnMubGVuZ3RoID8gX3BsdWdpbnMgOiBPYmplY3Qua2V5cyhfcGx1Z2lucykubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIF9wbHVnaW5zW25hbWVdOyB9KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBsdWdpbnNWYWx1ZXMubGVuZ3RoLCBwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHAgPSBwbHVnaW5zVmFsdWVzW2ldLmRlZmF1bHQgfHwgcGx1Z2luc1ZhbHVlc1tpXTtcclxuICAgICAgICAgICAgICAgIHBsdWdpbnNbcC5uYW1lXSA9IHA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgb3B0aW9ucy5wbHVnaW5zID0gcGx1Z2lucztcclxuICAgICAgICAvKiogVmFsdWVzICovXHJcbiAgICAgICAgb3B0aW9ucy5zdHJpY3RNb2RlID0gb3B0aW9ucy5zdHJpY3RNb2RlICE9PSBmYWxzZTtcclxuICAgICAgICBvcHRpb25zLmxhbmcgPSBvcHRpb25zLmxhbmcgfHwgX2RlZmF1bHRMYW5nO1xyXG4gICAgICAgIG9wdGlvbnMudmFsdWUgPSB0eXBlb2Ygb3B0aW9ucy52YWx1ZSA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnZhbHVlIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLmFsbG93ZWRDbGFzc05hbWVzID0gbmV3IHV0aWwuX3cuUmVnRXhwKChvcHRpb25zLmFsbG93ZWRDbGFzc05hbWVzICYmIHR5cGVvZiBvcHRpb25zLmFsbG93ZWRDbGFzc05hbWVzID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuYWxsb3dlZENsYXNzTmFtZXMgKyAnfCcgOiAnJykgKyAnXl9fc2VfX3xzZS18a2F0ZXgnKTtcclxuICAgICAgICBvcHRpb25zLmhpc3RvcnlTdGFja0RlbGF5VGltZSA9IHR5cGVvZiBvcHRpb25zLmhpc3RvcnlTdGFja0RlbGF5VGltZSA9PT0gJ251bWJlcicgPyBvcHRpb25zLmhpc3RvcnlTdGFja0RlbGF5VGltZSA6IDQwMDtcclxuICAgICAgICBvcHRpb25zLmZyYW1lQXR0cmJ1dGVzID0gb3B0aW9ucy5mcmFtZUF0dHJidXRlcyB8fCB7fTtcclxuICAgICAgICAvLyB0YWcgc3R5bGVcclxuICAgICAgICBvcHRpb25zLmRlZmF1bHRUYWcgPSB0eXBlb2Ygb3B0aW9ucy5kZWZhdWx0VGFnID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmRlZmF1bHRUYWcubGVuZ3RoID4gMCA/IG9wdGlvbnMuZGVmYXVsdFRhZyA6ICdwJztcclxuICAgICAgICBjb25zdCB0ZXh0VGFncyA9IG9wdGlvbnMudGV4dFRhZ3MgPSBbe2JvbGQ6ICdTVFJPTkcnLCB1bmRlcmxpbmU6ICdVJywgaXRhbGljOiAnRU0nLCBzdHJpa2U6ICdERUwnLCBzdWI6ICdTVUInLCBzdXA6ICdTVVAnfSwgKG9wdGlvbnMudGV4dFRhZ3MgfHwge30pXS5yZWR1Y2UoZnVuY3Rpb24gKF9kZWZhdWx0LCBfbmV3KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBfbmV3KSB7XHJcbiAgICAgICAgICAgICAgICBfZGVmYXVsdFtrZXldID0gX25ld1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfZGVmYXVsdDtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgb3B0aW9ucy5fdGV4dFRhZ3NNYXAgPSB7XHJcbiAgICAgICAgICAgICdzdHJvbmcnOiB0ZXh0VGFncy5ib2xkLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICdiJzogdGV4dFRhZ3MuYm9sZC50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAndSc6IHRleHRUYWdzLnVuZGVybGluZS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAnaW5zJzogdGV4dFRhZ3MudW5kZXJsaW5lLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICdlbSc6IHRleHRUYWdzLml0YWxpYy50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAnaSc6IHRleHRUYWdzLml0YWxpYy50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAnZGVsJzogdGV4dFRhZ3Muc3RyaWtlLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICdzdHJpa2UnOiB0ZXh0VGFncy5zdHJpa2UudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgJ3MnOiB0ZXh0VGFncy5zdHJpa2UudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgJ3N1Yic6IHRleHRUYWdzLnN1Yi50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAnc3VwJzogdGV4dFRhZ3Muc3VwLnRvTG93ZXJDYXNlKClcclxuICAgICAgICB9O1xyXG4gICAgICAgIG9wdGlvbnMuX2RlZmF1bHRDb21tYW5kID0ge1xyXG4gICAgICAgICAgICBib2xkOiBvcHRpb25zLnRleHRUYWdzLmJvbGQsXHJcbiAgICAgICAgICAgIHVuZGVybGluZTogb3B0aW9ucy50ZXh0VGFncy51bmRlcmxpbmUsXHJcbiAgICAgICAgICAgIGl0YWxpYzogb3B0aW9ucy50ZXh0VGFncy5pdGFsaWMsXHJcbiAgICAgICAgICAgIHN0cmlrZTogb3B0aW9ucy50ZXh0VGFncy5zdHJpa2UsXHJcbiAgICAgICAgICAgIHN1YnNjcmlwdDogb3B0aW9ucy50ZXh0VGFncy5zdWIsXHJcbiAgICAgICAgICAgIHN1cGVyc2NyaXB0OiBvcHRpb25zLnRleHRUYWdzLnN1cFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqIFdoaXRlbGlzdCwgQmxhY2tsaXN0ICovXHJcbiAgICAgICAgb3B0aW9ucy5fX2FsbG93ZWRTY3JpcHRUYWcgPSBvcHRpb25zLl9fYWxsb3dlZFNjcmlwdFRhZyA9PT0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB3aGl0ZWxpc3QgPSAnYnJ8cHxkaXZ8cHJlfGJsb2NrcXVvdGV8aDF8aDJ8aDN8aDR8aDV8aDZ8b2x8dWx8bGl8aHJ8ZmlndXJlfGZpZ2NhcHRpb258aW1nfGlmcmFtZXxhdWRpb3x2aWRlb3xzb3VyY2V8dGFibGV8dGhlYWR8dGJvZHl8dHJ8dGh8dGR8YXxifHN0cm9uZ3x2YXJ8aXxlbXx1fGluc3xzfHNwYW58c3RyaWtlfGRlbHxzdWJ8c3VwfGNvZGV8c3ZnfHBhdGh8ZGV0YWlsc3xzdW1tYXJ5JztcclxuICAgICAgICAvLyB0YWdzXHJcbiAgICAgICAgb3B0aW9ucy50YWdzQmxhY2tsaXN0ID0gb3B0aW9ucy50YWdzQmxhY2tsaXN0IHx8ICcnO1xyXG4gICAgICAgIG9wdGlvbnMuX2RlZmF1bHRUYWdzV2hpdGVsaXN0ID0gKHR5cGVvZiBvcHRpb25zLl9kZWZhdWx0VGFnc1doaXRlbGlzdCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLl9kZWZhdWx0VGFnc1doaXRlbGlzdCA6IHdoaXRlbGlzdCkgKyAob3B0aW9ucy5fX2FsbG93ZWRTY3JpcHRUYWcgPyAnfHNjcmlwdCcgOiAnJyk7XHJcbiAgICAgICAgb3B0aW9ucy5fZWRpdG9yVGFnc1doaXRlbGlzdCA9IG9wdGlvbnMuYWRkVGFnc1doaXRlbGlzdCA9PT0gJyonID8gJyonIDogdGhpcy5fc2V0V2hpdGVsaXN0KG9wdGlvbnMuX2RlZmF1bHRUYWdzV2hpdGVsaXN0ICsgKHR5cGVvZiBvcHRpb25zLmFkZFRhZ3NXaGl0ZWxpc3QgPT09ICdzdHJpbmcnICYmIG9wdGlvbnMuYWRkVGFnc1doaXRlbGlzdC5sZW5ndGggPiAwID8gJ3wnICsgb3B0aW9ucy5hZGRUYWdzV2hpdGVsaXN0IDogJycpLCBvcHRpb25zLnRhZ3NCbGFja2xpc3QpO1xyXG4gICAgICAgIC8vIHBhc3RlIHRhZ3NcclxuICAgICAgICBvcHRpb25zLnBhc3RlVGFnc0JsYWNrbGlzdCA9IG9wdGlvbnMudGFnc0JsYWNrbGlzdCArIChvcHRpb25zLnRhZ3NCbGFja2xpc3QgJiYgb3B0aW9ucy5wYXN0ZVRhZ3NCbGFja2xpc3QgPyAoJ3wnICsgb3B0aW9ucy5wYXN0ZVRhZ3NCbGFja2xpc3QpIDogKG9wdGlvbnMucGFzdGVUYWdzQmxhY2tsaXN0IHx8ICcnKSk7XHJcbiAgICAgICAgb3B0aW9ucy5wYXN0ZVRhZ3NXaGl0ZWxpc3QgPSBvcHRpb25zLnBhc3RlVGFnc1doaXRlbGlzdCA9PT0gJyonID8gJyonIDogdGhpcy5fc2V0V2hpdGVsaXN0KHR5cGVvZiBvcHRpb25zLnBhc3RlVGFnc1doaXRlbGlzdCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnBhc3RlVGFnc1doaXRlbGlzdCA6IG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QsIG9wdGlvbnMucGFzdGVUYWdzQmxhY2tsaXN0KTtcclxuICAgICAgICAvLyB0YWcgYXR0cmlidXRlc1xyXG4gICAgICAgIG9wdGlvbnMuYXR0cmlidXRlc1doaXRlbGlzdCA9ICghb3B0aW9ucy5hdHRyaWJ1dGVzV2hpdGVsaXN0IHx8IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXNXaGl0ZWxpc3QgIT09ICdvYmplY3QnKSA/IG51bGwgOiBvcHRpb25zLmF0dHJpYnV0ZXNXaGl0ZWxpc3Q7XHJcbiAgICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzQmxhY2tsaXN0ID0gKCFvcHRpb25zLmF0dHJpYnV0ZXNCbGFja2xpc3QgfHwgdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlc0JsYWNrbGlzdCAhPT0gJ29iamVjdCcpID8gbnVsbCA6IG9wdGlvbnMuYXR0cmlidXRlc0JsYWNrbGlzdDtcclxuICAgICAgICAvKiogTGF5b3V0ICovXHJcbiAgICAgICAgb3B0aW9ucy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8ICdjbGFzc2ljJzsgLy8gY2xhc3NpYywgaW5saW5lLCBiYWxsb29uLCBiYWxsb29uLWFsd2F5c1xyXG4gICAgICAgIG9wdGlvbnMucnRsID0gISFvcHRpb25zLnJ0bDtcclxuICAgICAgICBvcHRpb25zLmxpbmVBdHRyUmVzZXQgPSBbJ2lkJ10uY29uY2F0KChvcHRpb25zLmxpbmVBdHRyUmVzZXQgJiYgdHlwZW9mIG9wdGlvbnMubGluZUF0dHJSZXNldCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmxpbmVBdHRyUmVzZXQudG9Mb3dlckNhc2UoKS5zcGxpdCgnfCcpIDogW10pKTtcclxuICAgICAgICBvcHRpb25zLl9lZGl0YWJsZUNsYXNzID0gJ3N1bi1lZGl0b3ItZWRpdGFibGUnICsgKG9wdGlvbnMucnRsID8gJyBzZS1ydGwnIDogJycpO1xyXG4gICAgICAgIG9wdGlvbnMuX3ByaW50Q2xhc3MgPSB0eXBlb2Ygb3B0aW9ucy5fcHJpbnRDbGFzcyA9PT0gJ3N0cmluZycgPyBvcHRpb25zLl9wcmludENsYXNzIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLnRvb2xiYXJXaWR0aCA9IG9wdGlvbnMudG9vbGJhcldpZHRoID8gKHV0aWwuaXNOdW1iZXIob3B0aW9ucy50b29sYmFyV2lkdGgpID8gb3B0aW9ucy50b29sYmFyV2lkdGggKyAncHgnIDogb3B0aW9ucy50b29sYmFyV2lkdGgpIDogJ2F1dG8nO1xyXG4gICAgICAgIG9wdGlvbnMudG9vbGJhckNvbnRhaW5lciA9IHR5cGVvZiBvcHRpb25zLnRvb2xiYXJDb250YWluZXIgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIDogb3B0aW9ucy50b29sYmFyQ29udGFpbmVyO1xyXG4gICAgICAgIG9wdGlvbnMuc3RpY2t5VG9vbGJhciA9ICgvYmFsbG9vbi9pLnRlc3Qob3B0aW9ucy5tb2RlKSB8fCAhIW9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikgPyAtMSA6IG9wdGlvbnMuc3RpY2t5VG9vbGJhciA9PT0gdW5kZWZpbmVkID8gMCA6ICgvXlxcZCsvLnRlc3Qob3B0aW9ucy5zdGlja3lUb29sYmFyKSA/IHV0aWwuZ2V0TnVtYmVyKG9wdGlvbnMuc3RpY2t5VG9vbGJhciwgMCkgOiAtMSk7XHJcbiAgICAgICAgb3B0aW9ucy5oaWRlVG9vbGJhciA9ICEhb3B0aW9ucy5oaWRlVG9vbGJhcjtcclxuICAgICAgICBvcHRpb25zLmZ1bGxTY3JlZW5PZmZzZXQgPSBvcHRpb25zLmZ1bGxTY3JlZW5PZmZzZXQgPT09IHVuZGVmaW5lZCA/IDAgOiAoL15cXGQrLy50ZXN0KG9wdGlvbnMuZnVsbFNjcmVlbk9mZnNldCkgPyB1dGlsLmdldE51bWJlcihvcHRpb25zLmZ1bGxTY3JlZW5PZmZzZXQsIDApIDogMCk7XHJcbiAgICAgICAgb3B0aW9ucy5mdWxsUGFnZSA9ICEhb3B0aW9ucy5mdWxsUGFnZTtcclxuICAgICAgICBvcHRpb25zLmlmcmFtZSA9IG9wdGlvbnMuZnVsbFBhZ2UgfHwgISFvcHRpb25zLmlmcmFtZTtcclxuICAgICAgICBvcHRpb25zLmlmcmFtZUF0dHJpYnV0ZXMgPSBvcHRpb25zLmlmcmFtZUF0dHJpYnV0ZXMgfHwge307XHJcbiAgICAgICAgb3B0aW9ucy5pZnJhbWVDU1NGaWxlTmFtZSA9IG9wdGlvbnMuaWZyYW1lID8gdHlwZW9mIG9wdGlvbnMuaWZyYW1lQ1NTRmlsZU5hbWUgPT09ICdzdHJpbmcnID8gW29wdGlvbnMuaWZyYW1lQ1NTRmlsZU5hbWVdIDogKG9wdGlvbnMuaWZyYW1lQ1NTRmlsZU5hbWUgfHwgWydzdW5lZGl0b3InXSkgOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMucHJldmlld1RlbXBsYXRlID0gdHlwZW9mIG9wdGlvbnMucHJldmlld1RlbXBsYXRlID09PSAnc3RyaW5nJyA/IG9wdGlvbnMucHJldmlld1RlbXBsYXRlIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLnByaW50VGVtcGxhdGUgPSB0eXBlb2Ygb3B0aW9ucy5wcmludFRlbXBsYXRlID09PSAnc3RyaW5nJyA/IG9wdGlvbnMucHJpbnRUZW1wbGF0ZSA6IG51bGw7XHJcbiAgICAgICAgLyoqIENvZGVNaXJyb3Igb2JqZWN0ICovXHJcbiAgICAgICAgb3B0aW9ucy5jb2RlTWlycm9yID0gb3B0aW9ucy5jb2RlTWlycm9yID8gb3B0aW9ucy5jb2RlTWlycm9yLnNyYyA/IG9wdGlvbnMuY29kZU1pcnJvciA6IHtzcmM6IG9wdGlvbnMuY29kZU1pcnJvcn0gOiBudWxsO1xyXG4gICAgICAgIC8qKiBrYXRleCBvYmplY3QgKE1hdGggcGx1Z2luKSAqL1xyXG4gICAgICAgIG9wdGlvbnMua2F0ZXggPSBvcHRpb25zLmthdGV4ID8gb3B0aW9ucy5rYXRleC5zcmMgPyBvcHRpb25zLmthdGV4IDoge3NyYzogb3B0aW9ucy5rYXRleH0gOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMubWF0aEZvbnRTaXplID0gISFvcHRpb25zLm1hdGhGb250U2l6ZSA/IG9wdGlvbnMubWF0aEZvbnRTaXplIDogW1xyXG4gICAgICAgICAgICB7dGV4dDogJzEnLCB2YWx1ZTogJzFlbSd9LFxyXG4gICAgICAgICAgICB7dGV4dDogJzEuNScsIHZhbHVlOiAnMS41ZW0nfSxcclxuICAgICAgICAgICAge3RleHQ6ICcyJywgdmFsdWU6ICcyZW0nfSxcclxuICAgICAgICAgICAge3RleHQ6ICcyLjUnLCB2YWx1ZTogJzIuNWVtJ31cclxuICAgICAgICBdO1xyXG4gICAgICAgIC8qKiBEaXNwbGF5ICovXHJcbiAgICAgICAgb3B0aW9ucy5wb3NpdGlvbiA9IHR5cGVvZiBvcHRpb25zLnBvc2l0aW9uID09PSAnc3RyaW5nJyA/IG9wdGlvbnMucG9zaXRpb24gOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMuZGlzcGxheSA9IG9wdGlvbnMuZGlzcGxheSB8fCAoZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgIWVsZW1lbnQuc3R5bGUuZGlzcGxheSA/ICdibG9jaycgOiBlbGVtZW50LnN0eWxlLmRpc3BsYXkpO1xyXG4gICAgICAgIG9wdGlvbnMucG9wdXBEaXNwbGF5ID0gb3B0aW9ucy5wb3B1cERpc3BsYXkgfHwgJ2Z1bGwnO1xyXG4gICAgICAgIC8qKiBCb3R0b20gcmVzaXppbmcgYmFyICovXHJcbiAgICAgICAgb3B0aW9ucy5yZXNpemluZ0JhciA9IG9wdGlvbnMucmVzaXppbmdCYXIgPT09IHVuZGVmaW5lZCA/ICgvaW5saW5lfGJhbGxvb24vaS50ZXN0KG9wdGlvbnMubW9kZSkgPyBmYWxzZSA6IHRydWUpIDogb3B0aW9ucy5yZXNpemluZ0JhcjtcclxuICAgICAgICBvcHRpb25zLnNob3dQYXRoTGFiZWwgPSAhb3B0aW9ucy5yZXNpemluZ0JhciA/IGZhbHNlIDogdHlwZW9mIG9wdGlvbnMuc2hvd1BhdGhMYWJlbCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zaG93UGF0aExhYmVsIDogdHJ1ZTtcclxuICAgICAgICBvcHRpb25zLnJlc2l6ZUVuYWJsZSA9IG9wdGlvbnMucmVzaXplRW5hYmxlID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLnJlc2l6ZUVuYWJsZTtcclxuICAgICAgICBvcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyID0gdHlwZW9mIG9wdGlvbnMucmVzaXppbmdCYXJDb250YWluZXIgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyKSA6IG9wdGlvbnMucmVzaXppbmdCYXJDb250YWluZXI7XHJcbiAgICAgICAgLyoqIENoYXJhY3RlciBjb3VudCAqL1xyXG4gICAgICAgIG9wdGlvbnMuY2hhckNvdW50ZXIgPSBvcHRpb25zLm1heENoYXJDb3VudCA+IDAgPyB0cnVlIDogdHlwZW9mIG9wdGlvbnMuY2hhckNvdW50ZXIgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuY2hhckNvdW50ZXIgOiBmYWxzZTtcclxuICAgICAgICBvcHRpb25zLmNoYXJDb3VudGVyVHlwZSA9IHR5cGVvZiBvcHRpb25zLmNoYXJDb3VudGVyVHlwZSA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmNoYXJDb3VudGVyVHlwZSA6ICdjaGFyJztcclxuICAgICAgICBvcHRpb25zLmNoYXJDb3VudGVyTGFiZWwgPSB0eXBlb2Ygb3B0aW9ucy5jaGFyQ291bnRlckxhYmVsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuY2hhckNvdW50ZXJMYWJlbC50cmltKCkgOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMubWF4Q2hhckNvdW50ID0gdXRpbC5pc051bWJlcihvcHRpb25zLm1heENoYXJDb3VudCkgJiYgb3B0aW9ucy5tYXhDaGFyQ291bnQgPiAtMSA/IG9wdGlvbnMubWF4Q2hhckNvdW50ICogMSA6IG51bGw7XHJcbiAgICAgICAgLyoqIFdpZHRoIHNpemUgKi9cclxuICAgICAgICBvcHRpb25zLndpZHRoID0gb3B0aW9ucy53aWR0aCA/ICh1dGlsLmlzTnVtYmVyKG9wdGlvbnMud2lkdGgpID8gb3B0aW9ucy53aWR0aCArICdweCcgOiBvcHRpb25zLndpZHRoKSA6IChlbGVtZW50LmNsaWVudFdpZHRoID8gZWxlbWVudC5jbGllbnRXaWR0aCArICdweCcgOiAnMTAwJScpO1xyXG4gICAgICAgIG9wdGlvbnMubWluV2lkdGggPSAodXRpbC5pc051bWJlcihvcHRpb25zLm1pbldpZHRoKSA/IG9wdGlvbnMubWluV2lkdGggKyAncHgnIDogb3B0aW9ucy5taW5XaWR0aCkgfHwgJyc7XHJcbiAgICAgICAgb3B0aW9ucy5tYXhXaWR0aCA9ICh1dGlsLmlzTnVtYmVyKG9wdGlvbnMubWF4V2lkdGgpID8gb3B0aW9ucy5tYXhXaWR0aCArICdweCcgOiBvcHRpb25zLm1heFdpZHRoKSB8fCAnJztcclxuICAgICAgICAvKiogSGVpZ2h0IHNpemUgKi9cclxuICAgICAgICBvcHRpb25zLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ID8gKHV0aWwuaXNOdW1iZXIob3B0aW9ucy5oZWlnaHQpID8gb3B0aW9ucy5oZWlnaHQgKyAncHgnIDogb3B0aW9ucy5oZWlnaHQpIDogKGVsZW1lbnQuY2xpZW50SGVpZ2h0ID8gZWxlbWVudC5jbGllbnRIZWlnaHQgKyAncHgnIDogJ2F1dG8nKTtcclxuICAgICAgICBvcHRpb25zLm1pbkhlaWdodCA9ICh1dGlsLmlzTnVtYmVyKG9wdGlvbnMubWluSGVpZ2h0KSA/IG9wdGlvbnMubWluSGVpZ2h0ICsgJ3B4JyA6IG9wdGlvbnMubWluSGVpZ2h0KSB8fCAnJztcclxuICAgICAgICBvcHRpb25zLm1heEhlaWdodCA9ICh1dGlsLmlzTnVtYmVyKG9wdGlvbnMubWF4SGVpZ2h0KSA/IG9wdGlvbnMubWF4SGVpZ2h0ICsgJ3B4JyA6IG9wdGlvbnMubWF4SGVpZ2h0KSB8fCAnJztcclxuICAgICAgICAvKiogRWRpdGluZyBhcmVhICovXHJcbiAgICAgICAgb3B0aW9ucy5jbGFzc05hbWUgPSAodHlwZW9mIG9wdGlvbnMuY2xhc3NOYW1lID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNsYXNzTmFtZS5sZW5ndGggPiAwKSA/ICcgJyArIG9wdGlvbnMuY2xhc3NOYW1lIDogJyc7XHJcbiAgICAgICAgb3B0aW9ucy5kZWZhdWx0U3R5bGUgPSB0eXBlb2Ygb3B0aW9ucy5kZWZhdWx0U3R5bGUgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5kZWZhdWx0U3R5bGUgOiAnJztcclxuICAgICAgICAvKiogRGVmaW5pbmcgbWVudSBpdGVtcyAqL1xyXG4gICAgICAgIG9wdGlvbnMuZm9udCA9ICFvcHRpb25zLmZvbnQgPyBbJ0FyaWFsJywgJ0NvbWljIFNhbnMgTVMnLCAnQ291cmllciBOZXcnLCAnSW1wYWN0JywgJ0dlb3JnaWEnLCAndGFob21hJywgJ1RyZWJ1Y2hldCBNUycsICdWZXJkYW5hJ10gOiBvcHRpb25zLmZvbnQ7XHJcbiAgICAgICAgb3B0aW9ucy5mb250U2l6ZSA9ICFvcHRpb25zLmZvbnRTaXplID8gbnVsbCA6IG9wdGlvbnMuZm9udFNpemU7XHJcbiAgICAgICAgb3B0aW9ucy5mb3JtYXRzID0gIW9wdGlvbnMuZm9ybWF0cyA/IG51bGwgOiBvcHRpb25zLmZvcm1hdHM7XHJcbiAgICAgICAgb3B0aW9ucy5jb2xvckxpc3QgPSAhb3B0aW9ucy5jb2xvckxpc3QgPyBudWxsIDogb3B0aW9ucy5jb2xvckxpc3Q7XHJcbiAgICAgICAgb3B0aW9ucy5saW5lSGVpZ2h0cyA9ICFvcHRpb25zLmxpbmVIZWlnaHRzID8gbnVsbCA6IG9wdGlvbnMubGluZUhlaWdodHM7XHJcbiAgICAgICAgb3B0aW9ucy5wYXJhZ3JhcGhTdHlsZXMgPSAhb3B0aW9ucy5wYXJhZ3JhcGhTdHlsZXMgPyBudWxsIDogb3B0aW9ucy5wYXJhZ3JhcGhTdHlsZXM7XHJcbiAgICAgICAgb3B0aW9ucy50ZXh0U3R5bGVzID0gIW9wdGlvbnMudGV4dFN0eWxlcyA/IG51bGwgOiBvcHRpb25zLnRleHRTdHlsZXM7XHJcbiAgICAgICAgb3B0aW9ucy5mb250U2l6ZVVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5mb250U2l6ZVVuaXQgPT09ICdzdHJpbmcnID8gKG9wdGlvbnMuZm9udFNpemVVbml0LnRyaW0oKS50b0xvd2VyQ2FzZSgpIHx8ICdweCcpIDogJ3B4JztcclxuICAgICAgICBvcHRpb25zLmFsaWduSXRlbXMgPSB0eXBlb2Ygb3B0aW9ucy5hbGlnbkl0ZW1zID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuYWxpZ25JdGVtcyA6IChvcHRpb25zLnJ0bCA/IFsncmlnaHQnLCAnY2VudGVyJywgJ2xlZnQnLCAnanVzdGlmeSddIDogWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5J10pO1xyXG4gICAgICAgIC8qKiBJbWFnZSAqL1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VSZXNpemluZyA9IG9wdGlvbnMuaW1hZ2VSZXNpemluZyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMuaW1hZ2VSZXNpemluZztcclxuICAgICAgICBvcHRpb25zLmltYWdlSGVpZ2h0U2hvdyA9IG9wdGlvbnMuaW1hZ2VIZWlnaHRTaG93ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLmltYWdlSGVpZ2h0U2hvdztcclxuICAgICAgICBvcHRpb25zLmltYWdlQWxpZ25TaG93ID0gb3B0aW9ucy5pbWFnZUFsaWduU2hvdyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy5pbWFnZUFsaWduU2hvdztcclxuICAgICAgICBvcHRpb25zLmltYWdlV2lkdGggPSAhb3B0aW9ucy5pbWFnZVdpZHRoID8gJ2F1dG8nIDogdXRpbC5pc051bWJlcihvcHRpb25zLmltYWdlV2lkdGgpID8gb3B0aW9ucy5pbWFnZVdpZHRoICsgJ3B4JyA6IG9wdGlvbnMuaW1hZ2VXaWR0aDtcclxuICAgICAgICBvcHRpb25zLmltYWdlSGVpZ2h0ID0gIW9wdGlvbnMuaW1hZ2VIZWlnaHQgPyAnYXV0bycgOiB1dGlsLmlzTnVtYmVyKG9wdGlvbnMuaW1hZ2VIZWlnaHQpID8gb3B0aW9ucy5pbWFnZUhlaWdodCArICdweCcgOiBvcHRpb25zLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VTaXplT25seVBlcmNlbnRhZ2UgPSAhIW9wdGlvbnMuaW1hZ2VTaXplT25seVBlcmNlbnRhZ2U7XHJcbiAgICAgICAgb3B0aW9ucy5faW1hZ2VTaXplVW5pdCA9IG9wdGlvbnMuaW1hZ2VTaXplT25seVBlcmNlbnRhZ2UgPyAnJScgOiAncHgnO1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VSb3RhdGlvbiA9IG9wdGlvbnMuaW1hZ2VSb3RhdGlvbiAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pbWFnZVJvdGF0aW9uIDogIShvcHRpb25zLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlIHx8ICFvcHRpb25zLmltYWdlSGVpZ2h0U2hvdyk7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZUZpbGVJbnB1dCA9IG9wdGlvbnMuaW1hZ2VGaWxlSW5wdXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRpb25zLmltYWdlRmlsZUlucHV0O1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VVcmxJbnB1dCA9IChvcHRpb25zLmltYWdlVXJsSW5wdXQgPT09IHVuZGVmaW5lZCB8fCAhb3B0aW9ucy5pbWFnZUZpbGVJbnB1dCkgPyB0cnVlIDogb3B0aW9ucy5pbWFnZVVybElucHV0O1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VVcGxvYWRIZWFkZXIgPSBvcHRpb25zLmltYWdlVXBsb2FkSGVhZGVyIHx8IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZVVwbG9hZFVybCA9IHR5cGVvZiBvcHRpb25zLmltYWdlVXBsb2FkVXJsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuaW1hZ2VVcGxvYWRVcmwgOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VVcGxvYWRTaXplTGltaXQgPSAvXFxkKy8udGVzdChvcHRpb25zLmltYWdlVXBsb2FkU2l6ZUxpbWl0KSA/IHV0aWwuZ2V0TnVtYmVyKG9wdGlvbnMuaW1hZ2VVcGxvYWRTaXplTGltaXQsIDApIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLmltYWdlTXVsdGlwbGVGaWxlID0gISFvcHRpb25zLmltYWdlTXVsdGlwbGVGaWxlO1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VBY2NlcHQgPSAodHlwZW9mIG9wdGlvbnMuaW1hZ2VBY2NlcHQgIT09ICdzdHJpbmcnIHx8IG9wdGlvbnMuaW1hZ2VBY2NlcHQudHJpbSgpID09PSBcIipcIikgPyAnaW1hZ2UvKicgOiBvcHRpb25zLmltYWdlQWNjZXB0LnRyaW0oKSB8fCAnaW1hZ2UvKic7XHJcbiAgICAgICAgLyoqIEltYWdlIC0gaW1hZ2UgZ2FsbGVyeSAqL1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VHYWxsZXJ5VXJsID0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VHYWxsZXJ5VXJsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuaW1hZ2VHYWxsZXJ5VXJsIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLmltYWdlR2FsbGVyeUhlYWRlciA9IG9wdGlvbnMuaW1hZ2VHYWxsZXJ5SGVhZGVyIHx8IG51bGw7XHJcbiAgICAgICAgLyoqIFZpZGVvICovXHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1Jlc2l6aW5nID0gb3B0aW9ucy52aWRlb1Jlc2l6aW5nID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy52aWRlb1Jlc2l6aW5nO1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9IZWlnaHRTaG93ID0gb3B0aW9ucy52aWRlb0hlaWdodFNob3cgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIW9wdGlvbnMudmlkZW9IZWlnaHRTaG93O1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9BbGlnblNob3cgPSBvcHRpb25zLnZpZGVvQWxpZ25TaG93ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLnZpZGVvQWxpZ25TaG93O1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9SYXRpb1Nob3cgPSBvcHRpb25zLnZpZGVvUmF0aW9TaG93ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLnZpZGVvUmF0aW9TaG93O1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9XaWR0aCA9ICFvcHRpb25zLnZpZGVvV2lkdGggfHwgIXV0aWwuZ2V0TnVtYmVyKG9wdGlvbnMudmlkZW9XaWR0aCwgMCkgPyAnJyA6IHV0aWwuaXNOdW1iZXIob3B0aW9ucy52aWRlb1dpZHRoKSA/IG9wdGlvbnMudmlkZW9XaWR0aCArICdweCcgOiBvcHRpb25zLnZpZGVvV2lkdGg7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb0hlaWdodCA9ICFvcHRpb25zLnZpZGVvSGVpZ2h0IHx8ICF1dGlsLmdldE51bWJlcihvcHRpb25zLnZpZGVvSGVpZ2h0LCAwKSA/ICcnIDogdXRpbC5pc051bWJlcihvcHRpb25zLnZpZGVvSGVpZ2h0KSA/IG9wdGlvbnMudmlkZW9IZWlnaHQgKyAncHgnIDogb3B0aW9ucy52aWRlb0hlaWdodDtcclxuICAgICAgICBvcHRpb25zLnZpZGVvU2l6ZU9ubHlQZXJjZW50YWdlID0gISFvcHRpb25zLnZpZGVvU2l6ZU9ubHlQZXJjZW50YWdlO1xyXG4gICAgICAgIG9wdGlvbnMuX3ZpZGVvU2l6ZVVuaXQgPSBvcHRpb25zLnZpZGVvU2l6ZU9ubHlQZXJjZW50YWdlID8gJyUnIDogJ3B4JztcclxuICAgICAgICBvcHRpb25zLnZpZGVvUm90YXRpb24gPSBvcHRpb25zLnZpZGVvUm90YXRpb24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudmlkZW9Sb3RhdGlvbiA6ICEob3B0aW9ucy52aWRlb1NpemVPbmx5UGVyY2VudGFnZSB8fCAhb3B0aW9ucy52aWRlb0hlaWdodFNob3cpO1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9SYXRpbyA9ICh1dGlsLmdldE51bWJlcihvcHRpb25zLnZpZGVvUmF0aW8sIDQpIHx8IDAuNTYyNSk7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1JhdGlvTGlzdCA9ICFvcHRpb25zLnZpZGVvUmF0aW9MaXN0ID8gbnVsbCA6IG9wdGlvbnMudmlkZW9SYXRpb0xpc3Q7XHJcbiAgICAgICAgb3B0aW9ucy55b3V0dWJlUXVlcnkgPSAob3B0aW9ucy55b3V0dWJlUXVlcnkgfHwgJycpLnJlcGxhY2UoJz8nLCAnJyk7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb0ZpbGVJbnB1dCA9ICEhb3B0aW9ucy52aWRlb0ZpbGVJbnB1dDtcclxuICAgICAgICBvcHRpb25zLnZpZGVvVXJsSW5wdXQgPSAob3B0aW9ucy52aWRlb1VybElucHV0ID09PSB1bmRlZmluZWQgfHwgIW9wdGlvbnMudmlkZW9GaWxlSW5wdXQpID8gdHJ1ZSA6IG9wdGlvbnMudmlkZW9VcmxJbnB1dDtcclxuICAgICAgICBvcHRpb25zLnZpZGVvVXBsb2FkSGVhZGVyID0gb3B0aW9ucy52aWRlb1VwbG9hZEhlYWRlciB8fCBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9VcGxvYWRVcmwgPSB0eXBlb2Ygb3B0aW9ucy52aWRlb1VwbG9hZFVybCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnZpZGVvVXBsb2FkVXJsIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLnZpZGVvVXBsb2FkU2l6ZUxpbWl0ID0gL1xcZCsvLnRlc3Qob3B0aW9ucy52aWRlb1VwbG9hZFNpemVMaW1pdCkgPyB1dGlsLmdldE51bWJlcihvcHRpb25zLnZpZGVvVXBsb2FkU2l6ZUxpbWl0LCAwKSA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb011bHRpcGxlRmlsZSA9ICEhb3B0aW9ucy52aWRlb011bHRpcGxlRmlsZTtcclxuICAgICAgICBvcHRpb25zLnZpZGVvVGFnQXR0cnMgPSBvcHRpb25zLnZpZGVvVGFnQXR0cnMgfHwgbnVsbDtcclxuICAgICAgICBvcHRpb25zLnZpZGVvSWZyYW1lQXR0cnMgPSBvcHRpb25zLnZpZGVvSWZyYW1lQXR0cnMgfHwgbnVsbDtcclxuICAgICAgICBvcHRpb25zLnZpZGVvQWNjZXB0ID0gKHR5cGVvZiBvcHRpb25zLnZpZGVvQWNjZXB0ICE9PSAnc3RyaW5nJyB8fCBvcHRpb25zLnZpZGVvQWNjZXB0LnRyaW0oKSA9PT0gXCIqXCIpID8gJ3ZpZGVvLyonIDogb3B0aW9ucy52aWRlb0FjY2VwdC50cmltKCkgfHwgJ3ZpZGVvLyonO1xyXG4gICAgICAgIC8qKiBBdWRpbyAqL1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9XaWR0aCA9ICFvcHRpb25zLmF1ZGlvV2lkdGggPyAnJyA6IHV0aWwuaXNOdW1iZXIob3B0aW9ucy5hdWRpb1dpZHRoKSA/IG9wdGlvbnMuYXVkaW9XaWR0aCArICdweCcgOiBvcHRpb25zLmF1ZGlvV2lkdGg7XHJcbiAgICAgICAgb3B0aW9ucy5hdWRpb0hlaWdodCA9ICFvcHRpb25zLmF1ZGlvSGVpZ2h0ID8gJycgOiB1dGlsLmlzTnVtYmVyKG9wdGlvbnMuYXVkaW9IZWlnaHQpID8gb3B0aW9ucy5hdWRpb0hlaWdodCArICdweCcgOiBvcHRpb25zLmF1ZGlvSGVpZ2h0O1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9GaWxlSW5wdXQgPSAhIW9wdGlvbnMuYXVkaW9GaWxlSW5wdXQ7XHJcbiAgICAgICAgb3B0aW9ucy5hdWRpb1VybElucHV0ID0gKG9wdGlvbnMuYXVkaW9VcmxJbnB1dCA9PT0gdW5kZWZpbmVkIHx8ICFvcHRpb25zLmF1ZGlvRmlsZUlucHV0KSA/IHRydWUgOiBvcHRpb25zLmF1ZGlvVXJsSW5wdXQ7XHJcbiAgICAgICAgb3B0aW9ucy5hdWRpb1VwbG9hZEhlYWRlciA9IG9wdGlvbnMuYXVkaW9VcGxvYWRIZWFkZXIgfHwgbnVsbDtcclxuICAgICAgICBvcHRpb25zLmF1ZGlvVXBsb2FkVXJsID0gdHlwZW9mIG9wdGlvbnMuYXVkaW9VcGxvYWRVcmwgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5hdWRpb1VwbG9hZFVybCA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5hdWRpb1VwbG9hZFNpemVMaW1pdCA9IC9cXGQrLy50ZXN0KG9wdGlvbnMuYXVkaW9VcGxvYWRTaXplTGltaXQpID8gdXRpbC5nZXROdW1iZXIob3B0aW9ucy5hdWRpb1VwbG9hZFNpemVMaW1pdCwgMCkgOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9NdWx0aXBsZUZpbGUgPSAhIW9wdGlvbnMuYXVkaW9NdWx0aXBsZUZpbGU7XHJcbiAgICAgICAgb3B0aW9ucy5hdWRpb1RhZ0F0dHJzID0gb3B0aW9ucy5hdWRpb1RhZ0F0dHJzIHx8IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5hdWRpb0FjY2VwdCA9ICh0eXBlb2Ygb3B0aW9ucy5hdWRpb0FjY2VwdCAhPT0gJ3N0cmluZycgfHwgb3B0aW9ucy5hdWRpb0FjY2VwdC50cmltKCkgPT09IFwiKlwiKSA/ICdhdWRpby8qJyA6IG9wdGlvbnMuYXVkaW9BY2NlcHQudHJpbSgpIHx8ICdhdWRpby8qJztcclxuICAgICAgICAvKiogVGFibGUgKi9cclxuICAgICAgICBvcHRpb25zLnRhYmxlQ2VsbENvbnRyb2xsZXJQb3NpdGlvbiA9IHR5cGVvZiBvcHRpb25zLnRhYmxlQ2VsbENvbnRyb2xsZXJQb3NpdGlvbiA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnRhYmxlQ2VsbENvbnRyb2xsZXJQb3NpdGlvbi50b0xvd2VyQ2FzZSgpIDogJ2NlbGwnO1xyXG4gICAgICAgIC8qKiBMaW5rICovXHJcbiAgICAgICAgb3B0aW9ucy5saW5rVGFyZ2V0TmV3V2luZG93ID0gISFvcHRpb25zLmxpbmtUYXJnZXROZXdXaW5kb3c7XHJcbiAgICAgICAgb3B0aW9ucy5saW5rUHJvdG9jb2wgPSB0eXBlb2Ygb3B0aW9ucy5saW5rUHJvdG9jb2wgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5saW5rUHJvdG9jb2wgOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMubGlua1JlbCA9IEFycmF5LmlzQXJyYXkob3B0aW9ucy5saW5rUmVsKSA/IG9wdGlvbnMubGlua1JlbCA6IFtdO1xyXG4gICAgICAgIG9wdGlvbnMubGlua1JlbERlZmF1bHQgPSBvcHRpb25zLmxpbmtSZWxEZWZhdWx0IHx8IHt9O1xyXG4gICAgICAgIC8qKiBIUiAqL1xyXG4gICAgICAgIC8vIG9wdGlvbnMuaHJJdGVtcyA9IG9wdGlvbnMuaHJJdGVtcztcclxuICAgICAgICAvKiogS2V5IGFjdGlvbnMgKi9cclxuICAgICAgICBvcHRpb25zLnRhYkRpc2FibGUgPSAhIW9wdGlvbnMudGFiRGlzYWJsZTtcclxuICAgICAgICBvcHRpb25zLnNob3J0Y3V0c0Rpc2FibGUgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZSkgPyBvcHRpb25zLnNob3J0Y3V0c0Rpc2FibGUgOiBbXTtcclxuICAgICAgICBvcHRpb25zLnNob3J0Y3V0c0hpbnQgPSBvcHRpb25zLnNob3J0Y3V0c0hpbnQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIW9wdGlvbnMuc2hvcnRjdXRzSGludDtcclxuICAgICAgICAvKiogRGVmaW5pbmcgc2F2ZSBidXR0b24gKi9cclxuICAgICAgICBvcHRpb25zLmNhbGxCYWNrU2F2ZSA9ICFvcHRpb25zLmNhbGxCYWNrU2F2ZSA/IG51bGwgOiBvcHRpb25zLmNhbGxCYWNrU2F2ZTtcclxuICAgICAgICAvKiogVGVtcGxhdGVzIEFycmF5ICovXHJcbiAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZXMgPSAhb3B0aW9ucy50ZW1wbGF0ZXMgPyBudWxsIDogb3B0aW9ucy50ZW1wbGF0ZXM7XHJcbiAgICAgICAgLyoqIEVUQyAqL1xyXG4gICAgICAgIG9wdGlvbnMucGxhY2Vob2xkZXIgPSB0eXBlb2Ygb3B0aW9ucy5wbGFjZWhvbGRlciA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnBsYWNlaG9sZGVyIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLm1lZGlhQXV0b1NlbGVjdCA9IG9wdGlvbnMubWVkaWFBdXRvU2VsZWN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLm1lZGlhQXV0b1NlbGVjdDtcclxuICAgICAgICAvKiogQnV0dG9ucyAqL1xyXG4gICAgICAgIG9wdGlvbnMuYnV0dG9uTGlzdCA9ICEhb3B0aW9ucy5idXR0b25MaXN0ID8gb3B0aW9ucy5idXR0b25MaXN0IDogW1xyXG4gICAgICAgICAgICBbJ3VuZG8nLCAncmVkbyddLFxyXG4gICAgICAgICAgICBbJ2JvbGQnLCAndW5kZXJsaW5lJywgJ2l0YWxpYycsICdzdHJpa2UnLCAnc3Vic2NyaXB0JywgJ3N1cGVyc2NyaXB0J10sXHJcbiAgICAgICAgICAgIFsncmVtb3ZlRm9ybWF0J10sXHJcbiAgICAgICAgICAgIFsnb3V0ZGVudCcsICdpbmRlbnQnXSxcclxuICAgICAgICAgICAgWydmdWxsU2NyZWVuJywgJ3Nob3dCbG9ja3MnLCAnY29kZVZpZXcnXSxcclxuICAgICAgICAgICAgWydwcmV2aWV3JywgJ3ByaW50J11cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICAvKiogUlRMIC0gYnV0dG9ucyAqL1xyXG4gICAgICAgIGlmIChvcHRpb25zLnJ0bCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmJ1dHRvbkxpc3QgPSBvcHRpb25zLmJ1dHRvbkxpc3QucmV2ZXJzZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqIC0tLSBEZWZpbmUgaWNvbnMgLS0tICovXHJcbiAgICAgICAgLy8gY3VzdG9tIGljb25zXHJcbiAgICAgICAgb3B0aW9ucy5pY29ucyA9ICghb3B0aW9ucy5pY29ucyB8fCB0eXBlb2Ygb3B0aW9ucy5pY29ucyAhPT0gJ29iamVjdCcpID8gX2ljb25zIDogW19pY29ucywgb3B0aW9ucy5pY29uc10ucmVkdWNlKGZ1bmN0aW9uIChfZGVmYXVsdCwgX25ldykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gX25ldykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaGFzT3duKF9uZXcsIGtleSkpIF9kZWZhdWx0W2tleV0gPSBfbmV3W2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgICAgICAvLyBydGwgaWNvbnNcclxuICAgICAgICBvcHRpb25zLmljb25zID0gIW9wdGlvbnMucnRsID8gb3B0aW9ucy5pY29ucyA6IFtvcHRpb25zLmljb25zLCBvcHRpb25zLmljb25zLnJ0bF0ucmVkdWNlKGZ1bmN0aW9uIChfZGVmYXVsdCwgX25ldykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gX25ldykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaGFzT3duKF9uZXcsIGtleSkpIF9kZWZhdWx0W2tleV0gPSBfbmV3W2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xyXG4gICAgICAgIH0sIHt9KTtcclxuXHJcbiAgICAgICAgLyoqIFByaXZhdGUgb3B0aW9ucyAqL1xyXG4gICAgICAgIG9wdGlvbnMuX19saXN0Q29tbW9uU3R5bGUgPSBvcHRpb25zLl9fbGlzdENvbW1vblN0eWxlIHx8IFsnZm9udFNpemUnLCAnY29sb3InLCAnZm9udEZhbWlseScsICdmb250V2VpZ2h0JywgJ2ZvbnRTdHlsZSddO1xyXG5cclxuICAgICAgICAvKiogX2luaXQgb3B0aW9ucyAqL1xyXG4gICAgICAgIG9wdGlvbnMuX2VkaXRvclN0eWxlcyA9IHV0aWwuX3NldERlZmF1bHRPcHRpb25TdHlsZShvcHRpb25zLCBvcHRpb25zLmRlZmF1bHRTdHlsZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRXaGl0ZWxpc3Q6IGZ1bmN0aW9uICh3aGl0ZWxpc3QsIGJsYWNrbGlzdCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmxhY2tsaXN0ICE9PSAnc3RyaW5nJykgcmV0dXJuIHdoaXRlbGlzdDtcclxuICAgICAgICBibGFja2xpc3QgPSBibGFja2xpc3Quc3BsaXQoJ3wnKTtcclxuICAgICAgICB3aGl0ZWxpc3QgPSB3aGl0ZWxpc3Quc3BsaXQoJ3wnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYmxhY2tsaXN0Lmxlbmd0aCwgaW5kZXg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpbmRleCA9IHdoaXRlbGlzdC5pbmRleE9mKGJsYWNrbGlzdFtpXSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB3aGl0ZWxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdoaXRlbGlzdC5qb2luKCd8Jyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFN1bmVkaXRvcidzIERlZmF1bHQgYnV0dG9uIGxpc3RcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIG9wdGlvbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9kZWZhdWx0QnV0dG9uczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBpY29ucyA9IG9wdGlvbnMuaWNvbnM7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IG9wdGlvbnMubGFuZztcclxuICAgICAgICBjb25zdCBjbWQgPSB1dGlsLmlzT1NYX0lPUyA/ICfijJgnIDogJ0NUUkwnO1xyXG4gICAgICAgIGNvbnN0IGFkZFNoaWZ0ID0gdXRpbC5pc09TWF9JT1MgPyAn4oenJyA6ICcrU0hJRlQnO1xyXG4gICAgICAgIGNvbnN0IHNob3J0Y3V0c0Rpc2FibGUgPSAhb3B0aW9ucy5zaG9ydGN1dHNIaW50ID8gWydib2xkJywgJ3N0cmlrZScsICd1bmRlcmxpbmUnLCAnaXRhbGljJywgJ3VuZG8nLCAnaW5kZW50JywgJ3NhdmUnXSA6IG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZTtcclxuICAgICAgICBjb25zdCBpbmRlbnRLZXkgPSBvcHRpb25zLnJ0bCA/IFsnWycsJ10nXSA6IFsnXScsJ1snXTtcclxuICAgICAgICBjb25zdCBpbmRlbnRJY29uID0gb3B0aW9ucy5ydGwgPyBbaWNvbnMub3V0ZGVudCwgaWNvbnMuaW5kZW50XSA6IFtpY29ucy5pbmRlbnQsIGljb25zLm91dGRlbnRdO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAvKiogZGVmYXVsdCBjb21tYW5kICovXHJcbiAgICAgICAgICAgIGJvbGQ6IFsnJywgbGFuZy50b29sYmFyLmJvbGQgKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdib2xkJykgPiAtMSA/ICcnIDogY21kICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPkI8L3NwYW4+JykgKyAnPC9zcGFuPicsICdib2xkJywgJycsIGljb25zLmJvbGRdLFxyXG4gICAgICAgICAgICB1bmRlcmxpbmU6IFsnJywgbGFuZy50b29sYmFyLnVuZGVybGluZSArICc8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0XCI+JyArIChzaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3VuZGVybGluZScpID4gLTEgPyAnJyA6IGNtZCArICcrPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dC1rZXlcIj5VPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAndW5kZXJsaW5lJywgJycsIGljb25zLnVuZGVybGluZV0sXHJcbiAgICAgICAgICAgIGl0YWxpYzogWycnLCBsYW5nLnRvb2xiYXIuaXRhbGljICsgJzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXRcIj4nICsgKHNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZignaXRhbGljJykgPiAtMSA/ICcnIDogY21kICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPkk8L3NwYW4+JykgKyAnPC9zcGFuPicsICdpdGFsaWMnLCAnJywgaWNvbnMuaXRhbGljXSxcclxuICAgICAgICAgICAgc3RyaWtlOiBbJycsIGxhbmcudG9vbGJhci5zdHJpa2UgKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdzdHJpa2UnKSA+IC0xID8gJycgOiBjbWQgKyBhZGRTaGlmdCArICcrPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dC1rZXlcIj5TPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAnc3RyaWtlJywgJycsIGljb25zLnN0cmlrZV0sXHJcbiAgICAgICAgICAgIHN1YnNjcmlwdDogWycnLCBsYW5nLnRvb2xiYXIuc3Vic2NyaXB0LCAnU1VCJywgJycsIGljb25zLnN1YnNjcmlwdF0sXHJcbiAgICAgICAgICAgIHN1cGVyc2NyaXB0OiBbJycsIGxhbmcudG9vbGJhci5zdXBlcnNjcmlwdCwgJ1NVUCcsICcnLCBpY29ucy5zdXBlcnNjcmlwdF0sXHJcbiAgICAgICAgICAgIHJlbW92ZUZvcm1hdDogWycnLCBsYW5nLnRvb2xiYXIucmVtb3ZlRm9ybWF0LCAncmVtb3ZlRm9ybWF0JywgJycsIGljb25zLmVyYXNlXSxcclxuICAgICAgICAgICAgaW5kZW50OiBbJycsIGxhbmcudG9vbGJhci5pbmRlbnQgKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA+IC0xID8gJycgOiBjbWQgKyAnKzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXQta2V5XCI+JyArIGluZGVudEtleVswXSArICc8L3NwYW4+JykgKyAnPC9zcGFuPicsICdpbmRlbnQnLCAnJywgaW5kZW50SWNvblswXV0sXHJcbiAgICAgICAgICAgIG91dGRlbnQ6IFsnJywgbGFuZy50b29sYmFyLm91dGRlbnQgKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA+IC0xID8gJycgOiBjbWQgKyAnKzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXQta2V5XCI+JyArIGluZGVudEtleVsxXSArICc8L3NwYW4+JykgKyAnPC9zcGFuPicsICdvdXRkZW50JywgJycsIGluZGVudEljb25bMV1dLFxyXG4gICAgICAgICAgICBmdWxsU2NyZWVuOiBbJ3NlLWNvZGUtdmlldy1lbmFibGVkIHNlLXJlc2l6aW5nLWVuYWJsZWQnLCBsYW5nLnRvb2xiYXIuZnVsbFNjcmVlbiwgJ2Z1bGxTY3JlZW4nLCAnJywgaWNvbnMuZXhwYW5zaW9uXSxcclxuICAgICAgICAgICAgc2hvd0Jsb2NrczogWycnLCBsYW5nLnRvb2xiYXIuc2hvd0Jsb2NrcywgJ3Nob3dCbG9ja3MnLCAnJywgaWNvbnMuc2hvd19ibG9ja3NdLFxyXG4gICAgICAgICAgICBjb2RlVmlldzogWydzZS1jb2RlLXZpZXctZW5hYmxlZCBzZS1yZXNpemluZy1lbmFibGVkJywgbGFuZy50b29sYmFyLmNvZGVWaWV3LCAnY29kZVZpZXcnLCAnJywgaWNvbnMuY29kZV92aWV3XSxcclxuICAgICAgICAgICAgdW5kbzogWycnLCBsYW5nLnRvb2xiYXIudW5kbyArICc8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0XCI+JyArIChzaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3VuZG8nKSA+IC0xID8gJycgOiBjbWQgKyAnKzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXQta2V5XCI+Wjwvc3Bhbj4nKSArICc8L3NwYW4+JywgJ3VuZG8nLCAnJywgaWNvbnMudW5kb10sXHJcbiAgICAgICAgICAgIHJlZG86IFsnJywgbGFuZy50b29sYmFyLnJlZG8gKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCd1bmRvJykgPiAtMSA/ICcnIDogY21kICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPlk8L3NwYW4+IC8gJyArIGNtZCArIGFkZFNoaWZ0ICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPlo8L3NwYW4+JykgKyAnPC9zcGFuPicsICdyZWRvJywgJycsIGljb25zLnJlZG9dLFxyXG4gICAgICAgICAgICBwcmV2aWV3OiBbJ3NlLXJlc2l6aW5nLWVuYWJsZWQnLCBsYW5nLnRvb2xiYXIucHJldmlldywgJ3ByZXZpZXcnLCAnJywgaWNvbnMucHJldmlld10sXHJcbiAgICAgICAgICAgIHByaW50OiBbJ3NlLXJlc2l6aW5nLWVuYWJsZWQnLCBsYW5nLnRvb2xiYXIucHJpbnQsICdwcmludCcsICcnLCBpY29ucy5wcmludF0sXHJcbiAgICAgICAgICAgIGRpcjogWycnLCBsYW5nLnRvb2xiYXJbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddLCAnZGlyJywgJycsICBpY29uc1tvcHRpb25zLnJ0bCA/ICdkaXJfbHRyJyA6ICdkaXJfcnRsJ11dLFxyXG4gICAgICAgICAgICBkaXJfbHRyOiBbJycsIGxhbmcudG9vbGJhci5kaXJfbHRyLCAnZGlyX2x0cicsICcnLCAgaWNvbnMuZGlyX2x0cl0sXHJcbiAgICAgICAgICAgIGRpcl9ydGw6IFsnJywgbGFuZy50b29sYmFyLmRpcl9ydGwsICdkaXJfcnRsJywgJycsICBpY29ucy5kaXJfcnRsXSxcclxuICAgICAgICAgICAgc2F2ZTogWydzZS1yZXNpemluZy1lbmFibGVkJywgbGFuZy50b29sYmFyLnNhdmUgKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdzYXZlJykgPiAtMSA/ICcnIDogY21kICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPlM8L3NwYW4+JykgKyAnPC9zcGFuPicsICdzYXZlJywgJycsIGljb25zLnNhdmVdLFxyXG4gICAgICAgICAgICAvKiogcGx1Z2lucyAtIGNvbW1hbmQgKi9cclxuICAgICAgICAgICAgYmxvY2txdW90ZTogWycnLCBsYW5nLnRvb2xiYXIudGFnX2Jsb2NrcXVvdGUsICdibG9ja3F1b3RlJywgJ2NvbW1hbmQnLCBpY29ucy5ibG9ja3F1b3RlXSxcclxuICAgICAgICAgICAgLyoqIHBsdWdpbnMgLSBzdWJtZW51ICovXHJcbiAgICAgICAgICAgIGZvbnQ6IFsnc2UtYnRuLXNlbGVjdCBzZS1idG4tdG9vbC1mb250JywgbGFuZy50b29sYmFyLmZvbnQsICdmb250JywgJ3N1Ym1lbnUnLCAnPHNwYW4gY2xhc3M9XCJ0eHRcIj4nICsgbGFuZy50b29sYmFyLmZvbnQgKyAnPC9zcGFuPicgKyBpY29ucy5hcnJvd19kb3duXSxcclxuICAgICAgICAgICAgZm9ybWF0QmxvY2s6IFsnc2UtYnRuLXNlbGVjdCBzZS1idG4tdG9vbC1mb3JtYXQnLCBsYW5nLnRvb2xiYXIuZm9ybWF0cywgJ2Zvcm1hdEJsb2NrJywgJ3N1Ym1lbnUnLCAnPHNwYW4gY2xhc3M9XCJ0eHRcIj4nICsgbGFuZy50b29sYmFyLmZvcm1hdHMgKyAnPC9zcGFuPicgKyBpY29ucy5hcnJvd19kb3duXSxcclxuICAgICAgICAgICAgZm9udFNpemU6IFsnc2UtYnRuLXNlbGVjdCBzZS1idG4tdG9vbC1zaXplJywgbGFuZy50b29sYmFyLmZvbnRTaXplLCAnZm9udFNpemUnLCAnc3VibWVudScsICc8c3BhbiBjbGFzcz1cInR4dFwiPicgKyBsYW5nLnRvb2xiYXIuZm9udFNpemUgKyAnPC9zcGFuPicgKyBpY29ucy5hcnJvd19kb3duXSxcclxuICAgICAgICAgICAgZm9udENvbG9yOiBbJycsIGxhbmcudG9vbGJhci5mb250Q29sb3IsICdmb250Q29sb3InLCAnc3VibWVudScsIGljb25zLmZvbnRfY29sb3JdLFxyXG4gICAgICAgICAgICBoaWxpdGVDb2xvcjogWycnLCBsYW5nLnRvb2xiYXIuaGlsaXRlQ29sb3IsICdoaWxpdGVDb2xvcicsICdzdWJtZW51JywgaWNvbnMuaGlnaGxpZ2h0X2NvbG9yXSxcclxuICAgICAgICAgICAgYWxpZ246IFsnc2UtYnRuLWFsaWduJywgbGFuZy50b29sYmFyLmFsaWduLCAnYWxpZ24nLCAnc3VibWVudScsIChvcHRpb25zLnJ0bCA/IGljb25zLmFsaWduX3JpZ2h0IDogaWNvbnMuYWxpZ25fbGVmdCldLFxyXG4gICAgICAgICAgICBsaXN0OiBbJycsIGxhbmcudG9vbGJhci5saXN0LCAnbGlzdCcsICdzdWJtZW51JywgaWNvbnMubGlzdF9udW1iZXJdLFxyXG4gICAgICAgICAgICBob3Jpem9udGFsUnVsZTogWydidG5fbGluZScsIGxhbmcudG9vbGJhci5ob3Jpem9udGFsUnVsZSwgJ2hvcml6b250YWxSdWxlJywgJ3N1Ym1lbnUnLCBpY29ucy5ob3Jpem9udGFsX3J1bGVdLFxyXG4gICAgICAgICAgICB0YWJsZTogWycnLCBsYW5nLnRvb2xiYXIudGFibGUsICd0YWJsZScsICdzdWJtZW51JywgaWNvbnMudGFibGVdLFxyXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiBbJycsIGxhbmcudG9vbGJhci5saW5lSGVpZ2h0LCAnbGluZUhlaWdodCcsICdzdWJtZW51JywgaWNvbnMubGluZV9oZWlnaHRdLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogWycnLCBsYW5nLnRvb2xiYXIudGVtcGxhdGUsICd0ZW1wbGF0ZScsICdzdWJtZW51JywgaWNvbnMudGVtcGxhdGVdLFxyXG4gICAgICAgICAgICBwYXJhZ3JhcGhTdHlsZTogWycnLCBsYW5nLnRvb2xiYXIucGFyYWdyYXBoU3R5bGUsICdwYXJhZ3JhcGhTdHlsZScsICdzdWJtZW51JywgaWNvbnMucGFyYWdyYXBoX3N0eWxlXSxcclxuICAgICAgICAgICAgdGV4dFN0eWxlOiBbJycsIGxhbmcudG9vbGJhci50ZXh0U3R5bGUsICd0ZXh0U3R5bGUnLCAnc3VibWVudScsIGljb25zLnRleHRfc3R5bGVdLFxyXG4gICAgICAgICAgICAvKiogcGx1Z2lucyAtIGRpYWxvZyAqL1xyXG4gICAgICAgICAgICBsaW5rOiBbJycsIGxhbmcudG9vbGJhci5saW5rLCAnbGluaycsICdkaWFsb2cnLCBpY29ucy5saW5rXSxcclxuICAgICAgICAgICAgaW1hZ2U6IFsnJywgbGFuZy50b29sYmFyLmltYWdlLCAnaW1hZ2UnLCAnZGlhbG9nJywgaWNvbnMuaW1hZ2VdLFxyXG4gICAgICAgICAgICB2aWRlbzogWycnLCBsYW5nLnRvb2xiYXIudmlkZW8sICd2aWRlbycsICdkaWFsb2cnLCBpY29ucy52aWRlb10sXHJcbiAgICAgICAgICAgIGF1ZGlvOiBbJycsIGxhbmcudG9vbGJhci5hdWRpbywgJ2F1ZGlvJywgJ2RpYWxvZycsIGljb25zLmF1ZGlvXSxcclxuICAgICAgICAgICAgbWF0aDogWycnLCBsYW5nLnRvb2xiYXIubWF0aCwgJ21hdGgnLCAnZGlhbG9nJywgaWNvbnMubWF0aF0sXHJcbiAgICAgICAgICAgIC8qKiBwbHVnaW5zIC0gZmlsZUJyb3dzZXIgKi9cclxuICAgICAgICAgICAgaW1hZ2VHYWxsZXJ5OiBbJycsIGxhbmcudG9vbGJhci5pbWFnZUdhbGxlcnksICdpbWFnZUdhbGxlcnknLCAnZmlsZUJyb3dzZXInLCBpY29ucy5pbWFnZV9nYWxsZXJ5XVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSBhIGdyb3VwIGRpdiBjb250YWluaW5nIGVhY2ggbW9kdWxlXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2NyZWF0ZU1vZHVsZUdyb3VwOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3Qgb0RpdiA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgb0Rpdi5jbGFzc05hbWUgPSAnc2UtYnRuLW1vZHVsZSBzZS1idG4tbW9kdWxlLWJvcmRlcic7XHJcblxyXG4gICAgICAgIGNvbnN0IG9VbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnVUwnKTtcclxuICAgICAgICBvVWwuY2xhc3NOYW1lID0gJ3NlLW1lbnUtbGlzdCc7XHJcbiAgICAgICAgb0Rpdi5hcHBlbmRDaGlsZChvVWwpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnZGl2Jzogb0RpdixcclxuICAgICAgICAgICAgJ3VsJzogb1VsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIGEgYnV0dG9uIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25DbGFzcyBjbGFzc05hbWUgaW4gYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgVGl0bGUgaW4gYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YUNvbW1hbmQgVGhlIGRhdGEtY29tbWFuZCBwcm9wZXJ0eSBvZiB0aGUgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YURpc3BsYXkgVGhlIGRhdGEtZGlzcGxheSBwcm9wZXJ0eSBvZiB0aGUgYnV0dG9uICgnZGlhbG9nJywgJ3N1Ym1lbnUnLCAnY29tbWFuZCcpXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5uZXJIVE1MIEh0bWwgaW4gYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2Rpc2FibGVkIEJ1dHRvbiBkaXNhYmxlZFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IF9pY29ucyBJY29uc1xyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jcmVhdGVCdXR0b246IGZ1bmN0aW9uIChidXR0b25DbGFzcywgdGl0bGUsIGRhdGFDb21tYW5kLCBkYXRhRGlzcGxheSwgaW5uZXJIVE1MLCBfZGlzYWJsZWQsIF9pY29ucykge1xyXG4gICAgICAgIGNvbnN0IG9MaSA9IHV0aWwuY3JlYXRlRWxlbWVudCgnTEknKTtcclxuICAgICAgICBjb25zdCBvQnV0dG9uID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCVVRUT04nKTtcclxuICAgICAgICBjb25zdCBsYWJlbCA9ICh0aXRsZSB8fCBkYXRhQ29tbWFuZCk7XHJcblxyXG4gICAgICAgIG9CdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xyXG4gICAgICAgIG9CdXR0b24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZS1idG4nICsgKGJ1dHRvbkNsYXNzID8gJyAnICsgYnV0dG9uQ2xhc3MgOiAnJykgKyAnIHNlLXRvb2x0aXAnKTtcclxuICAgICAgICBvQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJywgZGF0YUNvbW1hbmQpO1xyXG4gICAgICAgIG9CdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWRpc3BsYXknLCBkYXRhRGlzcGxheSk7XHJcbiAgICAgICAgb0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbC5yZXBsYWNlKC88c3BhbiAuKzxcXC9zcGFuPi8sICcnKSk7XHJcbiAgICAgICAgb0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFpbm5lckhUTUwpIGlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cInNlLWljb24tdGV4dFwiPiE8L3NwYW4+JztcclxuICAgICAgICBpZiAoL15kZWZhdWx0XFwuL2kudGVzdChpbm5lckhUTUwpKSB7XHJcbiAgICAgICAgICAgIGlubmVySFRNTCA9IF9pY29uc1tpbm5lckhUTUwucmVwbGFjZSgvXmRlZmF1bHRcXC4vaSwgJycpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9edGV4dFxcLi9pLnRlc3QoaW5uZXJIVE1MKSkge1xyXG4gICAgICAgICAgICBpbm5lckhUTUwgPSBpbm5lckhUTUwucmVwbGFjZSgvXnRleHRcXC4vaSwgJycpO1xyXG4gICAgICAgICAgICBvQnV0dG9uLmNsYXNzTmFtZSArPSAnIHNlLWJ0bi1tb3JlLXRleHQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5uZXJIVE1MICs9ICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYWJlbCArICc8L3NwYW4+PC9zcGFuPic7XHJcblxyXG4gICAgICAgIGlmIChfZGlzYWJsZWQpIG9CdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG9CdXR0b24uaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xyXG4gICAgICAgIG9MaS5hcHBlbmRDaGlsZChvQnV0dG9uKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ2xpJzogb0xpLFxyXG4gICAgICAgICAgICAnYnV0dG9uJzogb0J1dHRvblxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSBlZGl0b3IgSFRNTFxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gZG9jIGRvY3VtZW50IG9iamVjdFxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gYnV0dG9uTGlzdCBvcHRpb24uYnV0dG9uTGlzdFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gcGx1Z2lucyBQbHVnaW5zXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHsgZWxlbWVudDogKEVsZW1lbnQpIFRvb2xiYXIgZWxlbWVudCwgcGx1Z2luczogKEFycmF5fG51bGwpIFBsdWdpbnMgQXJyYXksIHBsdWdpbkNhbGxCdXR0b25zOiAoT2JqZWN0KSwgcmVzcG9uc2l2ZUJ1dHRvbnM6IChBcnJheSkgfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2NyZWF0ZVRvb2xCYXI6IGZ1bmN0aW9uIChkb2MsIGJ1dHRvbkxpc3QsIHBsdWdpbnMsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBzZXBhcmF0b3JfdmVydGljYWwgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgc2VwYXJhdG9yX3ZlcnRpY2FsLmNsYXNzTmFtZSA9ICdzZS10b29sYmFyLXNlcGFyYXRvci12ZXJ0aWNhbCc7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvb2xfYmFyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIHRvb2xfYmFyLmNsYXNzTmFtZSA9ICdzZS10b29sYmFyIHN1bi1lZGl0b3ItY29tbW9uJztcclxuXHJcbiAgICAgICAgY29uc3QgX2J1dHRvblRyYXkgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgX2J1dHRvblRyYXkuY2xhc3NOYW1lID0gJ3NlLWJ0bi10cmF5JztcclxuICAgICAgICB0b29sX2Jhci5hcHBlbmRDaGlsZChfYnV0dG9uVHJheSk7XHJcblxyXG4gICAgICAgIC8qKiBjcmVhdGUgYnV0dG9uIGxpc3QgKi9cclxuICAgICAgICBidXR0b25MaXN0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidXR0b25MaXN0KSk7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBvcHRpb25zLmljb25zO1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRCdXR0b25MaXN0ID0gdGhpcy5fZGVmYXVsdEJ1dHRvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgcGx1Z2luQ2FsbEJ1dHRvbnMgPSB7fTtcclxuICAgICAgICBjb25zdCByZXNwb25zaXZlQnV0dG9ucyA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgbW9kdWxlID0gbnVsbDtcclxuICAgICAgICBsZXQgYnV0dG9uID0gbnVsbDtcclxuICAgICAgICBsZXQgbW9kdWxlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGJ1dHRvbkVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGxldCBwbHVnaW5OYW1lID0gJyc7XHJcbiAgICAgICAgbGV0IHZlcnRpY2FsID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgbW9yZUxheWVyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBtb3JlTGF5ZXIuY2xhc3NOYW1lID0gJ3NlLXRvb2xiYXItbW9yZS1sYXllcic7XHJcblxyXG4gICAgICAgIGJ1dHRvbkdyb3VwTG9vcDpcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbW9yZSwgbW9yZUNvbnRhaW5lciwgbW9yZUNvbW1hbmQsIGJ1dHRvbkdyb3VwLCBhbGlnbjsgaSA8IGJ1dHRvbkxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbW9yZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhbGlnbiA9ICcnO1xyXG4gICAgICAgICAgICBidXR0b25Hcm91cCA9IGJ1dHRvbkxpc3RbaV07XHJcbiAgICAgICAgICAgIG1vZHVsZUVsZW1lbnQgPSB0aGlzLl9jcmVhdGVNb2R1bGVHcm91cCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gYnV0dG9uIG9iamVjdFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ1dHRvbkdyb3VwID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgLy8gYnV0dG9ucyBsb29wXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgbW9yZUJ1dHRvbjsgaiA8IGJ1dHRvbkdyb3VwLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gYnV0dG9uR3JvdXBbal07XHJcbiAgICAgICAgICAgICAgICAgICAgbW9yZUJ1dHRvbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXCVcXGQrLy50ZXN0KGJ1dHRvbikgJiYgaiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25Hcm91cFswXSA9IGJ1dHRvbi5yZXBsYWNlKC9bXlxcZF0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlQnV0dG9ucy5wdXNoKGJ1dHRvbkdyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uTGlzdC5zcGxpY2UoaS0tLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgYnV0dG9uR3JvdXBMb29wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJ1dHRvbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBidXR0b24uYWRkID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5OYW1lID0gYnV0dG9uLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUgPSBkZWZhdWx0QnV0dG9uTGlzdFtwbHVnaW5OYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbnNbcGx1Z2luTmFtZV0gPSBidXR0b247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5OYW1lID0gYnV0dG9uLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUgPSBbYnV0dG9uLmJ1dHRvbkNsYXNzLCBidXR0b24udGl0bGUsIGJ1dHRvbi5uYW1lLCBidXR0b24uZGF0YURpc3BsYXksIGJ1dHRvbi5pbm5lckhUTUwsIGJ1dHRvbi5fZGlzYWJsZWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxpZ25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eXFwtLy50ZXN0KGJ1dHRvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduID0gYnV0dG9uLnN1YnN0cigxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZUVsZW1lbnQuZGl2LmNsYXNzTmFtZSArPSAnIG1vZHVsZS1mbG9hdC0nICsgYWxpZ247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcnRsIGZpeFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15cXCMvLnRlc3QoYnV0dG9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gYnV0dG9uLnN1YnN0cigxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24gPT09ICdmaXgnKSBtb2R1bGVFbGVtZW50LnVsLmNsYXNzTmFtZSArPSAnIHNlLW1lbnUtZGlyLWZpeCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9yZSBidXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eXFw6Ly50ZXN0KGJ1dHRvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlZCA9IGJ1dHRvbi5tYXRjaCgvXlxcOihbXlxcLV0rKVxcLShbXlxcLV0rKVxcLShbXlxcLV0rKS8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZUNvbW1hbmQgPSAnX19zZV9fJyArIG1hdGNoZWRbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBtYXRjaGVkWzJdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlubmVySFRNTCA9IG1hdGNoZWRbM10udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlID0gWydzZS1idG4tbW9yZScsIHRpdGxlLCBtb3JlQ29tbWFuZCwgJ01PUkUnLCBpbm5lckhUTUxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dHRvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUgPSBkZWZhdWx0QnV0dG9uTGlzdFtidXR0b25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5OYW1lID0gYnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZHVsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tID0gcGx1Z2luc1twbHVnaW5OYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VzdG9tKSB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUudG9vbGJhci5mYWlsXSBUaGUgYnV0dG9uIG5hbWUgb2YgYSBwbHVnaW4gdGhhdCBkb2VzIG5vdCBleGlzdC4gWycgKyBwbHVnaW5OYW1lICsgJ10nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZSA9IFtjdXN0b20uYnV0dG9uQ2xhc3MsIGN1c3RvbS50aXRsZSwgY3VzdG9tLm5hbWUsIGN1c3RvbS5kaXNwbGF5LCBjdXN0b20uaW5uZXJIVE1MLCBjdXN0b20uX2Rpc2FibGVkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uRWxlbWVudCA9IHRoaXMuX2NyZWF0ZUJ1dHRvbihtb2R1bGVbMF0sIG1vZHVsZVsxXSwgbW9kdWxlWzJdLCBtb2R1bGVbM10sIG1vZHVsZVs0XSwgbW9kdWxlWzVdLCBpY29ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgKG1vcmUgPyBtb3JlQ29udGFpbmVyIDogbW9kdWxlRWxlbWVudC51bCkuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudC5saSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW5zW3BsdWdpbk5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbkNhbGxCdXR0b25zW3BsdWdpbk5hbWVdID0gYnV0dG9uRWxlbWVudC5idXR0b247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3JlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3JlQnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JlQ29udGFpbmVyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9yZUNvbnRhaW5lci5jbGFzc05hbWUgPSAnc2UtbW9yZS1sYXllciAnICsgbW9yZUNvbW1hbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVDb250YWluZXIuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJzZS1tb3JlLWZvcm1cIj48dWwgY2xhc3M9XCJzZS1tZW51LWxpc3RcIicgKyAoYWxpZ24gPyAnIHN0eWxlPVwiZmxvYXQ6ICcgKyBhbGlnbiArICc7XCInIDogJycpICsgJz48L3VsPjwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVMYXllci5hcHBlbmRDaGlsZChtb3JlQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9yZUNvbnRhaW5lciA9IG1vcmVDb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN2ID0gIHNlcGFyYXRvcl92ZXJ0aWNhbC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9idXR0b25UcmF5LmFwcGVuZENoaWxkKHN2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgX2J1dHRvblRyYXkuYXBwZW5kQ2hpbGQobW9kdWxlRWxlbWVudC5kaXYpO1xyXG4gICAgICAgICAgICAgICAgdmVydGljYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qKiBsaW5lIGJyZWFrICAqL1xyXG4gICAgICAgICAgICBlbHNlIGlmICgvXlxcLyQvLnRlc3QoYnV0dG9uR3JvdXApKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRlckRpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgICAgIGVudGVyRGl2LmNsYXNzTmFtZSA9ICdzZS1idG4tbW9kdWxlLWVudGVyJztcclxuICAgICAgICAgICAgICAgIF9idXR0b25UcmF5LmFwcGVuZENoaWxkKGVudGVyRGl2KTtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoX2J1dHRvblRyYXkuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIF9idXR0b25UcmF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhfYnV0dG9uVHJheS5maXJzdEVsZW1lbnRDaGlsZCwgJ3NlLWJ0bi1tb2R1bGUtYm9yZGVyJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJ0bCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN2ID0gIHNlcGFyYXRvcl92ZXJ0aWNhbC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN2LnN0eWxlLmZsb2F0ID0gX2J1dHRvblRyYXkubGFzdEVsZW1lbnRDaGlsZC5zdHlsZS5mbG9hdDtcclxuICAgICAgICAgICAgICAgICAgICBfYnV0dG9uVHJheS5hcHBlbmRDaGlsZChzdik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2l2ZUJ1dHRvbnMubGVuZ3RoID4gMCkgcmVzcG9uc2l2ZUJ1dHRvbnMudW5zaGlmdChidXR0b25MaXN0KTtcclxuICAgICAgICBpZiAobW9yZUxheWVyLmNoaWxkcmVuLmxlbmd0aCA+IDApIF9idXR0b25UcmF5LmFwcGVuZENoaWxkKG1vcmVMYXllcik7XHJcblxyXG4gICAgICAgIC8vIG1lbnUgdHJheVxyXG4gICAgICAgIGNvbnN0IF9tZW51VHJheSA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBfbWVudVRyYXkuY2xhc3NOYW1lID0gJ3NlLW1lbnUtdHJheSc7XHJcbiAgICAgICAgdG9vbF9iYXIuYXBwZW5kQ2hpbGQoX21lbnVUcmF5KTtcclxuXHJcbiAgICAgICAgLy8gY292ZXJcclxuICAgICAgICBjb25zdCB0b29sX2NvdmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIHRvb2xfY292ZXIuY2xhc3NOYW1lID0gJ3NlLXRvb2xiYXItY292ZXInO1xyXG4gICAgICAgIHRvb2xfYmFyLmFwcGVuZENoaWxkKHRvb2xfY292ZXIpO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oaWRlVG9vbGJhcikgdG9vbF9iYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ2VsZW1lbnQnOiB0b29sX2JhcixcclxuICAgICAgICAgICAgJ3BsdWdpbnMnOiBwbHVnaW5zLFxyXG4gICAgICAgICAgICAncGx1Z2luQ2FsbEJ1dHRvbnMnOiBwbHVnaW5DYWxsQnV0dG9ucyxcclxuICAgICAgICAgICAgJ3Jlc3BvbnNpdmVCdXR0b25zJzogcmVzcG9uc2l2ZUJ1dHRvbnMsXHJcbiAgICAgICAgICAgICdfbWVudVRyYXknOiBfbWVudVRyYXksXHJcbiAgICAgICAgICAgICdfYnV0dG9uVHJheSc6IF9idXR0b25UcmF5XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvbiBFbGVtZW50cyBhbmQgdmFyaWFibGVzIHlvdSBzaG91bGQgaGF2ZVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgdGV4dGFyZWEgZWxlbWVudFxyXG4gKiBAcGFyYW0ge29iamVjdH0gY29ucyBUb29sYmFyIGVsZW1lbnQgeW91IGNyZWF0ZWRcclxuICogQHBhcmFtIHtKU09OfE9iamVjdH0gb3B0aW9ucyBJbnNlcnRlZCBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHtFbGVtZW50cywgdmFyaWFibGVzIG9mIHRoZSBlZGl0b3IsIG9wdGlvbn1cclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IF9Db250ZXh0ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnMsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBvcmlnaW5FbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICAgICAgICB0b3BBcmVhOiBjb25zLl90b3AsXHJcbiAgICAgICAgICAgIHJlbGF0aXZlOiBjb25zLl9yZWxhdGl2ZSxcclxuICAgICAgICAgICAgdG9vbGJhcjogY29ucy5fdG9vbEJhcixcclxuICAgICAgICAgICAgX3Rvb2xiYXJTaGFkb3c6IGNvbnMuX3Rvb2xiYXJTaGFkb3csXHJcbiAgICAgICAgICAgIF9idXR0b25UcmF5OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJy5zZS1idG4tdHJheScpLFxyXG4gICAgICAgICAgICBfbWVudVRyYXk6IGNvbnMuX21lbnVUcmF5LFxyXG4gICAgICAgICAgICByZXNpemluZ0JhcjogY29ucy5fcmVzaXppbmdCYXIsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IGNvbnMuX25hdmlnYXRpb24sXHJcbiAgICAgICAgICAgIGNoYXJXcmFwcGVyOiBjb25zLl9jaGFyV3JhcHBlcixcclxuICAgICAgICAgICAgY2hhckNvdW50ZXI6IGNvbnMuX2NoYXJDb3VudGVyLFxyXG4gICAgICAgICAgICBlZGl0b3JBcmVhOiBjb25zLl9lZGl0b3JBcmVhLFxyXG4gICAgICAgICAgICB3eXNpd3lnRnJhbWU6IGNvbnMuX3d5c2l3eWdBcmVhLFxyXG4gICAgICAgICAgICB3eXNpd3lnOiBjb25zLl93eXNpd3lnQXJlYSwgLy8gaWYgKG9wdGlvbnMuaWZyYW1lKSBjb25zLl93eXNpd3lnQXJlYS5jb250ZW50RG9jdW1lbnQuYm9keVxyXG4gICAgICAgICAgICBjb2RlOiBjb25zLl9jb2RlQXJlYSxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGNvbnMuX3BsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICBsb2FkaW5nOiBjb25zLl9sb2FkaW5nLFxyXG4gICAgICAgICAgICBsaW5lQnJlYWtlcjogY29ucy5fbGluZUJyZWFrZXIsXHJcbiAgICAgICAgICAgIGxpbmVCcmVha2VyX3Q6IGNvbnMuX2xpbmVCcmVha2VyX3QsXHJcbiAgICAgICAgICAgIGxpbmVCcmVha2VyX2I6IGNvbnMuX2xpbmVCcmVha2VyX2IsXHJcbiAgICAgICAgICAgIHJlc2l6ZUJhY2tncm91bmQ6IGNvbnMuX3Jlc2l6ZUJhY2ssXHJcbiAgICAgICAgICAgIF9zdGlja3lEdW1teTogY29ucy5fc3RpY2t5RHVtbXksXHJcbiAgICAgICAgICAgIF9hcnJvdzogY29ucy5fYXJyb3csXHJcbiAgICAgICAgICAgIF9mb2N1c1RlbXA6IGNvbnMuX2ZvY3VzVGVtcFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9vbDoge1xyXG4gICAgICAgICAgICBjb3ZlcjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCcuc2UtdG9vbGJhci1jb3ZlcicpLFxyXG4gICAgICAgICAgICBib2xkOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJib2xkXCJdJyksXHJcbiAgICAgICAgICAgIHVuZGVybGluZTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwidW5kZXJsaW5lXCJdJyksXHJcbiAgICAgICAgICAgIGl0YWxpYzogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiaXRhbGljXCJdJyksXHJcbiAgICAgICAgICAgIHN0cmlrZTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwic3RyaWtlXCJdJyksXHJcbiAgICAgICAgICAgIHN1YjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiU1VCXCJdJyksXHJcbiAgICAgICAgICAgIHN1cDogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiU1VQXCJdJyksXHJcbiAgICAgICAgICAgIHVuZG86IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInVuZG9cIl0nKSxcclxuICAgICAgICAgICAgcmVkbzogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwicmVkb1wiXScpLFxyXG4gICAgICAgICAgICBzYXZlOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJzYXZlXCJdJyksXHJcbiAgICAgICAgICAgIG91dGRlbnQ6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIm91dGRlbnRcIl0nKSxcclxuICAgICAgICAgICAgaW5kZW50OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJpbmRlbnRcIl0nKSxcclxuICAgICAgICAgICAgZnVsbFNjcmVlbjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiZnVsbFNjcmVlblwiXScpLFxyXG4gICAgICAgICAgICBzaG93QmxvY2tzOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJzaG93QmxvY2tzXCJdJyksXHJcbiAgICAgICAgICAgIGNvZGVWaWV3OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJjb2RlVmlld1wiXScpLFxyXG4gICAgICAgICAgICBkaXI6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cImRpclwiXScpLFxyXG4gICAgICAgICAgICBkaXJfbHRyOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJkaXJfbHRyXCJdJyksXHJcbiAgICAgICAgICAgIGRpcl9ydGw6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cImRpcl9ydGxcIl0nKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgICBvcHRpb246IG9wdGlvbnNcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBfQ29udGV4dDsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ25vdGljZScsXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDb25zdHJ1Y3RvclxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3QgXHJcbiAgICAgKi9cclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQubm90aWNlID0ge307XHJcblxyXG4gICAgICAgIC8qKiBkaWFsb2cgKi9cclxuICAgICAgICBsZXQgbm90aWNlX2RpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBsZXQgbm90aWNlX3NwYW4gPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnU1BBTicpO1xyXG4gICAgICAgIGxldCBub3RpY2VfYnV0dG9uID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0JVVFRPTicpO1xyXG5cclxuICAgICAgICBub3RpY2VfZGl2LmNsYXNzTmFtZSA9ICdzZS1ub3RpY2UnO1xyXG4gICAgICAgIG5vdGljZV9idXR0b24uY2xhc3NOYW1lID0gJ2Nsb3NlJztcclxuICAgICAgICBub3RpY2VfYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdDbG9zZScpO1xyXG4gICAgICAgIG5vdGljZV9idXR0b24uc2V0QXR0cmlidXRlKCd0aXRsZScsIGNvcmUubGFuZy5kaWFsb2dCb3guY2xvc2UpO1xyXG4gICAgICAgIG5vdGljZV9idXR0b24uaW5uZXJIVE1MID0gY29yZS5pY29ucy5jYW5jZWw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbm90aWNlX2Rpdi5hcHBlbmRDaGlsZChub3RpY2Vfc3Bhbik7XHJcbiAgICAgICAgbm90aWNlX2Rpdi5hcHBlbmRDaGlsZChub3RpY2VfYnV0dG9uKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5ub3RpY2UubW9kYWwgPSBub3RpY2VfZGl2O1xyXG4gICAgICAgIGNvbnRleHQubm90aWNlLm1lc3NhZ2UgPSBub3RpY2Vfc3BhbjtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBub3RpY2VfYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrX2NhbmNlbC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBcclxuICAgICAgICAvKiogYXBwZW5kIGh0bWwgKi9cclxuICAgICAgICBjb250ZXh0LmVsZW1lbnQuZWRpdG9yQXJlYS5hcHBlbmRDaGlsZChub3RpY2VfZGl2KTtcclxuICAgICAgICBcclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgbm90aWNlX2RpdiA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IHdoZW4gY2xpY2tpbmcgdGhlIGNhbmNlbCBidXR0b25cclxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZSBFdmVudCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgb25DbGlja19jYW5jZWw6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLm5vdGljZS5jbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiAgT3BlbiB0aGUgbm90aWNlIHBhbmVsXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBOb3RpY2UgbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBvcGVuOiBmdW5jdGlvbiAodGV4dCkgIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQubm90aWNlLm1lc3NhZ2UudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5ub3RpY2UubW9kYWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uICBPcGVuIHRoZSBub3RpY2UgcGFuZWxcclxuICAgICAqL1xyXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQubm90aWNlLm1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgY29yZSBmcm9tICcuL2xpYi9jb3JlJztcclxuaW1wb3J0IHV0aWwgZnJvbSAnLi9saWIvdXRpbCc7XHJcbmltcG9ydCBfQ29uc3RydWN0b3IgZnJvbSAnLi9saWIvY29uc3RydWN0b3InO1xyXG5pbXBvcnQgX0NvbnRleHQgZnJvbSAnLi9saWIvY29udGV4dCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBjcmVhdGUgZnVuY3Rpb24gd2l0aCBwcmVzZXQgb3B0aW9ucy5cclxuICAgICAqIElmIHRoZSBvcHRpb25zIG92ZXJsYXAsIHRoZSBvcHRpb25zIG9mIHRoZSAnY3JlYXRlJyBmdW5jdGlvbiB0YWtlIHByZWNlZGVuY2UuXHJcbiAgICAgKiBAcGFyYW0ge0pzb259IG9wdGlvbnMgSW5pdGlhbGl6YXRpb24gb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKGluaXRfb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKGlkT3JFbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUoaWRPckVsZW1lbnQsIG9wdGlvbnMsIGluaXRfb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSB0aGUgc3VuZWRpdG9yXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fSBpZE9yRWxlbWVudCB0ZXh0YXJlYSBJZCBvciB0ZXh0YXJlYSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0pTT058T2JqZWN0fSBvcHRpb25zIHVzZXIgb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAoaWRPckVsZW1lbnQsIG9wdGlvbnMsIF9pbml0X29wdGlvbnMpIHtcclxuICAgICAgICB1dGlsLl9wcm9wZXJ0aWVzSW5pdCgpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSBvcHRpb25zID0ge307XHJcbiAgICAgICAgaWYgKF9pbml0X29wdGlvbnMpIHtcclxuICAgICAgICAgICAgb3B0aW9ucyA9ICBbX2luaXRfb3B0aW9ucywgb3B0aW9uc10ucmVkdWNlKGZ1bmN0aW9uIChpbml0LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzT3duKG9wdGlvbiwga2V5KSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3BsdWdpbnMnICYmIG9wdGlvbltrZXldICYmIGluaXRba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGluaXRba2V5XSwgbyA9IG9wdGlvbltrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS5sZW5ndGggPyBpIDogT2JqZWN0LmtleXMoaSkubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIGlbbmFtZV07IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gby5sZW5ndGggPyBvIDogT2JqZWN0LmtleXMobykubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIG9bbmFtZV07IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0W2tleV0gPSAoby5maWx0ZXIoZnVuY3Rpb24odmFsKSB7IHJldHVybiBpLmluZGV4T2YodmFsKSA9PT0gLTE7IH0pKS5jb25jYXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFtrZXldID0gb3B0aW9uW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHR5cGVvZiBpZE9yRWxlbWVudCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZE9yRWxlbWVudCkgOiBpZE9yRWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaWRPckVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUuZmFpbF0gVGhlIGVsZW1lbnQgZm9yIHRoYXQgaWQgd2FzIG5vdCBmb3VuZCAoSUQ6XCInICsgaWRPckVsZW1lbnQgKyAnXCIpJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmNyZWF0ZS5mYWlsXSBzdW5lZGl0b3IgcmVxdWlyZXMgdGV4dGFyZWFcXCdzIGVsZW1lbnQgb3IgaWQgdmFsdWUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnMgPSBfQ29uc3RydWN0b3IuaW5pdChlbGVtZW50LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgaWYgKGNvbnMuY29uc3RydWN0ZWQuX3RvcC5pZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25zLmNvbnN0cnVjdGVkLl90b3AuaWQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmNyZWF0ZS5mYWlsXSBUaGUgSUQgb2YgdGhlIHN1bmVkaXRvciB5b3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYWxyZWFkeSBleGlzdHMgKElEOlwiJyArIGNvbnMuY29uc3RydWN0ZWQuX3RvcC5pZCArICdcIiknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb3JlKF9Db250ZXh0KGVsZW1lbnQsIGNvbnMuY29uc3RydWN0ZWQsIGNvbnMub3B0aW9ucyksIGNvbnMucGx1Z2luQ2FsbEJ1dHRvbnMsIGNvbnMucGx1Z2lucywgY29ucy5vcHRpb25zLmxhbmcsIG9wdGlvbnMsIGNvbnMuX3Jlc3BvbnNpdmVCdXR0b25zKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBfQ29uc3RydWN0b3IgZnJvbSAnLi9jb25zdHJ1Y3Rvcic7XHJcbmltcG9ydCBfQ29udGV4dCBmcm9tICcuL2NvbnRleHQnO1xyXG5pbXBvcnQgX2hpc3RvcnkgZnJvbSAnLi9oaXN0b3J5JztcclxuaW1wb3J0IF91dGlsIGZyb20gJy4vdXRpbCc7XHJcbmltcG9ydCBfbm90aWNlIGZyb20gJy4uL3BsdWdpbnMvbW9kdWxlcy9fbm90aWNlJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gU3VuRWRpdG9yIGNvbnN0dWN0b3IgZnVuY3Rpb24uXHJcbiAqIGNyZWF0ZSBjb3JlIG9iamVjdCBhbmQgZXZlbnQgcmVnaXN0cmF0aW9uLlxyXG4gKiBjb3JlLCBldmVudCwgZnVuY3Rpb25zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW5DYWxsQnV0dG9uc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gcGx1Z2lucyBcclxuICogQHBhcmFtIHtPYmplY3R9IGxhbmdcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IF9yZXNwb25zaXZlQnV0dG9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBmdW5jdGlvbnMgT2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoY29udGV4dCwgcGx1Z2luQ2FsbEJ1dHRvbnMsIHBsdWdpbnMsIGxhbmcsIG9wdGlvbnMsIF9yZXNwb25zaXZlQnV0dG9ucykge1xyXG4gICAgY29uc3QgX2QgPSBjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xyXG4gICAgY29uc3QgX3cgPSBfZC5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XHJcbiAgICBjb25zdCB1dGlsID0gX3V0aWw7XHJcbiAgICBjb25zdCBpY29ucyA9IG9wdGlvbnMuaWNvbnM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gZWRpdG9yIGNvcmUgb2JqZWN0XHJcbiAgICAgKiBzaG91bGQgYWx3YXlzIGJpbmQgdGhpcyBvYmplY3Qgd2hlbiByZWdpc3RlcmluZyBhbiBldmVudCBpbiB0aGUgcGx1Zy1pbi5cclxuICAgICAqL1xyXG4gICAgY29uc3QgY29yZSA9IHtcclxuICAgICAgICBfZDogX2QsXHJcbiAgICAgICAgX3c6IF93LFxyXG4gICAgICAgIF9wYXJzZXI6IG5ldyBfdy5ET01QYXJzZXIoKSxcclxuICAgICAgICBfcHJldlJ0bDogb3B0aW9ucy5ydGwsXHJcbiAgICAgICAgX2VkaXRvckhlaWdodDogMCxcclxuICAgICAgICBfZWRpdG9ySGVpZ2h0UGFkZGluZzogMCxcclxuICAgICAgICBfbGlzdENhbWVsOiBvcHRpb25zLl9fbGlzdENvbW1vblN0eWxlLFxyXG4gICAgICAgIF9saXN0S2ViYWI6IHV0aWwuY2FtZWxUb0tlYmFiQ2FzZShvcHRpb25zLl9fbGlzdENvbW1vblN0eWxlKSxcclxuICAgICAgICBfX2ZvY3VzVGVtcDogY29udGV4dC5lbGVtZW50Ll9mb2N1c1RlbXAsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEb2N1bWVudCBvYmplY3Qgb2YgdGhlIGlmcmFtZSBpZiBjcmVhdGVkIGFzIGFuIGlmcmFtZSB8fCBfZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3dkOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2luZG93IG9iamVjdCBvZiB0aGUgaWZyYW1lIGlmIGNyZWF0ZWQgYXMgYW4gaWZyYW1lIHx8IF93XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfd3c6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZXN0IFNoYWRvd1Jvb3QgdG8gZWRpdG9yIGlmIGZvdW5kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2hhZG93Um9vdDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEJsb2NrIGNvbnRyb2xsZXIgbW91c2Vkb3duIGV2ZW50cyBpbiBcInNoYWRvd1Jvb3RcIiBlbnZpcm9ubWVudFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NoYWRvd1Jvb3RDb250cm9sbGVyRXZlbnRUYXJnZXQ6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBVdGlsIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0aWw6IHV0aWwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBGdW5jdGlvbnMgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb25zOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRWRpdG9yIG9wdGlvbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBvcHRpb25zOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29tcHV0ZWQgc3R5bGUgb2YgdGhlIHd5c2l3eWcgYXJlYSAod2luZG93LmdldENvbXB1dGVkU3R5bGUoY29udGV4dC5lbGVtZW50Lnd5c2l3eWcpKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHd3Q29tcHV0ZWRTdHlsZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE5vdGljZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBub3RpY2U6IF9ub3RpY2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZWZhdWx0IGljb25zIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGljb25zOiBpY29ucyxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEhpc3Rvcnkgb2JqZWN0IGZvciB1bmRvLCByZWRvXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGlzdG9yeTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVsZW1lbnRzIGFuZCB1c2VyIG9wdGlvbnMgcGFyYW1ldGVycyBvZiB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFBsdWdpbiBidXR0b25zXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGx1Z2luQ2FsbEJ1dHRvbnM6IHBsdWdpbkNhbGxCdXR0b25zLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gTG9hZGVkIHBsdWdpbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBwbHVnaW5zOiBwbHVnaW5zIHx8IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2hldGhlciB0aGUgcGx1Z2luIGlzIGluaXRpYWxpemVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdFBsdWdpbnM6IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT2JqZWN0IGZvciBtYW5hZ2luZyBzdWJtZW51IGVsZW1lbnRzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGFyZ2V0UGx1Z2luczoge30sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTYXZlIHJlbmRlcmVkIHN1Ym1lbnVzIGFuZCBjb250YWluZXJzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbWVudVRyYXk6IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gbG9hZGVkIGxhbmd1YWdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZzogbGFuZyxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBzZWxlY3Rpb24gbm9kZSAoY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCkpIHRvIHdoaWNoIHRoZSBlZmZlY3Qgd2FzIGxhc3QgYXBwbGllZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVmZmVjdE5vZGU6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBzdWJtZW51IGVsZW1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJtZW51OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gY29udGFpbmVyIGVsZW1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250YWluZXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBjdXJyZW50IHN1Ym1lbnQgbmFtZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3N1Ym1lbnVOYW1lOiAnJyxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGJpbmRlZCBzdWJtZW51T2ZmIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2JpbmRlZFN1Ym1lbnVPZmY6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBiaW5kZWQgY29udGFpbmVyT2ZmIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2JpbmRlZENvbnRhaW5lck9mZjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGFjdGl2ZSBidXR0b24gZWxlbWVudCBpbiBzdWJtZW51XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3VibWVudUFjdGl2ZUJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGFjdGl2ZSBidXR0b24gZWxlbWVudCBpbiBjb250YWluZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250YWluZXJBY3RpdmVCdXR0b246IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgZWxlbWVudHMgYXJyYXkgdG8gYmUgcHJvY2Vzc2VkIHVudmlzaWJsZSB3aGVuIHRoZSBjb250cm9sbGVyc09mZiBmdW5jdGlvbiBpcyBleGVjdXRlZCAocmVzaXppbmcsIGxpbmsgbW9kaWZpZWQgYnV0dG9uLCB0YWJsZSBjb250cm9sbGVyKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRyb2xsZXJBcnJheTogW10sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRoYXQgY2FsbGVkIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNvbnRyb2xsZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBjdXJyZW50Q29udHJvbGxlck5hbWU6ICcnLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIHRhcmdldCBlbGVtZW50IG9mIGN1cnJlbnQgY29udHJvbGxlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGN1cnJlbnRDb250cm9sbGVyVGFyZ2V0OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIGZpbGUgY29tcG9uZW50IG9iamVjdCBvZiBjdXJyZW50IHNlbGVjdGVkIGZpbGUgdGFnIChnZXRGaWxlQ29tcG9uZW50KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbzogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFuIGFycmF5IG9mIGJ1dHRvbnMgd2hvc2UgY2xhc3MgbmFtZSBpcyBub3QgXCJzZS1jb2RlLXZpZXctZW5hYmxlZFwiXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29kZVZpZXdEaXNhYmxlZEJ1dHRvbnM6IFtdLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQW4gYXJyYXkgb2YgYnV0dG9ucyB3aG9zZSBjbGFzcyBuYW1lIGlzIG5vdCBcInNlLXJlc2l6aW5nLWVuYWJsZWRcIlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc2l6aW5nRGlzYWJsZWRCdXR0b25zOiBbXSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGFjdGl2ZSBtb3JlIGxheWVyIGVsZW1lbnQgaW4gc3VibWVudVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX21vcmVMYXllckFjdGl2ZUJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyB3aGl0ZWxpc3QgUmVnRXhwIG9iamVjdCB1c2VkIGluIFwiX2NvbnNpc3RlbmN5Q2hlY2tPZkhUTUxcIiBtZXRob2RcclxuICAgICAgICAgKiBeKG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QpJFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2h0bWxDaGVja1doaXRlbGlzdFJlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyBibGFja2xpc3QgUmVnRXhwIG9iamVjdCB1c2VkIGluIFwiX2NvbnNpc3RlbmN5Q2hlY2tPZkhUTUxcIiBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9odG1sQ2hlY2tCbGFja2xpc3RSZWdFeHA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZWdFeHAgd2hlbiB1c2luZyBjaGVjayBkaXNhbGxvd2QgdGFncy4gKGIsIGksIGlucywgc3RyaWtlLCBzKVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVkaXRvciB0YWdzIHdoaXRlbGlzdCAoUmVnRXhwIG9iamVjdClcclxuICAgICAgICAgKiB1dGlsLmNyZWF0ZVRhZ3NXaGl0ZWxpc3Qob3B0aW9ucy5fZWRpdG9yVGFnc1doaXRlbGlzdClcclxuICAgICAgICAgKi9cclxuICAgICAgICBlZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRWRpdG9yIHRhZ3MgYmxhY2tsaXN0IChSZWdFeHAgb2JqZWN0KVxyXG4gICAgICAgICAqIHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChvcHRpb25zLnRhZ3NCbGFja2xpc3QpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZWRpdG9yVGFnc0JsYWNrbGlzdFJlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyB3aGl0ZWxpc3Qgd2hlbiBwYXN0aW5nIChSZWdFeHAgb2JqZWN0KVxyXG4gICAgICAgICAqIHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdChvcHRpb25zLnBhc3RlVGFnc1doaXRlbGlzdClcclxuICAgICAgICAgKi9cclxuICAgICAgICBwYXN0ZVRhZ3NXaGl0ZWxpc3RSZWdFeHA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUYWcgYmxhY2tsaXN0IHdoZW4gcGFzdGluZyAoUmVnRXhwIG9iamVjdClcclxuICAgICAgICAgKiB1dGlsLmNyZWF0ZVRhZ3NCbGFja2xpc3Qob3B0aW9ucy5wYXN0ZVRhZ3NCbGFja2xpc3QpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGFzdGVUYWdzQmxhY2tsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9vbGVhbiB2YWx1ZSBvZiB3aGV0aGVyIHRoZSBlZGl0b3IgaGFzIGZvY3VzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGFzRm9jdXM6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9vbGVhbiB2YWx1ZSBvZiB3aGV0aGVyIHRoZSBlZGl0b3IgaXMgZGlzYWJsZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpc0Rpc2FibGVkOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEJvb2xlYW4gdmFsdWUgb2Ygd2hldGhlciB0aGUgZWRpdG9yIGlzIHJlYWRPbmx5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNSZWFkT25seTogZmFsc2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBdHRyaWJ1dGVzIHdoaXRlbGlzdCB1c2VkIGJ5IHRoZSBjbGVhbkhUTUwgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cDogbnVsbCxcclxuICAgICAgICBfYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cF9hbGxfZGF0YTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEF0dHJpYnV0ZXMgYmxhY2tsaXN0IHVzZWQgYnkgdGhlIGNsZWFuSFRNTCBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9hdHRyaWJ1dGVzQmxhY2tsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXR0cmlidXRlcyBvZiB0YWdzIHdoaXRlbGlzdCB1c2VkIGJ5IHRoZSBjbGVhbkhUTUwgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3Q6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBdHRyaWJ1dGVzIG9mIHRhZ3MgYmxhY2tsaXN0IHVzZWQgYnkgdGhlIGNsZWFuSFRNTCBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9hdHRyaWJ1dGVzVGFnc0JsYWNrbGlzdDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGJpbmRlZCBjb250cm9sbGVyc09mZiBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9iaW5kQ29udHJvbGxlcnNPZmY6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJcyBpbmxpbmUgbW9kZT9cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pc0lubGluZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElzIGJhbGxvb258YmFsbG9vbi1hbHdheXMgbW9kZT9cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pc0JhbGxvb246IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJcyBiYWxsb29uLWFsd2F5cyBtb2RlP1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lzQmFsbG9vbkFsd2F5czogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlcXVpcmVkIHZhbHVlIHdoZW4gdXNpbmcgaW5saW5lIG1vZGUgdG8gc3RpY2t5IHRvb2xiYXJcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pbmxpbmVUb29sYmFyQXR0cjoge3RvcDogJycsIHdpZHRoOiAnJywgaXNTaG93OiBmYWxzZX0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYXJpYWJsZSB0aGF0IGNvbnRyb2xzIHRoZSBcImJsdXJcIiBldmVudCBpbiB0aGUgZWRpdG9yIG9mIGlubGluZSBvciBiYWxsb29uIG1vZGUgd2hlbiB0aGUgZm9jdXMgaXMgbW92ZWQgdG8gc3VibWVudVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vdEhpZGVUb29sYmFyOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhcmlhYmxlIHZhbHVlIHRoYXQgc3RpY2t5IHRvb2xiYXIgbW9kZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3N0aWNreTogZmFsc2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYXJpYWJsZXMgZm9yIGNvbnRyb2xsaW5nIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2FudGlCbHVyOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvbXBvbmVudCBsaW5lIGJyZWFrZXIgZWxlbWVudFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2xpbmVCcmVha2VyOiBudWxsLFxyXG4gICAgICAgIF9saW5lQnJlYWtlckJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIHRydWUsIChpbml0aWFsaXplLCByZXNldCkgYWxsIGluZGV4ZXMgb2YgaW1hZ2UsIHZpZGVvIGluZm9ybWF0aW9uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY29tcG9uZW50c0luZm9Jbml0OiB0cnVlLFxyXG4gICAgICAgIF9jb21wb25lbnRzSW5mb1Jlc2V0OiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFBsdWdpbnMgYXJyYXkgd2l0aCBcImFjdGl2ZVwiIG1ldGhvZC5cclxuICAgICAgICAgKiBcImFjdGl2ZVBsdWdpbnNcIiBydW5zIHRoZSBcImFkZFwiIG1ldGhvZCB3aGVuIGNyZWF0aW5nIHRoZSBlZGl0b3IuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWN0aXZlUGx1Z2luczogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluZm9ybWF0aW9uIG9mIHRhZ3MgdGhhdCBzaG91bGQgbWFpbnRhaW4gSFRNTCBzdHJ1Y3R1cmUsIHN0eWxlLCBjbGFzcyBuYW1lLCBldGMuIChJbiB1c2UgYnkgXCJtYXRoXCIgcGx1Z2luKVxyXG4gICAgICAgICAqIFdoZW4gaW5zZXJ0aW5nIFwiaHRtbFwiIHN1Y2ggYXMgcGFzdGUsIGl0IGlzIGV4ZWN1dGVkIG9uIHRoZSBcImh0bWxcIiB0byBiZSBpbnNlcnRlZC4gKGNvcmUuY2xlYW5IVE1MKVxyXG4gICAgICAgICAqIEJhc2ljIEVkaXRvciBBY3Rpb25zOlxyXG4gICAgICAgICAqIDEuIEFsbCBjbGFzc2VzIG5vdCBzdGFydGluZyB3aXRoIFwiX19zZV9fXCIgb3IgXCJzZS1cIiBpbiB0aGUgZWRpdG9yIGFyZSByZW1vdmVkLlxyXG4gICAgICAgICAqIDIuIFRoZSBzdHlsZSBvZiBhbGwgdGFncyBleGNlcHQgdGhlIFwic3BhblwiIHRhZyBpcyByZW1vdmVkIGZyb20gdGhlIGVkaXRvci5cclxuICAgICAgICAgKiBcIm1hbmFnZWRUYWdzSW5mb1wiIHN0cnVjdHVyZSBleDpcclxuICAgICAgICAgKiBtYW5hZ2VkVGFnc0luZm86IHtcclxuICAgICAgICAgKiAgIHF1ZXJ5OiAnLl9fc2VfX3h4eCwgc2UteHh4J1xyXG4gICAgICAgICAqICAgbWFwOiB7XHJcbiAgICAgICAgICogICAgICdfX3NlX194eHgnOiBtZXRob2QuYmluZChjb3JlKSxcclxuICAgICAgICAgKiAgICAgJ3NlLXh4eCc6IG1ldGhvZC5iaW5kKGNvcmUpLFxyXG4gICAgICAgICAqICAgfVxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIERlZmluZSBpbiB0aGUgZm9sbG93aW5nIHJldHVybiBmb3JtYXQgaW4gdGhlIFwibWFuYWdlZFRhZ0luZm9cIiBmdW5jdGlvbiBvZiB0aGUgcGx1Z2luLlxyXG4gICAgICAgICAqIG1hbmFnZWRUYWdJbmZvKCkgPT4ge1xyXG4gICAgICAgICAqICByZXR1cm4ge1xyXG4gICAgICAgICAqICAgIGNsYXNzTmFtZTogJ3N0cmluZycsIC8vIENsYXNzIG5hbWUgdG8gaWRlbnRpZnkgdGhlIHRhZy4gKFwiX19zZV9feHh4XCIsIFwic2UteHh4XCIpXHJcbiAgICAgICAgICogICAgLy8gQ2hhbmdlIHRoZSBodG1sIG9mIHRoZSBcImVsZW1lbnRcIi4gKFwiZWxlbWVudFwiIGlzIHRoZSBlbGVtZW50IGZvdW5kIHdpdGggXCJjbGFzc05hbWVcIi4pXHJcbiAgICAgICAgICogICAgLy8gXCJtZXRob2RcIiBpcyBleGVjdXRlZCBieSBiaW5kaW5nIFwiY29yZVwiLlxyXG4gICAgICAgICAqICAgIG1ldGhvZDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgKiAgICAgIC8vIHRoaXMgPT09IGNvcmVcclxuICAgICAgICAgKiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gLy8gKHJlbmRlcmVkIGh0bWwpO1xyXG4gICAgICAgICAqICAgIH1cclxuICAgICAgICAgKiAgfVxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBtYW5hZ2VkVGFnc0luZm86IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBjYXNoaW5nOiBvcHRpb25zLmNoYXJDb3VudGVyVHlwZSA9PT0gJ2J5dGUtaHRtbCdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jaGFyVHlwZUhUTUw6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXJyYXkgb2YgXCJjaGVja0ZpbGVJbmZvXCIgZnVuY3Rpb25zIHdpdGggdGhlIGNvcmUgYm91bmRcclxuICAgICAgICAgKiAoUGx1Z2lucyB3aXRoIFwiY2hlY2tGaWxlSW5mb1wiIGFuZCBcInJlc2V0RmlsZUluZm9cIiBtZXRob2RzKVxyXG4gICAgICAgICAqIFwiZmlsZUluZm9QbHVnaW5zXCIgcnVucyB0aGUgXCJhZGRcIiBtZXRob2Qgd2hlbiBjcmVhdGluZyB0aGUgZWRpdG9yLlxyXG4gICAgICAgICAqIFwiY2hlY2tGaWxlSW5mb1wiIG1ldGhvZCBpcyBhbHdheXMgY2FsbCBqdXN0IGJlZm9yZSB0aGUgXCJjaGFuZ2VcIiBldmVudC5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9maWxlSW5mb1BsdWdpbnNDaGVjazogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFycmF5IG9mIFwicmVzZXRGaWxlSW5mb1wiIGZ1bmN0aW9ucyB3aXRoIHRoZSBjb3JlIGJvdW5kXHJcbiAgICAgICAgICogKFBsdWdpbnMgd2l0aCBcImNoZWNrRmlsZUluZm9cIiBhbmQgXCJyZXNldEZpbGVJbmZvXCIgbWV0aG9kcylcclxuICAgICAgICAgKiBcImNoZWNrRmlsZUluZm9cIiBtZXRob2QgaXMgYWx3YXlzIGNhbGwganVzdCBiZWZvcmUgdGhlIFwiZnVuY3Rpb25zLnNldE9wdGlvbnNcIiBtZXRob2QuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZmlsZUluZm9QbHVnaW5zUmVzZXQ6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYXJpYWJsZXMgZm9yIGZpbGUgY29tcG9uZW50IG1hbmFnZW1lbnRcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9maWxlTWFuYWdlcjoge1xyXG4gICAgICAgICAgICB0YWdzOiBudWxsLFxyXG4gICAgICAgICAgICByZWdFeHA6IG51bGwsXHJcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nOiBudWxsLFxyXG4gICAgICAgICAgICBwbHVnaW5SZWdFeHA6IG51bGwsXHJcbiAgICAgICAgICAgIHBsdWdpbk1hcDogbnVsbFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlIHRleHQgb3IgY2xhc3NOYW1lIGZvciBlYWNoIHNlbGVjdGlvbiBjaGFuZ2VcclxuICAgICAgICAgKiBBZnRlciBjcmVhdGluZyB0aGUgZWRpdG9yLCBcImFjdGl2ZVBsdWdpbnNcIiBhcmUgYWRkZWQuXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBTVFJPTkcgYm9sZCBidXR0b25cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IFUgdW5kZXJsaW5lIGJ1dHRvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gRU0gaXRhbGljIGJ1dHRvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gREVMIHN0cmlrZSBidXR0b25cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IFNVQiBzdWJzY3JpcHQgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBTVVAgc3VwZXJzY3JpcHQgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBPVVRERU5UIG91dGRlbnQgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBJTkRFTlQgaW5kZW50IGJ1dHRvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbW1hbmRNYXA6IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ1NTIHByb3BlcnRpZXMgcmVsYXRlZCB0byBzdHlsZSB0YWdzIFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NvbW1hbmRNYXBTdHlsZXM6IHtcclxuICAgICAgICAgICAgU1RST05HOiBbJ2ZvbnQtd2VpZ2h0J10sXHJcbiAgICAgICAgICAgIFU6IFsndGV4dC1kZWNvcmF0aW9uJ10sXHJcbiAgICAgICAgICAgIEVNOiBbJ2ZvbnQtc3R5bGUnXSxcclxuICAgICAgICAgICAgREVMOiBbJ3RleHQtZGVjb3JhdGlvbiddXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFN0eWxlIGJ1dHRvbiByZWxhdGVkIHRvIGVkaXQgYXJlYVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gZnVsbFNjcmVlbiBmdWxsU2NyZWVuIGJ1dHRvbiBlbGVtZW50XHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBzaG93QmxvY2tzIHNob3dCbG9ja3MgYnV0dG9uIGVsZW1lbnRcclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IGNvZGVWaWV3IGNvZGVWaWV3IGJ1dHRvbiBlbGVtZW50XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc3R5bGVDb21tYW5kTWFwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jbGVhblN0eWxlUmVnRXhwOiB7XHJcbiAgICAgICAgICAgIGRpdjogbmV3IF93LlJlZ0V4cCgnXFxcXHMqW14tYS16QS1aXSguKylcXFxccyo6W147XSsoPyE7KSonLCAnaWcnKSxcclxuICAgICAgICAgICAgc3BhbjogbmV3IF93LlJlZ0V4cCgnXFxcXHMqW14tYS16QS1aXShmb250LWZhbWlseXxmb250LXNpemV8Y29sb3J8YmFja2dyb3VuZC1jb2xvcilcXFxccyo6W147XSsoPyE7KSonLCAnaWcnKSxcclxuICAgICAgICAgICAgZm9ybWF0OiBuZXcgX3cuUmVnRXhwKCdcXFxccypbXi1hLXpBLVpdKHRleHQtYWxpZ258bWFyZ2luLWxlZnR8bWFyZ2luLXJpZ2h0fHdpZHRofGhlaWdodHxsaW5lLWhlaWdodClcXFxccyo6W147XSsoPyE7KSonLCAnaWcnKSxcclxuICAgICAgICAgICAgZm9udFNpemVVbml0OiBuZXcgX3cuUmVnRXhwKCdcXFxcZCsnICsgb3B0aW9ucy5mb250U2l6ZVVuaXQgKyAnJCcsICdpJyksXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhcmlhYmxlcyB1c2VkIGludGVybmFsbHkgaW4gZWRpdG9yIG9wZXJhdGlvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNDb2RlVmlldyBTdGF0ZSBvZiBjb2RlIHZpZXdcclxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzRnVsbFNjcmVlbiBTdGF0ZSBvZiBmdWxsIHNjcmVlblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBpbm5lckhlaWdodF9mdWxsU2NyZWVuIElubmVySGVpZ2h0IGluIGVkaXRvciB3aGVuIGluIGZ1bGwgc2NyZWVuXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJlc2l6ZUNsaWVudFkgUmVtZW1iZXIgdGhlIHZlcnRpY2FsIHNpemUgb2YgdGhlIGVkaXRvciBiZWZvcmUgcmVzaXppbmcgdGhlIGVkaXRvciAoVXNlZCB3aGVuIGNhbGN1bGF0aW5nIGR1cmluZyByZXNpemUgb3BlcmF0aW9uKVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0YWJTaXplIEluZGVudCBzaXplIG9mIHRhYiAoNClcclxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gY29kZUluZGVudCBJbmRlbnQgc2l6ZSBvZiBDb2RlIHZpZXcgbW9kZSAoMilcclxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbWluUmVzaXppbmdTaXplIE1pbmltdW0gc2l6ZSBvZiBlZGl0aW5nIGFyZWEgd2hlbiByZXNpemVkIHtOdW1iZXJ9ICguc2Utd3JhcHBlci1pbm5lciB7bWluLWhlaWdodDogNjVweDt9IHx8IDY1KVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGN1cnJlbnROb2RlcyAgQW4gYXJyYXkgb2YgdGhlIGN1cnJlbnQgY3Vyc29yJ3Mgbm9kZSBzdHJ1Y3R1cmVcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF92YXJpYWJsZToge1xyXG4gICAgICAgICAgICBpc0NoYW5nZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc0NvZGVWaWV3OiBmYWxzZSxcclxuICAgICAgICAgICAgaXNGdWxsU2NyZWVuOiBmYWxzZSxcclxuICAgICAgICAgICAgaW5uZXJIZWlnaHRfZnVsbFNjcmVlbjogMCxcclxuICAgICAgICAgICAgcmVzaXplQ2xpZW50WTogMCxcclxuICAgICAgICAgICAgdGFiU2l6ZTogNCxcclxuICAgICAgICAgICAgY29kZUluZGVudDogMixcclxuICAgICAgICAgICAgbWluUmVzaXppbmdTaXplOiB1dGlsLmdldE51bWJlcigoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5zdHlsZS5taW5IZWlnaHQgfHwgJzY1JyksIDApLFxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZXM6IFtdLFxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZXNNYXA6IFtdLFxyXG4gICAgICAgICAgICBfcmFuZ2U6IG51bGwsXHJcbiAgICAgICAgICAgIF9zZWxlY3Rpb25Ob2RlOiBudWxsLFxyXG4gICAgICAgICAgICBfb3JpZ2luQ3NzVGV4dDogY29udGV4dC5lbGVtZW50LnRvcEFyZWEuc3R5bGUuY3NzVGV4dCxcclxuICAgICAgICAgICAgX2JvZHlPdmVyZmxvdzogJycsXHJcbiAgICAgICAgICAgIF9lZGl0b3JBcmVhT3JpZ2luQ3NzVGV4dDogJycsXHJcbiAgICAgICAgICAgIF93eXNpd3lnT3JpZ2luQ3NzVGV4dDogJycsXHJcbiAgICAgICAgICAgIF9jb2RlT3JpZ2luQ3NzVGV4dDogJycsXHJcbiAgICAgICAgICAgIF9mdWxsU2NyZWVuQXR0cnM6IHtzdGlja3k6IGZhbHNlLCBiYWxsb29uOiBmYWxzZSwgaW5saW5lOiBmYWxzZX0sXHJcbiAgICAgICAgICAgIF9saW5lQnJlYWtDb21wOiBudWxsLFxyXG4gICAgICAgICAgICBfbGluZUJyZWFrRGlyOiAnJ1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUZW1wIHZhcmlhYmxlIGZvciBzZXQgbGluZSBhdHRyc1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2Zvcm1hdEF0dHJzVGVtcDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNhdmUgdGhlIGN1cnJlbnQgYnV0dG9ucyBzdGF0ZXMgdG8gXCJhbGxDb21tYW5kQnV0dG9uc1wiIG9iamVjdFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NhdmVCdXR0b25TdGF0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbENvbW1hbmRCdXR0b25zKSB0aGlzLmFsbENvbW1hbmRCdXR0b25zID0ge307XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QnV0dG9ucyA9IHRoaXMuY29udGV4dC5lbGVtZW50Ll9idXR0b25UcmF5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZS1tZW51LWxpc3QgYnV0dG9uW2RhdGEtZGlzcGxheV0nKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGVsZW1lbnQsIGNvbW1hbmQ7IGkgPCBjdXJyZW50QnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IGN1cnJlbnRCdXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbENvbW1hbmRCdXR0b25zW2NvbW1hbmRdID0gZWxlbWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZWNvdmVyIHRoZSBjdXJyZW50IGJ1dHRvbnMgc3RhdGVzIGZyb20gXCJhbGxDb21tYW5kQnV0dG9uc1wiIG9iamVjdFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3JlY292ZXJCdXR0b25TdGF0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWxsQ29tbWFuZEJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCdXR0b25zID0gdGhpcy5jb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnLnNlLW1lbnUtbGlzdCBidXR0b25bZGF0YS1kaXNwbGF5XScpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGJ1dHRvbiwgY29tbWFuZCwgb2xkQnV0dG9uOyBpIDwgY3VycmVudEJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBjdXJyZW50QnV0dG9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9sZEJ1dHRvbiA9IHRoaXMuYWxsQ29tbWFuZEJ1dHRvbnNbY29tbWFuZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQob2xkQnV0dG9uLCBidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnRvb2xbY29tbWFuZF0pIHRoaXMuY29udGV4dC50b29sW2NvbW1hbmRdID0gb2xkQnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJZiB0aGUgcGx1Z2luIGlzIG5vdCBhZGRlZCwgYWRkIHRoZSBwbHVnaW4gYW5kIGNhbGwgdGhlICdhZGQnIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIElmIHRoZSBwbHVnaW4gaXMgYWRkZWQgY2FsbCBjYWxsQmFjayBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRvIGNhbGxcclxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsQmFja0Z1bmN0aW9uIEZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGFmdGVyIG1vZHVsZSBjYWxsXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IF90YXJnZXQgUGx1Z2luIHRhcmdldCBidXR0b24gKFRoaXMgaXMgbm90IG5lY2Vzc2FyeSBpZiB5b3UgaGF2ZSBhIGJ1dHRvbiBsaXN0IHdoZW4gY3JlYXRpbmcgdGhlIGVkaXRvcilcclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsUGx1Z2luOiBmdW5jdGlvbiAocGx1Z2luTmFtZSwgY2FsbEJhY2tGdW5jdGlvbiwgX3RhcmdldCkge1xyXG4gICAgICAgICAgICBfdGFyZ2V0ID0gX3RhcmdldCB8fCBwbHVnaW5DYWxsQnV0dG9uc1twbHVnaW5OYW1lXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jb3JlLmNhbGxQbHVnaW4uZmFpbF0gVGhlIGNhbGxlZCBwbHVnaW4gZG9lcyBub3QgZXhpc3Qgb3IgaXMgaW4gYW4gaW52YWxpZCBmb3JtYXQuIChwbHVnaW5OYW1lOlwiJyArIHBsdWdpbk5hbWUgKyAnXCIpJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaW5pdFBsdWdpbnNbcGx1Z2luTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luc1twbHVnaW5OYW1lXS5hZGQodGhpcywgX3RhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRQbHVnaW5zW3BsdWdpbk5hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5fdGFyZ2V0UGx1Z2luc1twbHVnaW5OYW1lXSA9PT0gJ29iamVjdCcgJiYgISFfdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRNZW51VGFyZ2V0KHBsdWdpbk5hbWUsIF90YXJnZXQsIHRoaXMuX3RhcmdldFBsdWdpbnNbcGx1Z2luTmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdLmFjdGl2ZSAmJiAhdGhpcy5jb21tYW5kTWFwW3BsdWdpbk5hbWVdICYmICEhX3RhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kTWFwW3BsdWdpbk5hbWVdID0gX3RhcmdldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlUGx1Z2lucy5wdXNoKHBsdWdpbk5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxCYWNrRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIGNhbGxCYWNrRnVuY3Rpb24oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSWYgdGhlIG1vZHVsZSBpcyBub3QgYWRkZWQsIGFkZCB0aGUgbW9kdWxlIGFuZCBjYWxsIHRoZSAnYWRkJyBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG1vZHVsZUFycmF5IG1vZHVsZSBvYmplY3QncyBBcnJheSBbZGlhbG9nLCByZXNpemluZ11cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGRNb2R1bGU6IGZ1bmN0aW9uIChtb2R1bGVBcnJheSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbW9kdWxlQXJyYXkubGVuZ3RoLCBtb2R1bGVOYW1lOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVBcnJheVtpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbnNbbW9kdWxlTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbbW9kdWxlTmFtZV0gPSBtb2R1bGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbml0UGx1Z2luc1ttb2R1bGVOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdFBsdWdpbnNbbW9kdWxlTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wbHVnaW5zW21vZHVsZU5hbWVdLmFkZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5wbHVnaW5zW21vZHVsZU5hbWVdLmFkZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGVkaXRvci1yZWxhdGl2ZSBzY3JvbGwgb2Zmc2V0LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHt0b3AsIGxlZnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0R2xvYmFsU2Nyb2xsT2Zmc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCB0ID0gMCwgbCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBlbCA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhO1xyXG4gICAgICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHQgKz0gZWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgbCArPSBlbC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbCA9IHRoaXMuX3NoYWRvd1Jvb3QgPyB0aGlzLl9zaGFkb3dSb290Lmhvc3QgOiBudWxsO1xyXG4gICAgICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHQgKz0gZWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgbCArPSBlbC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiB0LFxyXG4gICAgICAgICAgICAgICAgbGVmdDogbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIG1hbmFnaW5nIHN1Ym1lbnUgZWxlbWVudC5cclxuICAgICAgICAgKiBZb3UgbXVzdCBhZGQgdGhlIFwic3VibWVudVwiIGVsZW1lbnQgdXNpbmcgdGhlIHRoaXMgbWV0aG9kIGF0IGN1c3RvbSBwbHVnaW4uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gdGFyZ2V0IFRhcmdldCBidXR0b25cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG1lbnUgU3VibWVudSBlbGVtZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdE1lbnVUYXJnZXQ6IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCB0YXJnZXQsIG1lbnUpIHtcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFBsdWdpbnNbcGx1Z2luTmFtZV0gPSBtZW51O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9tZW51VHJheS5hcHBlbmRDaGlsZChtZW51KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFBsdWdpbnNbcGx1Z2luTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVudVRyYXlbdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyldID0gbWVudTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbmFibGUgc3VibWVudVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBTdWJtZW51J3MgYnV0dG9uIGVsZW1lbnQgdG8gY2FsbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1Ym1lbnVPbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmRlZFN1Ym1lbnVPZmYpIHRoaXMuX2JpbmRlZFN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmRDb250cm9sbGVyc09mZikgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3VibWVudU5hbWUgPSB0aGlzLl9zdWJtZW51TmFtZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgY29uc3QgbWVudSA9IHRoaXMuc3VibWVudSA9IHRoaXMuX21lbnVUcmF5W3N1Ym1lbnVOYW1lXTtcclxuICAgICAgICAgICAgdGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fc2V0TWVudVBvc2l0aW9uKGVsZW1lbnQsIG1lbnUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluZGVkU3VibWVudU9mZiA9IHRoaXMuc3VibWVudU9mZi5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdtb3VzZWRvd24nLCB0aGlzLl9iaW5kZWRTdWJtZW51T2ZmLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zW3N1Ym1lbnVOYW1lXS5vbikgdGhpcy5wbHVnaW5zW3N1Ym1lbnVOYW1lXS5vbi5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERpc2FibGUgc3VibWVudVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1Ym1lbnVPZmY6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVEb2NFdmVudCgnbW91c2Vkb3duJywgdGhpcy5fYmluZGVkU3VibWVudU9mZik7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRlZFN1Ym1lbnVPZmYgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3VibWVudSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VibWVudU5hbWUgPSAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VibWVudS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3ModGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uLCAnb24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VibWVudUFjdGl2ZUJ1dHRvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RIaWRlVG9vbGJhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlIG1vcmUgbGF5ZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBtb3JlTGF5ZXJPZmY6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXllciA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykpO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3ModGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uLCAnb24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vcmVMYXllckFjdGl2ZUJ1dHRvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRW5hYmxlIGNvbnRhaW5lclxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBDb250YWluZXIncyBidXR0b24gZWxlbWVudCB0byBjYWxsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udGFpbmVyT246IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9iaW5kZWRDb250YWluZXJPZmYpIHRoaXMuX2JpbmRlZENvbnRhaW5lck9mZigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyTmFtZSA9IHRoaXMuX2NvbnRhaW5lck5hbWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnUgPSB0aGlzLmNvbnRhaW5lciA9IHRoaXMuX21lbnVUcmF5W2NvbnRhaW5lck5hbWVdO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckFjdGl2ZUJ1dHRvbiA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE1lbnVQb3NpdGlvbihlbGVtZW50LCBtZW51KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRlZENvbnRhaW5lck9mZiA9IHRoaXMuY29udGFpbmVyT2ZmLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRG9jRXZlbnQoJ21vdXNlZG93bicsIHRoaXMuX2JpbmRlZENvbnRhaW5lck9mZiwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luc1tjb250YWluZXJOYW1lXS5vbikgdGhpcy5wbHVnaW5zW2NvbnRhaW5lck5hbWVdLm9uLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FudGlCbHVyID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGlzYWJsZSBjb250YWluZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250YWluZXJPZmY6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVEb2NFdmVudCgnbW91c2Vkb3duJywgdGhpcy5fYmluZGVkQ29udGFpbmVyT2ZmKTtcclxuICAgICAgICAgICAgdGhpcy5fYmluZGVkQ29udGFpbmVyT2ZmID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyTmFtZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3ModGhpcy5jb250YWluZXJBY3RpdmVCdXR0b24sICdvbicpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJBY3RpdmVCdXR0b24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbm90SGlkZVRvb2xiYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYW50aUJsdXIgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IHRoZSBtZW51IHBvc2l0aW9uLiAoc3VibWVudSwgY29udGFpbmVyKVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gZWxlbWVudCBCdXR0b24gZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gbWVudSBNZW51IGVsZW1lbnRcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRNZW51UG9zaXRpb246IGZ1bmN0aW9uIChlbGVtZW50LCBtZW51KSB7XHJcbiAgICAgICAgICAgIG1lbnUuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBtZW51LnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgICAgICB1dGlsLmFkZENsYXNzKGVsZW1lbnQsICdvbicpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhciA9IHRoaXMuY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJXID0gdG9vbGJhci5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhck9mZnNldCA9IGV2ZW50Ll9nZXRFZGl0b3JPZmZzZXRzKGNvbnRleHQuZWxlbWVudC50b29sYmFyKTtcclxuICAgICAgICAgICAgY29uc3QgbWVudVcgPSBtZW51Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50Lm9mZnNldExlZnQgKyAzO1xyXG5cclxuICAgICAgICAgICAgLy8gcnRsXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJ0bCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudFcgPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcnRsVyA9IG1lbnVXID4gZWxlbWVudFcgPyBtZW51VyAtIGVsZW1lbnRXIDogMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJ0bEwgPSBydGxXID4gMCA/IDAgOiBlbGVtZW50VyAtIG1lbnVXO1xyXG4gICAgICAgICAgICAgICAgbWVudS5zdHlsZS5sZWZ0ID0gKGwgLSBydGxXICsgcnRsTCkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xiYXJPZmZzZXQubGVmdCA+IGV2ZW50Ll9nZXRFZGl0b3JPZmZzZXRzKG1lbnUpLmxlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZW51LnN0eWxlLmxlZnQgPSAnMHB4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJMZWZ0ID0gdG9vbGJhclcgPD0gbWVudVcgPyAwIDogdG9vbGJhclcgLSAobCArIG1lbnVXKTtcclxuICAgICAgICAgICAgICAgIGlmIChvdmVyTGVmdCA8IDApIG1lbnUuc3R5bGUubGVmdCA9IChsICsgb3ZlckxlZnQpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGVsc2UgbWVudS5zdHlsZS5sZWZ0ID0gbCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdldCBlbGVtZW50IHRvcFxyXG4gICAgICAgICAgICBsZXQgdCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXRFbCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXRFbCAmJiBvZmZzZXRFbCAhPT0gdG9vbGJhcikge1xyXG4gICAgICAgICAgICAgICAgdCArPSBvZmZzZXRFbC5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXRFbCA9IG9mZnNldEVsLm9mZnNldFBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgYnQgPSB0O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNCYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICB0ICs9IHRvb2xiYXIub2Zmc2V0VG9wICsgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0IC09IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgbWVudSBwb3NpdGlvblxyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyVG9wID0gdG9vbGJhck9mZnNldC50b3A7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnVIZWlnaHQgPSBtZW51Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gdGhpcy5nZXRHbG9iYWxTY3JvbGxPZmZzZXQoKS50b3A7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtZW51SGVpZ2h0X2JvdHRvbSA9IF93LmlubmVySGVpZ2h0IC0gKHRvb2xiYXJUb3AgLSBzY3JvbGxUb3AgKyBidCArIGVsZW1lbnQucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICAgICAgICBpZiAobWVudUhlaWdodF9ib3R0b20gPCBtZW51SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWVudVRvcCA9IC0xICogKG1lbnVIZWlnaHQgLSBidCArIDMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zVG9wID0gdG9vbGJhclRvcCAtIHNjcm9sbFRvcCArIG1lbnVUb3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZW51SGVpZ2h0X3RvcCA9IG1lbnVIZWlnaHQgKyAoaW5zVG9wIDwgMCA/IGluc1RvcCA6IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZW51SGVpZ2h0X3RvcCA+IG1lbnVIZWlnaHRfYm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSBtZW51SGVpZ2h0X3RvcCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudVRvcCA9IC0xICogKG1lbnVIZWlnaHRfdG9wIC0gYnQgKyAzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSBtZW51SGVpZ2h0X2JvdHRvbSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudVRvcCA9IGJ0ICsgZWxlbWVudC5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBtZW51LnN0eWxlLnRvcCA9IG1lbnVUb3AgKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVudS5zdHlsZS50b3AgPSAoYnQgKyBlbGVtZW50LnBhcmVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1lbnUuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IGNvbnRyb2xsZXIgYXQgZWRpdG9yIGFyZWEgKGNvbnRyb2xsZXIgZWxlbWVudHMsIGZ1bmN0aW9uLCBcImNvbnRyb2xsZXIgdGFyZ2V0IGVsZW1lbnQoQFJlcXVpcmVkKVwiLCBcImNvbnRyb2xsZXIgbmFtZShAUmVxdWlyZWQpXCIsIGV0Yy4uKVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gYXJndW1lbnRzIGNvbnRyb2xsZXIgZWxlbWVudHMsIGZ1bmN0aW9ucy4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udHJvbGxlcnNPbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmKSB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBhcmc7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghYXJnKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSA9IGFyZztcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyQXJyYXkucHVzaChhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmhhc0NsYXNzKGFyZywgJ3NlLWNvbnRyb2xsZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRyb2xsZXJUYXJnZXQgPSBhcmc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsZUNvbXBvbmVudEluZm8gPSB0aGlzLmdldEZpbGVDb21wb25lbnQoYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhcmcuc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NoYWRvd1Jvb3QgJiYgdGhpcy5fc2hhZG93Um9vdENvbnRyb2xsZXJFdmVudFRhcmdldC5pbmRleE9mKGFyZykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaGFkb3dSb290Q29udHJvbGxlckV2ZW50VGFyZ2V0LnB1c2goYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcnJheS5wdXNoKGFyZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRDb250cm9sbGVyc09mZiA9IHRoaXMuY29udHJvbGxlcnNPZmYuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5hZGREb2NFdmVudCgnbW91c2Vkb3duJywgdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRG9jRXZlbnQoJ2tleWRvd24nLCB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5fYW50aUJsdXIgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMuc2hvd0NvbnRyb2xsZXIgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy5zaG93Q29udHJvbGxlcih0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSwgdGhpcy5jb250cm9sbGVyQXJyYXksIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBIaWRlIGNvbnRyb2xsZXIgYXQgZWRpdG9yIGFyZWEgKGxpbmsgYnV0dG9uLCBpbWFnZSByZXNpemUgYnV0dG9uLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fE1vdXNlRXZlbnR8bnVsbH0gZSBFdmVudCBvYmplY3Qgd2hlbiBjYWxsZWQgZnJvbSBtb3VzZWRvd24gYW5kIGtleWRvd24gZXZlbnRzIHJlZ2lzdGVyZWQgaW4gXCJjb3JlLmNvbnRyb2xsZXJzT25cIlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRyb2xsZXJzT2ZmOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9saW5lQnJlYWtlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSB0aGlzLmNvbnRyb2xsZXJBcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAmJiBsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRyb2xsZXJBcnJheVtpXS5jb250YWlucyA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLmNvbnRyb2xsZXJBcnJheVtpXS5jb250YWlucyhlLnRhcmdldCkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpblJlZ0V4cC50ZXN0KHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lKSAmJiBlICYmIGUudHlwZSA9PT0gJ2tleWRvd24nICYmIGUua2V5Q29kZSAhPT0gMjcpIHJldHVybjtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX3Quc3R5bGUuZGlzcGxheSA9IGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcl9iLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9saW5lQnJlYWtDb21wID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRyb2xsZXJUYXJnZXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdtb3VzZWRvd24nLCB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdrZXlkb3duJywgdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmKTtcclxuICAgICAgICAgICAgdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRyb2xsZXJBcnJheVtpXSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5jb250cm9sbGVyQXJyYXlbaV0oKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMuY29udHJvbGxlckFycmF5W2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYW50aUJsdXIgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU3BlY2lmeSB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbnRyb2xsZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBjb250cm9sbGVyIENvbnRyb2xsZXIgZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyRWwgRWxlbWVudCB0aGF0IGlzIHRoZSBiYXNpcyBvZiB0aGUgY29udHJvbGxlcidzIHBvc2l0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiBUeXBlIG9mIHBvc2l0aW9uIChcInRvcFwiIHwgXCJib3R0b21cIilcclxuICAgICAgICAgKiBXaGVuIHVzaW5nIHRoZSBcInRvcFwiIHBvc2l0aW9uLCB0aGVyZSBzaG91bGQgbm90IGJlIGFuIGFycm93IG9uIHRoZSBjb250cm9sbGVyLlxyXG4gICAgICAgICAqIFdoZW4gdXNpbmcgdGhlIFwiYm90dG9tXCIgcG9zaXRpb24gdGhlcmUgc2hvdWxkIGJlIGFuIGFycm93IG9uIHRoZSBjb250cm9sbGVyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhZGRPZmZzZXQgVGhlc2UgYXJlIHRoZSBsZWZ0IGFuZCB0b3AgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSBhZGRlZCBzcGVjaWFsbHkuIFxyXG4gICAgICAgICAqIFRoaXMgYXJndW1lbnQgaXMgcmVxdWlyZWQuIC0ge2xlZnQ6IDAsIHRvcDogMH1cclxuICAgICAgICAgKiBQbGVhc2UgZW50ZXIgdGhlIHZhbHVlIGJhc2VkIG9uIGx0ciBtb2RlLlxyXG4gICAgICAgICAqIENhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBpbiBydGwgbW9kZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRDb250cm9sbGVyUG9zaXRpb246IGZ1bmN0aW9uIChjb250cm9sbGVyLCByZWZlckVsLCBwb3NpdGlvbiwgYWRkT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJ0bCkgYWRkT2Zmc2V0LmxlZnQgKj0gLTE7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB1dGlsLmdldE9mZnNldChyZWZlckVsLCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAvLyBIZWlnaHQgdmFsdWUgb2YgdGhlIGFycm93IGVsZW1lbnQgaXMgMTFweFxyXG4gICAgICAgICAgICBjb25zdCB0b3BNYXJnaW4gPSBwb3NpdGlvbiA9PT0gJ3RvcCcgPyAtKGNvbnRyb2xsZXIub2Zmc2V0SGVpZ2h0ICsgMikgOiAocmVmZXJFbC5vZmZzZXRIZWlnaHQgKyAxMik7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUudG9wID0gKG9mZnNldC50b3AgKyB0b3BNYXJnaW4gKyBhZGRPZmZzZXQudG9wKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsID0gb2Zmc2V0LmxlZnQgLSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnNjcm9sbExlZnQgKyBhZGRPZmZzZXQubGVmdDtcclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlclcgPSBjb250cm9sbGVyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCByZWZlckVsVyA9IHJlZmVyRWwub2Zmc2V0V2lkdGg7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbGxvdyA9IHV0aWwuaGFzQ2xhc3MoY29udHJvbGxlci5maXJzdEVsZW1lbnRDaGlsZCwgJ3NlLWFycm93JykgPyBjb250cm9sbGVyLmZpcnN0RWxlbWVudENoaWxkIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vIHJ0bCAoV2lkdGggdmFsdWUgb2YgdGhlIGFycm93IGVsZW1lbnQgaXMgMjJweClcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucnRsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBydGxXID0gKGNvbnRyb2xsZXJXID4gcmVmZXJFbFcpID8gY29udHJvbGxlclcgLSByZWZlckVsVyA6IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBydGxMID0gcnRsVyA+IDAgPyAwIDogcmVmZXJFbFcgLSBjb250cm9sbGVyVztcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUubGVmdCA9IChsIC0gcnRsVyArIHJ0bEwpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocnRsVyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3cpIGFsbG93LnN0eWxlLmxlZnQgPSAoKGNvbnRyb2xsZXJXIC0gMTQgPCAxMCArIHJ0bFcpID8gKGNvbnRyb2xsZXJXIC0gMTQpIDogKDEwICsgcnRsVykpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVyU2l6ZSA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUub2Zmc2V0TGVmdCAtIGNvbnRyb2xsZXIub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgICAgIGlmIChvdmVyU2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnN0eWxlLmxlZnQgPSAnMHB4JztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3cpIGFsbG93LnN0eWxlLmxlZnQgPSBvdmVyU2l6ZSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnN0eWxlLmxlZnQgPSBsICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVyU2l6ZSA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUub2Zmc2V0V2lkdGggLSAoY29udHJvbGxlci5vZmZzZXRMZWZ0ICsgY29udHJvbGxlclcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJTaXplIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUubGVmdCA9IChjb250cm9sbGVyLm9mZnNldExlZnQgKyBvdmVyU2l6ZSkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvdykgYWxsb3cuc3R5bGUubGVmdCA9ICgyMCAtIG92ZXJTaXplKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvdykgYWxsb3cuc3R5bGUubGVmdCA9ICcyMHB4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGphdmFzY3JpcHQgZXhlY0NvbW1hbmRcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tbWFuZCBqYXZhc2NyaXB0IGV4ZWNDb21tYW5kIGZ1bmN0aW9uIHByb3BlcnR5XHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufHVuZGVmaW5lZH0gc2hvd0RlZmF1bHRVSSBqYXZhc2NyaXB0IGV4ZWNDb21tYW5kIGZ1bmN0aW9uIHByb3BlcnR5XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8dW5kZWZpbmVkfSB2YWx1ZSBqYXZhc2NyaXB0IGV4ZWNDb21tYW5kIGZ1bmN0aW9uIHByb3BlcnR5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjb21tYW5kLCBzaG93RGVmYXVsdFVJLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl93ZC5leGVjQ29tbWFuZChjb21tYW5kLCBzaG93RGVmYXVsdFVJLCAoY29tbWFuZCA9PT0gJ2Zvcm1hdEJsb2NrJyA/ICc8JyArIHZhbHVlICsgJz4nIDogdmFsdWUpKTtcclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRm9jdXMgdG8gd3lzaXd5ZyBhcmVhIHVzaW5nIFwibmF0aXZlIGZvY3VzIGZ1bmN0aW9uXCJcclxuICAgICAgICAgKi9cclxuICAgICAgICBuYXRpdmVGb2N1czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZm9jdXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRm9jdXMgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfX2ZvY3VzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcHRpb24gPSB1dGlsLmdldFBhcmVudEVsZW1lbnQodGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCksICdmaWdjYXB0aW9uJyk7XHJcbiAgICAgICAgICAgIGlmIChjYXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEZvY3VzIHRvIHd5c2l3eWcgYXJlYVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZvY3VzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydENvbnRhaW5lciA9PT0gcmFuZ2UuZW5kQ29udGFpbmVyICYmIHV0aWwuaXNXeXNpd3lnRGl2KHJhbmdlLnN0YXJ0Q29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLmNoaWxkcmVuW3JhbmdlLnN0YXJ0T2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzRm9ybWF0RWxlbWVudChjdXJyZW50Tm9kZSkgJiYgIXV0aWwuaXNDb21wb25lbnQoY3VycmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmluc2VydEJlZm9yZShmb3JtYXQsIGN1cnJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoYnIsIDAsIGJyLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCwgcmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNCYWxsb29uKSBldmVudC5fdG9nZ2xlVG9vbGJhckJhbGxvb24oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSWYgXCJmb2N1c0VsXCIgaXMgYSBjb21wb25lbnQsIHRoZW4gdGhhdCBjb21wb25lbnQgaXMgc2VsZWN0ZWQ7IGlmIGl0IGlzIGEgZm9ybWF0IGVsZW1lbnQsIHRoZSBsYXN0IHRleHQgaXMgc2VsZWN0ZWRcclxuICAgICAgICAgKiBJZiBcImZvY3VzRWRnZVwiIGlzIG51bGwsIHRoZW4gc2VsZWN0ZWQgbGFzdCBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGZvY3VzRWwgRm9jdXMgZWxlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZvY3VzRWRnZTogZnVuY3Rpb24gKGZvY3VzRWwpIHtcclxuICAgICAgICAgICAgaWYgKCFmb2N1c0VsKSBmb2N1c0VsID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcubGFzdEVsZW1lbnRDaGlsZDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnRJbmZvID0gdGhpcy5nZXRGaWxlQ29tcG9uZW50KGZvY3VzRWwpO1xyXG4gICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGZpbGVDb21wb25lbnRJbmZvLnRhcmdldCwgZmlsZUNvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9jdXNFbCkge1xyXG4gICAgICAgICAgICAgICAgZm9jdXNFbCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGZvY3VzRWwsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmb2N1c0VsKSB0aGlzLm5hdGl2ZUZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuc2V0UmFuZ2UoZm9jdXNFbCwgZm9jdXNFbC50ZXh0Q29udGVudC5sZW5ndGgsIGZvY3VzRWwsIGZvY3VzRWwudGV4dENvbnRlbnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBGb2N1c291dCB0byB3eXNpd3lnIGFyZWEgKC5ibHVyKCkpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYmx1cjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuYmx1cigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuYmx1cigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCBjdXJyZW50IGVkaXRvcidzIHJhbmdlIG9iamVjdCBhbmQgcmV0dXJuLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gc3RhcnRDb24gVGhlIHN0YXJ0Q29udGFpbmVyIHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydE9mZiBUaGUgc3RhcnRPZmZzZXQgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBlbmRDb24gVGhlIGVuZENvbnRhaW5lciBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kT2ZmIFRoZSBlbmRPZmZzZXQgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gUmFuZ2Ugb2JqZWN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJhbmdlOiBmdW5jdGlvbiAoc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZikge1xyXG4gICAgICAgICAgICBpZiAoIXN0YXJ0Q29uIHx8ICFlbmRDb24pIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0T2ZmID4gc3RhcnRDb24udGV4dENvbnRlbnQubGVuZ3RoKSBzdGFydE9mZiA9IHN0YXJ0Q29uLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGVuZE9mZiA+IGVuZENvbi50ZXh0Q29udGVudC5sZW5ndGgpIGVuZE9mZiA9IGVuZENvbi50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gc3RhcnRDb24uY2hpbGROb2Rlc1tzdGFydE9mZl0gfHwgc3RhcnRDb24uY2hpbGROb2Rlc1tzdGFydE9mZiAtIDFdIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgc3RhcnRPZmYgPSBzdGFydE9mZiA+IDAgPyBzdGFydENvbi5ub2RlVHlwZSA9PT0gMSA/IDEgOiBzdGFydENvbi50ZXh0Q29udGVudCA/IHN0YXJ0Q29uLnRleHRDb250ZW50Lmxlbmd0aCA6IDAgOiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChlbmRDb24pKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRDb24gPSBlbmRDb24uY2hpbGROb2Rlc1tlbmRPZmZdIHx8IGVuZENvbi5jaGlsZE5vZGVzW2VuZE9mZiAtIDFdIHx8IGVuZENvbjtcclxuICAgICAgICAgICAgICAgIGVuZE9mZiA9IGVuZE9mZiA+IDAgPyBlbmRDb24ubm9kZVR5cGUgPT09IDEgPyAxIDogZW5kQ29uLnRleHRDb250ZW50ID8gZW5kQ29uLnRleHRDb250ZW50Lmxlbmd0aCA6IDAgOiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuX3dkLmNyZWF0ZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRDb24sIHN0YXJ0T2ZmKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChlbmRDb24sIGVuZE9mZik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuY29yZS5mb2N1cy5lcnJvcl0gJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy5nZXRTZWxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JhbmdlSW5mbyhyYW5nZSwgdGhpcy5nZXRTZWxlY3Rpb24oKSk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkgdGhpcy5fX2ZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSByYW5nZSBvYmplY3QgYW5kIGJ1dHRvbiBlZmZlY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVSYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fcmFuZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0ZvY3VzKSB0aGlzLmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRLZXlFZmZlY3QoW10pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgY3VycmVudCBlZGl0b3IncyByYW5nZSBvYmplY3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFJhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5fdmFyaWFibGUuX3JhbmdlIHx8IHRoaXMuX2NyZWF0ZURlZmF1bHRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkID09PSBzZWxlY3Rpb24uaXNDb2xsYXBzZWQgfHwgIWNvbnRleHQuZWxlbWVudC53eXNpd3lnLmNvbnRhaW5zKHNlbGVjdGlvbi5mb2N1c05vZGUpKSByZXR1cm4gcmFuZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92YXJpYWJsZS5fcmFuZ2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzYyA9IHNlbGVjdGlvbi5hbmNob3JOb2RlLCBlYyA9IHNlbGVjdGlvbi5mb2N1c05vZGUsIHNvID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldCwgZW8gPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wYXJlVmFsdWUgPSB1dGlsLmNvbXBhcmVFbGVtZW50cyhzYywgZWMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHREaXIgPSBjb21wYXJlVmFsdWUuYW5jZXN0b3IgJiYgKGNvbXBhcmVWYWx1ZS5yZXN1bHQgPT09IDAgPyBzbyA8PSBlbyA6IGNvbXBhcmVWYWx1ZS5yZXN1bHQgPiAxID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0RGlyID8gc2MgOiBlYyxcclxuICAgICAgICAgICAgICAgICAgICByaWdodERpciA/IHNvIDogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHREaXIgPyBlYyA6IHNjLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0RGlyID8gZW8gOiBzb1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJZiB0aGUgXCJyYW5nZVwiIG9iamVjdCBpcyBhIG5vbi1lZGl0YWJsZSBhcmVhLCBhZGQgYSBsaW5lIGF0IHRoZSB0b3Agb2YgdGhlIGVkaXRvciBhbmQgdXBkYXRlIHRoZSBcInJhbmdlXCIgb2JqZWN0LlxyXG4gICAgICAgICAqIFJldHVybnMgYSBuZXcgXCJyYW5nZVwiIG9yIGFyZ3VtZW50IFwicmFuZ2VcIi5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmFuZ2UgY29yZS5nZXRSYW5nZSgpXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGNvbnRhaW5lciBJZiB0aGVyZSBpcyBcImNvbnRhaW5lclwiIGFyZ3VtZW50LCBpdCBjcmVhdGVzIGEgbGluZSBpbiBmcm9udCBvZiB0aGUgY29udGFpbmVyLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHJhbmdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0UmFuZ2VfYWRkTGluZTogZnVuY3Rpb24gKHJhbmdlLCBjb250YWluZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGlvblZvaWQocmFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcCA9IHV0aWwuY3JlYXRlRWxlbWVudChvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgb3AuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgd3lzaXd5Zy5pbnNlcnRCZWZvcmUob3AsIGNvbnRhaW5lciAmJiBjb250YWluZXIgIT09IHd5c2l3eWcgPyBjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nIDogd3lzaXd5Zy5maXJzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9wLmZpcnN0RWxlbWVudENoaWxkLCAwLCBvcC5maXJzdEVsZW1lbnRDaGlsZCwgMSk7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuX3ZhcmlhYmxlLl9yYW5nZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCB3aW5kb3cgc2VsZWN0aW9uIG9iZWpjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0U2VsZWN0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuX3NoYWRvd1Jvb3QgJiYgdGhpcy5fc2hhZG93Um9vdC5nZXRTZWxlY3Rpb24gPyB0aGlzLl9zaGFkb3dSb290LmdldFNlbGVjdGlvbigpIDogdGhpcy5fd3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fdmFyaWFibGUuX3JhbmdlICYmICFjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5jb250YWlucyhzZWxlY3Rpb24uZm9jdXNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHRoaXMuX2NyZWF0ZURlZmF1bHRSYW5nZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgY3VycmVudCBzZWxlY3Qgbm9kZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtOb2RlfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFNlbGVjdGlvbk5vZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5jb250YWlucyh0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSkpIHRoaXMuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fdmFyaWFibGUuX3NlbGVjdGlvbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbk5vZGUgPSB1dGlsLmdldENoaWxkRWxlbWVudChjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5maXJzdENoaWxkLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCB8fCBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSA9IHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhcmlhYmxlLl9zZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTYXZpbmcgdGhlIHJhbmdlIG9iamVjdCBhbmQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBub2RlIG9mIGVkaXRvclxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2VkaXRvclJhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsID0gdGhpcy5fd2QuYWN0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNJbnB1dEVsZW1lbnQoYWN0aXZlRWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSA9IGFjdGl2ZUVsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUVsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGVjdGlvbikgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGxldCByYW5nZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLl9jcmVhdGVEZWZhdWx0UmFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmFuZ2VJbmZvKHJhbmdlLCBzZWxlY3Rpb24pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgXCJyYW5nZVwiIGFuZCBcInNlbGVjdGlvblwiIGluZm8uXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHJhbmdlIHJhbmdlIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VsZWN0aW9uIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3JhbmdlSW5mbzogZnVuY3Rpb24gKHJhbmdlLCBzZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGlvbk5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fcmFuZ2UgPSByYW5nZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHNlbGVjdGlvbk5vZGUgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5jaGlsZHJlbltyYW5nZS5zdGFydE9mZnNldF0gfHwgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHNlbGVjdGlvbk5vZGUgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb24uZXh0ZW50Tm9kZSB8fCBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX3NlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm4gdGhlIHJhbmdlIG9iamVjdCBvZiBlZGl0b3IncyBmaXJzdCBjaGlsZCBub2RlXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jcmVhdGVEZWZhdWx0UmFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3Qgd3lzaXd5ZyA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuX3dkLmNyZWF0ZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgZmlyc3RGb3JtYXQgPSB3eXNpd3lnLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICBsZXQgZm9jdXNFbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghZmlyc3RGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGZpcnN0Rm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICBmb2N1c0VsID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgZmlyc3RGb3JtYXQuYXBwZW5kQ2hpbGQoZm9jdXNFbCk7XHJcbiAgICAgICAgICAgICAgICB3eXNpd3lnLmFwcGVuZENoaWxkKGZpcnN0Rm9ybWF0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvY3VzRWwgPSBmaXJzdEZvcm1hdC5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmb2N1c0VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNFbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdEZvcm1hdC5hcHBlbmRDaGlsZChmb2N1c0VsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoZm9jdXNFbCwgMCk7XHJcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZChmb2N1c0VsLCAwKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIG5vIHZhbGlkIFwic2VsZWN0aW9uXCIuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHJhbmdlIGNvcmUuZ2V0UmFuZ2UoKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHJhbmdlXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2VsZWN0aW9uVm9pZDogZnVuY3Rpb24gKHJhbmdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW0gPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgcmV0dXJuICh1dGlsLmlzV3lzaXd5Z0RpdihyYW5nZS5zdGFydENvbnRhaW5lcikgJiYgdXRpbC5pc1d5c2l3eWdEaXYocmFuZ2UuZW5kQ29udGFpbmVyKSkgfHwgL0ZJR1VSRS9pLnRlc3QoY29tbS5ub2RlTmFtZSkgfHwgdGhpcy5fZmlsZU1hbmFnZXIucmVnRXhwLnRlc3QoY29tbS5ub2RlTmFtZSkgfHwgdXRpbC5pc01lZGlhQ29tcG9uZW50KGNvbW0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCByYW5nZSBvYmplY3QgdG8gdGV4dCBub2RlIHNlbGVjdGVkIHN0YXR1cy5cclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBmYWxzZSBpZiB0aGVyZSBpcyBubyB2YWxpZCBzZWxlY3Rpb24uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVzZXRSYW5nZVRvVGV4dE5vZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25Wb2lkKHJhbmdlKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgdGVtcENvbiwgdGVtcE9mZnNldCwgdGVtcENoaWxkO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KHN0YXJ0Q29uKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdGFydENvbi5jaGlsZE5vZGVzW3N0YXJ0T2ZmXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gc3RhcnRDb24ubGFzdENoaWxkIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZmID0gc3RhcnRDb24udGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydENvbiA9IHN0YXJ0Q29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZmID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHdoaWxlIChzdGFydENvbiAmJiBzdGFydENvbi5ub2RlVHlwZSA9PT0gMSAmJiBzdGFydENvbi5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb24gPSBzdGFydENvbi5maXJzdENoaWxkIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZmID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoZW5kQ29uKSkge1xyXG4gICAgICAgICAgICAgICAgZW5kQ29uID0gZW5kQ29uLmNoaWxkTm9kZXNbZW5kT2ZmXSB8fCBlbmRDb24ubGFzdENoaWxkIHx8IGVuZENvbjtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChlbmRDb24gJiYgZW5kQ29uLm5vZGVUeXBlID09PSAxICYmIGVuZENvbi5sYXN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb24gPSBlbmRDb24ubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZW5kT2ZmID0gZW5kQ29uLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc3RhcnRDb250YWluZXJcclxuICAgICAgICAgICAgdGVtcENvbiA9IHV0aWwuaXNXeXNpd3lnRGl2KHN0YXJ0Q29uKSA/IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmZpcnN0Q2hpbGQgOiBzdGFydENvbjtcclxuICAgICAgICAgICAgdGVtcE9mZnNldCA9IHN0YXJ0T2ZmO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayh0ZW1wQ29uKSB8fCAodGVtcENvbi5ub2RlVHlwZSA9PT0gMSAmJiB0ZW1wQ29uLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlCcmVhayA9IHV0aWwuaXNCcmVhayh0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgIGlmICghb25seUJyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRlbXBDb24gJiYgIXV0aWwuaXNCcmVhayh0ZW1wQ29uKSAmJiB0ZW1wQ29uLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb24gPSB0ZW1wQ29uLmNoaWxkTm9kZXNbdGVtcE9mZnNldF0gfHwgdGVtcENvbi5uZXh0RWxlbWVudFNpYmxpbmcgfHwgdGVtcENvbi5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRlbXBDb24sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdCwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0ZW1wQ29uLCB1dGlsLmlzQ2VsbCkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZm9ybWF0LCB0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHRlbXBDb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1wdHlUZXh0ID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVtcHR5VGV4dCwgdGVtcENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcENvbiA9IGVtcHR5VGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob25seUJyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbiA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRDb24gPSB0ZW1wQ29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kT2ZmID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHN0YXJ0Q29udGFpbmVyXHJcbiAgICAgICAgICAgIHN0YXJ0Q29uID0gdGVtcENvbjtcclxuICAgICAgICAgICAgc3RhcnRPZmYgPSB0ZW1wT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgIHRlbXBDb24gPSB1dGlsLmlzV3lzaXd5Z0RpdihlbmRDb24pID8gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcubGFzdENoaWxkIDogZW5kQ29uO1xyXG4gICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gZW5kT2ZmO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayh0ZW1wQ29uKSB8fCAodGVtcENvbi5ub2RlVHlwZSA9PT0gMSAmJiB0ZW1wQ29uLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlCcmVhayA9IHV0aWwuaXNCcmVhayh0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgIGlmICghb25seUJyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRlbXBDb24gJiYgIXV0aWwuaXNCcmVhayh0ZW1wQ29uKSAmJiB0ZW1wQ29uLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDaGlsZCA9IHRlbXBDb24uY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBDaGlsZC5sZW5ndGggPT09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uID0gdGVtcENoaWxkW3RlbXBPZmZzZXQgPiAwID8gdGVtcE9mZnNldCAtIDEgOiB0ZW1wT2Zmc2V0XSB8fCAhL0ZJR1VSRS9pLnRlc3QodGVtcENoaWxkWzBdLm5vZGVOYW1lKSA/IHRlbXBDaGlsZFswXSA6ICh0ZW1wQ29uLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgdGVtcENvbi5wcmV2aW91c1NpYmxpbmcgfHwgc3RhcnRDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gdGVtcE9mZnNldCA+IDAgPyB0ZW1wQ29uLnRleHRDb250ZW50Lmxlbmd0aCA6IHRlbXBPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRlbXBDb24sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdCwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KHV0aWwuaXNDZWxsKGZvcm1hdCkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZm9ybWF0LCB0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHRlbXBDb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1wdHlUZXh0ID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVtcHR5VGV4dCwgdGVtcENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcENvbiA9IGVtcHR5VGV4dDtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob25seUJyZWFrICYmICF0ZW1wQ29uLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZW5kQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBlbmRDb250YWluZXJcclxuICAgICAgICAgICAgZW5kQ29uID0gdGVtcENvbjtcclxuICAgICAgICAgICAgZW5kT2ZmID0gdGVtcE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBSYW5nZVxyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKHN0YXJ0Q29uLCBzdGFydE9mZiwgZW5kQ29uLCBlbmRPZmYpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBhIFwiZm9ybWF0RWxlbWVudFwiKHV0aWwuaXNGb3JtYXRFbGVtZW50KSBhcnJheSBmcm9tIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmFuZ2UuXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uLiAoUmVwbGFjZXMgdGhlIGRlZmF1bHQgdmFsaWRhdGlvbiBmdW5jdGlvbi11dGlsLmlzRm9ybWF0RWxlbWVudChjdXJyZW50KSlcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0U2VsZWN0ZWRFbGVtZW50czogZnVuY3Rpb24gKHZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9yZXNldFJhbmdlVG9UZXh0Tm9kZSgpKSByZXR1cm4gW107XHJcbiAgICAgICAgICAgIGxldCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihyYW5nZS5zdGFydENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSByZXR1cm4gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGNoaWxkcmVuWzBdLCAwLCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dENvbnRlbnQudHJpbSgpLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRDb24gPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3QgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBjb21tb25Db24gPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIC8vIGdldCBsaW5lIG5vZGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVOb2RlcyA9IHV0aWwuZ2V0TGlzdENoaWxkcmVuKGNvbW1vbkNvbiwgZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0aW9uID8gdmFsaWRhdGlvbihjdXJyZW50KSA6IHV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1d5c2l3eWdEaXYoY29tbW9uQ29uKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24pKSBsaW5lTm9kZXMudW5zaGlmdCh1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29tbW9uQ29uLCBudWxsKSk7XHJcbiAgICAgICAgICAgIGlmIChzdGFydENvbiA9PT0gZW5kQ29uIHx8IGxpbmVOb2Rlcy5sZW5ndGggPT09IDEpIHJldHVybiBsaW5lTm9kZXM7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnRMaW5lID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHN0YXJ0Q29uLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IGVuZExpbmUgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoZW5kQ29uLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0SWR4ID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IGVuZElkeCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvbmx5VGFibGUgPSBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNUYWJsZShjdXJyZW50KSA/IC9eVEFCTEUkL2kudGVzdChjdXJyZW50Lm5vZGVOYW1lKSA6IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnRSYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoc3RhcnRMaW5lLCBvbmx5VGFibGUpO1xyXG4gICAgICAgICAgICBsZXQgZW5kUmFuZ2VFbCA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGVuZExpbmUsIG9ubHlUYWJsZSk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVGFibGUoc3RhcnRSYW5nZUVsKSAmJiB1dGlsLmlzTGlzdENlbGwoc3RhcnRSYW5nZUVsLnBhcmVudE5vZGUpKSBzdGFydFJhbmdlRWwgPSBzdGFydFJhbmdlRWwucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNUYWJsZShlbmRSYW5nZUVsKSAmJiB1dGlsLmlzTGlzdENlbGwoZW5kUmFuZ2VFbC5wYXJlbnROb2RlKSkgZW5kUmFuZ2VFbCA9IGVuZFJhbmdlRWwucGFyZW50Tm9kZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNhbWVSYW5nZSA9IHN0YXJ0UmFuZ2VFbCA9PT0gZW5kUmFuZ2VFbDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmVOb2Rlcy5sZW5ndGgsIGxpbmU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IGxpbmVOb2Rlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRMaW5lID09PSBsaW5lIHx8ICghc2FtZVJhbmdlICYmIGxpbmUgPT09IHN0YXJ0UmFuZ2VFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydElkeCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVuZExpbmUgPT09IGxpbmUgfHwgKCFzYW1lUmFuZ2UgJiYgbGluZSA9PT0gZW5kUmFuZ2VFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRJZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhcnRJZHggPT09IG51bGwpIHN0YXJ0SWR4ID0gMDtcclxuICAgICAgICAgICAgaWYgKGVuZElkeCA9PT0gbnVsbCkgZW5kSWR4ID0gbGluZU5vZGVzLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbGluZU5vZGVzLnNsaWNlKHN0YXJ0SWR4LCBlbmRJZHggKyAxKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IGZvcm1hdCBlbGVtZW50cyBhbmQgY29tcG9uZW50cyBmcm9tIHRoZSBzZWxlY3RlZCBhcmVhLiAoUCwgRElWLCBIWzEtNl0sIE9MLCBVTCwgVEFCTEUuLilcclxuICAgICAgICAgKiBJZiBzb21lIG9mIHRoZSBjb21wb25lbnQgYXJlIGluY2x1ZGVkIGluIHRoZSBzZWxlY3Rpb24sIGdldCB0aGUgZW50aXJlIHRoYXQgY29tcG9uZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlRHVwbGljYXRlIElmIHRydWUsIGlmIHRoZXJlIGlzIGEgcGFyZW50IGFuZCBjaGlsZCB0YWcgYW1vbmcgdGhlIHNlbGVjdGVkIGVsZW1lbnRzLCB0aGUgY2hpbGQgdGFnIGlzIGV4Y2x1ZGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRTZWxlY3RlZEVsZW1lbnRzQW5kQ29tcG9uZW50czogZnVuY3Rpb24gKHJlbW92ZUR1cGxpY2F0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb21tb25Db24gPSB0aGlzLmdldFJhbmdlKCkuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IG15Q29tcG9uZW50ID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGNvbW1vbkNvbiwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkTGluZXMgPSB1dGlsLmlzVGFibGUoY29tbW9uQ29uKSA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMobnVsbCkgOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRQYXJlbnRFbGVtZW50KGN1cnJlbnQsIHRoaXMuaXNDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudCkgJiYgKCFjb21wb25lbnQgfHwgY29tcG9uZW50ID09PSBteUNvbXBvbmVudCkpIHx8ICh0aGlzLmlzQ29tcG9uZW50KGN1cnJlbnQpICYmICF0aGlzLmdldEZvcm1hdEVsZW1lbnQoY3VycmVudCkpO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHV0aWwpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZW1vdmVEdXBsaWNhdGUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgLSAxOyBqID49IDA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRMaW5lc1tqXS5jb250YWlucyhzZWxlY3RlZExpbmVzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRMaW5lcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLS07IGxlbi0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZExpbmVzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmUgaWYgdGhpcyBvZmZzZXQgaXMgdGhlIGVkZ2Ugb2Zmc2V0IG9mIGNvbnRhaW5lclxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gY29udGFpbmVyIFRoZSBub2RlIG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LiAocmFuZ2Uuc3RhcnRDb250YWluZXIuLilcclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuIChjb3JlLmdldFJhbmdlKCkuc3RhcnRPZmZzZXQuLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8dW5kZWZpbmVkfSBkaXIgU2VsZWN0IGNoZWNrIHBvaW50IC0gQm90aCBlZGdlLCBGcm9udCBlZGdlIG9yIEVuZCBlZGdlLiAoXCJmcm9udFwiOiBGcm9udCBlZGdlLCBcImVuZFwiOiBFbmQgZWRnZSwgdW5kZWZpbmVkOiBCb3RoIGVkZ2UpXHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNFZGdlUG9pbnQ6IGZ1bmN0aW9uIChjb250YWluZXIsIG9mZnNldCwgZGlyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZGlyICE9PSAnZW5kJyAmJiBvZmZzZXQgPT09IDApIHx8ICgoIWRpciB8fCBkaXIgIT09ICdmcm9udCcpICYmICFjb250YWluZXIubm9kZVZhbHVlICYmIG9mZnNldCA9PT0gMSkgfHwgKCghZGlyIHx8IGRpciA9PT0gJ2VuZCcpICYmICEhY29udGFpbmVyLm5vZGVWYWx1ZSAmJiBvZmZzZXQgPT09IGNvbnRhaW5lci5ub2RlVmFsdWUubGVuZ3RoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBhbmQgb2Zmc2V0IHZhbHVlcyBhcmUgdGhlIGVkZ2VzIG9mIHRoZSBmb3JtYXQgdGFnXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBjb250YWluZXIgVGhlIG5vZGUgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuIChyYW5nZS5zdGFydENvbnRhaW5lci4uKVxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC4gKGNvcmUuZ2V0UmFuZ2UoKS5zdGFydE9mZnNldC4uLilcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyIFNlbGVjdCBjaGVjayBwb2ludCAtIFwiZnJvbnRcIjogRnJvbnQgZWRnZSwgXCJlbmRcIjogRW5kIGVkZ2UsIHVuZGVmaW5lZDogQm90aCBlZGdlLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheXxudWxsfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lzRWRnZUZvcm1hdDogZnVuY3Rpb24gKG5vZGUsIG9mZnNldCwgZGlyKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0VkZ2VQb2ludChub2RlLCBvZmZzZXQsIGRpcikpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBkaXIgPSBkaXIgPT09ICdmcm9udCcgPyAncHJldmlvdXNTaWJsaW5nJyA6ICduZXh0U2libGluZyc7XHJcbiAgICAgICAgICAgIHdoaWxlIChub2RlICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChub2RlKSAmJiAhdXRpbC5pc1d5c2l3eWdEaXYobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbm9kZVtkaXJdIHx8ICh1dGlsLmlzQnJlYWsobm9kZVtkaXJdKSAmJiAhbm9kZVtkaXJdW2Rpcl0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHJlc3VsdC5wdXNoKG5vZGUuY2xvbmVOb2RlKGZhbHNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgbG9hZGluZyBib3hcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93TG9hZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xvc2UgbG9hZGluZyBib3hcclxuICAgICAgICAgKi9cclxuICAgICAgICBjbG9zZUxvYWRpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxvYWRpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXBwZW5kIGZvcm1hdCBlbGVtZW50IHRvIHNpYmxpbmcgbm9kZSBvZiBhcmd1bWVudCBlbGVtZW50LlxyXG4gICAgICAgICAqIElmIHRoZSBcImZvcm1hdE5vZGVOYW1lXCIgYXJndW1lbnQgdmFsdWUgaXMgcHJlc2VudCwgdGhlIHRhZyBvZiB0aGF0IGFyZ3VtZW50IHZhbHVlIGlzIGluc2VydGVkLFxyXG4gICAgICAgICAqIElmIG5vdCwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBmb3JtYXQgdGFnIGlzIGluc2VydGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBJbnNlcnQgYXMgc2libGluZ3Mgb2YgdGhhdCBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudHxudWxsfSBmb3JtYXROb2RlIE5vZGUgbmFtZSBvciBub2RlIG9iZWpjdCB0byBiZSBpbnNlcnRlZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtFbGVtZW50fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFwcGVuZEZvcm1hdFRhZzogZnVuY3Rpb24gKGVsZW1lbnQsIGZvcm1hdE5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudE5vZGUpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IG9Gb3JtYXQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KGVsZW1lbnQpICYmIHV0aWwuaXNGcmVlRm9ybWF0RWxlbWVudChjdXJyZW50Rm9ybWF0RWwgfHwgZWxlbWVudC5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgb0Zvcm1hdCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9Gb3JtYXROYW1lID0gZm9ybWF0Tm9kZSA/ICh0eXBlb2YgZm9ybWF0Tm9kZSA9PT0gJ3N0cmluZycgPyBmb3JtYXROb2RlIDogZm9ybWF0Tm9kZS5ub2RlTmFtZSkgOiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudEZvcm1hdEVsKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50Rm9ybWF0RWwpICYmICF1dGlsLmlzRnJlZUZvcm1hdEVsZW1lbnQoY3VycmVudEZvcm1hdEVsKSkgPyBjdXJyZW50Rm9ybWF0RWwubm9kZU5hbWUgOiBvcHRpb25zLmRlZmF1bHRUYWc7XHJcbiAgICAgICAgICAgICAgICBvRm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9Gb3JtYXROYW1lKTtcclxuICAgICAgICAgICAgICAgIG9Gb3JtYXQuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgaWYgKChmb3JtYXROb2RlICYmIHR5cGVvZiBmb3JtYXROb2RlICE9PSAnc3RyaW5nJykgfHwgKCFmb3JtYXROb2RlICYmIHV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnRGb3JtYXRFbCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhvRm9ybWF0LCBmb3JtYXROb2RlIHx8IGN1cnJlbnRGb3JtYXRFbCwgWydpZCddKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNDZWxsKGVsZW1lbnQpKSBlbGVtZW50Lmluc2VydEJlZm9yZShvRm9ybWF0LCBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgIGVsc2UgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvRm9ybWF0LCBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gb0Zvcm1hdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIG1ldGhvZCB0byBpbnNlcnQgYSBlbGVtZW50IGFuZCByZXR1cm4uICh1c2VkIGVsZW1lbnRzIDogdGFibGUsIGhyLCBpbWFnZSwgdmlkZW8pXHJcbiAgICAgICAgICogSWYgXCJlbGVtZW50XCIgaXMgXCJIUlwiLCBpbnNlcnQgYW5kIHJldHVybiB0aGUgbmV3IGxpbmUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gYmUgaW5zZXJ0ZWRcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG5vdEhpc3RvcnlQdXNoIFdoZW4gdHJ1ZSwgaXQgZG9lcyBub3QgdXBkYXRlIHRoZSBoaXN0b3J5IHN0YWNrIGFuZCB0aGUgc2VsZWN0aW9uIG9iamVjdCBhbmQgcmV0dXJuIEVkZ2VOb2RlcyAodXRpbC5nZXRFZGdlQ2hpbGROb2RlcylcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrQ2hhckNvdW50IElmIHRydWUsIGlmIFwib3B0aW9ucy5tYXhDaGFyQ291bnRcIiBpcyBleGNlZWRlZCB3aGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBudWxsIGlzIHJldHVybmVkIHdpdGhvdXQgYWRkaXRpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBub3RTZWxlY3QgSWYgdHJ1ZSwgRG8gbm90IGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBpbnNlcnRlZCBjb21wb25lbnQuXHJcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0Q29tcG9uZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgbm90SGlzdG9yeVB1c2gsIGNoZWNrQ2hhckNvdW50LCBub3RTZWxlY3QpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWFkT25seSB8fCAoY2hlY2tDaGFyQ291bnQgJiYgIXRoaXMuY2hlY2tDaGFyQ291bnQoZWxlbWVudCwgbnVsbCkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgciA9IHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmdldFJhbmdlX2FkZExpbmUodGhpcy5nZXRSYW5nZSgpLCByLmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIGxldCBvTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gdGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcbiAgICAgICAgICAgIGxldCBmb3JtYXRFbCA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZm9ybWF0RWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydE5vZGUoZWxlbWVudCwgc2VsZWN0aW9uTm9kZSA9PT0gZm9ybWF0RWwgPyBudWxsIDogci5jb250YWluZXIubmV4dFNpYmxpbmcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5uZXh0U2libGluZykgZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRSYW5nZSgpLmNvbGxhcHNlZCAmJiAoci5jb250YWluZXIubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKHIuY29udGFpbmVyKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXB0aEZvcm1hdCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChyLmNvbnRhaW5lciwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMuaXNSYW5nZUZvcm1hdEVsZW1lbnQoY3VycmVudCk7IH0uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUgPSB1dGlsLnNwbGl0RWxlbWVudChyLmNvbnRhaW5lciwgci5vZmZzZXQsICFkZXB0aEZvcm1hdCA/IDAgOiB1dGlsLmdldEVsZW1lbnREZXB0aChkZXB0aEZvcm1hdCkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob05vZGUpIGZvcm1hdEVsID0gb05vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnROb2RlKGVsZW1lbnQsIHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwpID8gbnVsbCA6IGZvcm1hdEVsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RWwgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoZm9ybWF0RWwpKSB1dGlsLnJlbW92ZUl0ZW0oZm9ybWF0RWwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW5vdFNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShlbGVtZW50LCAwLCBlbGVtZW50LCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29tcG9uZW50SW5mbyA9IHRoaXMuZ2V0RmlsZUNvbXBvbmVudChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGZpbGVDb21wb25lbnRJbmZvLnRhcmdldCwgZmlsZUNvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9Ob2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUgPSB1dGlsLmdldEVkZ2VDaGlsZE5vZGVzKG9Ob2RlLCBudWxsKS5zYyB8fCBvTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9Ob2RlLCAwLCBvTm9kZSwgMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgaWYgKCFub3RIaXN0b3J5UHVzaCkgdGhpcy5oaXN0b3J5LnB1c2goMSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gb05vZGUgfHwgZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgZmlsZSBjb21wb25lbnQgYW5kIHRoYXQgcGx1Z2luIG5hbWVcclxuICAgICAgICAgKiByZXR1cm46IHt0YXJnZXQsIGNvbXBvbmVudCwgcGx1Z2luTmFtZX0gfCBudWxsXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRhcmdldCBlbGVtZW50IChmaWd1cmUgdGFnLCBjb21wb25lbnQgZGl2LCBmaWxlIHRhZylcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RmlsZUNvbXBvbmVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9maWxlTWFuYWdlci5xdWVyeVN0cmluZyB8fCAhZWxlbWVudCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0LCBwbHVnaW5OYW1lO1xyXG4gICAgICAgICAgICBpZiAoL15GSUdVUkUkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSB8fCAvc2UtY29tcG9uZW50Ly50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2ZpbGVNYW5hZ2VyLnF1ZXJ5U3RyaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRhcmdldCAmJiBlbGVtZW50Lm5vZGVOYW1lICYmIHRoaXMuX2ZpbGVNYW5hZ2VyLnJlZ0V4cC50ZXN0KGVsZW1lbnQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW5OYW1lID0gdGhpcy5fZmlsZU1hbmFnZXIucGx1Z2luTWFwW3RhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5OYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdXRpbC5nZXRQYXJlbnRFbGVtZW50KHRhcmdldCwgdXRpbC5pc0NvbXBvbmVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbk5hbWU6IHBsdWdpbk5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIGNvbXBvbmVudChpbWFnZSwgdmlkZW8pIGlzIHNlbGVjdGVkIGFuZCB0aGUgcmVzaXppbmcgbW9kdWxlIGlzIGNhbGxlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0YWcgKGltZywgaWZyYW1lLCB2aWRlbylcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBQbHVnaW4gbmFtZSAoaW1hZ2UsIHZpZGVvKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGVjdENvbXBvbmVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHBsdWdpbk5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmVkaXRhYmxlQ29tcG9uZW50KHV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB1dGlsLmlzQ29tcG9uZW50KSkgfHwgdXRpbC5pc1VuZWRpdGFibGVDb21wb25lbnQoZWxlbWVudCkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0ZvY3VzKSB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbiA9IHRoaXMucGx1Z2luc1twbHVnaW5OYW1lXTtcclxuICAgICAgICAgICAgaWYgKCFwbHVnaW4pIHJldHVybjtcclxuICAgICAgICAgICAgX3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbi5zZWxlY3QgPT09ICdmdW5jdGlvbicpIHRoaXMuY2FsbFBsdWdpbihwbHVnaW5OYW1lLCBwbHVnaW4uc2VsZWN0LmJpbmQodGhpcywgZWxlbWVudCksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tcG9uZW50TGluZUJyZWFrZXIoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCBsaW5lIGJyZWFrZXIgb2YgY29tcG9uZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGFnIChpbWcsIGlmcmFtZSwgdmlkZW8pXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2V0Q29tcG9uZW50TGluZUJyZWFrZXI6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIC8vIGxpbmUgYnJlYWtlclxyXG4gICAgICAgICAgICB0aGlzLl9saW5lQnJlYWtlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRfc3R5bGUgPSBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfdC5zdHlsZTtcclxuICAgICAgICAgICAgY29uc3QgYl9zdHlsZSA9IGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcl9iLnN0eWxlO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmNvbnRleHQucmVzaXppbmcucmVzaXplQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPT09ICdibG9jaycgPyB0aGlzLmNvbnRleHQucmVzaXppbmcucmVzaXplQ29udGFpbmVyIDogZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGlzdCA9IHV0aWwuaXNMaXN0Q2VsbChjb250YWluZXIucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgIGxldCBjb21wb25lbnRUb3AsIHdTY3JvbGwsIHc7XHJcbiAgICAgICAgICAgIC8vIHRvcFxyXG4gICAgICAgICAgICBpZiAoaXNMaXN0ID8gIWNvbnRhaW5lci5wcmV2aW91c1NpYmxpbmcgOiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fbGluZUJyZWFrQ29tcCA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIHdTY3JvbGwgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRUb3AgPSB1dGlsLmdldE9mZnNldChlbGVtZW50LCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKS50b3AgKyB3U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgdyA9ICh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgdF9zdHlsZS50b3AgPSAoY29tcG9uZW50VG9wIC0gd1Njcm9sbCAtIDEyKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB0X3N0eWxlLmxlZnQgPSAodXRpbC5nZXRPZmZzZXQodGFyZ2V0KS5sZWZ0ICsgdykgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgdF9zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRfc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBib3R0b21cclxuICAgICAgICAgICAgaWYgKGlzTGlzdCA/ICFjb250YWluZXIubmV4dFNpYmxpbmcgOiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29udGFpbmVyLm5leHRFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50VG9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2xpbmVCcmVha0NvbXAgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgd1Njcm9sbCA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRUb3AgPSB1dGlsLmdldE9mZnNldChlbGVtZW50LCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKS50b3AgKyB3U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgICAgIHcgPSAodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMikgLyAyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJfc3R5bGUudG9wID0gKGNvbXBvbmVudFRvcCArIHRhcmdldC5vZmZzZXRIZWlnaHQgLSB3U2Nyb2xsIC0gMTIpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGJfc3R5bGUubGVmdCA9ICh1dGlsLmdldE9mZnNldCh0YXJnZXQpLmxlZnQgKyB0YXJnZXQub2Zmc2V0V2lkdGggLSB3IC0gMjQpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGJfc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiX3N0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY2hlY2tEdXBsaWNhdGVOb2RlOiBmdW5jdGlvbiAob05vZGUsIHBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fZHVwbGVDaGVjayhjdXJyZW50LCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBjdXJyZW50LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGROb2Rlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKG9Ob2RlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZHVwbGVDaGVjazogZnVuY3Rpb24gKG9Ob2RlLCBwYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1RleHRTdHlsZUVsZW1lbnQob05vZGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvU3R5bGVzID0gKG9Ob2RlLnN0eWxlLmNzc1RleHQubWF0Y2goL1teO10rOy9nKSB8fCBbXSkubWFwKGZ1bmN0aW9uKHYpeyByZXR1cm4gdi50cmltKCk7IH0pO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IG9Ob2RlLm5vZGVOYW1lO1xyXG4gICAgICAgICAgICBpZiAoL15zcGFuJC9pLnRlc3Qobm9kZU5hbWUpICYmIG9TdHlsZXMubGVuZ3RoID09PSAwKSByZXR1cm4gb05vZGU7XHJcblxyXG4gICAgICAgICAgICBsZXQgZHVwbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihhbmNlc3RvcikgfHwgIXV0aWwuaXNUZXh0U3R5bGVFbGVtZW50KGFuY2VzdG9yKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2VzdG9yLm5vZGVOYW1lID09PSBub2RlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR1cGxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSBhbmNlc3Rvci5zdHlsZS5jc3NUZXh0Lm1hdGNoKC9bXjtdKzsvZykgfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGgsIGo7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGogPSBvU3R5bGVzLmluZGV4T2Yoc3R5bGVzW2ldLnRyaW0oKSkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9TdHlsZXMuc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhbmNlc3Rvci5jbGFzc0xpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUuY2xhc3NMaXN0LnJlbW92ZShhbmNlc3Rvci5jbGFzc0xpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGFuY2VzdG9yLnBhcmVudEVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KShwYXJlbnROb2RlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkdXBsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEob05vZGUuc3R5bGUuY3NzVGV4dCA9IG9TdHlsZXMuam9pbignICcpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9Ob2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFvTm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9Ob2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zZS1kdXBsZScsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBvTm9kZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIHNlbGVjdGVkIG5vZGUgYW5kIGluc2VydCBhcmd1bWVudCB2YWx1ZSBub2RlIGFuZCByZXR1cm4uXHJcbiAgICAgICAgICogSWYgdGhlIFwiYWZ0ZXJOb2RlXCIgZXhpc3RzLCBpdCBpcyBpbnNlcnRlZCBhZnRlciB0aGUgXCJhZnRlck5vZGVcIlxyXG4gICAgICAgICAqIEluc2VydGluZyBhIHRleHQgbm9kZSBtZXJnZXMgd2l0aCBib3RoIHRleHQgbm9kZXMgb24gYm90aCBzaWRlcyBhbmQgcmV0dXJucyBhIG5ldyBcInsgY29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0IH1cIi5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IG9Ob2RlIEVsZW1lbnQgdG8gYmUgaW5zZXJ0ZWRcclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV8bnVsbH0gYWZ0ZXJOb2RlIElmIHRoZSBub2RlIGV4aXN0cywgaXQgaXMgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIG5vZGVcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrQ2hhckNvdW50IElmIHRydWUsIGlmIFwib3B0aW9ucy5tYXhDaGFyQ291bnRcIiBpcyBleGNlZWRlZCB3aGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBudWxsIGlzIHJldHVybmVkIHdpdGhvdXQgYWRkaXRpb24uXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdHxOb2RlfG51bGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0Tm9kZTogZnVuY3Rpb24gKG9Ob2RlLCBhZnRlck5vZGUsIGNoZWNrQ2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmVhZE9ubHkgfHwgKGNoZWNrQ2hhckNvdW50ICYmICF0aGlzLmNoZWNrQ2hhckNvdW50KG9Ob2RlLCBudWxsKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGxldCBsaW5lID0gdXRpbC5pc0xpc3RDZWxsKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSA/IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIDogdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IGluc2VydExpc3RDZWxsID0gdXRpbC5pc0xpc3RDZWxsKGxpbmUpICYmICh1dGlsLmlzTGlzdENlbGwob05vZGUpIHx8IHV0aWwuaXNMaXN0KG9Ob2RlKSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50Tm9kZSwgb3JpZ2luQWZ0ZXIsIHRlbXBBZnRlck5vZGUsIHRlbXBQYXJlbnROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgZnJlZUZvcm1hdCA9IHV0aWwuaXNGcmVlRm9ybWF0RWxlbWVudChsaW5lKTtcclxuICAgICAgICAgICAgY29uc3QgaXNGb3JtYXRzID0gKCFmcmVlRm9ybWF0ICYmICh1dGlsLmlzRm9ybWF0RWxlbWVudChvTm9kZSkgfHwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChvTm9kZSkpKSB8fCB1dGlsLmlzQ29tcG9uZW50KG9Ob2RlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnNlcnRMaXN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IGFmdGVyTm9kZSB8fCB1dGlsLmlzTGlzdChvTm9kZSkgPyBsaW5lLmxhc3RDaGlsZCA6IGxpbmUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgdGVtcFBhcmVudE5vZGUgPSB1dGlsLmlzTGlzdChvTm9kZSkgPyBsaW5lIDogKHRlbXBBZnRlck5vZGUgfHwgbGluZSkucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFhZnRlck5vZGUgJiYgKGlzRm9ybWF0cyB8fCB1dGlsLmlzQ29tcG9uZW50KG9Ob2RlKSB8fCB1dGlsLmlzTWVkaWEob05vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNFZGdlID0gdGhpcy5pc0VkZ2VQb2ludChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gci5jb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q29udGFpbmVyID0gKGNvbnRhaW5lciA9PT0gci5wcmV2Q29udGFpbmVyICYmIHJhbmdlLmNvbGxhcHNlZCkgPyBudWxsIDogci5wcmV2Q29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnNlcnRMaXN0Q2VsbCAmJiBwcmV2Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFBhcmVudE5vZGUgPSBwcmV2Q29udGFpbmVyLm5vZGVUeXBlID09PSAzID8gcHJldkNvbnRhaW5lci5wYXJlbnROb2RlIDogcHJldkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFBhcmVudE5vZGUuY29udGFpbnMoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2FtZVBhcmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ZW1wQWZ0ZXJOb2RlLnBhcmVudE5vZGUgJiYgdGVtcEFmdGVyTm9kZS5wYXJlbnROb2RlICE9PSB0ZW1wUGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IHRlbXBBZnRlck5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVQYXJlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2FtZVBhcmVudCAmJiBjb250YWluZXIgPT09IHByZXZDb250YWluZXIpIHRlbXBBZnRlck5vZGUgPSB0ZW1wQWZ0ZXJOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zZXJ0TGlzdENlbGwgJiYgdXRpbC5pc0xpc3RDZWxsKGNvbnRhaW5lcikgJiYgIWxpbmUucGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRlbXBQYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSAzIHx8IHV0aWwuaXNCcmVhayhjb250YWluZXIpIHx8IGluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVwdGhGb3JtYXQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoY29udGFpbmVyLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KSB8fCB0aGlzLmlzTGlzdENlbGwoY3VycmVudCk7IH0uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gdXRpbC5zcGxpdEVsZW1lbnQoY29udGFpbmVyLCByLm9mZnNldCwgIWRlcHRoRm9ybWF0ID8gMCA6IHV0aWwuZ2V0RWxlbWVudERlcHRoKGRlcHRoRm9ybWF0KSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWZ0ZXJOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBhZnRlck5vZGUgPSBsaW5lO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zZXJ0TGlzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUuY29udGFpbnMoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViTGlzdCA9IHV0aWwuaXNMaXN0KGxpbmUubGFzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3Q2VsbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NlbGwgPSBsaW5lLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbC5hcHBlbmRDaGlsZChhZnRlck5vZGUudGV4dENvbnRlbnQudHJpbSgpID8gYWZ0ZXJOb2RlIDogdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsID0gbGluZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKGxpbmUubGFzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Q2VsbCwgbGluZS5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBhZnRlck5vZGUgPSBuZXdDZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gYWZ0ZXJOb2RlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJhbmdlID0gKCFhZnRlck5vZGUgJiYgIWlzRm9ybWF0cykgPyB0aGlzLmdldFJhbmdlX2FkZExpbmUodGhpcy5nZXRSYW5nZSgpLCBudWxsKSA6IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uQ29uID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2ZmID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0UmFuZ2UgPSByYW5nZS5zdGFydENvbnRhaW5lciA9PT0gY29tbW9uQ29uICYmIHV0aWwuaXNGb3JtYXRFbGVtZW50KGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29uID0gZm9ybWF0UmFuZ2UgPyAoY29tbW9uQ29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdIHx8IGNvbW1vbkNvbi5jaGlsZE5vZGVzWzBdIHx8IHJhbmdlLnN0YXJ0Q29udGFpbmVyKSA6IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBlbmRDb24gPSBmb3JtYXRSYW5nZSA/IChjb21tb25Db24uY2hpbGROb2Rlc1tlbmRPZmZdIHx8IGNvbW1vbkNvbi5jaGlsZE5vZGVzW2NvbW1vbkNvbi5jaGlsZE5vZGVzLmxlbmd0aCAtIDFdIHx8IHJhbmdlLmVuZENvbnRhaW5lcikgOiByYW5nZS5lbmRDb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFmdGVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBzdGFydENvbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKiogTm8gU2VsZWN0IHJhbmdlIG5vZGUgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24udGV4dENvbnRlbnQubGVuZ3RoID4gZW5kT2ZmKSBhZnRlck5vZGUgPSBjb21tb25Db24uc3BsaXRUZXh0KGVuZE9mZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFmdGVyTm9kZSA9IGNvbW1vbkNvbi5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGMgPSBwYXJlbnROb2RlLmNoaWxkTm9kZXNbc3RhcnRPZmZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzTm9kZSA9IChjICYmIGMubm9kZVR5cGUgPT09IDMgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoYykgJiYgdXRpbC5pc0JyZWFrKGMubmV4dFNpYmxpbmcpKSA/IGMubmV4dFNpYmxpbmcgOiBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c05vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb2N1c05vZGUubmV4dFNpYmxpbmcgJiYgdXRpbC5pc0JyZWFrKGZvY3VzTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZm9jdXNOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSAodXRpbC5pc0JyZWFrKGZvY3VzTm9kZSkgJiYgIXV0aWwuaXNCcmVhayhvTm9kZSkpID8gZm9jdXNOb2RlIDogZm9jdXNOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8qKiBTZWxlY3QgcmFuZ2Ugbm9kZXMgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNTYW1lQ29udGFpbmVyID0gc3RhcnRDb24gPT09IGVuZENvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2FtZUNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFZGdlUG9pbnQoZW5kQ29uLCBlbmRPZmYpKSBhZnRlck5vZGUgPSBlbmRDb24ubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFmdGVyTm9kZSA9IGVuZENvbi5zcGxpdFRleHQoZW5kT2ZmKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlTm9kZSA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRWRnZVBvaW50KHN0YXJ0Q29uLCBzdGFydE9mZikpIHJlbW92ZU5vZGUgPSBzdGFydENvbi5zcGxpdFRleHQoc3RhcnRPZmYpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBpc0Zvcm1hdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRUYWcgPSB0aGlzLnJlbW92ZU5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHJlbW92ZWRUYWcuY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkNvbnRhaW5lciA9IHJlbW92ZWRUYWcucHJldkNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBpc0Zvcm1hdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnPCcgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPjxicj48LycgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoY29udGFpbmVyKSAmJiBvTm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzRm9ybWF0cyAmJiBwcmV2Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHByZXZDb250YWluZXIubm9kZVR5cGUgPT09IDMgPyBwcmV2Q29udGFpbmVyLnBhcmVudE5vZGUgOiBwcmV2Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlLmNvbnRhaW5zKGNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNhbWVQYXJlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChhZnRlck5vZGUucGFyZW50Tm9kZSAmJiBhZnRlck5vZGUucGFyZW50Tm9kZSAhPT0gcGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gYWZ0ZXJOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lUGFyZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNhbWVQYXJlbnQgJiYgY29udGFpbmVyID09PSBwcmV2Q29udGFpbmVyKSBhZnRlck5vZGUgPSBhZnRlck5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KGNvbnRhaW5lcikgJiYgIXV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQodXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IGlzRm9ybWF0cyA/IGVuZENvbiA6IGNvbnRhaW5lciA9PT0gcHJldkNvbnRhaW5lciA/IGNvbnRhaW5lci5uZXh0U2libGluZyA6IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gKCFhZnRlck5vZGUgfHwgIWFmdGVyTm9kZS5wYXJlbnROb2RlKSA/IGNvbW1vbkNvbiA6IGFmdGVyTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChhZnRlck5vZGUgJiYgIXV0aWwuaXNGb3JtYXRFbGVtZW50KGFmdGVyTm9kZSkgJiYgYWZ0ZXJOb2RlLnBhcmVudE5vZGUgIT09IGNvbW1vbkNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IGFmdGVyTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gaGFzIGFmdGVyTm9kZVxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBhZnRlck5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBhZnRlck5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luQWZ0ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IG5vZGVcclxuICAgICAgICAgICAgICAgIGlmICghaW5zZXJ0TGlzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1d5c2l3eWdEaXYoYWZ0ZXJOb2RlKSB8fCBwYXJlbnROb2RlID09PSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChvTm9kZSkgfHwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChvTm9kZSkgfHwgKCF1dGlsLmlzTGlzdENlbGwocGFyZW50Tm9kZSkgJiYgdXRpbC5pc0NvbXBvbmVudChvTm9kZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFBhcmVudCA9IHBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gYWZ0ZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzTGlzdENlbGwoYWZ0ZXJOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGFmdGVyTm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IGFmdGVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghb3JpZ2luQWZ0ZXIgJiYgIWFmdGVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gci5jb250YWluZXIubm9kZVR5cGUgPT09IDMgPyAodXRpbC5pc0xpc3RDZWxsKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyLmNvbnRhaW5lciwgbnVsbCkpID8gci5jb250YWluZXIgOiAodXRpbC5nZXRGb3JtYXRFbGVtZW50KHIuY29udGFpbmVyLCBudWxsKSB8fCByLmNvbnRhaW5lci5wYXJlbnROb2RlKSkgOiByLmNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlQ29uID0gdXRpbC5pc1d5c2l3eWdEaXYoY29udGFpbmVyKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcmFuZ2VDb24gPyBjb250YWluZXIgOiBjb250YWluZXIucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHJhbmdlQ29uID8gbnVsbCA6IGNvbnRhaW5lci5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFBhcmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBwYXJlbnROb2RlICE9PSBvbGRQYXJlbnQpIHV0aWwucmVtb3ZlSXRlbShvbGRQYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRm9ybWF0cyAmJiAhZnJlZUZvcm1hdCAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChwYXJlbnROb2RlKSAmJiAhdXRpbC5pc0xpc3RDZWxsKHBhcmVudE5vZGUpICYmICF1dGlsLmlzV3lzaXd5Z0RpdihwYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBwYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihwYXJlbnROb2RlKSAmJiAob05vZGUubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKG9Ob2RlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZk5vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZk5vZGUuYXBwZW5kQ2hpbGQob05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IGZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnQtLVxyXG4gICAgICAgICAgICAgICAgaWYgKGluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wUGFyZW50Tm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gdGVtcFBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHRlbXBBZnRlck5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBwYXJlbnROb2RlID09PSBhZnRlck5vZGUgPyBwYXJlbnROb2RlLmxhc3RDaGlsZCA6IGFmdGVyTm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKG9Ob2RlKSAmJiAhdXRpbC5pc0xpc3QocGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVsID0gdXRpbC5jcmVhdGVFbGVtZW50KCdvbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZSh1bCwgYWZ0ZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRMaXN0Q2VsbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tEdXBsaWNhdGVOb2RlKG9Ob2RlLCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9Ob2RlLCBhZnRlck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnNlcnRMaXN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShsaW5lLnRleHRDb250ZW50LnRyaW0oKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IG9Ob2RlLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaExpc3QgPSB1dGlsLmdldEFycmF5SXRlbShsaW5lLmNoaWxkcmVuLCB1dGlsLmlzTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvTm9kZSAhPT0gY2hMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUuYXBwZW5kQ2hpbGQoY2hMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IGNoTGlzdC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQob05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gcGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UobGluZS50ZXh0Q29udGVudC50cmltKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChvTm9kZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuaW5zZXJ0Tm9kZS53YXJuXSAnICsgZXJyb3IpO1xyXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZHVwbGVOb2RlcyA9IHBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc2UtZHVwbGVdJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHVwbGVOb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGR1cGxlTm9kZXMubGVuZ3RoLCBkLCBjLCBjaCwgcGFyZW50OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGR1cGxlTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gZC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBkLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoYywgZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID09PSBvTm9kZSkgb05vZGUgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICgodXRpbC5pc0Zvcm1hdEVsZW1lbnQob05vZGUpIHx8IHV0aWwuaXNDb21wb25lbnQob05vZGUpKSAmJiBzdGFydENvbiA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY0l0ZW0gPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29tbW9uQ29uLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY0l0ZW0gJiYgY0l0ZW0ubm9kZVR5cGUgPT09IDEgJiYgdXRpbC5pc0VtcHR5TGluZShjSXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZyZWVGb3JtYXQgJiYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IHRoaXMuX3NldEludG9GcmVlRm9ybWF0KG9Ob2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNDb21wb25lbnQob05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Ob2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gb05vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gb05vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVGV4dCA9ICghcHJldmlvdXMgfHwgIHByZXZpb3VzLm5vZGVUeXBlID09PSAxIHx8IHV0aWwub25seVplcm9XaWR0aFNwYWNlKHByZXZpb3VzKSkgPyAnJyA6IHByZXZpb3VzLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0VGV4dCA9ICghbmV4dCB8fCBuZXh0Lm5vZGVUeXBlID09PSAxIHx8IHV0aWwub25seVplcm9XaWR0aFNwYWNlKG5leHQpKSA/ICcnIDogbmV4dC50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cyAmJiBwcmV2aW91c1RleHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUudGV4dENvbnRlbnQgPSBwcmV2aW91c1RleHQgKyBvTm9kZS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShwcmV2aW91cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUudGV4dENvbnRlbnQgKz0gbmV4dFRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0obmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JhbmdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBvTm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBwcmV2aW91c1RleHQubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kT2Zmc2V0OiBvTm9kZS50ZXh0Q29udGVudC5sZW5ndGggLSBuZXh0VGV4dC5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uob05vZGUsIG5ld1JhbmdlLnN0YXJ0T2Zmc2V0LCBvTm9kZSwgbmV3UmFuZ2UuZW5kT2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdSYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF1dGlsLmlzQnJlYWsob05vZGUpICYmICF1dGlsLmlzTGlzdENlbGwob05vZGUpICYmIHV0aWwuaXNGb3JtYXRFbGVtZW50KHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB6ZXJvV2lkdGggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9Ob2RlLnByZXZpb3VzU2libGluZyB8fCB1dGlsLmlzQnJlYWsob05vZGUucHJldmlvdXNTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHplcm9XaWR0aCwgb05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9Ob2RlLm5leHRTaWJsaW5nIHx8IHV0aWwuaXNCcmVhayhvTm9kZS5uZXh0U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHplcm9XaWR0aCA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIG9Ob2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShvTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gb05vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9Ob2RlLCBvZmZzZXQsIG9Ob2RlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBvTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRJbnRvRnJlZUZvcm1hdDogZnVuY3Rpb24gKG9Ob2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBvTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBsZXQgb05vZGVDaGlsZHJlbiwgbGFzdE9Ob2RlO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSkge1xyXG4gICAgICAgICAgICAgICAgb05vZGVDaGlsZHJlbiA9IG9Ob2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBsYXN0T05vZGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChvTm9kZUNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE9Ob2RlID0gb05vZGVDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQobGFzdE9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGxhc3RPTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0SW50b0ZyZWVGb3JtYXQobGFzdE9Ob2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvTm9kZS5wYXJlbnROb2RlKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgb05vZGVDaGlsZHJlbiA9IG9Ob2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGFzdE9Ob2RlLCBvTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9Ob2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB1dGlsLnJlbW92ZUl0ZW0ob05vZGUpO1xyXG4gICAgICAgICAgICAgICAgb05vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShvTm9kZSwgbGFzdE9Ob2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG9Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBub2RlcyBhbmQgcmVzZXQgc2VsZWN0aW9uIHJhbmdlXHJcbiAgICAgICAgICogUmV0dXJucyB7Y29udGFpbmVyOiBcInRoZSBsYXN0IGVsZW1lbnQgYWZ0ZXIgZGVsZXRpb25cIiwgb2Zmc2V0OiBcIm9mZnNldFwiLCBwcmV2Q29udGFpbmVyOiBcInByZXZpb3VzRWxlbWVudFNpYmxpbmcgT2YgdGhlIGRlbGV0ZWQgYXJlYVwifVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlTm9kZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNldFJhbmdlVG9UZXh0Tm9kZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUNvbXBvbmVudCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgdXRpbC5pc01lZGlhQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnIgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGZpbGVDb21wb25lbnQsIGZvcm1hdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoZm9ybWF0LCAwLCBmb3JtYXQsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGZvcm1hdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGFpbmVyOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNTdGFydEVkZ2UgPSByYW5nZS5zdGFydE9mZnNldCA9PT0gMDtcclxuICAgICAgICAgICAgY29uc3QgaXNFbmRFZGdlID0gY29yZS5pc0VkZ2VQb2ludChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpO1xyXG4gICAgICAgICAgICBsZXQgcHJldkNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBzdGFydFByZXZFbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBlbmROZXh0RWwgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoaXNTdGFydEVkZ2UpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0UHJldkVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydFByZXZFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZDb250YWluZXIgPSBzdGFydFByZXZFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJldkVsID0gcHJldkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNFbmRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICBlbmROZXh0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2UuZW5kQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIGVuZE5leHRFbCA9IGVuZE5leHRFbCA/IGVuZE5leHRFbC5uZXh0RWxlbWVudFNpYmxpbmcgOiBlbmROZXh0RWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIsIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRPZmYgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgbGV0IGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uQ29uID0gKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLm5vZGVUeXBlID09PSAzICYmIHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUgPT09IHN0YXJ0Q29uLnBhcmVudE5vZGUpID8gc3RhcnRDb24ucGFyZW50Tm9kZSA6IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBpZiAoY29tbW9uQ29uID09PSBzdGFydENvbiAmJiBjb21tb25Db24gPT09IGVuZENvbikge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRDb24gPSBjb21tb25Db24uY2hpbGRyZW5bc3RhcnRPZmZdO1xyXG4gICAgICAgICAgICAgICAgZW5kQ29uID0gY29tbW9uQ29uLmNoaWxkcmVuW2VuZE9mZl07XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IGVuZE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghc3RhcnRDb24gfHwgIWVuZENvbikgcmV0dXJuICB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbW1vbkNvbixcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXJ0Q29uID09PSBlbmRDb24gJiYgcmFuZ2UuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb24udGV4dENvbnRlbnQgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uoc3RhcnRDb24udGV4dENvbnRlbnQuc3Vic3RyKHN0YXJ0T2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHN0YXJ0T2ZmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGFpbmVyOiBzdGFydENvbiAmJiBzdGFydENvbi5wYXJlbnROb2RlID8gc3RhcnRDb24gOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGJlZm9yZU5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgYWZ0ZXJOb2RlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSB1dGlsLmdldExpc3RDaGlsZE5vZGVzKGNvbW1vbkNvbiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIHN0YXJ0Q29uKTtcclxuICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIGVuZENvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGggPiAwICYmIHN0YXJ0SW5kZXggPiAtMSAmJiBlbmRJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleCArIDEsIHN0YXJ0Tm9kZSA9IHN0YXJ0Q29uOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGVzW2ldID09PSBzdGFydE5vZGUucGFyZW50Tm9kZSAmJiBjaGlsZE5vZGVzW2ldLmZpcnN0Q2hpbGQgPT09IHN0YXJ0Tm9kZSAmJiBzdGFydE9mZiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROb2RlID0gc3RhcnROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBlbmRJbmRleCAtIDEsIGVuZE5vZGUgPSBlbmRDb247IGkgPiBzdGFydEluZGV4OyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2Rlc1tpXSA9PT0gZW5kTm9kZS5wYXJlbnROb2RlICYmIGNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2Rlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE5vZGUgPSBlbmROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tZW5kSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGNvbW1vbkNvbikgfHwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24pIHx8IHV0aWwuaXNXeXNpd3lnRGl2KGNvbW1vbkNvbikgfHwgdXRpbC5pc0JyZWFrKGNvbW1vbkNvbikgfHwgdXRpbC5pc01lZGlhKGNvbW1vbkNvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29tbW9uQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29tbW9uQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBlbmRPZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGROb2Rlcy5wdXNoKGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb24gPSBlbmRDb24gPSBjb21tb25Db247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gZW5kQ29uID0gY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHN0YXJ0Q29uKSB8fCB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdXRpbC5pc01lZGlhKGNvbW1vbkNvbikgPyBjb21tb25Db24gOiBzdGFydENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gZW5kSW5kZXggPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8PSBlbmRJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gY2hpbGROb2Rlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDAgfHwgKGl0ZW0ubm9kZVR5cGUgPT09IDMgJiYgaXRlbS5kYXRhID09PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9kZVJlbW92ZUxpc3RJdGVtKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSBzdGFydENvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbi5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChzdGFydENvbikpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGJlZm9yZU5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHN0YXJ0Q29uLnRleHRDb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShzdGFydENvbi5zdWJzdHJpbmdEYXRhKDAsIHN0YXJ0T2ZmKSArIGVuZENvbi5zdWJzdHJpbmdEYXRhKGVuZE9mZiwgKGVuZENvbi5sZW5ndGggLSBlbmRPZmYpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBzdGFydE9mZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZU5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHN0YXJ0Q29uLnN1YnN0cmluZ0RhdGEoMCwgc3RhcnRPZmYpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZU5vZGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbi5kYXRhID0gYmVmb3JlTm9kZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25vZGVSZW1vdmVMaXN0SXRlbShzdGFydENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvbi5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChlbmRDb24pKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhZnRlck5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKGVuZENvbi50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShlbmRDb24uc3Vic3RyaW5nRGF0YShlbmRPZmYsIChlbmRDb24ubGVuZ3RoIC0gZW5kT2ZmKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFmdGVyTm9kZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbi5kYXRhID0gYWZ0ZXJOb2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9kZVJlbW92ZUxpc3RJdGVtKGVuZENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub2RlUmVtb3ZlTGlzdEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVuZFVsID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGVuZENvbiwgJ3VsJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0TGkgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoc3RhcnRDb24sICdsaScpO1xyXG4gICAgICAgICAgICBpZiAoZW5kVWwgJiYgc3RhcnRMaSAmJiBzdGFydExpLmNvbnRhaW5zKGVuZFVsKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gZW5kVWwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gY29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVuZENvbiAmJiBlbmRDb24ucGFyZW50Tm9kZSA/IGVuZENvbiA6IHN0YXJ0Q29uICYmIHN0YXJ0Q29uLnBhcmVudE5vZGUgPyBzdGFydENvbiA6IChyYW5nZS5lbmRDb250YWluZXIgfHwgcmFuZ2Uuc3RhcnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gKCFpc1N0YXJ0RWRnZSAmJiAhaXNFbmRFZGdlKSA/IG9mZnNldCA6IGlzRW5kRWRnZSA/IGNvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGggOiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNXeXNpd3lnRGl2KGNvbnRhaW5lcikgJiYgY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYyA9IHV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMoY29udGFpbmVyLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGlmIChyYykgY29udGFpbmVyID0gcmMuc2MgfHwgcmMuZWMgfHwgY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KGNvbnRhaW5lcikgJiYgIShzdGFydENvbiAmJiBzdGFydENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVuZE5leHRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVuZE5leHRFbDtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydFByZXZFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHN0YXJ0UHJldkVsO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCByYW5nZVxyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKGNvbnRhaW5lciwgb2Zmc2V0LCBjb250YWluZXIsIG9mZnNldCk7XHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgICAgICAgIHByZXZDb250YWluZXI6IHByZXZDb250YWluZXJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfbm9kZVJlbW92ZUxpc3RJdGVtOiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoaXRlbSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShpdGVtKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCF1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtQWxsUGFyZW50cyhmb3JtYXQsIG51bGwsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZvcm1hdCAmJiB1dGlsLmlzTGlzdChmb3JtYXQuZmlyc3RDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdC5pbnNlcnRCZWZvcmUodXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKSwgZm9ybWF0LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFwcGVuZGVkIGFsbCBzZWxlY3RlZCBmb3JtYXQgRWxlbWVudCB0byB0aGUgYXJndW1lbnQgZWxlbWVudCBhbmQgaW5zZXJ0XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSByYW5nZUVsZW1lbnQgRWxlbWVudCBvZiB3cmFwIHRoZSBhcmd1bWVudHMgKEJMT0NLUVVPVEUuLi4pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwbHlSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChyYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlTGluZXMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzKGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKCFyYW5nZUxpbmVzIHx8IHJhbmdlTGluZXMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsaW5lc0xvb3A6XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByYW5nZUxpbmVzLmxlbmd0aCwgbGluZSwgbmVzdGVkLCBmRWwsIGxFbCwgZiwgbDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gcmFuZ2VMaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0xpc3RDZWxsKGxpbmUpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXN0ZWQgPSBsaW5lLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBpZiAobmVzdGVkICYmIHV0aWwuaXNMaXN0Q2VsbChsaW5lLm5leHRFbGVtZW50U2libGluZykgJiYgcmFuZ2VMaW5lcy5pbmRleE9mKGxpbmUubmV4dEVsZW1lbnRTaWJsaW5nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbEVsID0gbmVzdGVkLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlTGluZXMuaW5kZXhPZihsRWwpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGxpc3QgPSBsRWwubGFzdEVsZW1lbnRDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUxpbmVzLmluZGV4T2YobGlzdC5sYXN0RWxlbWVudENoaWxkKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxFbCA9IGxpc3QubGFzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBsaW5lc0xvb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmRWwgPSBuZXN0ZWQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSByYW5nZUxpbmVzLmluZGV4T2YoZkVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHJhbmdlTGluZXMuaW5kZXhPZihsRWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUxpbmVzLnNwbGljZShmLCAobCAtIGYpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IHJhbmdlTGluZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBsYXN0ICA9IHJhbmdlTGluZXNbcmFuZ2VMaW5lcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgbGV0IHN0YW5kVGFnLCBiZWZvcmVUYWcsIHBFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobGFzdCkgfHwgdXRpbC5pc0Zvcm1hdEVsZW1lbnQobGFzdCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YW5kVGFnID0gbGFzdDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YW5kVGFnID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQobGFzdCwgbnVsbCkgfHwgdXRpbC5nZXRGb3JtYXRFbGVtZW50KGxhc3QsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0NlbGwoc3RhbmRUYWcpKSB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBzdGFuZFRhZztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJlZm9yZVRhZyA9IHN0YW5kVGFnLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBzdGFuZFRhZy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50RGVwdGggPSB1dGlsLmdldEVsZW1lbnREZXB0aChzdGFuZFRhZyk7XHJcbiAgICAgICAgICAgIGxldCBsaXN0UGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgbGluZUFyciA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVJdGVtcyA9IGZ1bmN0aW9uIChwYXJlbnQsIG9yaWdpbiwgYmVmb3JlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudCAhPT0gb3JpZ2luICYmICF1dGlsLmlzVGFibGUob3JpZ2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW4gJiYgdXRpbC5nZXRFbGVtZW50RGVwdGgocGFyZW50KSA9PT0gdXRpbC5nZXRFbGVtZW50RGVwdGgob3JpZ2luKSkgcmV0dXJuIGJlZm9yZTtcclxuICAgICAgICAgICAgICAgICAgICBjYyA9IHV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMob3JpZ2luLCBudWxsLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYyA/IGNjLmVjIDogYmVmb3JlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJhbmdlTGluZXMubGVuZ3RoLCBsaW5lLCBvcmlnaW5QYXJlbnQsIGRlcHRoLCBiZWZvcmUsIG5leHRMaW5lLCBuZXh0TGlzdCwgbmVzdGVkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxpbmUgPSByYW5nZUxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luUGFyZW50ID0gbGluZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcmlnaW5QYXJlbnQgfHwgcmFuZ2VFbGVtZW50LmNvbnRhaW5zKG9yaWdpblBhcmVudCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlcHRoID0gdXRpbC5nZXRFbGVtZW50RGVwdGgobGluZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0KG9yaWdpblBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFBhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RQYXJlbnQgPSBuZXh0TGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0TGlzdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW50ID0gb3JpZ2luUGFyZW50LmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVBcnIucHVzaChsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0TGluZSA9IHJhbmdlTGluZXNbaSArIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSB8fCAobmV4dExpbmUgJiYgbmV4dExpbmUucGFyZW50Tm9kZSAhPT0gb3JpZ2luUGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dExpbmUgJiYgbGluZS5jb250YWlucyhuZXh0TGluZS5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dExpc3QgPSBuZXh0TGluZS5wYXJlbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gb3JpZ2luUGFyZW50LnBhcmVudE5vZGUsIHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh1dGlsLmlzTGlzdChsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHV0aWwuY3JlYXRlRWxlbWVudChsaXN0Lm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQobGlzdFBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW50ID0gcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPSBsaXN0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChvcmlnaW5QYXJlbnQsIGxpbmVBcnIsIG51bGwsIHRydWUsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudERlcHRoID49IGRlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnREZXB0aCA9IGRlcHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBlZGdlLmNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlVGFnID0gcmVtb3ZlSXRlbXMocEVsZW1lbnQsIG9yaWdpblBhcmVudCwgZWRnZS5lYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlVGFnKSBwRWxlbWVudCA9IGJlZm9yZVRhZy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBFbGVtZW50ID09PSBlZGdlLmNjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBlZGdlLmVjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocEVsZW1lbnQgIT09IGVkZ2UuY2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHJlbW92ZUl0ZW1zKHBFbGVtZW50LCBlZGdlLmNjLCBiZWZvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSAhPT0gdW5kZWZpbmVkKSBiZWZvcmVUYWcgPSBiZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGJlZm9yZVRhZyA9IGVkZ2UuY2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gZWRnZS5yZW1vdmVBcnJheS5sZW5ndGg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RQYXJlbnQuYXBwZW5kQ2hpbGQoZWRnZS5yZW1vdmVBcnJheVtjXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmVzdGVkKSByYW5nZUVsZW1lbnQuYXBwZW5kQ2hpbGQobGlzdFBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0TGlzdCkgZWRnZS5yZW1vdmVBcnJheVtlZGdlLnJlbW92ZUFycmF5Lmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKG5leHRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudERlcHRoID49IGRlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudERlcHRoID0gZGVwdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBFbGVtZW50ID0gb3JpZ2luUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBsaW5lLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbGVtZW50LmFwcGVuZENoaWxkKGxpbmUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocEVsZW1lbnQgIT09IG9yaWdpblBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSByZW1vdmVJdGVtcyhwRWxlbWVudCwgb3JpZ2luUGFyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSAhPT0gdW5kZWZpbmVkKSBiZWZvcmVUYWcgPSBiZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB1dGlsLm1lcmdlU2FtZVRhZ3MocmFuZ2VFbGVtZW50LCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHV0aWwubWVyZ2VOZXN0ZWRUYWdzKHJhbmdlRWxlbWVudCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMuaXNMaXN0KGN1cnJlbnQpOyB9LmJpbmQodXRpbCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gTmVzdGVkIGxpc3RcclxuICAgICAgICAgICAgaWYgKGJlZm9yZVRhZyAmJiB1dGlsLmdldEVsZW1lbnREZXB0aChiZWZvcmVUYWcpID4gMCAmJiAodXRpbC5pc0xpc3QoYmVmb3JlVGFnLnBhcmVudE5vZGUpIHx8IHV0aWwuaXNMaXN0KGJlZm9yZVRhZy5wYXJlbnROb2RlLnBhcmVudE5vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVwdGhGb3JtYXQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoYmVmb3JlVGFnLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KSAmJiAhdGhpcy5pc0xpc3QoY3VycmVudCk7IH0uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFJhbmdlID0gdXRpbC5zcGxpdEVsZW1lbnQoYmVmb3JlVGFnLCBudWxsLCAhZGVwdGhGb3JtYXQgPyAwIDogdXRpbC5nZXRFbGVtZW50RGVwdGgoZGVwdGhGb3JtYXQpICsgMSk7XHJcbiAgICAgICAgICAgICAgICBzcGxpdFJhbmdlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHJhbmdlRWxlbWVudCwgc3BsaXRSYW5nZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGJhc2ljXHJcbiAgICAgICAgICAgICAgICBwRWxlbWVudC5pbnNlcnRCZWZvcmUocmFuZ2VFbGVtZW50LCBiZWZvcmVUYWcpO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlSXRlbXMocmFuZ2VFbGVtZW50LCBiZWZvcmVUYWcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGdlID0gdXRpbC5nZXRFZGdlQ2hpbGROb2RlcyhyYW5nZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIHJhbmdlRWxlbWVudC5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICAgICAgaWYgKHJhbmdlTGluZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShlZGdlLnNjLCAwLCBlZGdlLmVjLCBlZGdlLmVjLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGVkZ2UuZWMsIGVkZ2UuZWMudGV4dENvbnRlbnQubGVuZ3RoLCBlZGdlLmVjLCBlZGdlLmVjLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgZWxlbWVudHMgb2YgdGhlIFwic2VsZWN0ZWRGb3JtYXRzXCIgYXJyYXkgYXJlIGRldGFjaGVkIGZyb20gdGhlIFwicmFuZ2VFbGVtZW50XCIgZWxlbWVudC4gKFwiTElcIiB0YWdzIGFyZSBjb252ZXJ0ZWQgdG8gXCJQXCIgdGFncylcclxuICAgICAgICAgKiBXaGVuIFwic2VsZWN0ZWRGb3JtYXRzXCIgaXMgbnVsbCwgYWxsIGVsZW1lbnRzIGFyZSBkZXRhY2hlZCBhbmQgcmV0dXJuIHtjYzogcGFyZW50Tm9kZSwgc2M6IG5leHRTaWJsaW5nLCBlYzogcHJldmlvdXNTaWJsaW5nLCByZW1vdmVBcnJheTogW0FycmF5IG9mIHJlbW92ZWQgZWxlbWVudHNdfS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHJhbmdlRWxlbWVudCBSYW5nZSBmb3JtYXQgZWxlbWVudCAoUFJFLCBCTE9DS1FVT1RFLCBPTCwgVUwuLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheXxudWxsfSBzZWxlY3RlZEZvcm1hdHMgQXJyYXkgb2YgZm9ybWF0IGVsZW1lbnRzIChQLCBESVYsIExJLi4uKSB0byByZW1vdmUuXHJcbiAgICAgICAgICogSWYgbnVsbCwgQXBwbGllcyB0byBhbGwgZWxlbWVudHMgYW5kIHJldHVybiB7Y2M6IHBhcmVudE5vZGUsIHNjOiBuZXh0U2libGluZywgZWM6IHByZXZpb3VzU2libGluZ31cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gbmV3UmFuZ2VFbGVtZW50IFRoZSBub2RlKHJhbmdlRWxlbWVudCkgdG8gcmVwbGFjZSB0aGUgY3VycmVudGx5IHdyYXBwZWQgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbW92ZSBJZiB0cnVlLCBkZWxldGVkIHdpdGhvdXQgZGV0YWNoZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBub3RIaXN0b3J5UHVzaCBXaGVuIHRydWUsIGl0IGRvZXMgbm90IHVwZGF0ZSB0aGUgaGlzdG9yeSBzdGFjayBhbmQgdGhlIHNlbGVjdGlvbiBvYmplY3QgYW5kIHJldHVybiBFZGdlTm9kZXMgKHV0aWwuZ2V0RWRnZUNoaWxkTm9kZXMpXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChyYW5nZUVsZW1lbnQsIHNlbGVjdGVkRm9ybWF0cywgbmV3UmFuZ2VFbGVtZW50LCByZW1vdmUsIG5vdEhpc3RvcnlQdXNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBsZXQgc28gPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgbGV0IGVvID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gdXRpbC5nZXRMaXN0Q2hpbGROb2RlcyhyYW5nZUVsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IHJhbmdlRWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSByYW5nZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgbGV0IGZpcnN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBsYXN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCByYW5nZUVsID0gcmFuZ2VFbGVtZW50LmNsb25lTm9kZShmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMaXN0ID0gdXRpbC5pc0xpc3QobmV3UmFuZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgbGV0IGluc2VydGVkTmV3ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCByZXNldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhcHBlbmROb2RlIChwYXJlbnQsIGluc05vZGUsIHNpYmxpbmcsIG9yaWdpbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShpbnNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc05vZGUuaW5uZXJIVE1MID0gdXRpbC56ZXJvV2lkdGhTcGFjZTtcclxuICAgICAgICAgICAgICAgICAgICBzbyA9IGVvID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zTm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoaW5zTm9kZSwgc2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc05vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zQ2hpbGRyZW4gPSAobW92ZUNvbXBsZXRlID8gaW5zTm9kZSA6IG9yaWdpbk5vZGUpLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gaW5zTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGxldCBjID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaW5zQ2hpbGRyZW5bMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gaW5zQ2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX25vdFRleHROb2RlKGMpICYmICF1dGlsLmlzQnJlYWsoYykgJiYgIXV0aWwuaXNMaXN0Q2VsbChmb3JtYXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGZvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZm9ybWF0LCBzaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGluc05vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGMsIHNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwocGFyZW50KSAmJiB1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSAmJiB1dGlsLmlzTGlzdChzaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3TGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBzaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC5hcHBlbmRDaGlsZChzaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nID0gc2libGluZy5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIHBhcmVudC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luTmV4dCA9IG9yaWdpbk5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0YWNoUmFuZ2UgPSB1dGlsLmRldGFjaE5lc3RlZExpc3Qob3JpZ2luTm9kZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyYW5nZUVsZW1lbnQgIT09IGRldGFjaFJhbmdlKSB8fCAob3JpZ2luTmV4dCAhPT0gb3JpZ2luTm9kZS5uZXh0RWxlbWVudFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZkNoaWxkcmVuID0gZm9ybWF0LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGZDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5Ob2RlLmFwcGVuZENoaWxkKGZDaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsZW1lbnQgPSBkZXRhY2hSYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgc2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGZvcm1hdDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRldGFjaCBsb29wXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGgsIGluc05vZGUsIGxpbmVJbmRleCwgbmV4dDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpbnNOb2RlID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiB1dGlsLmlzTGlzdChyYW5nZUVsKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlICYmIGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkRm9ybWF0cyB8fCBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoID09PSBsZW4gfHwgc2VsZWN0ZWRGb3JtYXRzWzBdID09PSBpbnNOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9kZSA9IHJhbmdlRWxlbWVudC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb2RlID0gcmFuZ2VFbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cykgbGluZUluZGV4ID0gc2VsZWN0ZWRGb3JtYXRzLmluZGV4T2YoaW5zTm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzICYmIGxpbmVJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJhbmdlRWwpIHJhbmdlRWwgPSByYW5nZUVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUVsLmFwcGVuZENoaWxkKGluc05vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzKSBuZXh0ID0gc2VsZWN0ZWRGb3JtYXRzW2xpbmVJbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIHJhbmdlRWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHJhbmdlRWwsIHJhbmdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdMaXN0ICYmIHV0aWwuaXNMaXN0Q2VsbChpbnNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiB1dGlsLmdldEVsZW1lbnREZXB0aChpbnNOb2RlKSAhPT0gdXRpbC5nZXRFbGVtZW50RGVwdGgobmV4dCkgJiYgKHV0aWwuaXNMaXN0Q2VsbChwYXJlbnQpIHx8IHV0aWwuZ2V0QXJyYXlJdGVtKGluc05vZGUuY2hpbGRyZW4sIHV0aWwuaXNMaXN0LCBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnNOZXh0ID0gaW5zTm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXRhY2hSYW5nZSA9IHV0aWwuZGV0YWNoTmVzdGVkTGlzdChpbnNOb2RlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHJhbmdlRWxlbWVudCAhPT0gZGV0YWNoUmFuZ2UpIHx8IGluc05leHQgIT09IGluc05vZGUubmV4dEVsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbGVtZW50ID0gZGV0YWNoUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSBpbnNOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zTm9kZSA9IHV0aWwuY3JlYXRlRWxlbWVudChyZW1vdmUgPyBpbm5lci5ub2RlTmFtZSA6ICh1dGlsLmlzTGlzdChyYW5nZUVsZW1lbnQucGFyZW50Tm9kZSkgfHwgdXRpbC5pc0xpc3RDZWxsKHJhbmdlRWxlbWVudC5wYXJlbnROb2RlKSkgPyAnTEknIDogdXRpbC5pc0NlbGwocmFuZ2VFbGVtZW50LnBhcmVudE5vZGUpID8gJ0RJVicgOiBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNDZWxsID0gdXRpbC5pc0xpc3RDZWxsKGluc05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5uZXJDaGlsZHJlbiA9IGlubmVyLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaW5uZXJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChpbm5lckNoaWxkcmVuWzBdKSAmJiAhaXNDZWxsKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNOb2RlLmFwcGVuZENoaWxkKGlubmVyQ2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5Rm9ybWF0QXR0cmlidXRlcyhpbnNOb2RlLCBpbm5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zTm9kZSA9IGluc05vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdSYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluc2VydGVkTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3UmFuZ2VFbGVtZW50LCByYW5nZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZE5ldyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc05vZGUgPSBhcHBlbmROb2RlKG5ld1JhbmdlRWxlbWVudCwgaW5zTm9kZSwgbnVsbCwgY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNOb2RlID0gYXBwZW5kTm9kZShwYXJlbnQsIGluc05vZGUsIHJhbmdlRWxlbWVudCwgY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROb2RlID0gaW5zTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9kZSA9IGluc05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaXJzdE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb2RlID0gbGFzdE5vZGUgPSBpbnNOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUFycmF5LnB1c2goaW5zTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0ID0gbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMocmFuZ2VFbGVtZW50LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5wYXJlbnROb2RlID09PSByYW5nZUVsZW1lbnQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbCA9IHJhbmdlRWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcmFuZ2VFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2VQYXJlbnQgPSByYW5nZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlUmlnaHQgPSByYW5nZUVsZW1lbnQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIHJhbmdlRWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VQYXJlbnQuaW5zZXJ0QmVmb3JlKHJhbmdlRWwsIHJhbmdlUmlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3UmFuZ2VFbGVtZW50KSBmaXJzdE5vZGUgPSBuZXdSYW5nZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICBlbHNlIGlmICghZmlyc3ROb2RlKSBmaXJzdE5vZGUgPSByYW5nZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICByYW5nZVJpZ2h0ID0gcmFuZ2VFbGVtZW50Lm5leHRTaWJsaW5nICE9PSByYW5nZUVsID8gcmFuZ2VFbGVtZW50Lm5leHRTaWJsaW5nIDogcmFuZ2VFbCA/IHJhbmdlRWwubmV4dFNpYmxpbmcgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgcmFuZ2VFbGVtZW50LnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJhbmdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUVtcHR5Tm9kZShyYW5nZUVsZW1lbnQsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGVkZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICBlZGdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNjOiByYW5nZVBhcmVudCxcclxuICAgICAgICAgICAgICAgICAgICBzYzogZmlyc3ROb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvOiBzbyxcclxuICAgICAgICAgICAgICAgICAgICBlYzogcmFuZ2VSaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBlbzogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXJyYXk6IHJlbW92ZUFycmF5XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdE5vZGUpIGZpcnN0Tm9kZSA9IGxhc3ROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFsYXN0Tm9kZSkgbGFzdE5vZGUgPSBmaXJzdE5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEVkZ2UgPSB1dGlsLmdldEVkZ2VDaGlsZE5vZGVzKGZpcnN0Tm9kZSwgKGxhc3ROb2RlLnBhcmVudE5vZGUgPyBmaXJzdE5vZGUgOiBsYXN0Tm9kZSkpO1xyXG4gICAgICAgICAgICAgICAgZWRnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjYzogKGNoaWxkRWRnZS5zYyB8fCBjaGlsZEVkZ2UuZWMpLnBhcmVudE5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2M6IGNoaWxkRWRnZS5zYyxcclxuICAgICAgICAgICAgICAgICAgICBzbzogc28sXHJcbiAgICAgICAgICAgICAgICAgICAgZWM6IGNoaWxkRWRnZS5lYyxcclxuICAgICAgICAgICAgICAgICAgICBlbzogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXJyYXk6IG51bGxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChub3RIaXN0b3J5UHVzaCkgcmV0dXJuIGVkZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlbW92ZSAmJiBlZGdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkRm9ybWF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWRnZS5zYywgMCwgZWRnZS5zYywgMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWRnZS5zYywgc28sIGVkZ2UuZWMsIGVvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFwic2VsZWN0ZWRGb3JtYXRzXCIgYXJyYXkgYXJlIGRldGFjaGVkIGZyb20gdGhlIGxpc3QgZWxlbWVudC5cclxuICAgICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFwcGxpZWQgd2hlbiB0aGUgZmlyc3QgYW5kIGxhc3QgbGluZXMgb2YgXCJzZWxlY3RlZEZvcm1hdHNcIiBhcmUgXCJMSVwiIHJlc3BlY3RpdmVseS5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzZWxlY3RlZEZvcm1hdHMgQXJyYXkgb2YgZm9ybWF0IGVsZW1lbnRzIChMSSwgUC4uLikgdG8gcmVtb3ZlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlIElmIHRydWUsIGRlbGV0ZWQgd2l0aG91dCBkZXRhY2hlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7c2M6IDxMST4sIGVjOiA8TEk+fS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXRhY2hMaXN0OiBmdW5jdGlvbiAoc2VsZWN0ZWRGb3JtYXRzLCByZW1vdmUpIHtcclxuICAgICAgICAgICAgbGV0IHJhbmdlQXJyID0ge307XHJcbiAgICAgICAgICAgIGxldCBsaXN0Rmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGxpc3RMYXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBsYXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgcGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiAhdGhpcy5pc0NvbXBvbmVudChjdXJyZW50KTsgfS5iaW5kKHV0aWwpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGgsIHIsIG8sIGxhc3RJbmRleCwgaXNMaXN0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IGkgPT09IGxlbiAtIDE7XHJcbiAgICAgICAgICAgICAgICBvID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCBwYXNzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlzTGlzdCA9IHV0aWwuaXNMaXN0KG8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyICYmIGlzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBvO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBsaXN0Rmlyc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyICYmIGlzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyICE9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUFyci5mWzBdLnBhcmVudE5vZGUsIHJhbmdlQXJyLmYsIG51bGwsIHJlbW92ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBzZWxlY3RlZEZvcm1hdHNbaV0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RGaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBlZGdlLnNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCkgbGFzdCA9IGVkZ2UuZWM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCkgbGlzdExhc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUFyci5mLnB1c2godXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgJ0xJJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEluZGV4KSBsaXN0TGFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggJiYgdXRpbC5pc0xpc3QocikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGdlID0gdGhpcy5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VBcnIuZlswXS5wYXJlbnROb2RlLCByYW5nZUFyci5mLCBudWxsLCByZW1vdmUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0TGFzdCB8fCBsZW4gPT09IDEpIGxhc3QgPSBlZGdlLmVjO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0Rmlyc3QpIGZpcnN0ID0gZWRnZS5zYyB8fCBsYXN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2M6IGZpcnN0LFxyXG4gICAgICAgICAgICAgICAgZWM6IGxhc3RcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkLCB1cGRhdGUsIGFuZCBkZWxldGUgbm9kZXMgZnJvbSBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIDEuIElmIHRoZXJlIGlzIGEgbm9kZSBpbiB0aGUgXCJhcHBlbmROb2RlXCIgYXJndW1lbnQsIGEgbm9kZSB3aXRoIHRoZSBzYW1lIHRhZ3MgYW5kIGF0dHJpYnV0ZXMgYXMgXCJhcHBlbmROb2RlXCIgaXMgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbiB0ZXh0LlxyXG4gICAgICAgICAqIDIuIElmIGl0IGlzIGluIHRoZSBzYW1lIHRhZywgb25seSB0aGUgdGFnJ3MgYXR0cmlidXRlcyBhcmUgY2hhbmdlZCB3aXRob3V0IGFkZGluZyBhIHRhZy5cclxuICAgICAgICAgKiAzLiBJZiB0aGUgXCJhcHBlbmROb2RlXCIgYXJndW1lbnQgaXMgbnVsbCwgdGhlIG5vZGUgb2YgdGhlIHNlbGVjdGlvbiBpcyB1cGRhdGUgb3IgcmVtb3ZlIHdpdGhvdXQgYWRkaW5nIGEgbmV3IG5vZGUuXHJcbiAgICAgICAgICogNC4gVGhlIHNhbWUgc3R5bGUgYXMgdGhlIHN0eWxlIGF0dHJpYnV0ZSBvZiB0aGUgXCJzdHlsZUFycmF5XCIgYXJndW1lbnQgaXMgZGVsZXRlZC5cclxuICAgICAgICAgKiAgICAoU3R5bGVzIHNob3VsZCBiZSBwdXQgd2l0aCBhdHRyaWJ1dGUgbmFtZXMgZnJvbSBjc3MuIFtcImJhY2tncm91bmQtY29sb3JcIl0pXHJcbiAgICAgICAgICogNS4gVGhlIHNhbWUgY2xhc3MgbmFtZSBhcyB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIHRoZSBcInN0eWxlQXJyYXlcIiBhcmd1bWVudCBpcyBkZWxldGVkLlxyXG4gICAgICAgICAqICAgIChUaGUgY2xhc3MgbmFtZSBpcyBwcmVjZWRlZCBieSBcIi5cIiBbXCIuY2xhc3NOYW1lXCJdKVxyXG4gICAgICAgICAqIDYuIFVzZSBhIGxpc3Qgb2Ygc3R5bGVzIGFuZCBjbGFzc2VzIG9mIFwiYXBwZW5kTm9kZVwiIGluIFwic3R5bGVBcnJheVwiIHRvIGF2b2lkIGR1cGxpY2F0ZSBwcm9wZXJ0eSB2YWx1ZXMuXHJcbiAgICAgICAgICogNy4gSWYgYSBub2RlIHdpdGggYWxsIHN0eWxlcyBhbmQgY2xhc3NlcyByZW1vdmVkIGhhcyB0aGUgc2FtZSB0YWcgbmFtZSBhcyBcImFwcGVuZE5vZGVcIiBvciBcInJlbW92ZU5vZGVBcnJheVwiLCBvciBcImFwcGVuZE5vZGVcIiBpcyBudWxsLCB0aGF0IG5vZGUgaXMgZGVsZXRlZC5cclxuICAgICAgICAgKiA4LiBSZWdhcmRsZXNzIG9mIHRoZSBzdHlsZSBhbmQgY2xhc3Mgb2YgdGhlIG5vZGUsIHRoZSB0YWcgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBcInJlbW92ZU5vZGVBcnJheVwiIGFyZ3VtZW50IHZhbHVlIGlzIGRlbGV0ZWQuXHJcbiAgICAgICAgICogOS4gSWYgdGhlIFwic3RyaWN0UmVtb3ZlXCIgYXJndW1lbnQgaXMgdHJ1ZSwgb25seSBub2RlcyB3aXRoIGFsbCBzdHlsZXMgYW5kIGNsYXNzZXMgcmVtb3ZlZCBmcm9tIHRoZSBub2RlcyBvZiBcInJlbW92ZU5vZGVBcnJheVwiIGFyZSByZW1vdmVkLlxyXG4gICAgICAgICAqMTAuIEl0IHdvbid0IHdvcmsgaWYgdGhlIHBhcmVudCBub2RlIGhhcyB0aGUgc2FtZSBjbGFzcyBhbmQgc2FtZSB2YWx1ZSBzdHlsZS5cclxuICAgICAgICAgKiAgICBIb3dldmVyLCBpZiB0aGVyZSBpcyBhIHZhbHVlIGluIFwicmVtb3ZlTm9kZUFycmF5XCIsIGl0IHdvcmtzIGFuZCB0aGUgdGV4dCBub2RlIGlzIHNlcGFyYXRlZCBldmVuIGlmIHRoZXJlIGlzIG5vIG5vZGUgdG8gcmVwbGFjZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gYXBwZW5kTm9kZSBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCB0byB0aGUgc2VsZWN0aW9uLiBJZiBpdCBpcyBudWxsLCBvbmx5IGRlbGV0ZSB0aGUgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHN0eWxlQXJyYXkgVGhlIHN0eWxlIG9yIGNsYXNzTmFtZSBhdHRyaWJ1dGUgbmFtZSBBcnJheSB0byBjaGVjayAoWydmb250LXNpemUnXSwgWycuY2xhc3NOYW1lJ10sIFsnZm9udC1mYW1pbHknLCAnY29sb3InLCAnLmNsYXNzTmFtZSddLi4uXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHJlbW92ZU5vZGVBcnJheSBBbiBhcnJheSBvZiBub2RlIG5hbWVzIHRvIHJlbW92ZSB0eXBlcyBmcm9tLCByZW1vdmUgYWxsIGZvcm1hdHMgd2hlbiBcImFwcGVuZE5vZGVcIiBpcyBudWxsIGFuZCB0aGVyZSBpcyBhbiBlbXB0eSBhcnJheSBvciBudWxsIHZhbHVlLiAoWydzcGFuJ10sIFsnc3Ryb25nJywgJ2VtJ10gLi4uXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW58bnVsbH0gc3RyaWN0UmVtb3ZlIElmIHRydWUsIG9ubHkgbm9kZXMgd2l0aCBhbGwgc3R5bGVzIGFuZCBjbGFzc2VzIHJlbW92ZWQgZnJvbSB0aGUgbm9kZXMgb2YgXCJyZW1vdmVOb2RlQXJyYXlcIiBhcmUgcmVtb3ZlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBub2RlQ2hhbmdlOiBmdW5jdGlvbiAoYXBwZW5kTm9kZSwgc3R5bGVBcnJheSwgcmVtb3ZlTm9kZUFycmF5LCBzdHJpY3RSZW1vdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzZXRSYW5nZVRvVGV4dE5vZGUoKTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHN0eWxlQXJyYXkgPSBzdHlsZUFycmF5ICYmIHN0eWxlQXJyYXkubGVuZ3RoID4gMCA/IHN0eWxlQXJyYXkgOiBmYWxzZTtcclxuICAgICAgICAgICAgcmVtb3ZlTm9kZUFycmF5ID0gcmVtb3ZlTm9kZUFycmF5ICYmIHJlbW92ZU5vZGVBcnJheS5sZW5ndGggPiAwID8gcmVtb3ZlTm9kZUFycmF5IDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc1JlbW92ZU5vZGUgPSAhYXBwZW5kTm9kZTtcclxuICAgICAgICAgICAgY29uc3QgaXNSZW1vdmVGb3JtYXQgPSBpc1JlbW92ZU5vZGUgJiYgIXJlbW92ZU5vZGVBcnJheSAmJiAhc3R5bGVBcnJheTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgaWYgKChpc1JlbW92ZUZvcm1hdCAmJiByYW5nZS5jb2xsYXBzZWQgJiYgdXRpbC5pc0Zvcm1hdEVsZW1lbnQoc3RhcnRDb24ucGFyZW50Tm9kZSkpIHx8IChzdGFydENvbiA9PT0gZW5kQ29uICYmIHN0YXJ0Q29uLm5vZGVUeXBlID09PSAxICYmIHV0aWwuaXNOb25FZGl0YWJsZShzdGFydENvbikpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBzdGFydENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSB8fCAhdXRpbC5nZXRWYWx1ZXMoZm9ybWF0LnN0eWxlKS5zb21lKGZ1bmN0aW9uKGspIHsgcmV0dXJuIHRoaXMuX2xpc3RLZWJhYi5pbmRleE9mKGspID4gLTE7IH0uYmluZCh0aGlzKSkpIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAmJiAhaXNSZW1vdmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydENvbi5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKHN0YXJ0Q29uKSAmJiAhdXRpbC5pc0NvbXBvbmVudChzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2N1c05vZGUgPSBzdGFydENvbi5jaGlsZE5vZGVzW3N0YXJ0T2ZmXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvY3VzTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvY3VzTm9kZS5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHV0aWwuaXNCcmVhayhmb2N1c05vZGUpID8gZm9jdXNOb2RlIDogZm9jdXNOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIGFmdGVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZSh6ZXJvV2lkdGgsIDEsIHplcm9XaWR0aCwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmYgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoc3RhcnRDb24pKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydENvbiA9IHN0YXJ0Q29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdIHx8IHN0YXJ0Q29uLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGVuZENvbikpIHtcclxuICAgICAgICAgICAgICAgIGVuZENvbiA9IGVuZENvbi5jaGlsZE5vZGVzW2VuZE9mZl0gfHwgZW5kQ29uLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGVuZE9mZiA9IGVuZENvbi50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3UmVnRXhwID0gX3cuUmVnRXhwO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlTmFtZSA9IGFwcGVuZE5vZGUubm9kZU5hbWU7XHJcblxyXG4gICAgICAgICAgICAvKiBjaGVja2VkIHNhbWUgc3R5bGUgcHJvcGVydHkgKi9cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBzdGFydENvbiA9PT0gZW5kQ29uICYmICFyZW1vdmVOb2RlQXJyYXkgJiYgYXBwZW5kTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNOb2RlID0gc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tDbnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tBdHRycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrU3R5bGVzID0gYXBwZW5kTm9kZS5zdHlsZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGVja1N0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQXR0cnMucHVzaChjaGVja1N0eWxlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2tlY2tDbGFzc2VzID0gYXBwZW5kTm9kZS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2tlY2tDbGFzc2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tBdHRycy5wdXNoKCcuJyArIGNrZWNrQ2xhc3Nlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrQXR0cnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCF1dGlsLmlzRm9ybWF0RWxlbWVudChzTm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoZWNrQXR0cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBjaGVja0F0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzUmVnID0gL15cXC4vLnRlc3QocykgPyBuZXcgd1JlZ0V4cCgnXFxcXHMqJyArIHMucmVwbGFjZSgvXlxcLi8sICcnKSArICcoXFxcXHMrfCQpJywgJ2lnJykgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVDaGVjayA9IGlzUmVtb3ZlTm9kZSA/ICEhc05vZGUuc3R5bGVbc10gOiAoISFzTm9kZS5zdHlsZVtzXSAmJiAhIWFwcGVuZE5vZGUuc3R5bGVbc10gJiYgc05vZGUuc3R5bGVbc10gPT09IGFwcGVuZE5vZGUuc3R5bGVbc10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzQ2hlY2sgPSBjbGFzc1JlZyA9PT0gZmFsc2UgPyBmYWxzZSA6IGlzUmVtb3ZlTm9kZSA/ICEhc05vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKSA6ICEhc05vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKSAmJiAhIWFwcGVuZE5vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVDaGVjayB8fCBjbGFzc0NoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrQ250Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNOb2RlID0gc05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0NudCA+PSBjaGVja0F0dHJzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB7fSwgZW5kID0ge307XHJcbiAgICAgICAgICAgIGxldCBuZXdOb2RlLCBzdHlsZVJlZ0V4cCA9ICcnLCBjbGFzc1JlZ0V4cCA9ICcnLCByZW1vdmVOb2RlUmVnRXhwID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3R5bGVBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlQXJyYXkubGVuZ3RoLCBzOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gc3R5bGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXC4vLnRlc3QocykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NSZWdFeHAgKz0gKGNsYXNzUmVnRXhwID8gJ3wnIDogJ1xcXFxzKig/OicpICsgcy5yZXBsYWNlKC9eXFwuLywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlUmVnRXhwICs9IChzdHlsZVJlZ0V4cCA/ICd8JyA6ICcoPzo7fF58XFxcXHMpKD86JykgKyBzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVJlZ0V4cCArPSAnKVxcXFxzKjpbXjtdKlxcXFxzKig/Ojt8JCknO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlUmVnRXhwID0gbmV3IHdSZWdFeHAoc3R5bGVSZWdFeHAsICdpZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc1JlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzUmVnRXhwICs9ICcpKD89XFxcXHMrfCQpJztcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1JlZ0V4cCA9IG5ldyB3UmVnRXhwKGNsYXNzUmVnRXhwLCAnaWcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlbW92ZU5vZGVBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTm9kZVJlZ0V4cCA9ICdeKD86JyArIHJlbW92ZU5vZGVBcnJheVswXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcmVtb3ZlTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZVJlZ0V4cCArPSAnfCcgKyByZW1vdmVOb2RlQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlUmVnRXhwICs9ICcpJCc7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlUmVnRXhwID0gbmV3IHdSZWdFeHAocmVtb3ZlTm9kZVJlZ0V4cCwgJ2knKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHZhbGlkYXRpb24gY2hlY2sgZnVuY3Rpb24qL1xyXG4gICAgICAgICAgICBjb25zdCB3Qm9vbGVhbiA9IF93LkJvb2xlYW47XHJcbiAgICAgICAgICAgIGNvbnN0IF9yZW1vdmVDaGVjayA9IHt2OiBmYWxzZX07XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoY2hlY2tOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2Tm9kZSA9IGNoZWNrTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGFsbCBwYXRoXHJcbiAgICAgICAgICAgICAgICBpZiAodk5vZGUubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKHZOb2RlKSkgcmV0dXJuIHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgLy8gYWxsIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVtb3ZlRm9ybWF0KSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgbm9kZSBjaGVja1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFnUmVtb3ZlID0gKCFyZW1vdmVOb2RlUmVnRXhwICYmIGlzUmVtb3ZlTm9kZSkgfHwgKHJlbW92ZU5vZGVSZWdFeHAgJiYgcmVtb3ZlTm9kZVJlZ0V4cC50ZXN0KHZOb2RlLm5vZGVOYW1lKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGFnIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhZ1JlbW92ZSAmJiAhc3RyaWN0UmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN0eWxlIHJlZ2V4cFxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luU3R5bGUgPSB2Tm9kZS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHAgJiYgb3JpZ2luU3R5bGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gb3JpZ2luU3R5bGUucmVwbGFjZShzdHlsZVJlZ0V4cCwgJycpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGUgIT09IG9yaWdpblN0eWxlKSBfcmVtb3ZlQ2hlY2sudiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2xhc3MgY2hlY2tcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbkNsYXNzZXMgPSB2Tm9kZS5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2xhc3NlcyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzUmVnRXhwICYmIG9yaWdpbkNsYXNzZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBvcmlnaW5DbGFzc2VzLnJlcGxhY2UoY2xhc3NSZWdFeHAsICcnKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMgIT09IG9yaWdpbkNsYXNzZXMpIF9yZW1vdmVDaGVjay52ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgb25seVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoY2xhc3NSZWdFeHAgfHwgIW9yaWdpbkNsYXNzZXMpICYmIChzdHlsZVJlZ0V4cCB8fCAhb3JpZ2luU3R5bGUpICYmICFzdHlsZSAmJiAhY2xhc3NlcyAmJiB0YWdSZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUgfHwgY2xhc3NlcyB8fCB2Tm9kZS5ub2RlTmFtZSAhPT0gbmV3Tm9kZU5hbWUgfHwgKHdCb29sZWFuKHN0eWxlUmVnRXhwKSAhPT0gd0Jvb2xlYW4ob3JpZ2luU3R5bGUpKSB8fCAod0Jvb2xlYW4oY2xhc3NSZWdFeHApICE9PSB3Qm9vbGVhbihvcmlnaW5DbGFzc2VzKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHAgJiYgb3JpZ2luU3R5bGUubGVuZ3RoID4gMCkgdk5vZGUuc3R5bGUuY3NzVGV4dCA9IHN0eWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdk5vZGUuc3R5bGUuY3NzVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NSZWdFeHAgJiYgb3JpZ2luQ2xhc3Nlcy5sZW5ndGggPiAwKSB2Tm9kZS5jbGFzc05hbWUgPSBjbGFzc2VzLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZOb2RlLmNsYXNzTmFtZS50cmltKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2Tm9kZS5zdHlsZS5jc3NUZXh0ICYmICF2Tm9kZS5jbGFzc05hbWUgJiYgKHZOb2RlLm5vZGVOYW1lID09PSBuZXdOb2RlTmFtZSB8fCB0YWdSZW1vdmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdk5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBnZXQgbGluZSBub2Rlc1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lTm9kZXMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMobnVsbCk7XHJcbiAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KHN0YXJ0Q29uLCBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRDb24gPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lTm9kZXNbMF0sIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KGVuZENvbiwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgIGVuZENvbiA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVOb2Rlc1tsaW5lTm9kZXMubGVuZ3RoIC0gMV0sIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBlbmRPZmYgPSBlbmRDb24udGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb25lTGluZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzdGFydENvbiwgbnVsbCkgPT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChlbmRDb24sIG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBlbmRMZW5ndGggPSBsaW5lTm9kZXMubGVuZ3RoIC0gKG9uZUxpbmUgPyAwIDogMSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub2RlIENoYW5nZXNcclxuICAgICAgICAgICAgbmV3Tm9kZSA9IGFwcGVuZE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzUmVtb3ZlQW5jaG9yID0gaXNSZW1vdmVGb3JtYXQgfHwgKGlzUmVtb3ZlTm9kZSAmJiAoZnVuY3Rpb24gKGFycikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbiA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IG4gPCBsZW47IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLl9pc01haW50YWluZWROb2RlKGFycltuXSkgfHwgdXRpbC5faXNTaXplTm9kZShhcnJbbl0pKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSkocmVtb3ZlTm9kZUFycmF5KSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc1NpemVOb2RlID0gaXNSZW1vdmVOb2RlIHx8IHV0aWwuX2lzU2l6ZU5vZGUobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9nZXRNYWludGFpbmVkTm9kZSA9IHRoaXMuX3V0aWxfZ2V0TWFpbnRhaW5lZE5vZGUuYmluZCh1dGlsLCBpc1JlbW92ZUFuY2hvciwgaXNTaXplTm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9pc01haW50YWluZWROb2RlID0gdGhpcy5fdXRpbF9pc01haW50YWluZWROb2RlLmJpbmQodXRpbCwgaXNSZW1vdmVBbmNob3IsIGlzU2l6ZU5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gb25lIGxpbmVcclxuICAgICAgICAgICAgaWYgKG9uZUxpbmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXNldENvbW1vbkxpc3RDZWxsKGxpbmVOb2Rlc1swXSwgc3R5bGVBcnJheSkpIHJhbmdlID0gdGhpcy5zZXRSYW5nZShzdGFydENvbiwgc3RhcnRPZmYsIGVuZENvbiwgZW5kT2ZmKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSYW5nZSA9IHRoaXMuX25vZGVDaGFuZ2Vfb25lTGluZShsaW5lTm9kZXNbMF0sIG5ld05vZGUsIHZhbGlkYXRpb24sIHN0YXJ0Q29uLCBzdGFydE9mZiwgZW5kQ29uLCBlbmRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIHJhbmdlLmNvbGxhcHNlZCwgX3JlbW92ZUNoZWNrLCBfZ2V0TWFpbnRhaW5lZE5vZGUsIF9pc01haW50YWluZWROb2RlKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LmNvbnRhaW5lciA9IG5ld1JhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQub2Zmc2V0ID0gbmV3UmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBlbmQuY29udGFpbmVyID0gbmV3UmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgZW5kLm9mZnNldCA9IG5ld1JhbmdlLmVuZE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQuY29udGFpbmVyID09PSBlbmQuY29udGFpbmVyICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHN0YXJ0LmNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydC5vZmZzZXQgPSBlbmQub2Zmc2V0ID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENvbW1vbkxpc3RTdHlsZShuZXdSYW5nZS5hbmNlc3RvciwgbnVsbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIG11bHRpIGxpbmUgXHJcbiAgICAgICAgICAgICAgICBsZXQgYXBwbGllZENvbW1vbkxpc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmRMZW5ndGggPiAwICYmIHRoaXMuX3Jlc2V0Q29tbW9uTGlzdENlbGwobGluZU5vZGVzW2VuZExlbmd0aF0sIHN0eWxlQXJyYXkpKSBhcHBsaWVkQ29tbW9uTGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVzZXRDb21tb25MaXN0Q2VsbChsaW5lTm9kZXNbMF0sIHN0eWxlQXJyYXkpKSBhcHBsaWVkQ29tbW9uTGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGllZENvbW1vbkxpc3QpIHRoaXMuc2V0UmFuZ2Uoc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZW5kXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBhcHBlbmROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdGhpcy5fbm9kZUNoYW5nZV9lbmRMaW5lKGxpbmVOb2Rlc1tlbmRMZW5ndGhdLCBuZXdOb2RlLCB2YWxpZGF0aW9uLCBlbmRDb24sIGVuZE9mZiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBfZ2V0TWFpbnRhaW5lZE5vZGUsIF9pc01haW50YWluZWROb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBtaWRcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBlbmRMZW5ndGggLSAxLCBuZXdSYW5nZTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q29tbW9uTGlzdENlbGwobGluZU5vZGVzW2ldLCBzdHlsZUFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gYXBwZW5kTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1JhbmdlID0gdGhpcy5fbm9kZUNoYW5nZV9taWRkbGVMaW5lKGxpbmVOb2Rlc1tpXSwgbmV3Tm9kZSwgdmFsaWRhdGlvbiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBlbmQuY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UmFuZ2UuZW5kQ29udGFpbmVyICYmIG5ld1JhbmdlLmFuY2VzdG9yLmNvbnRhaW5zKG5ld1JhbmdlLmVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kLmFuY2VzdG9yID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kLmNvbnRhaW5lciA9IG5ld1JhbmdlLmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tbW9uTGlzdFN0eWxlKG5ld1JhbmdlLmFuY2VzdG9yLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydFxyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFwcGVuZE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5fbm9kZUNoYW5nZV9zdGFydExpbmUobGluZU5vZGVzWzBdLCBuZXdOb2RlLCB2YWxpZGF0aW9uLCBzdGFydENvbiwgc3RhcnRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIF9yZW1vdmVDaGVjaywgX2dldE1haW50YWluZWROb2RlLCBfaXNNYWludGFpbmVkTm9kZSwgZW5kLmNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0LmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5hbmNlc3RvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLmNvbnRhaW5lciA9IHN0YXJ0LmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzdGFydDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWVuZC5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQuYW5jZXN0b3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5jb250YWluZXIgPSBzdGFydC5jb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLm9mZnNldCA9IHN0YXJ0LmNvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tbW9uTGlzdFN0eWxlKHN0YXJ0LmFuY2VzdG9yLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENvbW1vbkxpc3RTdHlsZShlbmQuYW5jZXN0b3IgfHwgdXRpbC5nZXRGb3JtYXRFbGVtZW50KGVuZC5jb250YWluZXIpLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHJhbmdlXHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShzdGFydC5jb250YWluZXIsIHN0YXJ0Lm9mZnNldCwgZW5kLmNvbnRhaW5lciwgZW5kLm9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXQgY29tbW9uIHN0eWxlIG9mIGxpc3QgY2VsbFxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgTGlzdCBjZWxsIGVsZW1lbnQuIDxsaT5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHN0eWxlQXJyYXkgU3R5bGUgYXJyYXlcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9yZXNldENvbW1vbkxpc3RDZWxsOiBmdW5jdGlvbiAoZWwsIHN0eWxlQXJyYXkpIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdENlbGwoZWwpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICghc3R5bGVBcnJheSkgc3R5bGVBcnJheSA9IHRoaXMuX2xpc3RLZWJhYjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdXRpbC5nZXRBcnJheUl0ZW0oKGVsKS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gIXV0aWwuaXNCcmVhayhjdXJyZW50KTsgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsU3R5bGVzID0gZWwuc3R5bGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlYyA9IFtdLCBlayA9IFtdLCBlbEtleXMgPSB1dGlsLmdldFZhbHVlcyhlbFN0eWxlcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9saXN0S2ViYWIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbEtleXMuaW5kZXhPZih0aGlzLl9saXN0S2ViYWJbaV0pID4gLTEgJiYgc3R5bGVBcnJheS5pbmRleE9mKHRoaXMuX2xpc3RLZWJhYltpXSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVjLnB1c2godGhpcy5fbGlzdENhbWVsW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBlay5wdXNoKHRoaXMuX2xpc3RLZWJhYltpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZWMubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyByZXNldCBjZWxsIHN0eWxlLS0tXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlYy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVmZXIuc3R5bGVbZWNbaV1dID0gZWxTdHlsZXNbZWtbaV1dO1xyXG4gICAgICAgICAgICAgICAgZWxTdHlsZXMucmVtb3ZlUHJvcGVydHkoZWtbaV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsID0gcmVmZXIuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgbGV0IHIgPSBudWxsLCBhcHBsaWVkRWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aCwgYywgczsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5fdGV4dFRhZ3NNYXBbYy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcyA9IHV0aWwuZ2V0VmFsdWVzKGMuc3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMubGVuZ3RoID09PSAwIHx8IChlYy5zb21lKGZ1bmN0aW9uIChrKSB7cmV0dXJuIHMuaW5kZXhPZihrKSA9PT0gLTE7fSkgJiYgcy5zb21lKGZ1bmN0aW9uKGspIHtlYy5pbmRleE9mKGspID4gLTE7fSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IGMubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsLmFwcGVuZENoaWxkKGMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWwuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKHNlbCwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsID0gcmVmZXIuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBhcHBsaWVkRWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKHNlbCwgcik7XHJcbiAgICAgICAgICAgICAgICBhcHBsaWVkRWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZWxTdHlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhcHBsaWVkRWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIGNlcnRhaW4gc3R5bGVzIGFyZSBhcHBsaWVkIHRvIGFsbCBjaGlsZCBub2RlcyBvZiB0aGUgbGlzdCBjZWxsLCB0aGUgc3R5bGUgb2YgdGhlIGxpc3QgY2VsbCBpcyBhbHNvIGNoYW5nZWQuIChib2xkLCBjb2xvciwgc2l6ZSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIExpc3QgY2VsbCBlbGVtZW50LiA8bGk+XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGNoaWxkIFZhcmlhYmxlIGZvciByZWN1cnNpdmUgY2FsbC4gKFwibnVsbFwiIG9uIHRoZSBmaXJzdCBjYWxsKVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldENvbW1vbkxpc3RTdHlsZTogZnVuY3Rpb24gKGVsLCBjaGlsZCkge1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNMaXN0Q2VsbChlbCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdXRpbC5nZXRBcnJheUl0ZW0oKGNoaWxkIHx8IGVsKS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gIXV0aWwuaXNCcmVhayhjdXJyZW50KTsgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5bMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkIHx8IGNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgY2hpbGQubm9kZVR5cGUgIT09IDEpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBjZWxsIHN0eWxlLS0tXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkU3R5bGUgPSBjaGlsZC5zdHlsZTtcclxuICAgICAgICAgICAgY29uc3QgZWxTdHlsZSA9IGVsLnN0eWxlO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGxldCBhcHBsaWVkRWwgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJvbGQsIGl0YWxpY1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5fdGV4dFRhZ3NNYXBbbm9kZU5hbWVdID09PSBvcHRpb25zLl9kZWZhdWx0Q29tbWFuZC5ib2xkLnRvTG93ZXJDYXNlKCkpIGVsU3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuX3RleHRUYWdzTWFwW25vZGVOYW1lXSA9PT0gb3B0aW9ucy5fZGVmYXVsdENvbW1hbmQuaXRhbGljLnRvTG93ZXJDYXNlKCkpIGVsU3R5bGUuZm9udFN0eWxlID0gJ2l0YWxpYyc7XHJcblxyXG4gICAgICAgICAgICAvLyBzdHlsZXNcclxuICAgICAgICAgICAgY29uc3QgY0tleXMgPSB1dGlsLmdldFZhbHVlcyhjaGlsZFN0eWxlKTtcclxuICAgICAgICAgICAgaWYgKGNLZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9saXN0Q2FtZWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY0tleXMuaW5kZXhPZih0aGlzLl9saXN0S2ViYWJbaV0pID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxTdHlsZVt0aGlzLl9saXN0Q2FtZWxbaV1dID0gY2hpbGRTdHlsZVt0aGlzLl9saXN0Q2FtZWxbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFN0eWxlLnJlbW92ZVByb3BlcnR5KHRoaXMuX2xpc3RLZWJhYltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpZWRFbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRDb21tb25MaXN0U3R5bGUoZWwsIGNoaWxkKTtcclxuICAgICAgICAgICAgaWYgKCFhcHBsaWVkRWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbW1vbiBzdHlsZVxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkU3R5bGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGNoaWxkLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gY2hpbGQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBjaGlsZC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjaC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5pbnNlcnRCZWZvcmUoY2hbMF0sIG4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdHJpcCByZW1vdmUgbm9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gcmVtb3ZlTm9kZSBUaGUgcmVtb3ZlIG5vZGVcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zdHJpcFJlbW92ZU5vZGU6IGZ1bmN0aW9uIChyZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZW1vdmVOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIGlmICghcmVtb3ZlTm9kZSB8fCByZW1vdmVOb2RlLm5vZGVUeXBlID09PSAzIHx8ICFlbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHJlbW92ZU5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZHJlblswXSwgcmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybiB0aGUgcGFyZW50IG1haW50YWluZWQgdGFnLiAoYmluZCBhbmQgdXNlIGEgdXRpbCBvYmplY3QpXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF91dGlsX2dldE1haW50YWluZWROb2RlOiBmdW5jdGlvbiAoX2lzUmVtb3ZlLCBfaXNTaXplTm9kZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgX2lzUmVtb3ZlKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLl9pc01haW50YWluZWROb2RlLmJpbmQodGhpcykpIHx8ICghX2lzU2l6ZU5vZGUgPyB0aGlzLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdGhpcy5faXNTaXplTm9kZS5iaW5kKHRoaXMpKSA6IG51bGwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayBpZiBlbGVtZW50IGlzIGEgdGFnIHRoYXQgc2hvdWxkIGJlIHBlcnNpc3RlZC4gKGJpbmQgYW5kIHVzZSBhIHV0aWwgb2JqZWN0KVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50XHJcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdXRpbF9pc01haW50YWluZWROb2RlOiBmdW5jdGlvbiAoX2lzUmVtb3ZlLCBfaXNTaXplTm9kZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgX2lzUmVtb3ZlIHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gdGhpcy5faXNNYWludGFpbmVkTm9kZShlbGVtZW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLl9pc01haW50YWluZWROb2RlLmJpbmQodGhpcykpID8gYW5jaG9yIDogKGFuY2hvciB8fCAoIV9pc1NpemVOb2RlID8gdGhpcy5faXNTaXplTm9kZShlbGVtZW50KSA6IGZhbHNlKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHdyYXBzIHRleHQgbm9kZXMgb2YgbGluZSBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgbm9kZSBvZiB0aGUgbGluZSB0aGF0IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCB0ZXh0IG5vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdJbm5lck5vZGUgVGhlIGRvbSB0aGF0IHdpbGwgd3JhcCB0aGUgc2VsZWN0ZWQgdGV4dCBhcmVhXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsaWRhdGlvbiBDaGVjayBpZiB0aGUgbm9kZSBzaG91bGQgYmUgc3RyaXBwZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBzdGFydENvbiBUaGUgc3RhcnRDb250YWluZXIgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0T2ZmIFRoZSBzdGFydE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IGVuZENvbiBUaGUgZW5kQ29udGFpbmVyIHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRPZmYgVGhlIGVuZE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVtb3ZlRm9ybWF0IElzIHRoZSByZW1vdmUgYWxsIGZvcm1hdHMgY29tbWFuZD9cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVtb3ZlTm9kZSBcIm5ld0lubmVyTm9kZVwiIGlzIHJlbW92ZSBub2RlP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY29sbGFwc2VkIHJhbmdlLmNvbGxhcHNlZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7YW5jZXN0b3I6ICosIHN0YXJ0Q29udGFpbmVyOiAqLCBzdGFydE9mZnNldDogKiwgZW5kQ29udGFpbmVyOiAqLCBlbmRPZmZzZXQ6ICp9fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2Vfb25lTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgY29sbGFwc2VkLCBfcmVtb3ZlQ2hlY2ssIF9nZXRNYWludGFpbmVkTm9kZSwgX2lzTWFpbnRhaW5lZE5vZGUpIHtcclxuICAgICAgICAgICAgLy8gbm90IGFkZCB0YWdcclxuICAgICAgICAgICAgbGV0IHBhcmVudENvbiA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24gPT09IGVuZENvbi5wYXJlbnROb2RlICYmIHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uoc3RhcnRDb24udGV4dENvbnRlbnQuc2xpY2UoMCwgc3RhcnRPZmYpKSAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShlbmRDb24udGV4dENvbnRlbnQuc2xpY2UoZW5kT2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudENvbi5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aCwgYywgcywgZSwgejsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeiA9ICF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09IHN0YXJ0Q29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID09PSBlbmRDb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghcyAmJiB6KSB8fCAocyAmJiBlICYmIHopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lVGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNhbWVUYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhwYXJlbnRDb24sIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3I6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lcjogc3RhcnRDb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldDogc3RhcnRPZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldDogZW5kT2ZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGFnXHJcbiAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgaXNTYW1lTm9kZSA9IHN0YXJ0Q29uID09PSBlbmRDb247XHJcbiAgICAgICAgICAgIGxldCBzdGFydENvbnRhaW5lciA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRPZmZzZXQgPSBzdGFydE9mZjtcclxuICAgICAgICAgICAgbGV0IGVuZENvbnRhaW5lciA9IGVuZENvbjtcclxuICAgICAgICAgICAgbGV0IGVuZE9mZnNldCA9IGVuZE9mZjtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0UGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgZW5kUGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGNzc1RleHQsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3UmVnRXhwID0gX3cuUmVnRXhwO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0NzcyAodk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyB3UmVnRXhwKCcoPzo7fF58XFxcXHMpKD86JyArIGNzc1RleHQgKyAnbnVsbClcXFxccyo6W147XSpcXFxccyooPzo7fCQpJywgJ2lnJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVnRXhwICYmIHZOb2RlLnN0eWxlLmNzc1RleHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gcmVnRXhwLnRlc3Qodk5vZGUuc3R5bGUuY3NzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFzdHlsZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCwgYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBjdXJyZW50LmNoaWxkTm9kZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkTm9kZXMubGVuZ3RoLCB2Tm9kZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGROb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY292ZXJOb2RlID0gYW5jZXN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsb25lTm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnRDb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0UGFzcyAmJiBjaGlsZCA9PT0gc3RhcnRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBwTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShzdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSA/ICcnIDogc3RhcnRDb250YWluZXIuc3Vic3RyaW5nRGF0YSgwLCBzdGFydE9mZnNldCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoc3RhcnRDb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IHN0YXJ0Q29udGFpbmVyLnN1YnN0cmluZ0RhdGEoc3RhcnRPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVOb2RlID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW5kT2Zmc2V0ID49IHN0YXJ0T2Zmc2V0ID8gZW5kT2Zmc2V0IC0gc3RhcnRPZmZzZXQgOiBzdGFydENvbnRhaW5lci5kYXRhLmxlbmd0aCAtIHN0YXJ0T2Zmc2V0KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIuZGF0YS5sZW5ndGggLSBzdGFydE9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGEucGFyZW50Tm9kZSAhPT0gbGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG0ucGFyZW50Tm9kZSAhPT0gbGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IHAgPSBtLnBhcmVudE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobS5jaGlsZE5vZGVzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKG0uY2hpbGROb2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5hcHBlbmRDaGlsZChwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IG0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IGFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShwcmV2Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKHByZXZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkFuY2hvck5vZGUgPSBfZ2V0TWFpbnRhaW5lZE5vZGUoYW5jZXN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFwcmV2QW5jaG9yTm9kZSkgYW5jaG9yTm9kZSA9IHByZXZBbmNob3JOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSkgbGluZSA9IGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld05vZGUgIT09IGxpbmUgJiYgbmV3Tm9kZSAhPT0gZWwgJiYgbmV3Tm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBfaXNNYWludGFpbmVkTm9kZShuZXdOb2RlKSA/IG51bGwgOiB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEgJiYgY2hlY2tDc3MobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ICs9IG5ld05vZGUuc3R5bGUuY3NzVGV4dC5zdWJzdHIoMCwgbmV3Tm9kZS5zdHlsZS5jc3NUZXh0LmluZGV4T2YoJzonKSkgKyAnfCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSAmJiAhX2dldE1haW50YWluZWROb2RlKGVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UGFzcyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZSAhPT0gdGV4dE5vZGUpIG5ld05vZGUuYXBwZW5kQ2hpbGQoc3RhcnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU2FtZU5vZGUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmRQYXNzICYmIGNoaWxkID09PSBlbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyTm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoZW5kQ29udGFpbmVyLm5vZGVUeXBlID09PSAxID8gJycgOiBlbmRDb250YWluZXIuc3Vic3RyaW5nRGF0YShlbmRPZmZzZXQsIChlbmRDb250YWluZXIubGVuZ3RoIC0gZW5kT2Zmc2V0KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoaXNTYW1lTm9kZSB8fCBlbmRDb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGVuZENvbnRhaW5lci5zdWJzdHJpbmdEYXRhKDAsIGVuZE9mZnNldCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3SW5uZXJOb2RlLnBhcmVudE5vZGUpICYmICFhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld05vZGUgIT09IHBOb2RlICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBjaGVja0NzcyhuZXdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIGFuY2hvcnMucHVzaChuZXdOb2RlLmNsb25lTm9kZShmYWxzZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHBDdXJyZW50LnB1c2gobmV3Tm9kZS5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSBuZXdOb2RlLnN0eWxlLmNzc1RleHQuc3Vic3RyKDAsIG5ld05vZGUuc3R5bGUuY3NzVGV4dC5pbmRleE9mKCc6JykpICsgJ3wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVOb2RlID0gYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBhZnRlck5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocEN1cnJlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlLnRleHRDb250ZW50ID0gYWZ0ZXJOb2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlICYmIGNsb25lTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJBbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXJBbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IGFmdGVyQW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuZXdOb2RlICE9PSBwTm9kZSAmJiBuZXdOb2RlICE9PSBlbCAmJiBuZXdOb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZSA9IF9pc01haW50YWluZWROb2RlKG5ld05vZGUpID8gbnVsbCA6IHZhbGlkYXRpb24obmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodk5vZGUgJiYgbmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBjaGVja0NzcyhuZXdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gbmV3Tm9kZS5zdHlsZS5jc3NUZXh0LnN1YnN0cigwLCBuZXdOb2RlLnN0eWxlLmNzc1RleHQuaW5kZXhPZignOicpKSArICd8JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIGFuY2hvck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChhbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldCA9IHRleHROb2RlLmRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRQYXNzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNSZW1vdmVGb3JtYXQgJiYgY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHROb2RlLnRleHRDb250ZW50ID0gdXRpbC56ZXJvV2lkdGhTcGFjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vZGUgIT09IHRleHROb2RlKSBuZXdOb2RlLmFwcGVuZENoaWxkKGVuZENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRQYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBlbmRQYXNzID8gbmV3Tm9kZS5jbG9uZU5vZGUoZmFsc2UpIDogdmFsaWRhdGlvbihuZXdOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdOb2RlLm5vZGVUeXBlID09PSAxICYmICF1dGlsLmlzQnJlYWsoY2hpbGQpICYmIHZOb2RlICYmIGNoZWNrQ3NzKG5ld05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc01haW50YWluZWROb2RlKG5ld05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5jaG9yTm9kZSkgYW5jaG9ycy5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSBuZXdOb2RlLnN0eWxlLmNzc1RleHQuc3Vic3RyKDAsIG5ld05vZGUuc3R5bGUuY3NzVGV4dC5pbmRleE9mKCc6JykpICsgJ3wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IHBDdXJyZW50LmNvbmNhdChhbmNob3JzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc01haW50YWluZWROb2RlKG5ld0lubmVyTm9kZS5wYXJlbnROb2RlKSAmJiAhX2lzTWFpbnRhaW5lZE5vZGUoY2hpbGROb2RlKSAmJiAhdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UobmV3SW5uZXJOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbk5vZGVBcnJheS5wdXNoKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW5kUGFzcyAmJiAhYW5jaG9yTm9kZSAmJiBfaXNNYWludGFpbmVkTm9kZShjaGlsZE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFDaGlsZHJlbiA9IGNoaWxkTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYSA9IDAsIGFMZW4gPSBhQ2hpbGRyZW4ubGVuZ3RoOyBhIDwgYUxlbjsgYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGFDaGlsZHJlblthXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbm5lck5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgYW5jZXN0b3IgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZE5vZGUgPT09IGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZFBhc3MpIGFuY2VzdG9yID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IHBOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVuZFBhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUgJiYgY2hpbGQubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZ2V0TWFpbnRhaW5lZE5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jZXN0b3JBbmNob3JOb2RlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGFuY2VzdG9yLCBmdW5jdGlvbiAoY3VycmVudCkge3JldHVybiB0aGlzLl9pc01haW50YWluZWROb2RlKGN1cnJlbnQucGFyZW50Tm9kZSkgfHwgY3VycmVudC5wYXJlbnROb2RlID09PSBwTm9kZTt9LmJpbmQodXRpbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUuYXBwZW5kQ2hpbGQoYW5jZXN0b3JBbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBhbmNlc3RvckFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVOb2RlID0gY2hpbGQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZChjbG9uZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKGNoaWxkKSkgY292ZXJOb2RlID0gY2xvbmVOb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGNoaWxkLCBjb3Zlck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KShlbGVtZW50LCBwTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub3QgcmVtb3ZlIHRhZ1xyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmVOb2RlICYmICFpc1JlbW92ZUZvcm1hdCAmJiAhX3JlbW92ZUNoZWNrLnYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3I6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydE9mZixcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQ6IGVuZE9mZlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNSZW1vdmVGb3JtYXQgPSBpc1JlbW92ZUZvcm1hdCAmJiBpc1JlbW92ZU5vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmVOb2RlID0gbk5vZGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dE5vZGUsIHRleHROb2RlX3MsIHRleHROb2RlX2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5yZXBsYWNlQ2hpbGQodGV4dE5vZGUsIHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJDaGlsZHJlbiA9IHJlbW92ZU5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGVfcyA9IHJDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGVfZSA9IHJDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmluc2VydEJlZm9yZSh0ZXh0Tm9kZV9lLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IGVuZENvbnRhaW5lciA9IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB0ZXh0Tm9kZV9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGV4dE5vZGVfZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Ob2RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaXBSZW1vdmVOb2RlKG5Ob2RlQXJyYXlbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSBlbmRDb250YWluZXIgPSBuZXdJbm5lck5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gc3RhcnRDb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZW5kT2Zmc2V0ID0gZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyIHJlc2V0XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZENvblJlc2V0ID0gaXNSZW1vdmVGb3JtYXQgfHwgZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKGVuZENvbnRhaW5lcikgJiYgZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGVuZENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICBlbmRDb250YWluZXIgPSBzdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmRPZmZzZXQgPSBlbmRDb25SZXNldCA/IGVuZENvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGggOiBlbmRPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAvLyBub2RlIGNoYW5nZVxyXG4gICAgICAgICAgICBjb25zdCBuZXdTdGFydE9mZnNldCA9IHtzOiAwLCBlOiAwfTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQYXRoID0gdXRpbC5nZXROb2RlUGF0aChzdGFydENvbnRhaW5lciwgcE5vZGUsIG5ld1N0YXJ0T2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlRW5kQ29uID0gIWVuZENvbnRhaW5lci5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAobWVyZ2VFbmRDb24pIGVuZENvbnRhaW5lciA9IHN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdFbmRPZmZzZXQgPSB7czogMCwgZTogMH07XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKGVuZENvbnRhaW5lciAsIHBOb2RlLCAoIW1lcmdlRW5kQ29uICYmICFlbmRDb25SZXNldCkgPyBuZXdFbmRPZmZzZXQgOiBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ICs9IG5ld1N0YXJ0T2Zmc2V0LnM7XHJcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IChjb2xsYXBzZWQgPyBzdGFydE9mZnNldCA6IG1lcmdlRW5kQ29uID8gc3RhcnRDb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoIDogZW5kQ29uUmVzZXQgPyBlbmRPZmZzZXQgKyBuZXdTdGFydE9mZnNldC5zIDogZW5kT2Zmc2V0ICsgbmV3RW5kT2Zmc2V0LnMpO1xyXG5cclxuICAgICAgICAgICAgLy8gdGFnIG1lcmdlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld09mZnNldHMgPSB1dGlsLm1lcmdlU2FtZVRhZ3MocE5vZGUsIFtzdGFydFBhdGgsIGVuZFBhdGhdLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB1dGlsLmdldE5vZGVGcm9tUGF0aChzdGFydFBhdGgsIHBOb2RlKTtcclxuICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdXRpbC5nZXROb2RlRnJvbVBhdGgoZW5kUGF0aCwgcE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBwTm9kZSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0Q29udGFpbmVyOiBzdGFydENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydE9mZnNldCArIG5ld09mZnNldHNbMF0sXHJcbiAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIGVuZE9mZnNldDogZW5kT2Zmc2V0ICsgbmV3T2Zmc2V0c1sxXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiB3cmFwcyBmaXJzdCBsaW5lIHNlbGVjdGVkIHRleHQuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBub2RlIG9mIHRoZSBsaW5lIHRoYXQgY29udGFpbnMgdGhlIHNlbGVjdGVkIHRleHQgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5ld0lubmVyTm9kZSBUaGUgZG9tIHRoYXQgd2lsbCB3cmFwIHRoZSBzZWxlY3RlZCB0ZXh0IGFyZWFcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB2YWxpZGF0aW9uIENoZWNrIGlmIHRoZSBub2RlIHNob3VsZCBiZSBzdHJpcHBlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IHN0YXJ0Q29uIFRoZSBzdGFydENvbnRhaW5lciBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRPZmYgVGhlIHN0YXJ0T2Zmc2V0IHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVGb3JtYXQgSXMgdGhlIHJlbW92ZSBhbGwgZm9ybWF0cyBjb21tYW5kP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVOb2RlIFwibmV3SW5uZXJOb2RlXCIgaXMgcmVtb3ZlIG5vZGU/XHJcbiAgICAgICAgICogQHJldHVybnMge251bGx8Tm9kZX0gSWYgZW5kIGNvbnRhaW5lciBpcyByZW5ld2VkLCByZXR1cm5lZCByZW5ld2VkIG5vZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7IGFuY2VzdG9yLCBjb250YWluZXIsIG9mZnNldCwgZW5kQ29udGFpbmVyIH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9ub2RlQ2hhbmdlX3N0YXJ0TGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgc3RhcnRDb24sIHN0YXJ0T2ZmLCBpc1JlbW92ZUZvcm1hdCwgaXNSZW1vdmVOb2RlLCBfcmVtb3ZlQ2hlY2ssIF9nZXRNYWludGFpbmVkTm9kZSwgX2lzTWFpbnRhaW5lZE5vZGUsIF9lbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgLy8gbm90IGFkZCB0YWdcclxuICAgICAgICAgICAgbGV0IHBhcmVudENvbiA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24ubm9kZU5hbWUgPT09IG5ld0lubmVyTm9kZS5ub2RlTmFtZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQocGFyZW50Q29uKSAmJiAhcGFyZW50Q29uLm5leHRTaWJsaW5nICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHN0YXJ0Q29uLnRleHRDb250ZW50LnNsaWNlKDAsIHN0YXJ0T2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBzID0gc3RhcnRDb24ucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwub25seVplcm9XaWR0aFNwYWNlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVUYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHMgPSBzLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2FtZVRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMocGFyZW50Q29uLCBuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBzdGFydENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBzdGFydE9mZlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCB0YWdcclxuICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBuTm9kZUFycmF5ID0gW25ld0lubmVyTm9kZV07XHJcbiAgICAgICAgICAgIGNvbnN0IHBOb2RlID0gZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gc3RhcnRPZmY7XHJcbiAgICAgICAgICAgIGxldCBwYXNzTm9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGgsIHZOb2RlLCBjbG9uZUNoaWxkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdmVyTm9kZSA9IGFuY2VzdG9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFzc05vZGUgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5faXNJZ25vcmVOb2RlQ2hhbmdlKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lQ2hpbGQgPSBjaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQoY2xvbmVDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZW5kQ29udGFpbmVyICYmIGNoaWxkLmNvbnRhaW5zKF9lbmRDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2VuZENvbnRhaW5lciA9IHV0aWwuZ2V0Tm9kZUZyb21QYXRoKGVuZFBhdGgsIGNsb25lQ2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vZGUubm9kZVR5cGUgPT09IDEgJiYgdk5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlKSBhbmNob3JzLnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1RvcE5vZGUgPSBwQ3VycmVudC5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNNYWludGFpbmVkTm9kZShuZXdJbm5lck5vZGUucGFyZW50Tm9kZSkgJiYgIV9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFuY2hvck5vZGUgJiYgX2lzTWFpbnRhaW5lZE5vZGUoY2hpbGROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhQ2hpbGRyZW4gPSBjaGlsZE5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGEgPSAwLCBhTGVuID0gYUNoaWxkcmVuLmxlbmd0aDsgYSA8IGFMZW47IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChhQ2hpbGRyZW5bYV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSAhX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkgPyBuZXdOb2RlIDogbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbk5vZGVBcnJheS5wdXNoKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUb3BOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSAmJiBjaGlsZC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmNlc3RvckFuY2hvck5vZGUgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoYW5jZXN0b3IsIGZ1bmN0aW9uIChjdXJyZW50KSB7cmV0dXJuIHRoaXMuX2lzTWFpbnRhaW5lZE5vZGUoY3VycmVudC5wYXJlbnROb2RlKSB8fCBjdXJyZW50LnBhcmVudE5vZGUgPT09IHBOb2RlO30uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZS5hcHBlbmRDaGlsZChhbmNlc3RvckFuY2hvck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IGFuY2VzdG9yQW5jaG9yTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydENvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFzc05vZGUgJiYgY2hpbGQgPT09IGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZSA9IHBOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldk5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSA/ICcnIDogY29udGFpbmVyLnN1YnN0cmluZ0RhdGEoMCwgb2Zmc2V0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKG9mZnNldCwgKGNvbnRhaW5lci5sZW5ndGggLSBvZmZzZXQpKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IF9nZXRNYWludGFpbmVkTm9kZShhbmNlc3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSAmJiBhLnBhcmVudE5vZGUgIT09IGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtLnBhcmVudE5vZGUgIT09IGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSBwID0gbS5wYXJlbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKG0uY2hpbGROb2Rlc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZChtLmNoaWxkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYXBwZW5kQ2hpbGQocCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBtLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocHJldk5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZChwcmV2Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZBbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhcHJldkFuY2hvck5vZGUpIGFuY2hvck5vZGUgPSBwcmV2QW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIGxpbmUgPSBhbmNob3JOb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZSAhPT0gbGluZSAmJiBuZXdOb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZSA9IHZhbGlkYXRpb24obmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiB2Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gcEN1cnJlbnQucG9wKCkgfHwgYW5jZXN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlID0gY2hpbGROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocEN1cnJlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHBDdXJyZW50LnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZS5hcHBlbmRDaGlsZChuZXdOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2RlICE9PSBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhjaGlsZCkpIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NOb2RlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSAhcGFzc05vZGUgPyBjaGlsZC5jbG9uZU5vZGUoZmFsc2UpIDogdmFsaWRhdGlvbihjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxICYmICF1dGlsLmlzQnJlYWsoY2hpbGQpKSBjb3Zlck5vZGUgPSB2Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNvdmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKGVsZW1lbnQsIHBOb2RlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vdCByZW1vdmUgdGFnXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUgJiYgIWlzUmVtb3ZlRm9ybWF0ICYmICFfcmVtb3ZlQ2hlY2sudikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogc3RhcnRPZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1JlbW92ZUZvcm1hdCA9IGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dE5vZGUgPSByQ2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUockNoaWxkcmVuWzBdLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZU5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmlwUmVtb3ZlTm9kZShuTm9kZUFycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBwTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUVtcHR5Tm9kZShwTm9kZSwgbmV3SW5uZXJOb2RlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKHBOb2RlLnRleHRDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHBOb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBub2RlIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHtzOiAwLCBlOiAwfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSB1dGlsLmdldE5vZGVQYXRoKGNvbnRhaW5lciwgcE5vZGUsIG9mZnNldHMpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IG9mZnNldHMucztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB0YWcgbWVyZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld09mZnNldHMgPSB1dGlsLm1lcmdlU2FtZVRhZ3MocE5vZGUsIFtwYXRoXSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChwTm9kZSwgZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5nZXROb2RlRnJvbVBhdGgocGF0aCwgcE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IG5ld09mZnNldHNbMF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBhbmNlc3RvcjogcE5vZGUsXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHdyYXBzIG1pZCBsaW5lcyBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgbm9kZSBvZiB0aGUgbGluZSB0aGF0IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCB0ZXh0IG5vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdJbm5lck5vZGUgVGhlIGRvbSB0aGF0IHdpbGwgd3JhcCB0aGUgc2VsZWN0ZWQgdGV4dCBhcmVhXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsaWRhdGlvbiBDaGVjayBpZiB0aGUgbm9kZSBzaG91bGQgYmUgc3RyaXBwZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlbW92ZUZvcm1hdCBJcyB0aGUgcmVtb3ZlIGFsbCBmb3JtYXRzIGNvbW1hbmQ/XHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlbW92ZU5vZGUgXCJuZXdJbm5lck5vZGVcIiBpcyByZW1vdmUgbm9kZT9cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IF9lbmRDb250YWluZXIgT2Zmc2V0IG5vZGUgb2YgbGFzdCBsaW5lIGFscmVhZHkgbW9kaWZpZWQgKGVuZC5jb250YWluZXIpXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0geyBhbmNlc3RvciwgZW5kQ29udGFpbmVyOiBcIklmIGVuZCBjb250YWluZXIgaXMgcmVuZXdlZCwgcmV0dXJuZWQgcmVuZXdlZCBub2RlXCIgfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2VfbWlkZGxlTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBfZW5kQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIC8vIG5vdCBhZGQgdGFnXHJcbiAgICAgICAgICAgIGlmICghaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbmQgY29udGFpbmVyIHBhdGhcclxuICAgICAgICAgICAgICAgIGxldCBlbmRQYXRoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChfZW5kQ29udGFpbmVyICYmIGVsZW1lbnQuY29udGFpbnMoX2VuZENvbnRhaW5lcikpIGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBOb2RlID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdOb2RlTmFtZSA9IG5ld0lubmVyTm9kZS5ub2RlTmFtZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Nzc1RleHQgPSBuZXdJbm5lck5vZGUuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NsYXNzID0gbmV3SW5uZXJOb2RlLmNsYXNzTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSB0ZW1wTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGlsZDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDMpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlTmFtZSA9PT0gbmV3Tm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuc3R5bGUuY3NzVGV4dCArPSBuZXdDc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNoaWxkLCBuZXdDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdXRpbC5pc0JyZWFrKGNoaWxkKSAmJiB1dGlsLl9pc0lnbm9yZU5vZGVDaGFuZ2UoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMCAmJiBpID09PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IHRlbXBOb2RlLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBlbmRQYXRoID8gdXRpbC5nZXROb2RlRnJvbVBhdGgoZW5kUGF0aCwgZWxlbWVudCkgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYWRkIHRhZ1xyXG4gICAgICAgICAgICBfcmVtb3ZlQ2hlY2sudiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBsZXQgbm9uZUNoYW5nZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGgsIHZOb2RlLCBjbG9uZUNoaWxkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZE5vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3Zlck5vZGUgPSBhbmNlc3RvcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzQnJlYWsoY2hpbGQpICYmIHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0lubmVyTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVDaGlsZCA9IGNoaWxkLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQoY2xvbmVDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuZCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9lbmRDb250YWluZXIgJiYgY2hpbGQuY29udGFpbnMoX2VuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lbmRDb250YWluZXIgPSB1dGlsLmdldE5vZGVGcm9tUGF0aChlbmRQYXRoLCBjbG9uZUNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25lQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZCh2Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGNvdmVyTm9kZSA9IHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNCcmVhayhjaGlsZCkpIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNvdmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKGVsZW1lbnQsIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub3QgcmVtb3ZlIHRhZ1xyXG4gICAgICAgICAgICBpZiAobm9uZUNoYW5nZSB8fCAoaXNSZW1vdmVOb2RlICYmICFpc1JlbW92ZUZvcm1hdCAmJiAhX3JlbW92ZUNoZWNrLnYpKSByZXR1cm4geyBhbmNlc3RvcjogZWxlbWVudCwgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyIH07XHJcblxyXG4gICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUockNoaWxkcmVuWzBdLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Ob2RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpcFJlbW92ZU5vZGUobk5vZGVBcnJheVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuICAgICAgICAgICAgdXRpbC5tZXJnZVNhbWVUYWdzKHBOb2RlLCBudWxsLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vZGUgY2hhbmdlXHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBhbmNlc3RvcjogcE5vZGUsIGVuZENvbnRhaW5lcjogX2VuZENvbnRhaW5lciB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiB3cmFwcyBsYXN0IGxpbmUgc2VsZWN0ZWQgdGV4dC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIG5vZGUgb2YgdGhlIGxpbmUgdGhhdCBjb250YWlucyB0aGUgc2VsZWN0ZWQgdGV4dCBub2RlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbmV3SW5uZXJOb2RlIFRoZSBkb20gdGhhdCB3aWxsIHdyYXAgdGhlIHNlbGVjdGVkIHRleHQgYXJlYVxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHZhbGlkYXRpb24gQ2hlY2sgaWYgdGhlIG5vZGUgc2hvdWxkIGJlIHN0cmlwcGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gZW5kQ29uIFRoZSBlbmRDb250YWluZXIgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZE9mZiBUaGUgZW5kT2Zmc2V0IHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVGb3JtYXQgSXMgdGhlIHJlbW92ZSBhbGwgZm9ybWF0cyBjb21tYW5kP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVOb2RlIFwibmV3SW5uZXJOb2RlXCIgaXMgcmVtb3ZlIG5vZGU/XHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0geyBhbmNlc3RvciwgY29udGFpbmVyLCBvZmZzZXQgfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2VfZW5kTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgZW5kQ29uLCBlbmRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIF9yZW1vdmVDaGVjaywgX2dldE1haW50YWluZWROb2RlLCBfaXNNYWludGFpbmVkTm9kZSkge1xyXG4gICAgICAgICAgICAvLyBub3QgYWRkIHRhZ1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50Q29uID0gZW5kQ29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24ubm9kZU5hbWUgPT09IG5ld0lubmVyTm9kZS5ub2RlTmFtZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQocGFyZW50Q29uKSAmJiAhcGFyZW50Q29uLnByZXZpb3VzU2libGluZyAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShlbmRDb24udGV4dENvbnRlbnQuc2xpY2UoZW5kT2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gZW5kQ29uLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwub25seVplcm9XaWR0aFNwYWNlKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVUYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzYW1lVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhwYXJlbnRDb24sIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBlbmRPZmZcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGFnXHJcbiAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBlbmRDb247XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSBlbmRPZmY7XHJcbiAgICAgICAgICAgIGxldCBwYXNzTm9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY2hpbGROb2Rlcy5sZW5ndGggLSAxLCB2Tm9kZTsgMCA8PSBpOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdmVyTm9kZSA9IGFuY2VzdG9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFzc05vZGUgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5faXNJZ25vcmVOb2RlQ2hhbmdlKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lQ2hpbGQgPSBjaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKGNsb25lQ2hpbGQsIGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUobmV3SW5uZXJOb2RlLCBjbG9uZUNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlKSBhbmNob3JzLnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1RvcE5vZGUgPSBwQ3VycmVudC5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNNYWludGFpbmVkTm9kZShuZXdJbm5lck5vZGUucGFyZW50Tm9kZSkgJiYgIV9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0lubmVyTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlICYmIF9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYUNoaWxkcmVuID0gY2hpbGROb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhID0gMCwgYUxlbiA9IGFDaGlsZHJlbi5sZW5ndGg7IGEgPCBhTGVuOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoYUNoaWxkcmVuW2FdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbm5lck5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgYW5jZXN0b3IgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RvcE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUgJiYgY2hpbGQubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZ2V0TWFpbnRhaW5lZE5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jZXN0b3JBbmNob3JOb2RlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGFuY2VzdG9yLCBmdW5jdGlvbiAoY3VycmVudCkge3JldHVybiB0aGlzLl9pc01haW50YWluZWROb2RlKGN1cnJlbnQucGFyZW50Tm9kZSkgfHwgY3VycmVudC5wYXJlbnROb2RlID09PSBwTm9kZTt9LmJpbmQodXRpbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUuYXBwZW5kQ2hpbGQoYW5jZXN0b3JBbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBhbmNlc3RvckFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUobmV3SW5uZXJOb2RlLCBwTm9kZS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuZENvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFzc05vZGUgJiYgY2hpbGQgPT09IGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKG9mZnNldCwgKGNvbnRhaW5lci5sZW5ndGggLSBvZmZzZXQpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKDAsIG9mZnNldCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGEucGFyZW50Tm9kZSAhPT0gcE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtLnBhcmVudE5vZGUgIT09IHBOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gcCA9IG0ucGFyZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShtLmNoaWxkTm9kZXNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQobS5jaGlsZE5vZGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmFwcGVuZENoaWxkKHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gbS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIG0ucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3SW5uZXJOb2RlLnBhcmVudE5vZGUpICYmICFhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5pbnNlcnRCZWZvcmUoYWZ0ZXJOb2RlLCBhbmNlc3Rvci5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZSAhPT0gcE5vZGUgJiYgbmV3Tm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBfaXNNYWludGFpbmVkTm9kZShuZXdOb2RlKSA/IG51bGwgOiB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZSAhPT0gYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhjaGlsZCkpIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIGFuY2hvck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUoYW5jaG9yTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIHBOb2RlLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGV4dE5vZGUuZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NOb2RlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmluc2VydEJlZm9yZShjb250YWluZXIsIGFuY2VzdG9yLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZOb2RlID0gIXBhc3NOb2RlID8gY2hpbGQuY2xvbmVOb2RlKGZhbHNlKSA6IHZhbGlkYXRpb24oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5pbnNlcnRCZWZvcmUodk5vZGUsIGFuY2VzdG9yLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIGNvdmVyTm9kZSA9IHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY292ZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkoZWxlbWVudCwgcE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gbm90IHJlbW92ZSB0YWdcclxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlTm9kZSAmJiAhaXNSZW1vdmVGb3JtYXQgJiYgIV9yZW1vdmVDaGVjay52KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogZW5kQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogZW5kT2ZmXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1JlbW92ZUZvcm1hdCA9IGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAockNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHROb2RlID0gckNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUodGV4dE5vZGUsIHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocmVtb3ZlTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBuTm9kZUFycmF5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRleHROb2RlLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmlwUmVtb3ZlTm9kZShuTm9kZUFycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBwTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBuZXdJbm5lck5vZGUudGV4dENvbnRlbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVFbXB0eU5vZGUocE5vZGUsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDBcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocE5vZGUudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gcE5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBjb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbm9kZSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSB7czogMCwgZTogMH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gdXRpbC5nZXROb2RlUGF0aChjb250YWluZXIsIHBOb2RlLCBvZmZzZXRzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBvZmZzZXRzLnM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGFnIG1lcmdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdPZmZzZXRzID0gdXRpbC5tZXJnZVNhbWVUYWdzKHBOb2RlLCBbcGF0aF0sIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHV0aWwuZ2V0Tm9kZUZyb21QYXRoKHBhdGgsIHBOb2RlKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBuZXdPZmZzZXRzWzBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYW5jZXN0b3I6IHBOb2RlLFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSAmJiBvZmZzZXQgPT09IDEgPyBjb250YWluZXIuY2hpbGROb2Rlcy5sZW5ndGggOiBvZmZzZXRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUnVuIHBsdWdpbiBjYWxscyBhbmQgYmFzaWMgY29tbWFuZHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbW1hbmQgQ29tbWFuZCBzdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlzcGxheSBEaXNwbGF5IHR5cGUgc3RyaW5nICgnY29tbWFuZCcsICdzdWJtZW51JywgJ2RpYWxvZycsICdjb250YWluZXInKVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSBlbGVtZW50IG9mIGNvbW1hbmQgYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWN0aW9uQ2FsbDogZnVuY3Rpb24gKGNvbW1hbmQsIGRpc3BsYXksIHRhcmdldCkge1xyXG4gICAgICAgICAgICAvLyBjYWxsIHBsdWdpbnNcclxuICAgICAgICAgICAgaWYgKGRpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICgvbW9yZS9pLnRlc3QoZGlzcGxheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24pIHRoaXMubW9yZUxheWVyT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFyQmFsbG9vbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0YXJnZXQsICdvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXIucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3JlTGF5ZXJPZmYoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKC9jb250YWluZXIvLnRlc3QoZGlzcGxheSkgJiYgKHRoaXMuX21lbnVUcmF5W2NvbW1hbmRdID09PSBudWxsIHx8IHRhcmdldCAhPT0gdGhpcy5jb250YWluZXJBY3RpdmVCdXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGNvbW1hbmQsIHRoaXMuY29udGFpbmVyT24uYmluZCh0aGlzLCB0YXJnZXQpLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5ICYmIHV0aWwuYXJyYXlJbmNsdWRlcyh0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zLCB0YXJnZXQpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoL3N1Ym1lbnUvLnRlc3QoZGlzcGxheSkgJiYgKHRoaXMuX21lbnVUcmF5W2NvbW1hbmRdID09PSBudWxsIHx8IHRhcmdldCAhPT0gdGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnN1Ym1lbnVPbi5iaW5kKHRoaXMsIHRhcmdldCksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvZGlhbG9nLy50ZXN0KGRpc3BsYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGNvbW1hbmQsIHRoaXMucGx1Z2luc1tjb21tYW5kXS5vcGVuLmJpbmQodGhpcyksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvY29tbWFuZC8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnBsdWdpbnNbY29tbWFuZF0uYWN0aW9uLmJpbmQodGhpcyksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9maWxlQnJvd3Nlci8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnBsdWdpbnNbY29tbWFuZF0ub3Blbi5iaW5kKHRoaXMsIG51bGwpLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IC8vIGRlZmF1bHQgY29tbWFuZFxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRIYW5kbGVyKHRhcmdldCwgY29tbWFuZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgvc3VibWVudS8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIS9jb21tYW5kLy50ZXN0KGRpc3BsYXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXhlY3V0ZSBjb21tYW5kIG9mIGNvbW1hbmQgYnV0dG9uKEFsbCBCdXR0b25zIGV4Y2VwdCBzdWJtZW51IGFuZCBkaWFsb2cpXHJcbiAgICAgICAgICogKHNlbGVjdEFsbCwgY29kZVZpZXcsIGZ1bGxTY3JlZW4sIGluZGVudCwgb3V0ZGVudCwgdW5kbywgcmVkbywgcmVtb3ZlRm9ybWF0LCBwcmludCwgcHJldmlldywgc2hvd0Jsb2Nrcywgc2F2ZSwgYm9sZCwgdW5kZXJsaW5lLCBpdGFsaWMsIHN0cmlrZSwgc3Vic2NyaXB0LCBzdXBlcnNjcmlwdCwgY29weSwgY3V0LCBwYXN0ZSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gdGFyZ2V0IFRoZSBlbGVtZW50IG9mIGNvbW1hbmQgYnV0dG9uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbW1hbmQgUHJvcGVydHkgb2YgY29tbWFuZCBidXR0b24gKGRhdGEtdmFsdWUpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29tbWFuZEhhbmRsZXI6IGZ1bmN0aW9uICh0YXJnZXQsIGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgaWYgKGNvcmUuaXNSZWFkT25seSAmJiAhL2NvcHl8Y3V0fHNlbGVjdEFsbHxjb2RlVmlld3xmdWxsU2NyZWVufHByaW50fHByZXZpZXd8c2hvd0Jsb2Nrcy8udGVzdChjb21tYW5kKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvcHknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3V0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncGFzdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0QWxsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lck9mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHd5c2l3eWcgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3QgPSB1dGlsLmdldENoaWxkRWxlbWVudCh3eXNpd3lnLmZpcnN0Q2hpbGQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIGZhbHNlKSB8fCB3eXNpd3lnLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSB1dGlsLmdldENoaWxkRWxlbWVudCh3eXNpd3lnLmxhc3RDaGlsZCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHwgY3VycmVudC5ub2RlVHlwZSA9PT0gMzsgfSwgdHJ1ZSkgfHwgd3lzaXd5Zy5sYXN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCB8fCAhbGFzdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTWVkaWEoZmlyc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSB0aGlzLmdldEZpbGVDb21wb25lbnQoZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiciA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC5hcHBlbmRDaGlsZChicik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gaW5mbyA/IGluZm8uY29tcG9uZW50IDogZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc01lZGlhKGxhc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3lzaXd5Zy5hcHBlbmRDaGlsZChmb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gYnI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhckJhbGxvb24odGhpcy5zZXRSYW5nZShmaXJzdCwgMCwgbGFzdCwgbGFzdC50ZXh0Q29udGVudC5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvZGVWaWV3JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUNvZGVWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdmdWxsU2NyZWVuJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUZ1bGxTY3JlZW4odGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2luZGVudCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdvdXRkZW50JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudChjb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZG8nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS51bmRvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZWRvJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkucmVkbygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlRm9ybWF0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3ByaW50JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwcmV2aWV3JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Nob3dCbG9ja3MnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRGlzcGxheUJsb2NrcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERpcihvcHRpb25zLnJ0bCA/ICdsdHInIDogJ3J0bCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyX2x0cic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREaXIoJ2x0cicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyX3J0bCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREaXIoJ3J0bCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2F2ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxCYWNrU2F2ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNhbGxCYWNrU2F2ZSh0aGlzLmdldENvbnRlbnRzKGZhbHNlKSwgdGhpcy5fdmFyaWFibGUuaXNDaGFuZ2VkKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhcmlhYmxlLmlzQ2hhbmdlZCAmJiB0eXBlb2YgZnVuY3Rpb25zLnNhdmUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25zLnNhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jb3JlLmNvbW1hbmRIYW5kbGVyLmZhaWxdIFBsZWFzZSByZWdpc3RlciBjYWxsIGJhY2sgZnVuY3Rpb24gaW4gY3JlYXRpb24gb3B0aW9uLiAoY2FsbEJhY2tTYXZlIDogRnVuY3Rpb24pJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5pc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC50b29sLnNhdmUpIGNvbnRleHQudG9vbC5zYXZlLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgOiAvLyAnU1RST05HJywgJ1UnLCAnRU0nLCAnREVMJywgJ1NVQicsICdTVVAnLi5cclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gb3B0aW9ucy5fZGVmYXVsdENvbW1hbmRbY29tbWFuZC50b0xvd2VyQ2FzZSgpXSB8fCBjb21tYW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb21tYW5kTWFwW2NvbW1hbmRdKSB0aGlzLmNvbW1hbmRNYXBbY29tbWFuZF0gPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzTWFwID0gdGhpcy5fdmFyaWFibGUuY3VycmVudE5vZGVzTWFwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtZCA9IG5vZGVzTWFwLmluZGV4T2YoY29tbWFuZCkgPiAtMSA/IG51bGwgOiB1dGlsLmNyZWF0ZUVsZW1lbnQoY29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBjb21tYW5kO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15TVUIkL2kudGVzdChjb21tYW5kKSAmJiBub2Rlc01hcC5pbmRleE9mKCdTVVAnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUgPSAnU1VQJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eU1VQJC9pLnRlc3QoY29tbWFuZCkgJiYgbm9kZXNNYXAuaW5kZXhPZignU1VCJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlID0gJ1NVQic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVDaGFuZ2UoY21kLCB0aGlzLl9jb21tYW5kTWFwU3R5bGVzW2NvbW1hbmRdIHx8IG51bGwsIFtyZW1vdmVOb2RlXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmUgZm9ybWF0IG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmFuZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVGb3JtYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIGluZGVudGF0aW9uIHRvIHNlbGVjdGVkIHJhbmdlLlxyXG4gICAgICAgICAqIFNldHRlZCBcIm1hcmdpbi1sZWZ0XCIgdG8gXCIyNXB4XCIgaW4gdGhlIHRvcCBcIlBcIiB0YWcgb2YgdGhlIHBhcmFtZXRlciBub2RlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb21tYW5kIFNlcGFyYXRvciAoXCJpbmRlbnRcIiBvciBcIm91dGRlbnRcIilcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmRlbnQ6IGZ1bmN0aW9uIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZUxpbmVzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9ICdpbmRlbnQnICE9PSBjb21tYW5kO1xyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW5EaXIgPSBvcHRpb25zLnJ0bCA/ICdtYXJnaW5SaWdodCcgOiAnbWFyZ2luTGVmdCc7XHJcbiAgICAgICAgICAgIGxldCBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZWMgPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW8gPSByYW5nZS5lbmRPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmFuZ2VMaW5lcy5sZW5ndGgsIGYsIG1hcmdpbjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmID0gcmFuZ2VMaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0xpc3RDZWxsKGYpIHx8ICF0aGlzLnBsdWdpbnMubGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9IC9cXGQrLy50ZXN0KGYuc3R5bGVbbWFyZ2luRGlyXSkgPyB1dGlsLmdldE51bWJlcihmLnN0eWxlW21hcmdpbkRpcl0sIDApIDogMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luIC09IDI1O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbiArPSAyNTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5zZXRTdHlsZShmLCBtYXJnaW5EaXIsIChtYXJnaW4gPD0gMCA/ICcnIDogbWFyZ2luICsgJ3B4JykpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQgfHwgZi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBsaXN0IGNlbGxzXHJcbiAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5lZGl0SW5zaWRlTGlzdC5jYWxsKHRoaXMsIHNoaWZ0LCBjZWxscyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uoc2MsIHNvLCBlYywgZW8pO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBvciByZW1vdmUgdGhlIGNsYXNzIG5hbWUgb2YgXCJib2R5XCIgc28gdGhhdCB0aGUgY29kZSBibG9jayBpcyB2aXNpYmxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRGlzcGxheUJsb2NrczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIHV0aWwudG9nZ2xlQ2xhc3Mod3lzaXd5ZywgJ3NlLXNob3ctYmxvY2snKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaGFzQ2xhc3Mod3lzaXd5ZywgJ3NlLXNob3ctYmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuc2hvd0Jsb2NrcywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuc2hvd0Jsb2NrcywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlc1N0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoYW5nZXMgdG8gY29kZSB2aWV3IG9yIHd5c2l3eWcgdmlld1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvZ2dsZUNvZGVWaWV3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQ29kZVZpZXcgPSB0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3O1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIHV0aWwuc2V0RGlzYWJsZWRCdXR0b25zKCFpc0NvZGVWaWV3LCB0aGlzLmNvZGVWaWV3RGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0NvZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNOb25FZGl0YWJsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKSkgdGhpcy5fc2V0Q29kZURhdGFUb0VkaXRvcigpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5zY3JvbGxUb3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBub25lJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fd3lzaXd5Z09yaWdpbkNzc1RleHQgPSB0aGlzLl92YXJpYWJsZS5fd3lzaXd5Z09yaWdpbkNzc1RleHQucmVwbGFjZSgvKFxccz9kaXNwbGF5KFxccyspPzooXFxzKyk/KVthLXpBLVpdKyg/PTspLywgJ2Rpc3BsYXk6IGJsb2NrJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ID09PSAnYXV0bycgJiYgIW9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gJzBweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdmFyaWFibGUuaXNGdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm90SGlkZVRvb2xiYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL2JhbGxvb258YmFsbG9vbi1hbHdheXMvaS50ZXN0KG9wdGlvbnMubW9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9hcnJvdy5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5saW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5jb2RlVmlldywgJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc05vbkVkaXRhYmxlKGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5fcmVzZXRDYWNoaW5nQnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRFZGl0b3JEYXRhVG9Db2RlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBibG9jaycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX3d5c2l3eWdPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX3d5c2l3eWdPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBub25lJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbikgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSBjb250ZXh0LmVsZW1lbnQuY29kZS5zdHlsZS5oZWlnaHQgPSBjb250ZXh0LmVsZW1lbnQuY29kZS5zY3JvbGxIZWlnaHQgPiAwID8gKGNvbnRleHQuZWxlbWVudC5jb2RlLnNjcm9sbEhlaWdodCArICdweCcpIDogJ2F1dG8nO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5yZWZyZXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ub3RIaWRlVG9vbGJhciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzQmFsbG9vbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX2Fycm93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnN0eWxlLmxlZnQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNJbmxpbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0JhbGxvb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9yYW5nZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuY29kZVZpZXcsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tQbGFjZWhvbGRlcigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5KSB1dGlsLnNldERpc2FibGVkQnV0dG9ucyh0cnVlLCB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMudG9nZ2xlQ29kZVZpZXcgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy50b2dnbGVDb2RlVmlldyh0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3LCB0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydCB0aGUgZGF0YSBvZiB0aGUgY29kZSB2aWV3IGFuZCBwdXQgaXQgaW4gdGhlIFdZU0lXWUcgYXJlYS5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRDb2RlRGF0YVRvRWRpdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGVfaHRtbCA9IHRoaXMuX2dldENvZGVWaWV3KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5mdWxsUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VEb2N1bWVudCA9IHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcoY29kZV9odG1sLCAndGV4dC9odG1sJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuX19hbGxvd2VkU2NyaXB0VGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZENoaWxkcmVuID0gcGFyc2VEb2N1bWVudC5oZWFkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBoZWFkQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9ec2NyaXB0JC9pLnRlc3QoaGVhZENoaWxkcmVuW2ldLnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZURvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoaGVhZENoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLSwgbGVuLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSBwYXJzZURvY3VtZW50LmhlYWQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZURvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdJykgfHwgKHRoaXMub3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhcGFyc2VEb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyArPSB1dGlsLl9zZXRJZnJhbWVDc3NUYWdzKHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QuaGVhZC5pbm5lckhUTUwgPSBoZWFkZXJzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QuYm9keS5pbm5lckhUTUwgPSB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihwYXJzZURvY3VtZW50LmJvZHkuaW5uZXJIVE1MKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IHBhcnNlRG9jdW1lbnQuYm9keS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzW2ldLm5hbWUgPT09ICdjb250ZW50ZWRpdGFibGUnKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93ZC5ib2R5LnNldEF0dHJpYnV0ZShhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzQ2xhc3ModGhpcy5fd2QuYm9keSwgJ3N1bi1lZGl0b3ItZWRpdGFibGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRhYmxlQ2xhc3NlcyA9IG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3Muc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVkaXRhYmxlQ2xhc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKHRoaXMuX3dkLmJvZHksIG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3NbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmlubmVySFRNTCA9IGNvZGVfaHRtbC5sZW5ndGggPiAwID8gdGhpcy5jb252ZXJ0Q29udGVudHNGb3JFZGl0b3IoY29kZV9odG1sKSA6ICc8JyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+PGJyPjwvJyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0IHRoZSBkYXRhIG9mIHRoZSBXWVNJV1lHIGFyZWEgYW5kIHB1dCBpdCBpbiB0aGUgY29kZSB2aWV3IGFyZWEuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2V0RWRpdG9yRGF0YVRvQ29kZVZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgY29kZUNvbnRlbnRzID0gdGhpcy5jb252ZXJ0SFRNTEZvckNvZGVWaWV3KGNvbnRleHQuZWxlbWVudC53eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGxldCBjb2RlVmFsdWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZ1bGxQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHRoaXMuX3dkLmJvZHksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgY29kZVZhbHVlID0gJzwhRE9DVFlQRSBodG1sPlxcbjxodG1sPlxcbicgKyB0aGlzLl93ZC5oZWFkLm91dGVySFRNTC5yZXBsYWNlKC8+KD8hXFxuKS9nLCAnPlxcbicpICsgJzxib2R5ICcgKyBhdHRycyArICc+XFxuJyArIGNvZGVDb250ZW50cyArICc8L2JvZHk+XFxuPC9odG1sPic7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlVmFsdWUgPSBjb2RlQ29udGVudHM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRDb2RlVmlldyhjb2RlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGFuZ2VzIHRvIGZ1bGwgc2NyZWVuIG9yIGRlZmF1bHQgc2NyZWVuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGVsZW1lbnQgZnVsbCBzY3JlZW4gYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRnVsbFNjcmVlbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgdG9wQXJlYSA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckFyZWEgPSBjb250ZXh0LmVsZW1lbnQuZWRpdG9yQXJlYTtcclxuICAgICAgICAgICAgY29uc3Qgd3lzaXd5Z0ZyYW1lID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZTtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IGNvbnRleHQuZWxlbWVudC5jb2RlO1xyXG4gICAgICAgICAgICBjb25zdCBfdmFyID0gdGhpcy5fdmFyaWFibGU7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHdhc1Rvb2xiYXJIaWRkZW4gPSAodG9vbGJhci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgKHRoaXMuX2lzSW5saW5lICYmICF0aGlzLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX3Zhci5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgIF92YXIuaXNGdWxsU2NyZWVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdmFyLl9mdWxsU2NyZWVuQXR0cnMuaW5saW5lID0gdGhpcy5faXNJbmxpbmU7XHJcbiAgICAgICAgICAgICAgICBfdmFyLl9mdWxsU2NyZWVuQXR0cnMuYmFsbG9vbiA9IHRoaXMuX2lzQmFsbG9vbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNJbmxpbmUgfHwgdGhpcy5faXNCYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNJbmxpbmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0JhbGxvb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoISFvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5pbnNlcnRCZWZvcmUodG9vbGJhciwgZWRpdG9yQXJlYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdG9wQXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLnRvcCA9ICcwJztcclxuICAgICAgICAgICAgICAgIHRvcEFyZWEuc3R5bGUubGVmdCA9ICcwJztcclxuICAgICAgICAgICAgICAgIHRvcEFyZWEuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLm1heFdpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgdG9wQXJlYS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLnpJbmRleCA9ICcyMTQ3NDgzNjQ3JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5lbGVtZW50Ll9zdGlja3lEdW1teS5zdHlsZS5kaXNwbGF5ICE9PSAoJ25vbmUnICYmICcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF92YXIuX2Z1bGxTY3JlZW5BdHRycy5zdGlja3kgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRvb2xiYXIsICdzZS10b29sYmFyLXN0aWNreScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF92YXIuX2JvZHlPdmVyZmxvdyA9IF9kLmJvZHkuc3R5bGUub3ZlcmZsb3c7XHJcbiAgICAgICAgICAgICAgICBfZC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Zhci5fZWRpdG9yQXJlYU9yaWdpbkNzc1RleHQgPSBlZGl0b3JBcmVhLnN0eWxlLmNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICBfdmFyLl93eXNpd3lnT3JpZ2luQ3NzVGV4dCA9IHd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgX3Zhci5fY29kZU9yaWdpbkNzc1RleHQgPSBjb2RlLnN0eWxlLmNzc1RleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZWRpdG9yQXJlYS5zdHlsZS5jc3NUZXh0ID0gdG9vbGJhci5zdHlsZS5jc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB3eXNpd3lnRnJhbWUuc3R5bGUuY3NzVGV4dCA9ICh3eXNpd3lnRnJhbWUuc3R5bGUuY3NzVGV4dC5tYXRjaCgvXFxzP2Rpc3BsYXkoXFxzKyk/OihcXHMrKT9bYS16QS1aXSs7LykgfHwgWycnXSlbMF0gKyBvcHRpb25zLl9lZGl0b3JTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29kZS5zdHlsZS5jc3NUZXh0ID0gKGNvZGUuc3R5bGUuY3NzVGV4dC5tYXRjaCgvXFxzP2Rpc3BsYXkoXFxzKyk/OihcXHMrKT9bYS16QS1aXSs7LykgfHwgWycnXSlbMF07XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLndpZHRoID0gd3lzaXd5Z0ZyYW1lLnN0eWxlLmhlaWdodCA9IGNvZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgICAgIF92YXIuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiA9IChfdy5pbm5lckhlaWdodCAtIHRvb2xiYXIub2Zmc2V0SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGVkaXRvckFyZWEuc3R5bGUuaGVpZ2h0ID0gKF92YXIuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiAtIG9wdGlvbnMuZnVsbFNjcmVlbk9mZnNldCkgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB1dGlsLmNoYW5nZUVsZW1lbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCwgaWNvbnMucmVkdWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUgJiYgb3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvckFyZWEuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faWZyYW1lQXV0b0hlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b3BBcmVhLnN0eWxlLm1hcmdpblRvcCA9IG9wdGlvbnMuZnVsbFNjcmVlbk9mZnNldCArICdweCc7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5mdWxsU2NyZWVuLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdmFyLmlzRnVsbFNjcmVlbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0ID0gX3Zhci5fd3lzaXd5Z09yaWdpbkNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICBjb2RlLnN0eWxlLmNzc1RleHQgPSBfdmFyLl9jb2RlT3JpZ2luQ3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUuY3NzVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yQXJlYS5zdHlsZS5jc3NUZXh0ID0gX3Zhci5fZWRpdG9yQXJlYU9yaWdpbkNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLmNzc1RleHQgPSBfdmFyLl9vcmlnaW5Dc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgX2QuYm9keS5zdHlsZS5vdmVyZmxvdyA9IF92YXIuX2JvZHlPdmVyZmxvdztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSBvcHRpb25zLnRvb2xiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQodG9vbGJhcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RpY2t5VG9vbGJhciA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0b29sYmFyLCAnc2UtdG9vbGJhci1zdGlja3knKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoX3Zhci5fZnVsbFNjcmVlbkF0dHJzLnN0aWNreSAmJiAhb3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Zhci5fZnVsbFNjcmVlbkF0dHJzLnN0aWNreSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0b29sYmFyLCBcInNlLXRvb2xiYXItc3RpY2t5XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5saW5lID0gX3Zhci5fZnVsbFNjcmVlbkF0dHJzLmlubGluZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IF92YXIuX2Z1bGxTY3JlZW5BdHRycy5iYWxsb29uO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzSW5saW5lKSBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgIGlmICghIW9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikgdXRpbC5yZW1vdmVDbGFzcyh0b29sYmFyLCAnc2UtdG9vbGJhci1iYWxsb29uJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQub25TY3JvbGxfd2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkgdXRpbC5jaGFuZ2VFbGVtZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIGljb25zLmV4cGFuc2lvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvcEFyZWEuc3R5bGUubWFyZ2luVG9wID0gJyc7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5mdWxsU2NyZWVuLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3YXNUb29sYmFySGlkZGVuKSBmdW5jdGlvbnMudG9vbGJhci5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLnRvZ2dsZUZ1bGxTY3JlZW4gPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy50b2dnbGVGdWxsU2NyZWVuKHRoaXMuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbiwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFByaW50cyB0aGUgY3VycmVudCBjb250ZW50cyBvZiB0aGUgZWRpdG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZSA9IHV0aWwuY3JlYXRlRWxlbWVudCgnSUZSQU1FJyk7XHJcbiAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBfZC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50c0hUTUwgPSBvcHRpb25zLnByaW50VGVtcGxhdGUgPyBvcHRpb25zLnByaW50VGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7XFxzKmNvbnRlbnRzXFxzKlxcfVxcfS9pLCB0aGlzLmdldENvbnRlbnRzKHRydWUpKSA6IHRoaXMuZ2V0Q29udGVudHModHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW50RG9jdW1lbnQgPSB1dGlsLmdldElmcmFtZURvY3VtZW50KGlmcmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdEb2MgPSB0aGlzLl93ZDtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJydHMgPSBvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gJ2NsYXNzPVwiJyArIG9wdGlvbnMuX3ByaW50Q2xhc3MgKyAnXCInIDogb3B0aW9ucy5mdWxsUGFnZSA/IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHdEb2MuYm9keSwgWydjb250ZW50ZWRpdGFibGUnXSkgOiAnY2xhc3M9XCInICsgb3B0aW9ucy5fZWRpdGFibGVDbGFzcyArICdcIic7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbnREb2N1bWVudC53cml0ZSgnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwhRE9DVFlQRSBodG1sPjxodG1sPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICB3RG9jLmhlYWQuaW5uZXJIVE1MICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9oZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8Ym9keSAnICsgYXJydHMgKyAnPicgKyBjb250ZW50c0hUTUwgKyAnPC9ib2R5PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2h0bWw+J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5rSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmtzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgKz0gbGlua3NbaV0ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmtIVE1MICs9IHN0eWxlc1tpXS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbnREb2N1bWVudC53cml0ZSgnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwhRE9DVFlQRSBodG1sPjxodG1sPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICBsaW5rSFRNTCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvaGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJvZHkgY2xhc3M9XCInICsgKG9wdGlvbnMuX3ByaW50Q2xhc3MgIT09IG51bGwgPyBvcHRpb25zLl9wcmludENsYXNzIDogb3B0aW9ucy5fZWRpdGFibGVDbGFzcykgKyAnXCI+JyArIGNvbnRlbnRzSFRNTCArICc8L2JvZHk+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvaHRtbD4nXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJRSBvciBFZGdlLCBDaHJvbWl1bVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzSUVfRWRnZSB8fCB1dGlsLmlzQ2hyb21pdW0gfHwgISFfZC5kb2N1bWVudE1vZGUgfHwgISFfdy5TdHlsZU1lZGlhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC5leGVjQ29tbWFuZCgncHJpbnQnLCBmYWxzZSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlciBicm93c2Vyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5wcmludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY29yZS5wcmludC5mYWlsXSBlcnJvcjogJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oaWZyYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gdGhlIHByZXZpZXcgd2luZG93LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByZXZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRzSFRNTCA9IG9wdGlvbnMucHJldmlld1RlbXBsYXRlID8gb3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7XFxzKmNvbnRlbnRzXFxzKlxcfVxcfS9pLCB0aGlzLmdldENvbnRlbnRzKHRydWUpKSA6IHRoaXMuZ2V0Q29udGVudHModHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpbmRvd09iamVjdCA9IF93Lm9wZW4oJycsICdfYmxhbmsnKTtcclxuICAgICAgICAgICAgd2luZG93T2JqZWN0Lm1pbWVUeXBlID0gJ3RleHQvaHRtbCc7XHJcbiAgICAgICAgICAgIGNvbnN0IHdEb2MgPSB0aGlzLl93ZDtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJydHMgPSBvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gJ2NsYXNzPVwiJyArIG9wdGlvbnMuX3ByaW50Q2xhc3MgKyAnXCInIDogb3B0aW9ucy5mdWxsUGFnZSA/IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHdEb2MuYm9keSwgWydjb250ZW50ZWRpdGFibGUnXSkgOiAnY2xhc3M9XCInICsgb3B0aW9ucy5fZWRpdGFibGVDbGFzcyArICdcIic7XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93T2JqZWN0LmRvY3VtZW50LndyaXRlKCcnICtcclxuICAgICAgICAgICAgICAgICAgICAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxoZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIHdEb2MuaGVhZC5pbm5lckhUTUwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3R5bGU+Ym9keSB7b3ZlcmZsb3c6YXV0byAhaW1wb3J0YW50OyBtYXJnaW46IDEwcHggYXV0byAhaW1wb3J0YW50OyBoZWlnaHQ6YXV0byAhaW1wb3J0YW50OyBvdXRsaW5lOjFweCBkYXNoZWQgI2NjYzt9PC9zdHlsZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9oZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8Ym9keSAnICsgYXJydHMgKyAnPicgKyBjb250ZW50c0hUTUwgKyAnPC9ib2R5PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2h0bWw+J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5rSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmtzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgKz0gbGlua3NbaV0ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmtIVE1MICs9IHN0eWxlc1tpXS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93T2JqZWN0LmRvY3VtZW50LndyaXRlKCcnICtcclxuICAgICAgICAgICAgICAgICAgICAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxoZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bWV0YSBjaGFyc2V0PVwidXRmLThcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8dGl0bGU+JyArIGxhbmcudG9vbGJhci5wcmV2aWV3ICsgJzwvdGl0bGU+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2hlYWQ+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxib2R5IGNsYXNzPVwiJyArIChvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gb3B0aW9ucy5fcHJpbnRDbGFzcyA6IG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3MpICsgJ1wiIHN0eWxlPVwibWFyZ2luOjEwcHggYXV0byAhaW1wb3J0YW50OyBoZWlnaHQ6YXV0byAhaW1wb3J0YW50OyBvdXRsaW5lOjFweCBkYXNoZWQgI2NjYztcIj4nICsgY29udGVudHNIVE1MICsgJzwvYm9keT4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9odG1sPidcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IGRpcmVjdGlvbiB0byBcInJ0bFwiIG9yIFwibHRyXCIuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpciBcInJ0bFwiIG9yIFwibHRyXCJcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXREaXI6IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICAgICAgY29uc3QgcnRsID0gZGlyID09PSAncnRsJztcclxuICAgICAgICAgICAgY29uc3QgY2hhbmdlRGlyID0gdGhpcy5fcHJldlJ0bCAhPT0gcnRsO1xyXG4gICAgICAgICAgICB0aGlzLl9wcmV2UnRsID0gb3B0aW9ucy5ydGwgPSBydGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlRGlyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbGlnbiBidXR0b25zXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zLmFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmFsaWduLmV4Y2hhbmdlRGlyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbmRlbnQgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudG9vbC5pbmRlbnQpIHV0aWwuY2hhbmdlRWxlbWVudChjb250ZXh0LnRvb2wuaW5kZW50LmZpcnN0RWxlbWVudENoaWxkLCBpY29ucy5pbmRlbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudG9vbC5vdXRkZW50KSB1dGlsLmNoYW5nZUVsZW1lbnQoY29udGV4dC50b29sLm91dGRlbnQuZmlyc3RFbGVtZW50Q2hpbGQsIGljb25zLm91dGRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlbCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHJ0bCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGVsLnd5c2l3eWdGcmFtZSwgJ3NlLXJ0bCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGVsLnd5c2l3eWdGcmFtZSwgJ3NlLXJ0bCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsaW5lTm9kZXMgPSB1dGlsLmdldExpc3RDaGlsZHJlbihlbC53eXNpd3lnLCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpICYmIChjdXJyZW50LnN0eWxlLm1hcmdpblJpZ2h0IHx8IGN1cnJlbnQuc3R5bGUubWFyZ2luTGVmdCB8fCBjdXJyZW50LnN0eWxlLnRleHRBbGlnbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmVOb2Rlcy5sZW5ndGgsIG4sIGwsIHI7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbiA9IGxpbmVOb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIC8vIGluZGVudCBtYXJnaW5cclxuICAgICAgICAgICAgICAgIHIgPSBuLnN0eWxlLm1hcmdpblJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgbCA9IG4uc3R5bGUubWFyZ2luTGVmdDtcclxuICAgICAgICAgICAgICAgIGlmIChyIHx8IGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnN0eWxlLm1hcmdpblJpZ2h0ID0gbDtcclxuICAgICAgICAgICAgICAgICAgICBuLnN0eWxlLm1hcmdpbkxlZnQgPSByO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGV4dCBhbGlnblxyXG4gICAgICAgICAgICAgICAgciA9IG4uc3R5bGUudGV4dEFsaWduO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgPT09ICdsZWZ0Jykgbi5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAociA9PT0gJ3JpZ2h0Jykgbi5zdHlsZS50ZXh0QWxpZ24gPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2wgPSBjb250ZXh0LnRvb2w7XHJcbiAgICAgICAgICAgIGlmICh0b29sLmRpcikge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VUeHQodG9vbC5kaXIucXVlcnlTZWxlY3RvcignLnNlLXRvb2x0aXAtdGV4dCcpLCBsYW5nLnRvb2xiYXJbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuY2hhbmdlRWxlbWVudCh0b29sLmRpci5maXJzdEVsZW1lbnRDaGlsZCwgaWNvbnNbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvb2wuZGlyX2x0cikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ0bCkgdXRpbC5yZW1vdmVDbGFzcyh0b29sLmRpcl9sdHIsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdXRpbC5hZGRDbGFzcyh0b29sLmRpcl9sdHIsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvb2wuZGlyX3J0bCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ0bCkgdXRpbC5hZGRDbGFzcyh0b29sLmRpcl9ydGwsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdXRpbC5yZW1vdmVDbGFzcyh0b29sLmRpcl9ydGwsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfHVuZGVmaW5lZH0gaHRtbCBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENvbnRlbnRzOiBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0VmFsdWUgPSAoaHRtbCA9PT0gbnVsbCB8fCBodG1sID09PSB1bmRlZmluZWQpID8gJycgOiB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihodG1sLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5pbm5lckhUTUwgPSBjb252ZXJ0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNldENvbXBvbmVudHMoKTtcclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jb252ZXJ0SFRNTEZvckNvZGVWaWV3KGNvbnZlcnRWYWx1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29kZVZpZXcodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBpZnJhbWUncyBoZWFkIHRhZyBhbmQgYm9keSB0YWcgd2hlbiB1c2luZyB0aGUgXCJpZnJhbWVcIiBvciBcImZ1bGxQYWdlXCIgb3B0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjdHggeyBoZWFkOiBIVE1MIHN0cmluZywgYm9keTogSFRNTCBzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0SWZyYW1lQ29udGVudHM6IGZ1bmN0aW9uIChjdHgpIHtcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlmcmFtZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY3R4LmhlYWQpIHRoaXMuX3dkLmhlYWQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLl9fYWxsb3dlZFNjcmlwdFRhZyA/IGN0eC5oZWFkIDogY3R4LmhlYWQucmVwbGFjZSh0aGlzLl9fc2NyaXB0VGFnUmVnRXhwLCAnJyk7XHJcbiAgICAgICAgICAgIGlmIChjdHguYm9keSkgdGhpcy5fd2QuYm9keS5pbm5lckhUTUwgPSB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihjdHguYm9keSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q29tcG9uZW50cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGNvbnRlbnRzXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBvbmx5Q29udGVudHMgUmV0dXJuIG9ubHkgdGhlIGNvbnRlbnRzIG9mIHRoZSBib2R5IHdpdGhvdXQgaGVhZGVycyB3aGVuIHRoZSBcImZ1bGxQYWdlXCIgb3B0aW9uIGlzIHRydWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldENvbnRlbnRzOiBmdW5jdGlvbiAob25seUNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRzID0gdGhpcy5jbGVhbkhUTUwoY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuaW5uZXJIVE1MLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVySFRNTCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIHJlbmRlckhUTUwuaW5uZXJIVE1MID0gY29udGVudHM7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGl0YWJsZUVscyA9IHV0aWwuZ2V0TGlzdENoaWxkcmVuKHJlbmRlckhUTUwsIGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlZGl0YWJsZUVscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZWRpdGFibGVFbHNbaV0ucmVtb3ZlQXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZnVsbFBhZ2UgJiYgIW9ubHlDb250ZW50cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSB1dGlsLmdldEF0dHJpYnV0ZXNUb1N0cmluZyh0aGlzLl93ZC5ib2R5LCBbJ2NvbnRlbnRlZGl0YWJsZSddKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArIHRoaXMuX3dkLmhlYWQub3V0ZXJIVE1MICsgJzxib2R5ICcgKyBhdHRycyArICc+JyArIHJlbmRlckhUTUwuaW5uZXJIVE1MICsgJzwvYm9keT48L2h0bWw+JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJIVE1MLmlubmVySFRNTDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGNvbnRlbnRzIHdpdGggY29udGFpbmluZyBwYXJlbnQgZGl2KGRpdi5zdW4tZWRpdG9yLWVkaXRhYmxlKS5cclxuICAgICAgICAgKiA8ZGl2IGNsYXNzPVwic3VuLWVkaXRvci1lZGl0YWJsZVwiPntjb250ZW50c308L2Rpdj5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9ubHlDb250ZW50cyBSZXR1cm4gb25seSB0aGUgY29udGVudHMgb2YgdGhlIGJvZHkgd2l0aG91dCBoZWFkZXJzIHdoZW4gdGhlIFwiZnVsbFBhZ2VcIiBvcHRpb24gaXMgdHJ1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RnVsbENvbnRlbnRzOiBmdW5jdGlvbiAob25seUNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cInN1bi1lZGl0b3ItZWRpdGFibGUnICsgKG9wdGlvbnMucnRsID8gJyBzZS1ydGwnIDogJycpICsgJ1wiPicgKyB0aGlzLmdldENvbnRlbnRzKG9ubHlDb250ZW50cykgKyAnPC9kaXY+JztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBIVE1MIHN0cmluZyBhY2NvcmRpbmcgdG8gdGFnIHR5cGUgYW5kIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgICAgICogVXNlIG9ubHkgXCJjbGVhbkhUTUxcIlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXF1aXJlRm9ybWF0IElmIHRydWUsIHRleHQgbm9kZXMgdGhhdCBkbyBub3QgaGF2ZSBhIGZvcm1hdCBub2RlIGlzIHdyYXBwZWQgd2l0aCB0aGUgZm9ybWF0IHRhZy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tYWtlTGluZTogZnVuY3Rpb24gKG5vZGUsIHJlcXVpcmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFRhZyA9IG9wdGlvbnMuZGVmYXVsdFRhZztcclxuICAgICAgICAgICAgLy8gZWxlbWVudFxyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19kaXNhbGxvd2VkVGFnTmFtZVJlZ0V4cC50ZXN0KG5vZGUubm9kZU5hbWUpKSByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoL19fc2VfX3RhZy8udGVzdChub2RlLmNsYXNzTmFtZSkpIHJldHVybiBub2RlLm91dGVySFRNTDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMobm9kZSwgZnVuY3Rpb24oY3VycmVudCkgeyByZXR1cm4gdXRpbC5pc1NwYW5XaXRob3V0QXR0cihjdXJyZW50KSAmJiAhdXRpbC5nZXRQYXJlbnRFbGVtZW50KGN1cnJlbnQsIHV0aWwuaXNOb3RDaGVja2luZ05vZGUpOyB9KSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjaC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoW2ldLm91dGVySFRNTCA9IGNoW2ldLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcXVpcmVGb3JtYXQgfHwgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG5vZGUpIHx8IHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobm9kZSkgfHwgdXRpbC5pc0NvbXBvbmVudChub2RlKSB8fCB1dGlsLmlzRmlndXJlcyhub2RlKSB8fCAodXRpbC5pc0FuY2hvcihub2RlKSAmJiB1dGlsLmlzTWVkaWEobm9kZS5maXJzdEVsZW1lbnRDaGlsZCkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmlzU3BhbldpdGhvdXRBdHRyKG5vZGUpID8gbm9kZS5pbm5lckhUTUwgOiBub2RlLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIGRlZmF1bHRUYWcgKyAnPicgKyAodXRpbC5pc1NwYW5XaXRob3V0QXR0cihub2RlKSA/IG5vZGUuaW5uZXJIVE1MIDogbm9kZS5vdXRlckhUTUwpICsgJzwvJyArIGRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGV4dFxyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1aXJlRm9ybWF0KSByZXR1cm4gdXRpbC5fSFRNTENvbnZlcnRvcihub2RlLnRleHRDb250ZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRBcnJheSA9IG5vZGUudGV4dENvbnRlbnQuc3BsaXQoL1xcbi9nKTtcclxuICAgICAgICAgICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdExlbiA9IHRleHRBcnJheS5sZW5ndGgsIHRleHQ7IGkgPCB0TGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dEFycmF5W2ldLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dC5sZW5ndGggPiAwKSBodG1sICs9ICc8JyArIGRlZmF1bHRUYWcgKyAnPicgKyB1dGlsLl9IVE1MQ29udmVydG9yKHRleHQpICsgJzwvJyArIGRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb21tZW50c1xyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiB0aGlzLl9hbGxvd0hUTUxDb21tZW50cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc8IS0tJyArIG5vZGUudGV4dENvbnRlbnQudHJpbSgpICsgJy0tPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBhdHRyaWJ1dGUgdmFsdWVzIHN1Y2ggYXMgc3R5bGUgYW5kIGNvbnZlcnRzIHRhZ3MgdGhhdCBkbyBub3QgY29uZm9ybSB0byB0aGUgXCJodG1sNVwiIHN0YW5kYXJkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGFnQ29udmVydG9yOiBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCkgcmV0dXJuIHRleHQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlYyA9IG9wdGlvbnMuX3RleHRUYWdzTWFwO1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHRoaXMuX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCwgZnVuY3Rpb24gKG0sIHQsIG4sIHApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICsgKHR5cGVvZiBlY1tuXSA9PT0gJ3N0cmluZycgPyBlY1tuXSA6IG4pICsgKHAgPyAnICcgKyBwIDogJycpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIGRpc2FsbG93ZWQgdGFnc1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9kZWxldGVEaXNhbGxvd2VkVGFnczogZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWxcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKHRoaXMuX19kaXNhbGxvd2VkVGFnc1JlZ0V4cCwgJycpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPFthLXowLTldK1xcOlthLXowLTldK1tePl5cXC9dKj5bXj5dKjxcXC9bYS16MC05XStcXDpbYS16MC05XSs+L2dpLCAnJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIS9cXGJmb250XFxiL2kudGVzdCh0aGlzLm9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC8oPFxcLz8pZm9udChcXHM/KS9naSwgJyQxc3BhbiQyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UodGhpcy5lZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwLCAnJykucmVwbGFjZSh0aGlzLmVkaXRvclRhZ3NCbGFja2xpc3RSZWdFeHAsICcnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY29udmVydEZvbnRTaXplOiBmdW5jdGlvbiAodG8sIHNpemUpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0aCA9IHRoaXMuX3cuTWF0aDtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzaXplLm1hdGNoKC8oXFxkKyg/OlxcLlxcZCspPykoLispLyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpemVOdW0gPSB2YWx1ZSA/IHZhbHVlWzFdICogMSA6IHV0aWwuZm9udFZhbHVlTWFwW3NpemVdO1xyXG4gICAgICAgICAgICBjb25zdCBmcm9tID0gdmFsdWUgPyB2YWx1ZVsyXSA6ICdyZW0nO1xyXG4gICAgICAgICAgICBsZXQgcHhTaXplID0gc2l6ZU51bTtcclxuXHJcbiAgICAgICAgICAgIGlmICgvZW0vLnRlc3QoZnJvbSkpIHtcclxuICAgICAgICAgICAgICAgIHB4U2l6ZSA9IG1hdGgucm91bmQoc2l6ZU51bSAvIDAuMDYyNSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJvbSA9PT0gJ3B0Jykge1xyXG4gICAgICAgICAgICAgICAgcHhTaXplID0gbWF0aC5yb3VuZChzaXplTnVtICogMS4zMzMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyb20gPT09ICclJykge1xyXG4gICAgICAgICAgICAgICAgcHhTaXplID0gc2l6ZU51bSAvIDEwMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0bykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZW0nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJyUnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHhTaXplICogMC4wNjI1KS50b0ZpeGVkKDIpICsgdG87XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGguZmxvb3IocHhTaXplIC8gMS4zMzMpICsgdG87XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAvLyBweFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBweFNpemUgKyB0bztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jbGVhblN0eWxlOiBmdW5jdGlvbiAobSwgdiwgbmFtZSkge1xyXG4gICAgICAgICAgICBsZXQgc3YgPSAobS5tYXRjaCgvc3R5bGVcXHMqPVxccyooPzpcInwnKVteXCInXSooPzpcInwnKS8pIHx8IFtdKVswXTtcclxuICAgICAgICAgICAgaWYgKC9zcGFuL2kudGVzdChuYW1lKSAmJiAhc3YgJiYgKG0ubWF0Y2goLzxbXlxcc10rXFxzKC4rKS8pIHx8IFtdKVsxXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IChtLm1hdGNoKC9cXHNzaXplPVwiKFteXCJdKylcIi9pKSB8fCBbXSlbMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmYWNlID0gKG0ubWF0Y2goL1xcc2ZhY2U9XCIoW15cIl0rKVwiL2kpIHx8IFtdKVsxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKG0ubWF0Y2goL1xcc2NvbG9yPVwiKFteXCJdKylcIi9pKSB8fCBbXSlbMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSB8fCBmYWNlIHx8IGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3YgPSAnc3R5bGU9XCInICsgKHNpemUgPyAnZm9udC1zaXplOicgKyAodGhpcy51dGlsLmdldE51bWJlcihzaXplLzMuMzMzLCAxKSkgKyAncmVtOycgOiAnJykgKyAoZmFjZSA/ICdmb250LWZhbWlseTonICsgZmFjZSArICc7JyA6ICcnKSArIChjb2xvciA/ICdjb2xvcjonICsgY29sb3IgKyAnOycgOiAnJykgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc3YpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdikgdiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBzdi5yZXBsYWNlKC8mcXVvdDsvZywgJycpLm1hdGNoKHRoaXMuX2NsZWFuU3R5bGVSZWdFeHBbbmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZFN0eWxlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlLmxlbmd0aCwgcjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBzdHlsZVtpXS5tYXRjaCgvKFthLXpBLVowLTktXSspKDopKFteXCInXSspLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyICYmICEvaW5oZXJpdHxpbml0aWFsfHJldmVydHx1bnNldC9pLnRlc3QoclszXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSB1dGlsLmtlYmFiVG9DYW1lbENhc2UoclsxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMud3dDb21wdXRlZFN0eWxlW2tdLnJlcGxhY2UoL1wiL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSByWzNdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvbnRGYW1pbHknOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucGx1Z2lucy5mb250IHx8IG9wdGlvbnMuZm9udC5pbmRleE9mKGMpID09PSAtMSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvbnRTaXplJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBsdWdpbnMuZm9udFNpemUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NsZWFuU3R5bGVSZWdFeHAuZm9udFNpemVVbml0LnRlc3QoclswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbMF0gPSByWzBdLnJlcGxhY2UoKHJbMF0ubWF0Y2goLzpcXHMqKFteO10rKS8pIHx8IFtdKVsxXSwgdGhpcy5fY29udmVydEZvbnRTaXplLmJpbmQodGhpcywgb3B0aW9ucy5mb250U2l6ZVVuaXQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb2xvcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wbHVnaW5zLmZvbnRDb2xvciB8fCAvcmdiYVxcKChbMC05XStcXHMqLFxccyopezN9MFxcKXx3aW5kb3d0ZXh0L2kudGVzdChjKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tncm91bmRDb2xvcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wbHVnaW5zLmhpbGl0ZUNvbG9yIHx8IC9yZ2JhXFwoKFswLTldK1xccyosXFxzKil7M30wXFwpfHdpbmRvd3RleHQvaS50ZXN0KGMpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYgIT09IGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2VkU3R5bGUucHVzaChyWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3dlZFN0eWxlLmxlbmd0aCA+IDApIHYucHVzaCgnc3R5bGU9XCInICsgYWxsb3dlZFN0eWxlLmpvaW4oJzsnKSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGFnIGFuZCB0YWcgYXR0cmlidXRlIGNoZWNrIFJlZ0V4cCBmdW5jdGlvbi4gKHVzZWQgYnkgXCJjbGVhbkhUTUxcIiBhbmQgXCJjb252ZXJ0Q29udGVudHNGb3JFZGl0b3JcIilcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvd0xldmVsQ2hlY2sgUm93IGxldmVsIGNoZWNrXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG0gUmVnRXhwIHZhbHVlXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHQgUmVnRXhwIHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jbGVhblRhZ3M6IGZ1bmN0aW9uIChsb3dMZXZlbENoZWNrLCBtLCB0KSB7XHJcbiAgICAgICAgICAgIGlmICgvXjxbYS16MC05XStcXDpbYS16MC05XSsvaS50ZXN0KG0pKSByZXR1cm4gbTtcclxuXHJcbiAgICAgICAgICAgIGxldCB2ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgdGFnTmFtZSA9IHQubWF0Y2goLyg/ITwpW2EtekEtWjAtOVxcLV0rLylbMF0udG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJsYWNrbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBiQXR0ciA9IHRoaXMuX2F0dHJpYnV0ZXNUYWdzQmxhY2tsaXN0W3RhZ05hbWVdO1xyXG4gICAgICAgICAgICBtID0gbS5yZXBsYWNlKC9cXHMoPzpvblthLXpdKylcXHMqPVxccyooXCIpW15cIl0qXFwxL2lnLCAnJyk7XHJcbiAgICAgICAgICAgIGlmIChiQXR0cikgbSA9IG0ucmVwbGFjZShiQXR0ciwgJycpO1xyXG4gICAgICAgICAgICBlbHNlIG0gPSBtLnJlcGxhY2UodGhpcy5fYXR0cmlidXRlc0JsYWNrbGlzdFJlZ0V4cCwgJycpO1xyXG5cclxuICAgICAgICAgICAgLy8gd2hpdGVsaXN0XHJcbiAgICAgICAgICAgIGNvbnN0IHdBdHRyID0gdGhpcy5fYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3RbdGFnTmFtZV07XHJcbiAgICAgICAgICAgIGlmICh3QXR0cikgdiA9IG0ubWF0Y2god0F0dHIpO1xyXG4gICAgICAgICAgICBlbHNlIHYgPSBtLm1hdGNoKGxvd0xldmVsQ2hlY2sgPyB0aGlzLl9hdHRyaWJ1dGVzV2hpdGVsaXN0UmVnRXhwIDogdGhpcy5fYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cF9hbGxfZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAvLyBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgaWYgKGxvd0xldmVsQ2hlY2sgfHwgdGFnTmFtZSA9PT0gJ3NwYW4nIHx8IHRhZ05hbWUgPT09ICdsaScgfHwgIHRoaXMuX2NsZWFuU3R5bGVSZWdFeHBbdGFnTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YWdOYW1lID09PSAnYScpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdiA9IG0ubWF0Y2goLyg/Oig/OmlkfG5hbWUpXFxzKj1cXHMqKD86XCJ8JylbXlwiJ10qKD86XCJ8JykpL2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXYpIHYgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdi5wdXNoKHN2WzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2IHx8ICEvc3R5bGU9L2kudGVzdCh2LnRvU3RyaW5nKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdzcGFuJyB8fCB0YWdOYW1lID09PSAnbGknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLl9jbGVhblN0eWxlKG0sIHYsICdzcGFuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBpZiAodGhpcy5fY2xlYW5TdHlsZVJlZ0V4cFt0YWdOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5fY2xlYW5TdHlsZShtLCB2LCB0YWdOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eKFB8RElWfEhbMS02XXxQUkUpJC9pLnRlc3QodGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuX2NsZWFuU3R5bGUobSwgdiwgJ2Zvcm1hdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN2ID0gbS5tYXRjaCgvc3R5bGVcXHMqPVxccyooPzpcInwnKVteXCInXSooPzpcInwnKS8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN2ICYmICF2KSB2ID0gW3N2WzBdXTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN2ICYmICF2LnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIC9ec3R5bGUvLnRlc3Qodi50cmltKCkpOyB9KSkgdi5wdXNoKHN2WzBdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZmlndXJlXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzRmlndXJlcyh0YWdOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3YgPSBtLm1hdGNoKC9zdHlsZVxccyo9XFxzKig/OlwifCcpW15cIiddKig/OlwifCcpLyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXYpIHYgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmIChzdikgdi5wdXNoKHN2WzBdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2Lmxlbmd0aCwgYTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGxvd0xldmVsQ2hlY2sgJiYgL15jbGFzcz1cIig/IShfX3NlX198c2UtfGthdGV4KSkvLnRlc3QodltpXS50cmltKCkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBhID0gKC9eKD86aHJlZnxzcmMpXFxzKj1cXHMqKCd8XCJ8XFxzKSpqYXZhc2NyaXB0XFxzKlxcOi9pLnRlc3QodltpXS50cmltKCkpID8gJycgOiB2W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB0ICs9ICgvXlxccy8udGVzdChhKSA/ICcnIDogJyAnKSArIGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmVzIGlmIGZvcm1hdHRpbmcgaXMgcmVxdWlyZWQgYW5kIHJldHVybnMgYSBkb21UcmVlXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBkb20gZG9jdW1lbnRGcmFnbWVudFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtFbGVtZW50fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2VkaXRGb3JtYXQ6IGZ1bmN0aW9uIChkb20pIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gJycsIGY7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBUcmVlID0gZG9tLmNoaWxkTm9kZXM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGVtcFRyZWUubGVuZ3RoLCBuOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG4gPSB0ZW1wVHJlZVtpXTtcclxuICAgICAgICAgICAgICAgIGlmICAobi5ub2RlVHlwZSA9PT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9ICc8IS0tICcgKyBuLnRleHRDb250ZW50ICsgJyAtLT4nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdXRpbC5pc0Zvcm1hdEVsZW1lbnQobikgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobikgJiYgIXV0aWwuaXNDb21wb25lbnQobikgJiYgIS9tZXRhL2kudGVzdChuLm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZikgZiA9IHV0aWwuY3JlYXRlRWxlbWVudChvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGYuYXBwZW5kQ2hpbGQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgaS0tOyBsZW4tLTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gZi5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBuLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGYpIHZhbHVlICs9IGYub3V0ZXJIVE1MO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHZhbHVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY29udmVydExpc3RDZWxsOiBmdW5jdGlvbiAoZG9tVHJlZSkge1xyXG4gICAgICAgICAgICBsZXQgaHRtbCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRvbVRyZWUubGVuZ3RoLCBub2RlOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb21UcmVlW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3Qobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSBub2RlLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNMaXN0Q2VsbChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9IG5vZGUub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPGxpPicgKyhub2RlLmlubmVySFRNTC50cmltKCkgfHwgJzxicj4nKSArICc8L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG5vZGUpICYmICF1dGlsLmlzVGFibGUobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSB0aGlzLl9jb252ZXJ0TGlzdENlbGwobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPGxpPicgKyBub2RlLm91dGVySFRNTCArICc8L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8bGk+JyArIChub2RlLnRleHRDb250ZW50IHx8ICc8YnI+JykgKyAnPC9saT4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNGb3JtYXREYXRhOiBmdW5jdGlvbiAoZG9tVHJlZSkge1xyXG4gICAgICAgICAgICBsZXQgcmVxdWlyZUZvcm1hdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRvbVRyZWUubGVuZ3RoLCB0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHQgPSBkb21UcmVlW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubm9kZVR5cGUgPT09IDEgJiYgIXV0aWwuaXNUZXh0U3R5bGVFbGVtZW50KHQpICYmICF1dGlsLmlzQnJlYWsodCkgJiYgIXRoaXMuX19kaXNhbGxvd2VkVGFnTmFtZVJlZ0V4cC50ZXN0KHQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZUZvcm1hdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXF1aXJlRm9ybWF0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjbGVhbiBIVE1MIGNvZGUgZm9yIGVkaXRvclxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfG51bGx9IHdoaXRlbGlzdCBSZWd1bGFyIGV4cHJlc3Npb24gb2YgYWxsb3dlZCB0YWdzLlxyXG4gICAgICAgICAqIFJlZ0V4cCBvYmplY3QgaXMgY3JlYXRlIGJ5IHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdCBtZXRob2QuIChjb3JlLnBhc3RlVGFnc1doaXRlbGlzdFJlZ0V4cClcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB8bnVsbH0gYmxhY2tsaXN0IFJlZ3VsYXIgZXhwcmVzc2lvbiBvZiBkaXNhbGxvd2VkIHRhZ3MuXHJcbiAgICAgICAgICogUmVnRXhwIG9iamVjdCBpcyBjcmVhdGUgYnkgdXRpbC5jcmVhdGVUYWdzQmxhY2tsaXN0IG1ldGhvZC4gKGNvcmUucGFzdGVUYWdzQmxhY2tsaXN0UmVnRXhwKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xlYW5IVE1MOiBmdW5jdGlvbiAoaHRtbCwgd2hpdGVsaXN0LCBibGFja2xpc3QpIHtcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnN0cmljdE1vZGUpIHJldHVybiBodG1sO1xyXG5cclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuX2RlbGV0ZURpc2FsbG93ZWRUYWdzKHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcodXRpbC5odG1sQ29tcHJlc3MoaHRtbCksICd0ZXh0L2h0bWwnKS5ib2R5LmlubmVySFRNTCkucmVwbGFjZSgvKDxbYS16QS1aMC05XFwtXSspW14+XSooPz0+KS9nLCB0aGlzLl9jbGVhblRhZ3MuYmluZCh0aGlzLCB0cnVlKSkucmVwbGFjZSgvPGJyXFwvPz4kL2ksICcnKTtcclxuICAgICAgICAgICAgY29uc3QgZG9tID0gX2QuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLl9jb25zaXN0ZW5jeUNoZWNrT2ZIVE1MKGRvbSwgdGhpcy5faHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwLCB0aGlzLl9odG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAsIHRoaXMuX2NsYXNzTmFtZUZpbHRlcik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuY2xlYW5IVE1MLmNvbnNpc3RlbmN5Q2hlY2suZmFpbF0gJyArIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlZFRhZ3NJbmZvICYmIHRoaXMubWFuYWdlZFRhZ3NJbmZvLnF1ZXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Q29tcExpc3QgPSBkb20ucXVlcnlTZWxlY3RvckFsbCh0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGV4dENvbXBMaXN0Lmxlbmd0aCwgaW5pdE1ldGhvZCwgY2xhc3NMaXN0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc0xpc3QgPSBbXS5zbGljZS5jYWxsKHRleHRDb21wTGlzdFtpXS5jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2xhc3NMaXN0Lmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kID0gdGhpcy5tYW5hZ2VkVGFnc0luZm8ubWFwW2NsYXNzTGlzdFtjXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0TWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kKHRleHRDb21wTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGRvbVRyZWUgPSBkb20uY2hpbGROb2RlcztcclxuICAgICAgICAgICAgbGV0IGNsZWFuSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBjb25zdCByZXF1aXJlRm9ybWF0ID0gdGhpcy5faXNGb3JtYXREYXRhKGRvbVRyZWUpO1xyXG5cclxuICAgICAgICAgICAgaWYocmVxdWlyZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZG9tVHJlZSA9IHRoaXMuX2VkaXRGb3JtYXQoZG9tKS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZG9tVHJlZS5sZW5ndGgsIHQ7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdCA9IGRvbVRyZWVbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2FsbG93ZWRTY3JpcHRSZWdFeHAudGVzdCh0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0Lm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0aGlzLl9tYWtlTGluZSh0LCByZXF1aXJlRm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xlYW5IVE1MID0gdXRpbC5odG1sUmVtb3ZlV2hpdGVTcGFjZShjbGVhbkhUTUwpO1xyXG4gICAgICAgICAgICBpZiAoIWNsZWFuSFRNTCkge1xyXG4gICAgICAgICAgICAgICAgY2xlYW5IVE1MID0gaHRtbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh3aGl0ZWxpc3QpIGNsZWFuSFRNTCA9IGNsZWFuSFRNTC5yZXBsYWNlKHR5cGVvZiB3aGl0ZWxpc3QgPT09ICdzdHJpbmcnID8gdXRpbC5jcmVhdGVUYWdzV2hpdGVsaXN0KHdoaXRlbGlzdCkgOiB3aGl0ZWxpc3QsICcnKTtcclxuICAgICAgICAgICAgICAgIGlmIChibGFja2xpc3QpIGNsZWFuSFRNTCA9IGNsZWFuSFRNTC5yZXBsYWNlKHR5cGVvZiBibGFja2xpc3QgPT09ICdzdHJpbmcnID8gdXRpbC5jcmVhdGVUYWdzQmxhY2tsaXN0KGJsYWNrbGlzdCkgOiBibGFja2xpc3QsICcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhZ0NvbnZlcnRvcihjbGVhbkhUTUwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyBjb250ZW50cyBpbnRvIGEgZm9ybWF0IHRoYXQgY2FuIGJlIHBsYWNlZCBpbiBhbiBlZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgY29udGVudHNcclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnZlcnRDb250ZW50c0ZvckVkaXRvcjogZnVuY3Rpb24gKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zdHJpY3RNb2RlKSByZXR1cm4gY29udGVudHM7XHJcbiAgICAgICAgICAgIGNvbnRlbnRzID0gdGhpcy5fZGVsZXRlRGlzYWxsb3dlZFRhZ3ModGhpcy5fcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh1dGlsLmh0bWxDb21wcmVzcyhjb250ZW50cyksICd0ZXh0L2h0bWwnKS5ib2R5LmlubmVySFRNTCkucmVwbGFjZSgvKDxbYS16QS1aMC05XFwtXSspW14+XSooPz0+KS9nLCB0aGlzLl9jbGVhblRhZ3MuYmluZCh0aGlzLCB0cnVlKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbSA9IF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGNvbnRlbnRzKTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLl9jb25zaXN0ZW5jeUNoZWNrT2ZIVE1MKGRvbSwgdGhpcy5faHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwLCB0aGlzLl9odG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAsIHRoaXMuX2NsYXNzTmFtZUZpbHRlcik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuY29udmVydENvbnRlbnRzRm9yRWRpdG9yLmNvbnNpc3RlbmN5Q2hlY2suZmFpbF0gJyArIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlZFRhZ3NJbmZvICYmIHRoaXMubWFuYWdlZFRhZ3NJbmZvLnF1ZXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Q29tcExpc3QgPSBkb20ucXVlcnlTZWxlY3RvckFsbCh0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGV4dENvbXBMaXN0Lmxlbmd0aCwgaW5pdE1ldGhvZCwgY2xhc3NMaXN0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc0xpc3QgPSBbXS5zbGljZS5jYWxsKHRleHRDb21wTGlzdFtpXS5jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2xhc3NMaXN0Lmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kID0gdGhpcy5tYW5hZ2VkVGFnc0luZm8ubWFwW2NsYXNzTGlzdFtjXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0TWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kKHRleHRDb21wTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZG9tVHJlZSA9IGRvbS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICBsZXQgY2xlYW5IVE1MID0gJycsIHAgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdDsgaSA8IGRvbVRyZWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHQgPSBkb21UcmVlW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fYWxsb3dlZFNjcmlwdFJlZ0V4cC50ZXN0KHQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5IVE1MICs9IHQub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0Zvcm1hdEVsZW1lbnQodCkgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQodCkgJiYgIXV0aWwuaXNDb21wb25lbnQodCkgJiYgIXV0aWwuaXNGaWd1cmVzKHQpICYmIHQubm9kZVR5cGUgIT09IDggJiYgIS9fX3NlX190YWcvLnRlc3QodC5jbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwKSBwID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVRyZWVbaSArIDFdICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChkb21UcmVlW2kgKyAxXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0aGlzLl9tYWtlTGluZShwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0aGlzLl9tYWtlTGluZSh0LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocCkgY2xlYW5IVE1MICs9IHRoaXMuX21ha2VMaW5lKHAsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNsZWFuSFRNTC5sZW5ndGggPT09IDApIHJldHVybiAnPCcgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPjxicj48LycgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPic7XHJcblxyXG4gICAgICAgICAgICBjbGVhbkhUTUwgPSB1dGlsLmh0bWxSZW1vdmVXaGl0ZVNwYWNlKGNsZWFuSFRNTCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YWdDb252ZXJ0b3IoY2xlYW5IVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydHMgd3lzaXd5ZyBhcmVhIGVsZW1lbnQgaW50byBhIGZvcm1hdCB0aGF0IGNhbiBiZSBwbGFjZWQgaW4gYW4gZWRpdG9yIG9mIGNvZGUgdmlldyBtb2RlXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gaHRtbCBXWVNJV1lHIGVsZW1lbnQgKGNvbnRleHQuZWxlbWVudC53eXNpd3lnKSBvciBIVE1MIHN0cmluZy5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNvbXAgSWYgdHJ1ZSwgZG9lcyBub3QgbGluZSBicmVhayBhbmQgaW5kZW50YXRpb24gb2YgdGFncy5cclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnZlcnRIVE1MRm9yQ29kZVZpZXc6IGZ1bmN0aW9uIChodG1sLCBjb21wKSB7XHJcbiAgICAgICAgICAgIGxldCByZXR1cm5IVE1MID0gJyc7XHJcbiAgICAgICAgICAgIGNvbnN0IHdSZWdFeHAgPSBfdy5SZWdFeHA7XHJcbiAgICAgICAgICAgIGNvbnN0IGJyUmVnID0gbmV3IHdSZWdFeHAoJ14oQkxPQ0tRVU9URXxQUkV8VEFCTEV8VEhFQUR8VEJPRFl8VFJ8VEh8VER8T0x8VUx8SU1HfElGUkFNRXxWSURFT3xBVURJT3xGSUdVUkV8RklHQ0FQVElPTnxIUnxCUnxDQU5WQVN8U0VMRUNUKSQnLCAnaScpO1xyXG4gICAgICAgICAgICBjb25zdCB3RG9jID0gdHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnID8gX2QuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCkgOiBodG1sO1xyXG4gICAgICAgICAgICBjb25zdCBpc0Zvcm1hdCA9IGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiB0aGlzLmlzRm9ybWF0RWxlbWVudChjdXJyZW50KSB8fCB0aGlzLmlzQ29tcG9uZW50KGN1cnJlbnQpOyB9LmJpbmQodXRpbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJyQ2hhciA9IGNvbXAgPyAnJyA6ICdcXG4nO1xyXG5cclxuICAgICAgICAgICAgbGV0IGluZGVudFNpemUgPSBjb21wID8gMCA6IHRoaXMuX3ZhcmlhYmxlLmNvZGVJbmRlbnQgKiAxO1xyXG4gICAgICAgICAgICBpbmRlbnRTaXplID0gaW5kZW50U2l6ZSA+IDAgPyBuZXcgX3cuQXJyYXkoaW5kZW50U2l6ZSArIDEpLmpvaW4oJyAnKSA6ICcnO1xyXG5cclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMgKGVsZW1lbnQsIGluZGVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50UmVnVGVzdCA9IGJyUmVnLnRlc3QoZWxlbWVudC5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50SW5kZW50ID0gKGVsZW1lbnRSZWdUZXN0ID8gaW5kZW50IDogJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGgsIG5vZGUsIGJyLCBsaW5lQlIsIG5vZGVSZWdUZXN0LCB0YWcsIHRhZ0luZGVudDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVSZWdUZXN0ID0gYnJSZWcudGVzdChub2RlLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBiciA9IG5vZGVSZWdUZXN0ID8gYnJDaGFyIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZUJSID0gaXNGb3JtYXQobm9kZSkgJiYgIWVsZW1lbnRSZWdUZXN0ICYmICEvXihUSHxURCkkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSA/IGJyQ2hhciA6ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5IVE1MICs9ICdcXG48IS0tICcgKyBub2RlLnRleHRDb250ZW50LnRyaW0oKSArICcgLS0+JyArIGJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdChub2RlLnBhcmVudEVsZW1lbnQpKSByZXR1cm5IVE1MICs9IHV0aWwuX0hUTUxDb252ZXJ0b3IoL15cXG4rJC8udGVzdChub2RlLmRhdGEpID8gJycgOiBub2RlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuSFRNTCArPSAoL15IUiQvaS50ZXN0KG5vZGUubm9kZU5hbWUpID8gYnJDaGFyIDogJycpICsgKC9eUFJFJC9pLnRlc3Qobm9kZS5wYXJlbnRFbGVtZW50Lm5vZGVOYW1lKSAmJiAvXkJSJC9pLnRlc3Qobm9kZS5ub2RlTmFtZSkgPyAnJyA6IGVsZW1lbnRJbmRlbnQpICsgbm9kZS5vdXRlckhUTUwgKyBicjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUub3V0ZXJIVE1MKSB7IC8vIElFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybkhUTUwgKz0gbmV3IF93LlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWcgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0luZGVudCA9IGVsZW1lbnRJbmRlbnQgfHwgbm9kZVJlZ1Rlc3QgPyBpbmRlbnQgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuSFRNTCArPSAobGluZUJSIHx8IChlbGVtZW50UmVnVGVzdCA/ICcnIDogYnIpKSArIHRhZ0luZGVudCArIG5vZGUub3V0ZXJIVE1MLm1hdGNoKHdSZWdFeHAoJzwnICsgdGFnICsgJ1tePl0qPicsICdpJykpWzBdICsgYnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMobm9kZSwgaW5kZW50ICsgaW5kZW50U2l6ZSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5IVE1MICs9ICgvXFxuJC8udGVzdChyZXR1cm5IVE1MKSA/IHRhZ0luZGVudCA6ICcnKSArICc8LycgKyB0YWcgKyAnPicgKyAobGluZUJSIHx8IGJyIHx8IGVsZW1lbnRSZWdUZXN0ID8gYnJDaGFyIDogJycgfHwgL14oVEh8VEQpJC9pLnRlc3Qobm9kZS5ub2RlTmFtZSkgPyBickNoYXIgOiAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KHdEb2MsICcnKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuSFRNTC50cmltKCkgKyBickNoYXI7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBhbiBldmVudCB0byBkb2N1bWVudC5cclxuICAgICAgICAgKiBXaGVuIGNyZWF0ZWQgYXMgYW4gSWZyYW1lLCB0aGUgc2FtZSBldmVudCBpcyBhZGRlZCB0byB0aGUgZG9jdW1lbnQgaW4gdGhlIElmcmFtZS5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBFdmVudCB0eXBlXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgRXZlbnQgbGlzdGVuZXJcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUNhcHR1cmUgVXNlIGV2ZW50IGNhcHR1cmVcclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGREb2NFdmVudDogZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIF9kLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dkLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSBldmVudHMgZnJvbSBkb2N1bWVudC5cclxuICAgICAgICAgKiBXaGVuIGNyZWF0ZWQgYXMgYW4gSWZyYW1lLCB0aGUgZXZlbnQgb2YgdGhlIGRvY3VtZW50IGluc2lkZSB0aGUgSWZyYW1lIGlzIGFsc28gcmVtb3ZlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBFdmVudCB0eXBlXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgRXZlbnQgbGlzdGVuZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVEb2NFdmVudDogZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIF9kLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dkLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IG51bWJlciBvZiBjaGFyYWN0ZXJzIGlzIGNvdW50ZWQgYW5kIGRpc3BsYXllZC5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXRUZXh0IFRleHQgYWRkZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY2hhckNvdW50OiBmdW5jdGlvbiAoaW5wdXRUZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heENoYXJDb3VudCA9IG9wdGlvbnMubWF4Q2hhckNvdW50O1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudFR5cGUgPSBvcHRpb25zLmNoYXJDb3VudGVyVHlwZTtcclxuICAgICAgICAgICAgbGV0IG5leHRDaGFyQ291bnQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoISFpbnB1dFRleHQpIG5leHRDaGFyQ291bnQgPSB0aGlzLmdldENoYXJMZW5ndGgoaW5wdXRUZXh0LCBjb3VudFR5cGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2V0Q2hhckNvdW50KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobWF4Q2hhckNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG92ZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gZnVuY3Rpb25zLmdldENoYXJDb3VudChjb3VudFR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA+IG1heENoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hhckNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbGljZVBvc2l0aW9uID0gcmFuZ2UuZW5kT2Zmc2V0IC0gKGNvdW50IC0gbWF4Q2hhckNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLnRleHRDb250ZW50ID0gdGV4dC5zbGljZSgwLCBzbGljZVBvc2l0aW9uIDwgMCA/IDAgOiBzbGljZVBvc2l0aW9uKSArIHRleHQuc2xpY2UocmFuZ2UuZW5kT2Zmc2V0LCB0ZXh0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UocmFuZ2UuZW5kQ29udGFpbmVyLCBlbmRPZmYsIHJhbmdlLmVuZENvbnRhaW5lciwgZW5kT2ZmKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjb3VudCArIG5leHRDaGFyQ291bnQpID4gbWF4Q2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsQ291bnRlckJsaW5rKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDaGFyQ291bnQgPiAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBXaGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBpZiBpdCBpcyBncmVhdGVyIHRoYW4gXCJvcHRpb25zLm1heENoYXJDb3VudFwiLCBmYWxzZSBpcyByZXR1cm5lZC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBlbGVtZW50IEVsZW1lbnQgbm9kZSBvciBTdHJpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gY2hhckNvdW50ZXJUeXBlIGNoYXJDb3VudGVyVHlwZS4gSWYgaXQgaXMgbnVsbCwgdGhlIG9wdGlvbnMuY2hhckNvdW50ZXJUeXBlXHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hlY2tDaGFyQ291bnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBjaGFyQ291bnRlclR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4Q2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudFR5cGUgPSBjaGFyQ291bnRlclR5cGUgfHwgb3B0aW9ucy5jaGFyQ291bnRlclR5cGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmdldENoYXJMZW5ndGgoKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJyA/IGVsZW1lbnQgOiAodGhpcy5fY2hhclR5cGVIVE1MICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEpID8gZWxlbWVudC5vdXRlckhUTUwgOiBlbGVtZW50LnRleHRDb250ZW50KSwgY291bnRUeXBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPiAwICYmIGxlbmd0aCArIGZ1bmN0aW9ucy5nZXRDaGFyQ291bnQoY291bnRUeXBlKSA+IG9wdGlvbnMubWF4Q2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbENvdW50ZXJCbGluaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBsZW5ndGggb2YgdGhlIGNvbnRlbnQuXHJcbiAgICAgICAgICogRGVwZW5kaW5nIG9uIHRoZSBvcHRpb24sIHRoZSBsZW5ndGggb2YgdGhlIGNoYXJhY3RlciBpcyB0YWtlbi4gKGNoYXJDb3VudGVyVHlwZSlcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudCBDb250ZW50IHRvIGNvdW50XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNoYXJDb3VudGVyVHlwZSBvcHRpb25zLmNoYXJDb3VudGVyVHlwZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0Q2hhckxlbmd0aDogZnVuY3Rpb24gKGNvbnRlbnQsIGNoYXJDb3VudGVyVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gL2J5dGUvLnRlc3QoY2hhckNvdW50ZXJUeXBlKSA/IHV0aWwuZ2V0Qnl0ZUxlbmd0aChjb250ZW50KSA6IGNvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCBidXR0b25zIG9mIHRoZSByZXNwb25zaXZlIHRvb2xiYXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVzZXRSZXNwb25zaXZlVG9vbGJhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zaXZlU2l6ZSA9IGV2ZW50Ll9yZXNwb25zaXZlQnV0dG9uU2l6ZTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVTaXplKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdyA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGNvcmUuX2lzQmFsbG9vbiB8fCBjb3JlLl9pc0lubGluZSkgJiYgb3B0aW9ucy50b29sYmFyV2lkdGggPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHcgPSBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdyA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCByZXNwb25zaXZlV2lkdGggPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gcmVzcG9uc2l2ZVNpemUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodyA8IHJlc3BvbnNpdmVTaXplW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmVXaWR0aCA9IHJlc3BvbnNpdmVTaXplW2ldICsgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuX3Jlc3BvbnNpdmVDdXJyZW50U2l6ZSAhPT0gcmVzcG9uc2l2ZVdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Jlc3BvbnNpdmVDdXJyZW50U2l6ZSA9IHJlc3BvbnNpdmVXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnMuc2V0VG9vbGJhckJ1dHRvbnMoZXZlbnQuX3Jlc3BvbnNpdmVCdXR0b25zW3Jlc3BvbnNpdmVXaWR0aF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCB0aGUgY2hhciBjb3VudCB0byBjaGFyQ291bnRlciBlbGVtZW50IHRleHRDb250ZW50LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldENoYXJDb3VudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC5lbGVtZW50LmNoYXJDb3VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uIChmdW5jdGlvbnMsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0Q29udGVudCAmJiBmdW5jdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IGZ1bmN0aW9ucy5nZXRDaGFyQ291bnQob3B0aW9ucy5jaGFyQ291bnRlclR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0uYmluZChjb250ZXh0LmVsZW1lbnQuY2hhckNvdW50ZXIsIGZ1bmN0aW9ucywgb3B0aW9ucyksIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBjaGFyYWN0ZXIgY291bnRlciBibGlua3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY2FsbENvdW50ZXJCbGluazogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFyV3JhcHBlciA9IGNvbnRleHQuZWxlbWVudC5jaGFyV3JhcHBlcjtcclxuICAgICAgICAgICAgaWYgKGNoYXJXcmFwcGVyICYmICF1dGlsLmhhc0NsYXNzKGNoYXJXcmFwcGVyLCAnc2UtYmxpbmsnKSkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhjaGFyV3JhcHBlciwgJ3NlLWJsaW5rJyk7XHJcbiAgICAgICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNoYXJXcmFwcGVyLCAnc2UtYmxpbmsnKTtcclxuICAgICAgICAgICAgICAgIH0sIDYwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIGNvbXBvbmVudHMgc3VjaCBhcyBpbWFnZSBhbmQgdmlkZW8gYW5kIG1vZGlmeSB0aGVtIGFjY29yZGluZyB0byB0aGUgZm9ybWF0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NoZWNrQ29tcG9uZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5fZmlsZUluZm9QbHVnaW5zQ2hlY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbmZvUGx1Z2luc0NoZWNrW2ldKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSW5pdGlhbGl6ZSB0aGUgaW5mb3JtYXRpb24gb2YgdGhlIGNvbXBvbmVudHMuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVzZXRDb21wb25lbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9maWxlSW5mb1BsdWdpbnNSZXNldC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsZUluZm9QbHVnaW5zUmVzZXRbaV0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgbWV0aG9kIGluIHRoZSBjb2RlIHZpZXcgYXJlYVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldENvZGVWaWV3OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yLmdldERvYygpLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IG1ldGhvZCBpbiB0aGUgY29kZSB2aWV3IGFyZWFcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXRDb2RlVmlldzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yID8gb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yLmdldERvYygpLmdldFZhbHVlKCkgOiBjb250ZXh0LmVsZW1lbnQuY29kZS52YWx1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gcmVtb3ZlIGNsYXNzLCBkaXNwbGF5IHRleHQuXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheXxudWxsfSBpZ25vcmVkTGlzdCBJZ29ucmVkIGJ1dHRvbiBsaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldEtleUVmZmVjdDogZnVuY3Rpb24gKGlnbm9yZWRMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmRNYXAgPSB0aGlzLmNvbW1hbmRNYXA7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVBsdWdpbnMgPSB0aGlzLmFjdGl2ZVBsdWdpbnM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gY29tbWFuZE1hcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZWRMaXN0LmluZGV4T2Yoa2V5KSA+IC0xIHx8ICF1dGlsLmhhc093bihjb21tYW5kTWFwLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVQbHVnaW5zLmluZGV4T2Yoa2V5KSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luc1trZXldLmFjdGl2ZS5jYWxsKHRoaXMsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kTWFwLk9VVERFTlQgJiYgL15PVVRERU5UJC9pLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ltcG9ydGFudERpc2FibGVkKGNvbW1hbmRNYXAuT1VUREVOVCkpIGNvbW1hbmRNYXAuT1VUREVOVC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmRNYXAuSU5ERU5UICYmIC9eSU5ERU5UJC9pLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ltcG9ydGFudERpc2FibGVkKGNvbW1hbmRNYXAuSU5ERU5UKSkgY29tbWFuZE1hcC5JTkRFTlQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvbW1hbmRNYXBba2V5XSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpeiBjb3JlIHZhcmlhYmxlXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZWxvYWQgSXMgcmVsb29hZD9cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2luaXRIVE1MIGluaXRpYWwgaHRtbCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbiAocmVsb2FkLCBfaW5pdEhUTUwpIHtcclxuICAgICAgICAgICAgY29uc3Qgd1JlZ0V4cCA9IF93LlJlZ0V4cDtcclxuICAgICAgICAgICAgdGhpcy5fd3cgPSBvcHRpb25zLmlmcmFtZSA/IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuY29udGVudFdpbmRvdyA6IF93O1xyXG4gICAgICAgICAgICB0aGlzLl93ZCA9IF9kO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFyVHlwZUhUTUwgPSBvcHRpb25zLmNoYXJDb3VudGVyVHlwZSA9PT0gJ2J5dGUtaHRtbCc7XHJcbiAgICAgICAgICAgIHRoaXMud3dDb21wdXRlZFN0eWxlID0gX3cuZ2V0Q29tcHV0ZWRTdHlsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VkaXRvckhlaWdodCA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLl9lZGl0b3JIZWlnaHRQYWRkaW5nID0gdXRpbC5nZXROdW1iZXIodGhpcy53d0NvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSkgKyB1dGlsLmdldE51bWJlcih0aGlzLnd3Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpKTtcclxuICAgICAgICAgICAgdGhpcy5fY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRlc3QodikgPyB2IDogJyc7XHJcbiAgICAgICAgICAgIH0uYmluZChvcHRpb25zLmFsbG93ZWRDbGFzc05hbWVzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNQcmVmaXggPSAob3B0aW9ucy5fX2FsbG93ZWRTY3JpcHRUYWcgPyAnJyA6ICdzY3JpcHR8Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuX19zY3JpcHRUYWdSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnPChzY3JpcHQpW14+XSo+KFtcXFxcc1xcXFxTXSo/KTxcXFxcL1xcXFwxPnw8c2NyaXB0W14+XSpcXFxcLz8+JywgJ2dpJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX19kaXNhbGxvd2VkVGFnc1JlZ0V4cCA9IG5ldyB3UmVnRXhwKCc8KCcgKyBzUHJlZml4ICsgJ3N0eWxlKVtePl0qPihbXFxcXHNcXFxcU10qPyk8XFxcXC9cXFxcMT58PCgnICsgc1ByZWZpeCArICdzdHlsZSlbXj5dKlxcXFwvPz4nLCAnZ2knKTtcclxuICAgICAgICAgICAgdGhpcy5fX2Rpc2FsbG93ZWRUYWdOYW1lUmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArIHNQcmVmaXggKyAnbWV0YXxsaW5rfHN0eWxlfFthLXpdK1xcOlthLXpdKykkJywgJ2knKTtcclxuICAgICAgICAgICAgdGhpcy5fX2FsbG93ZWRTY3JpcHRSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXicgKyAob3B0aW9ucy5fX2FsbG93ZWRTY3JpcHRUYWcgPyAnc2NyaXB0JyA6ICcnKSArICckJywgJ2knKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZnJhbWUgJiYgdHlwZW9mIF93LlNoYWRvd1Jvb3QgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWU7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuc2hhZG93Um9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaGFkb3dSb290ID0gY2hpbGQuc2hhZG93Um9vdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIF93LlNoYWRvd1Jvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hhZG93Um9vdCA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NoYWRvd1Jvb3QpIHRoaXMuX3NoYWRvd1Jvb3RDb250cm9sbGVyRXZlbnRUYXJnZXQgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IGRpc2FsbG93IHRleHQgbm9kZXNcclxuICAgICAgICAgICAgY29uc3QgZGlzYWxsb3dUZXh0VGFncyA9IF93Lk9iamVjdC5rZXlzKG9wdGlvbnMuX3RleHRUYWdzTWFwKTtcclxuICAgICAgICAgICAgY29uc3QgYWxsb3dUZXh0VGFncyA9ICFvcHRpb25zLmFkZFRhZ3NXaGl0ZWxpc3QgPyBbXSA6IG9wdGlvbnMuYWRkVGFnc1doaXRlbGlzdC5zcGxpdCgnfCcpLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gL2J8aXxpbnN8c3xzdHJpa2UvaS50ZXN0KHYpOyB9KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxvd1RleHRUYWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNhbGxvd1RleHRUYWdzLnNwbGljZShkaXNhbGxvd1RleHRUYWdzLmluZGV4T2YoYWxsb3dUZXh0VGFnc1tpXS50b0xvd2VyQ2FzZSgpKSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZGlzYWxsb3dlZFRleHRUYWdzUmVnRXhwID0gZGlzYWxsb3dUZXh0VGFncy5sZW5ndGggPT09IDAgPyBudWxsIDogbmV3IHdSZWdFeHAoJyg8XFxcXC8/KSgnICsgZGlzYWxsb3dUZXh0VGFncy5qb2luKCd8JykgKyAnKVxcXFxiXFxcXHMqKFtePl48XSspP1xcXFxzKig/PT4pJywgJ2dpJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgd2hpdGVsaXN0XHJcbiAgICAgICAgICAgIGNvbnN0IGdldFJlZ0xpc3QgPSBmdW5jdGlvbiAoc3RyLCBzdHIyKSB7IHJldHVybiAhc3RyID8gJ14nIDogKHN0ciA9PT0gJyonID8gJ1thLXotXSsnIDogKCFzdHIyID8gc3RyIDogKHN0ciArICd8JyArIHN0cjIpKSk7IH07XHJcbiAgICAgICAgICAgIC8vIHRhZ3NcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEF0dHIgPSAnY29udGVudGVkaXRhYmxlfGNvbHNwYW58cm93c3Bhbnx0YXJnZXR8aHJlZnxkb3dubG9hZHxyZWx8c3JjfGFsdHxjbGFzc3x0eXBlfGNvbnRyb2xzfG9yaWdpbi1zaXplJztcclxuICAgICAgICAgICAgY29uc3QgZGF0YUF0dHIgPSAnZGF0YS1mb3JtYXR8ZGF0YS1zaXplfGRhdGEtZmlsZS1zaXplfGRhdGEtZmlsZS1uYW1lfGRhdGEtb3JpZ2lufGRhdGEtYWxpZ258ZGF0YS1pbWFnZS1saW5rfGRhdGEtcm90YXRlfGRhdGEtcHJvcG9ydGlvbnxkYXRhLXBlcmNlbnRhZ2V8ZGF0YS1leHB8ZGF0YS1mb250LXNpemUnO1xyXG4gICAgICAgICAgICB0aGlzLl9hbGxvd0hUTUxDb21tZW50cyA9IG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QuaW5kZXhPZignLy8nKSA+IC0xIHx8IG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QgPT09ICcqJztcclxuICAgICAgICAgICAgLy8gaHRtbCBjaGVja1xyXG4gICAgICAgICAgICB0aGlzLl9odG1sQ2hlY2tXaGl0ZWxpc3RSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXignICsgZ2V0UmVnTGlzdChvcHRpb25zLl9lZGl0b3JUYWdzV2hpdGVsaXN0LnJlcGxhY2UoJ3wvLycsICcnKSwgJycpICsgJykkJywgJ2knKTtcclxuICAgICAgICAgICAgdGhpcy5faHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArIChvcHRpb25zLnRhZ3NCbGFja2xpc3QgfHwgJ14nKSArICcpJCcsICdpJyk7XHJcbiAgICAgICAgICAgIC8vIHRhZ3NcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwID0gdXRpbC5jcmVhdGVUYWdzV2hpdGVsaXN0KGdldFJlZ0xpc3Qob3B0aW9ucy5fZWRpdG9yVGFnc1doaXRlbGlzdC5yZXBsYWNlKCd8Ly8nLCAnfDwhLS18LS0+JyksICcnKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yVGFnc0JsYWNrbGlzdFJlZ0V4cCA9IHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChvcHRpb25zLnRhZ3NCbGFja2xpc3QucmVwbGFjZSgnfC8vJywgJ3w8IS0tfC0tPicpKTtcclxuICAgICAgICAgICAgLy8gcGFzdGUgdGFnc1xyXG4gICAgICAgICAgICB0aGlzLnBhc3RlVGFnc1doaXRlbGlzdFJlZ0V4cCA9IHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdChnZXRSZWdMaXN0KG9wdGlvbnMucGFzdGVUYWdzV2hpdGVsaXN0LCAnJykpO1xyXG4gICAgICAgICAgICB0aGlzLnBhc3RlVGFnc0JsYWNrbGlzdFJlZ0V4cCA9IHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChvcHRpb25zLnBhc3RlVGFnc0JsYWNrbGlzdCk7XHJcbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgcmVnRW5kU3RyID0gJ1xcXFxzKj1cXFxccyooXFxcIilbXlxcXCJdKlxcXFwxJztcclxuICAgICAgICAgICAgY29uc3QgX3dBdHRyID0gb3B0aW9ucy5hdHRyaWJ1dGVzV2hpdGVsaXN0O1xyXG4gICAgICAgICAgICBsZXQgdGFnc0F0dHIgPSB7fTtcclxuICAgICAgICAgICAgbGV0IGFsbEF0dHIgPSAnJztcclxuICAgICAgICAgICAgaWYgKCEhX3dBdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIF93QXR0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24oX3dBdHRyLCBrKSB8fCAvXm9uW2Etel0rJC9pLnRlc3QoX3dBdHRyW2tdKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEF0dHIgPSBnZXRSZWdMaXN0KF93QXR0cltrXSwgZGVmYXVsdEF0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3NBdHRyW2tdID0gbmV3IHdSZWdFeHAoJ1xcXFxzKD86JyArIGdldFJlZ0xpc3QoX3dBdHRyW2tdLCAnJykgKyAnKScgKyByZWdFbmRTdHIsICdpZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cCA9IG5ldyB3UmVnRXhwKCdcXFxccyg/OicgKyAoYWxsQXR0ciB8fCBkZWZhdWx0QXR0ciArICd8JyArIGRhdGFBdHRyKSArICcpJyArIHJlZ0VuZFN0ciwgJ2lnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZXNXaGl0ZWxpc3RSZWdFeHBfYWxsX2RhdGEgPSBuZXcgd1JlZ0V4cCgnXFxcXHMoPzonICsgKChhbGxBdHRyIHx8IGRlZmF1bHRBdHRyKSArICd8ZGF0YS1bYS16MC05XFxcXC1dKycpICsgJyknICsgcmVnRW5kU3RyLCAnaWcnKTtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3QgPSB0YWdzQXR0cjtcclxuXHJcbiAgICAgICAgICAgIC8vIGJsYWNrbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBfYkF0dHIgPSBvcHRpb25zLmF0dHJpYnV0ZXNCbGFja2xpc3Q7XHJcbiAgICAgICAgICAgIHRhZ3NBdHRyID0ge307XHJcbiAgICAgICAgICAgIGFsbEF0dHIgPSAnJztcclxuICAgICAgICAgICAgaWYgKCEhX2JBdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIF9iQXR0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24oX2JBdHRyLCBrKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEF0dHIgPSBnZXRSZWdMaXN0KF9iQXR0cltrXSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3NBdHRyW2tdID0gbmV3IHdSZWdFeHAoJ1xcXFxzKD86JyArIGdldFJlZ0xpc3QoX2JBdHRyW2tdLCAnJykgKyAnKScgKyByZWdFbmRTdHIsICdpZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc0JsYWNrbGlzdFJlZ0V4cCA9IG5ldyB3UmVnRXhwKCdcXFxccyg/OicgKyAoYWxsQXR0ciB8fCAnXicpICsgJyknICsgcmVnRW5kU3RyLCAnaWcnKTtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc1RhZ3NCbGFja2xpc3QgPSB0YWdzQXR0cjtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBtb2Rlc1xyXG4gICAgICAgICAgICB0aGlzLl9pc0lubGluZSA9IC9pbmxpbmUvaS50ZXN0KG9wdGlvbnMubW9kZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IC9iYWxsb29ufGJhbGxvb24tYWx3YXlzL2kudGVzdChvcHRpb25zLm1vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0JhbGxvb25BbHdheXMgPSAvYmFsbG9vbi1hbHdheXMvaS50ZXN0KG9wdGlvbnMubW9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjYWNoaW5nIGJ1dHRvbnNcclxuICAgICAgICAgICAgdGhpcy5fY2FjaGluZ0J1dHRvbnMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpbGUgY29tcG9uZW50c1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNDaGVjayA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNSZXNldCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gdGV4dCBjb21wb25lbnRzXHJcbiAgICAgICAgICAgIHRoaXMubWFuYWdlZFRhZ3NJbmZvID0geyBxdWVyeTogJycsIG1hcDoge30gfTtcclxuICAgICAgICAgICAgY29uc3QgbWFuYWdlZENsYXNzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBDb21tYW5kIGFuZCBmaWxlIHBsdWdpbnMgcmVnaXN0cmF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlUGx1Z2lucyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci50YWdzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpbk1hcCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbGVQbHVnaW5SZWdFeHAgPSBbXTtcclxuICAgICAgICAgICAgbGV0IHBsdWdpbiwgYnV0dG9uO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gcGx1Z2lucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmhhc093bihwbHVnaW5zLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIHBsdWdpbiA9IHBsdWdpbnNba2V5XTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbiA9IHBsdWdpbkNhbGxCdXR0b25zW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoKHBsdWdpbi5hY3RpdmUgfHwgcGx1Z2luLmFjdGlvbikgJiYgYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGtleSwgbnVsbCwgYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmNoZWNrRmlsZUluZm8gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHBsdWdpbi5yZXNldEZpbGVJbmZvID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGtleSwgbnVsbCwgYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNDaGVjay5wdXNoKHBsdWdpbi5jaGVja0ZpbGVJbmZvLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbmZvUGx1Z2luc1Jlc2V0LnB1c2gocGx1Z2luLnJlc2V0RmlsZUluZm8uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoX3cuQXJyYXkuaXNBcnJheShwbHVnaW4uZmlsZVRhZ3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZVRhZ3MgPSBwbHVnaW4uZmlsZVRhZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGtleSwgbnVsbCwgYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci50YWdzID0gdGhpcy5fZmlsZU1hbmFnZXIudGFncy5jb25jYXQoZmlsZVRhZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVQbHVnaW5SZWdFeHAucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRhZyA9IDAsIHRMZW4gPSBmaWxlVGFncy5sZW5ndGg7IHRhZyA8IHRMZW47IHRhZysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpbk1hcFtmaWxlVGFnc1t0YWddLnRvTG93ZXJDYXNlKCldID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4ubWFuYWdlZFRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gcGx1Z2luLm1hbmFnZWRUYWdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlZENsYXNzLnB1c2goJy4nICsgaW5mby5jbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFuYWdlZFRhZ3NJbmZvLm1hcFtpbmZvLmNsYXNzTmFtZV0gPSBpbmZvLm1ldGhvZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSA9IG1hbmFnZWRDbGFzcy50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci5xdWVyeVN0cmluZyA9IHRoaXMuX2ZpbGVNYW5hZ2VyLnRhZ3Muam9pbignLCcpO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci5yZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXignICsgICh0aGlzLl9maWxlTWFuYWdlci50YWdzLmpvaW4oJ3wnKSB8fCAnXicpICsgJykkJywgJ2knKTtcclxuICAgICAgICAgICAgdGhpcy5fZmlsZU1hbmFnZXIucGx1Z2luUmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArICAoZmlsZVBsdWdpblJlZ0V4cC5sZW5ndGggPT09IDAgPyAnXicgOiBmaWxlUGx1Z2luUmVnRXhwLmpvaW4oJ3wnKSkgKyAnKSQnLCAnaScpO1xyXG5cclxuICAgICAgICAgICAgLy8gY2FjaGUgZWRpdG9yJ3MgZWxlbWVudFxyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fb3JpZ2luQ3NzVGV4dCA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhLnN0eWxlLmNzc1RleHQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyID0gY29udGV4dC5lbGVtZW50LnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICB0aGlzLl9saW5lQnJlYWtlciA9IGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcjtcclxuICAgICAgICAgICAgdGhpcy5fbGluZUJyZWFrZXJCdXR0b24gPSB0aGlzLl9saW5lQnJlYWtlci5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEV4Y3V0ZSBoaXN0b3J5IGZ1bmN0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeSA9IF9oaXN0b3J5KHRoaXMsIHRoaXMuX29uQ2hhbmdlX2hpc3RvcnlTdGFjay5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlZ2lzdGVyIG5vdGljZSBtb2R1bGVcclxuICAgICAgICAgICAgdGhpcy5hZGRNb2R1bGUoW19ub3RpY2VdKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXQsIHZhbGlkYXRlXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLmNvbnRlbnREb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnID0gdGhpcy5fd2QuYm9keTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLl9lZGl0b3JTdHlsZXMuZWRpdG9yKSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5zdHlsZS5jc3NUZXh0ID0gb3B0aW9ucy5fZWRpdG9yU3R5bGVzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nKSB0aGlzLl9pZnJhbWVBdXRvID0gdGhpcy5fd2QuYm9keTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5faW5pdFd5c2l3eWdBcmVhKHJlbG9hZCwgX2luaXRIVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FjaGluZyBiYXNpYyBidXR0b25zIHRvIHVzZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NhY2hpbmdCdXR0b25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29kZVZpZXdEaXNhYmxlZEJ1dHRvbnMgPSBjb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnLnNlLW1lbnUtbGlzdCBidXR0b25bZGF0YS1kaXNwbGF5XTpub3QoW2NsYXNzfj1cInNlLWNvZGUtdmlldy1lbmFibGVkXCJdKTpub3QoW2RhdGEtZGlzcGxheT1cIk1PUkVcIl0pJyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXppbmdEaXNhYmxlZEJ1dHRvbnMgPSBjb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnLnNlLW1lbnUtbGlzdCBidXR0b25bZGF0YS1kaXNwbGF5XTpub3QoW2NsYXNzfj1cInNlLXJlc2l6aW5nLWVuYWJsZWRcIl0pOm5vdChbZGF0YS1kaXNwbGF5PVwiTU9SRVwiXSknKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2wgPSBjb250ZXh0LnRvb2w7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmRNYXAgPSB0aGlzLmNvbW1hbmRNYXA7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXAuSU5ERU5UID0gdG9vbC5pbmRlbnQ7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXAuT1VUREVOVCA9IHRvb2wub3V0ZGVudDtcclxuICAgICAgICAgICAgY29tbWFuZE1hcFtvcHRpb25zLnRleHRUYWdzLmJvbGQudG9VcHBlckNhc2UoKV0gPSB0b29sLmJvbGQ7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXBbb3B0aW9ucy50ZXh0VGFncy51bmRlcmxpbmUudG9VcHBlckNhc2UoKV0gPSB0b29sLnVuZGVybGluZTtcclxuICAgICAgICAgICAgY29tbWFuZE1hcFtvcHRpb25zLnRleHRUYWdzLml0YWxpYy50b1VwcGVyQ2FzZSgpXSA9IHRvb2wuaXRhbGljO1xyXG4gICAgICAgICAgICBjb21tYW5kTWFwW29wdGlvbnMudGV4dFRhZ3Muc3RyaWtlLnRvVXBwZXJDYXNlKCldID0gdG9vbC5zdHJpa2U7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXBbb3B0aW9ucy50ZXh0VGFncy5zdWIudG9VcHBlckNhc2UoKV0gPSB0b29sLnN1YnNjcmlwdDtcclxuICAgICAgICAgICAgY29tbWFuZE1hcFtvcHRpb25zLnRleHRUYWdzLnN1cC50b1VwcGVyQ2FzZSgpXSA9IHRvb2wuc3VwZXJzY3JpcHQ7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zdHlsZUNvbW1hbmRNYXAgPSB7XHJcbiAgICAgICAgICAgICAgICBmdWxsU2NyZWVuOiB0b29sLmZ1bGxTY3JlZW4sXHJcbiAgICAgICAgICAgICAgICBzaG93QmxvY2tzOiB0b29sLnNob3dCbG9ja3MsXHJcbiAgICAgICAgICAgICAgICBjb2RlVmlldzogdG9vbC5jb2RlVmlld1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2F2ZUJ1dHRvblN0YXRlcygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXogd3lzaXd5ZyBhcmVhIChPbmx5IGNhbGxlZCBmcm9tIGNvcmUuX2luaXQpXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZWxvYWQgSXMgcmVsb29hZD9cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2luaXRIVE1MIGluaXRpYWwgaHRtbCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pbml0V3lzaXd5Z0FyZWE6IGZ1bmN0aW9uIChyZWxvYWQsIF9pbml0SFRNTCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5pbm5lckhUTUwgPSByZWxvYWQgPyBfaW5pdEhUTUwgOiB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcigodHlwZW9mIF9pbml0SFRNTCA9PT0gJ3N0cmluZycgPyBfaW5pdEhUTUwgOiAvXlRFWFRBUkVBJC9pLnRlc3QoY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQubm9kZU5hbWUpID8gY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQudmFsdWUgOiBjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudC5pbm5lckhUTUwpIHx8ICcnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlcmUgYXJlIGNoYW5nZXMgdG8gdGFncyBpbiB0aGUgd3lzaXd5ZyByZWdpb24uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVzb3VyY2VzU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5faWZyYW1lQXV0b0hlaWdodCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja1BsYWNlaG9sZGVyKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIGFmdGVyIGV4ZWN1dGUgXCJoaXN0b3J5LnB1c2hcIlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX29uQ2hhbmdlX2hpc3RvcnlTdGFjazogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNGb2N1cykgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5pc0NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC50b29sLnNhdmUpIGNvbnRleHQudG9vbC5zYXZlLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAoZnVuY3Rpb25zLm9uQ2hhbmdlKSBmdW5jdGlvbnMub25DaGFuZ2UodGhpcy5nZXRDb250ZW50cyh0cnVlKSwgdGhpcyk7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmVsZW1lbnQudG9vbGJhci5zdHlsZS5kaXNwbGF5ID09PSAnYmxvY2snKSBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE1vZGlmeSB0aGUgaGVpZ2h0IHZhbHVlIG9mIHRoZSBpZnJhbWUgd2hlbiB0aGUgaGVpZ2h0IG9mIHRoZSBpZnJhbWUgaXMgYXV0b21hdGljLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lmcmFtZUF1dG9IZWlnaHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lmcmFtZUF1dG8pIHtcclxuICAgICAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBjb3JlLl9pZnJhbWVBdXRvLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1Jlc2l6ZU9ic2VydmVyU3VwcG9ydGVkKSBjb3JlLl9fY2FsbFJlc2l6ZUZ1bmN0aW9uKGgsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXV0aWwuaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fX2NhbGxSZXNpemVGdW5jdGlvbihjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLm9mZnNldEhlaWdodCwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfX2NhbGxSZXNpemVGdW5jdGlvbjogZnVuY3Rpb24gKGgsIHJlc2l6ZU9ic2VydmVyRW50cnkpIHtcclxuICAgICAgICAgICAgaCA9IGggPT09IC0xID8gKHJlc2l6ZU9ic2VydmVyRW50cnkuYm9yZGVyQm94U2l6ZSAmJiByZXNpemVPYnNlcnZlckVudHJ5LmJvcmRlckJveFNpemVbMF0gPyByZXNpemVPYnNlcnZlckVudHJ5LmJvcmRlckJveFNpemVbMF0uYmxvY2tTaXplIDogKHJlc2l6ZU9ic2VydmVyRW50cnkuY29udGVudFJlY3QuaGVpZ2h0ICsgdGhpcy5fZWRpdG9ySGVpZ2h0UGFkZGluZykpIDogaDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2VkaXRvckhlaWdodCAhPT0gaCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25SZXNpemVFZGl0b3IgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy5vblJlc2l6ZUVkaXRvcihoLCB0aGlzLl9lZGl0b3JIZWlnaHQsIGNvcmUsIHJlc2l6ZU9ic2VydmVyRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWRpdG9ySGVpZ2h0ID0gaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgZGlzcGxheSBwcm9wZXJ0eSB3aGVuIHRoZXJlIGlzIHBsYWNlaG9sZGVyLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NoZWNrUGxhY2Vob2xkZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHd5c2l3eWcgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uod3lzaXd5Zy50ZXh0Q29udGVudCkgfHwgd3lzaXd5Zy5xdWVyeVNlbGVjdG9yKHV0aWwuX2FsbG93ZWRFbXB0eU5vZGVMaXN0KSB8fCAod3lzaXd5Zy5pbm5lclRleHQubWF0Y2goL1xcbi9nKSB8fCAnJykubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIHRoZXJlIGlzIG5vIGRlZmF1bHQgZm9ybWF0LCBhZGQgYSBmb3JtYXQgYW5kIG1vdmUgXCJzZWxlY3Rpb25cIi5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBmb3JtYXROYW1lIEZvcm1hdCB0YWcgbmFtZSAoZGVmYXVsdDogJ1AnKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR8bnVsbH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXREZWZhdWx0Rm9ybWF0OiBmdW5jdGlvbiAoZm9ybWF0TmFtZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmlsZU1hbmFnZXIucGx1Z2luUmVnRXhwLnRlc3QodGhpcy5jdXJyZW50Q29udHJvbGxlck5hbWUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uQ29uID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24sIG51bGwpO1xyXG4gICAgICAgICAgICBsZXQgZm9jdXNOb2RlLCBvZmZzZXQsIGZvcm1hdDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoY29tbW9uQ29uLCB1dGlsLmlzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnQgJiYgIXV0aWwuaXNUYWJsZShmaWxlQ29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1vbkNvbi5ub2RlVHlwZSA9PT0gMSAmJiBjb21tb25Db24uZ2V0QXR0cmlidXRlKCdkYXRhLXNlLWVtYmVkJykgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVsID0gY29tbW9uQ29uLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0Zvcm1hdEVsZW1lbnQoZWwpKSBlbCA9IHRoaXMuYXBwZW5kRm9ybWF0VGFnKGNvbW1vbkNvbiwgb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWwuZmlyc3RDaGlsZCwgMCwgZWwuZmlyc3RDaGlsZCwgMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChzdGFydENvbikgfHwgdXRpbC5pc1d5c2l3eWdEaXYoc3RhcnRDb24pKSAmJiAodXRpbC5pc0NvbXBvbmVudChzdGFydENvbi5jaGlsZHJlbltyYW5nZS5zdGFydE9mZnNldF0pIHx8IHV0aWwuaXNDb21wb25lbnQoc3RhcnRDb24uY2hpbGRyZW5bcmFuZ2Uuc3RhcnRPZmZzZXQgLSAxXSkpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmdldFBhcmVudEVsZW1lbnQoY29tbW9uQ29uLCB1dGlsLmlzTm90Q2hlY2tpbmdOb2RlKSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2VFbCkge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGZvcm1hdE5hbWUgfHwgb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgIGZvcm1hdC5pbm5lckhUTUwgPSByYW5nZUVsLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIGZvcm1hdC5pbm5lckhUTUwgPSB1dGlsLnplcm9XaWR0aFNwYWNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJhbmdlRWwuaW5uZXJIVE1MID0gZm9ybWF0Lm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHJhbmdlRWwuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHV0aWwuZ2V0RWRnZUNoaWxkTm9kZXMoZm9ybWF0LCBudWxsKS5zYztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvY3VzTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0Lmluc2VydEJlZm9yZShmb2N1c05vZGUsIGZvcm1hdC5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBmb2N1c05vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShmb2N1c05vZGUsIG9mZnNldCwgZm9jdXNOb2RlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZih1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGNvbW1vbkNvbikgJiYgKGNvbW1vbkNvbi5jaGlsZE5vZGVzLmxlbmd0aCA8PSAxKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGJyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiYgdXRpbC5pc0JyZWFrKGNvbW1vbkNvbi5maXJzdENoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyID0gY29tbW9uQ29uLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb21tb25Db24uYXBwZW5kQ2hpbGQoYnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoYnIsIDEsIGJyLCAxKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoZm9ybWF0TmFtZSB8fCBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkNvbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoZm9ybWF0Lm5leHRTaWJsaW5nKSkgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKGZvcm1hdC5wcmV2aW91c1NpYmxpbmcpKSB1dGlsLnJlbW92ZUl0ZW0oZm9ybWF0LnByZXZpb3VzU2libGluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKGZvY3VzTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIGZvY3VzTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlID0gemVyb1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKCdmb3JtYXRCbG9jaycsIGZhbHNlLCAoZm9ybWF0TmFtZSB8fCBvcHRpb25zLmRlZmF1bHRUYWcpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoZm9ybWF0Lm5leHRTaWJsaW5nKSkgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoZm9ybWF0LnByZXZpb3VzU2libGluZykpIHV0aWwucmVtb3ZlSXRlbShmb3JtYXQucHJldmlvdXNTaWJsaW5nKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhmb2N1c05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9jdXNOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHplcm9XaWR0aCwgZm9jdXNOb2RlKTtcclxuICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHplcm9XaWR0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXphdGlvbiBhZnRlciBcInNldE9wdGlvbnNcIlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbCBjb250ZXh0LmVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2luaXRIVE1MIEluaXRpYWwgaHRtbCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRPcHRpb25zSW5pdDogZnVuY3Rpb24gKGVsLCBfaW5pdEhUTUwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCA9IF9Db250ZXh0KGVsLm9yaWdpbkVsZW1lbnQsIHRoaXMuX2dldENvbnN0cnVjdGVkKGVsKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHNJbmZvUmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9lZGl0b3JJbml0KHRydWUsIF9pbml0SFRNTCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpeiBlZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbG9hZCBJcyByZWxvb2FkP1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBfaW5pdEhUTUwgaW5pdGlhbCBodG1sIHN0cmluZ1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2VkaXRvckluaXQ6IGZ1bmN0aW9uIChyZWxvYWQsIF9pbml0SFRNTCkge1xyXG4gICAgICAgICAgICAvLyBpbml0aWFsaXplIGNvcmUgYW5kIGFkZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgdGhpcy5faW5pdChyZWxvYWQsIF9pbml0SFRNTCk7XHJcbiAgICAgICAgICAgIGV2ZW50Ll9hZGRFdmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRDaGFyQ291bnQoKTtcclxuICAgICAgICAgICAgZXZlbnQuX29mZlN0aWNreVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgZXZlbnQub25SZXNpemVfd2luZG93KCk7XHJcblxyXG4gICAgICAgICAgICAvLyB0b29sYmFyIHZpc2liaWxpdHlcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgICAgICAgICAvLyB3aXN5d2lnIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgYXR0ciA9IG9wdGlvbnMuZnJhbWVBdHRyYnV0ZXM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gYXR0cikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuc2V0QXR0cmlidXRlKGssIGF0dHJba10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0NvbXBvbmVudHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50c0luZm9Jbml0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHNJbmZvUmVzZXQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5yZXNldCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIG9ic2VydmVyXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuX3Jlc2l6ZU9ic2VydmVyKSBldmVudC5fcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5fdG9vbGJhck9ic2VydmVyKSBldmVudC5fdG9vbGJhck9ic2VydmVyLm9ic2VydmUoY29udGV4dC5lbGVtZW50Ll90b29sYmFyU2hhZG93KTtcclxuICAgICAgICAgICAgICAgIC8vIHJlc291cmNlIHN0YXRlXHJcbiAgICAgICAgICAgICAgICBjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25sb2FkID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMub25sb2FkKGNvcmUsIHJlbG9hZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgYW5kIHJldHVybiBhbiBvYmplY3QgdG8gY2FjaGUgdGhlIG5ldyBjb250ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dEVsIGNvbnRleHQuZWxlbWVudFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0Q29uc3RydWN0ZWQ6IGZ1bmN0aW9uIChjb250ZXh0RWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIF90b3A6IGNvbnRleHRFbC50b3BBcmVhLFxyXG4gICAgICAgICAgICAgICAgX3JlbGF0aXZlOiBjb250ZXh0RWwucmVsYXRpdmUsXHJcbiAgICAgICAgICAgICAgICBfdG9vbEJhcjogY29udGV4dEVsLnRvb2xiYXIsXHJcbiAgICAgICAgICAgICAgICBfdG9vbGJhclNoYWRvdzogY29udGV4dEVsLl90b29sYmFyU2hhZG93LFxyXG4gICAgICAgICAgICAgICAgX21lbnVUcmF5OiBjb250ZXh0RWwuX21lbnVUcmF5LFxyXG4gICAgICAgICAgICAgICAgX2VkaXRvckFyZWE6IGNvbnRleHRFbC5lZGl0b3JBcmVhLFxyXG4gICAgICAgICAgICAgICAgX3d5c2l3eWdBcmVhOiBjb250ZXh0RWwud3lzaXd5Z0ZyYW1lLFxyXG4gICAgICAgICAgICAgICAgX2NvZGVBcmVhOiBjb250ZXh0RWwuY29kZSxcclxuICAgICAgICAgICAgICAgIF9wbGFjZWhvbGRlcjogY29udGV4dEVsLnBsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICAgICAgX3Jlc2l6aW5nQmFyOiBjb250ZXh0RWwucmVzaXppbmdCYXIsXHJcbiAgICAgICAgICAgICAgICBfbmF2aWdhdGlvbjogY29udGV4dEVsLm5hdmlnYXRpb24sXHJcbiAgICAgICAgICAgICAgICBfY2hhckNvdW50ZXI6IGNvbnRleHRFbC5jaGFyQ291bnRlcixcclxuICAgICAgICAgICAgICAgIF9jaGFyV3JhcHBlcjogY29udGV4dEVsLmNoYXJXcmFwcGVyLFxyXG4gICAgICAgICAgICAgICAgX2xvYWRpbmc6IGNvbnRleHRFbC5sb2FkaW5nLFxyXG4gICAgICAgICAgICAgICAgX2xpbmVCcmVha2VyOiBjb250ZXh0RWwubGluZUJyZWFrZXIsXHJcbiAgICAgICAgICAgICAgICBfbGluZUJyZWFrZXJfdDogY29udGV4dEVsLmxpbmVCcmVha2VyX3QsXHJcbiAgICAgICAgICAgICAgICBfbGluZUJyZWFrZXJfYjogY29udGV4dEVsLmxpbmVCcmVha2VyX2IsXHJcbiAgICAgICAgICAgICAgICBfcmVzaXplQmFjazogY29udGV4dEVsLnJlc2l6ZUJhY2tncm91bmQsXHJcbiAgICAgICAgICAgICAgICBfc3RpY2t5RHVtbXk6IGNvbnRleHRFbC5fc3RpY2t5RHVtbXksXHJcbiAgICAgICAgICAgICAgICBfYXJyb3c6IGNvbnRleHRFbC5fYXJyb3dcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIGV2ZW50IGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICAgIF9JRWlzQ29tcG9zaW5nOiBmYWxzZSwgLy8gSW4gSUUsIHRoZXJlIGlzIG5vIFwiZS5pc0NvbXBvc2luZ1wiIGluIHRoZSBrZXktdXAgZXZlbnQuXHJcbiAgICAgICAgX2xpbmVCcmVha2VyQmluZDogbnVsbCxcclxuICAgICAgICBfcmVzcG9uc2l2ZUN1cnJlbnRTaXplOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgX3Jlc3BvbnNpdmVCdXR0b25TaXplOiBudWxsLFxyXG4gICAgICAgIF9yZXNwb25zaXZlQnV0dG9uczogbnVsbCxcclxuICAgICAgICBfY3Vyc29yTW92ZUtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oOHwzWzItOV18NDB8NDYpJCcpLFxyXG4gICAgICAgIF9kaXJlY3Rpb25LZXlDb2RlOiBuZXcgX3cuUmVnRXhwKCdeKDh8MTN8M1syLTldfDQwfDQ2KSQnKSxcclxuICAgICAgICBfbm9uVGV4dEtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oOHwxM3wxWzYtOV18MjB8Mjd8M1szLTldfDQwfDQ1fDQ2fDExWzItOV18MTJbMC0zXXwxNDR8MTQ1KSQnKSxcclxuICAgICAgICBfaGlzdG9yeUlnbm9yZUtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oMVs2LTldfDIwfDI3fDNbMy05XXw0MHw0NXwxMVsyLTldfDEyWzAtM118MTQ0fDE0NSkkJyksXHJcbiAgICAgICAgX29uQnV0dG9uc0NoZWNrOiBuZXcgX3cuUmVnRXhwKCdeKCcgKyBfdy5PYmplY3Qua2V5cyhvcHRpb25zLl90ZXh0VGFnc01hcCkuam9pbignfCcpICsgJykkJywgJ2knKSxcclxuICAgICAgICBfZnJvbnRaZXJvV2lkdGhSZWc6IG5ldyBfdy5SZWdFeHAodXRpbC56ZXJvV2lkdGhTcGFjZSArICcrJywgJycpLFxyXG4gICAgICAgIF9rZXlDb2RlU2hvcnRjdXQ6IHtcclxuICAgICAgICAgICAgNjU6ICdBJyxcclxuICAgICAgICAgICAgNjY6ICdCJyxcclxuICAgICAgICAgICAgODM6ICdTJyxcclxuICAgICAgICAgICAgODU6ICdVJyxcclxuICAgICAgICAgICAgNzM6ICdJJyxcclxuICAgICAgICAgICAgODk6ICdZJyxcclxuICAgICAgICAgICAgOTA6ICdaJyxcclxuICAgICAgICAgICAgMjE5OiAnWycsXHJcbiAgICAgICAgICAgIDIyMTogJ10nXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3Nob3J0Y3V0Q29tbWFuZDogZnVuY3Rpb24gKGtleUNvZGUsIHNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGxldCBjb21tYW5kID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3Qga2V5U3RyID0gZXZlbnQuX2tleUNvZGVTaG9ydGN1dFtrZXlDb2RlXTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5U3RyKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBJzpcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3NlbGVjdEFsbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdCJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ2JvbGQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdib2xkJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdTJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQgJiYgb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3N0cmlrZScpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3N0cmlrZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc2hpZnQgJiYgb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3NhdmUnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdzYXZlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdVJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3VuZGVybGluZScpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3VuZGVybGluZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpdGFsaWMnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdpdGFsaWMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZigndW5kbycpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAncmVkbyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3VuZG8nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCd1bmRvJykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAncmVkbyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWyc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IG9wdGlvbnMucnRsID8gJ2luZGVudCcgOiAnb3V0ZGVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IG9wdGlvbnMucnRsID8gJ291dGRlbnQnIDogJ2luZGVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybiAhIWtleVN0cjtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuY29tbWFuZEhhbmRsZXIoY29yZS5jb21tYW5kTWFwW2NvbW1hbmRdLCBjb21tYW5kKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FwcGx5VGFnRWZmZWN0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uTm9kZSA9PT0gY29yZS5lZmZlY3ROb2RlKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvcmUuZWZmZWN0Tm9kZSA9IHNlbGVjdGlvbk5vZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW5EaXIgPSBvcHRpb25zLnJ0bCA/ICdtYXJnaW5SaWdodCcgOiAnbWFyZ2luTGVmdCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmRNYXAgPSBjb3JlLmNvbW1hbmRNYXA7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzT25DaGVjayA9IGV2ZW50Ll9vbkJ1dHRvbnNDaGVjaztcclxuICAgICAgICAgICAgY29uc3QgY29tbWFuZE1hcE5vZGVzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlUGx1Z2lucyA9IGNvcmUuYWN0aXZlUGx1Z2lucztcclxuICAgICAgICAgICAgY29uc3QgY0xlbiA9IGFjdGl2ZVBsdWdpbnMubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgbm9kZU5hbWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChzZWxlY3Rpb25Ob2RlLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb25Ob2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGVsZW1lbnQgPSBzZWxlY3Rpb25Ob2RlOyAhdXRpbC5pc1d5c2l3eWdEaXYoZWxlbWVudCk7IGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSB8fCB1dGlsLmlzQnJlYWsoZWxlbWVudCkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZXMucHVzaChub2RlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLyogQWN0aXZlIHBsdWdpbnMgKi9cclxuICAgICAgICAgICAgICAgIGlmICghY29yZS5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIG5hbWU7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGFjdGl2ZVBsdWdpbnNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kTWFwTm9kZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEgJiYgcGx1Z2luc1tuYW1lXS5hY3RpdmUuY2FsbChjb3JlLCBlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE1hcE5vZGVzLnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogT3V0ZGVudCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kTWFwTm9kZXMuaW5kZXhPZignT1VUREVOVCcpID09PSAtMSAmJiBjb21tYW5kTWFwLk9VVERFTlQgJiYgIXV0aWwuaXNJbXBvcnRhbnREaXNhYmxlZChjb21tYW5kTWFwLk9VVERFTlQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZWxlbWVudCkgfHwgKGVsZW1lbnQuc3R5bGVbbWFyZ2luRGlyXSAmJiB1dGlsLmdldE51bWJlcihlbGVtZW50LnN0eWxlW21hcmdpbkRpcl0sIDApID4gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRNYXBOb2Rlcy5wdXNoKCdPVVRERU5UJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwLk9VVERFTlQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKiBJbmRlbnQgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZE1hcE5vZGVzLmluZGV4T2YoJ0lOREVOVCcpID09PSAtMSAmJiBjb21tYW5kTWFwLklOREVOVCAmJiAhdXRpbC5pc0ltcG9ydGFudERpc2FibGVkKGNvbW1hbmRNYXAuSU5ERU5UKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwTm9kZXMucHVzaCgnSU5ERU5UJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZWxlbWVudCkgJiYgIWVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE1hcC5JTkRFTlQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE1hcC5JTkRFTlQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKiogZGVmYXVsdCBhY3RpdmUgYnV0dG9ucyBbc3Ryb25nLCBpbnMsIGVtLCBkZWwsIHN1Yiwgc3VwXSAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzT25DaGVjayAmJiBjbGFzc09uQ2hlY2sudGVzdChub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwTm9kZXMucHVzaChub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhjb21tYW5kTWFwW25vZGVOYW1lXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9zZXRLZXlFZmZlY3QoY29tbWFuZE1hcE5vZGVzKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBzYXZlIGN1cnJlbnQgbm9kZXMgKi9cclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzID0gY3VycmVudE5vZGVzLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzTWFwID0gY29tbWFuZE1hcE5vZGVzO1xyXG5cclxuICAgICAgICAgICAgLyoqICBEaXNwbGF5cyB0aGUgY3VycmVudCBub2RlIHN0cnVjdHVyZSB0byByZXNpemluZ0JhciAqL1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93UGF0aExhYmVsKSBjb250ZXh0LmVsZW1lbnQubmF2aWdhdGlvbi50ZXh0Q29udGVudCA9IGNvcmUuX3ZhcmlhYmxlLmN1cnJlbnROb2Rlcy5qb2luKCcgPiAnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnV0dG9uc0V2ZW50SGFuZGxlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICBpZiAoY29yZS5fYmluZENvbnRyb2xsZXJzT2ZmKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKC9eKGlucHV0fHRleHRhcmVhfHNlbGVjdHxvcHRpb24pJC9pLnRlc3QodGFyZ2V0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fYW50aUJsdXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0YXJnZXQsICcuc2Utc3VibWVudScpKSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5fbm90SGlkZVRvb2xiYXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgICAgIGxldCBjbGFzc05hbWUgPSB0YXJnZXQuY2xhc3NOYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICghY29tbWFuZCAmJiAhL3NlLW1lbnUtbGlzdC8udGVzdChjbGFzc05hbWUpICYmICEvc3VuLWVkaXRvci1jb21tb24vLnRlc3QoY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSB0YXJnZXQuY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kID09PSBjb3JlLl9zdWJtZW51TmFtZSB8fCBjb21tYW5kID09PSBjb3JlLl9jb250YWluZXJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEdsb2JhbEV2ZW50KHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fd3cuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29yZS5fdy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXHJcbiAgICAgICAgICAgICAgICB1c2VDYXB0dXJlOiB1c2VDYXB0dXJlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgIFxyXG4gICAgICAgIHJlbW92ZUdsb2JhbEV2ZW50KHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIGlmICghdHlwZSkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gdHlwZS5saXN0ZW5lcjtcclxuICAgICAgICAgICAgICAgIHVzZUNhcHR1cmUgPSB0eXBlLnVzZUNhcHR1cmU7XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gdHlwZS50eXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fd3cucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29yZS5fdy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrX3Rvb2xiYXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXkgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWRpc3BsYXknKTtcclxuICAgICAgICAgICAgbGV0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgbGV0IGNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlICh0YXJnZXQucGFyZW50Tm9kZSAmJiAhY29tbWFuZCAmJiAhL3NlLW1lbnUtbGlzdC8udGVzdChjbGFzc05hbWUpICYmICEvc2UtdG9vbGJhci8udGVzdChjbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXkgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWRpc3BsYXknKTtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghY29tbWFuZCAmJiAhZGlzcGxheSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmRpc2FibGVkKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb3JlLmFjdGlvbkNhbGwoY29tbWFuZCwgZGlzcGxheSwgdGFyZ2V0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfX3NlbGVjdGlvblN5bmNFdmVudDogbnVsbCxcclxuICAgICAgICBvbk1vdXNlRG93bl93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5IHx8IHV0aWwuaXNOb25FZGl0YWJsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5ZykpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHV0aWwuX2lzRXhjbHVkZVNlbGVjdGlvbkVsZW1lbnQoZS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV2ZW50LnJlbW92ZUdsb2JhbEV2ZW50KGV2ZW50Ll9fc2VsZWN0aW9uU3luY0V2ZW50KTtcclxuICAgICAgICAgICAgZXZlbnQuX19zZWxlY3Rpb25TeW5jRXZlbnQgPSBldmVudC5hZGRHbG9iYWxFdmVudCgnbW91c2V1cCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnJlbW92ZUdsb2JhbEV2ZW50KGV2ZW50Ll9fc2VsZWN0aW9uU3luY0V2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uTW91c2VEb3duID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbk1vdXNlRG93bihlLCBjb3JlKSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlQ2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChlLnRhcmdldCwgdXRpbC5pc0NlbGwpO1xyXG4gICAgICAgICAgICBpZiAodGFibGVDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IGNvcmUucGx1Z2lucy50YWJsZTtcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZVBsdWdpbiAmJiB0YWJsZUNlbGwgIT09IHRhYmxlUGx1Z2luLl9maXhlZENlbGwgJiYgIXRhYmxlUGx1Z2luLl9zaGlmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuY2FsbFBsdWdpbigndGFibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLm9uVGFibGVDZWxsTXVsdGlTZWxlY3QuY2FsbChjb3JlLCB0YWJsZUNlbGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX2hpZGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBlLnRhcmdldDtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQW5jaG9yKHRhcmdldEVsZW1lbnQpKXtcclxuICAgICAgICAgICAgICAgICAgICBfdy5vcGVuKHRhcmdldEVsZW1lbnQuaHJlZiwgdGFyZ2V0RWxlbWVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc05vbkVkaXRhYmxlKGNvbnRleHQuZWxlbWVudC53eXNpd3lnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbkNsaWNrKGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZUNvbXBvbmVudEluZm8gPSBjb3JlLmdldEZpbGVDb21wb25lbnQodGFyZ2V0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5zZWxlY3RDb21wb25lbnQoZmlsZUNvbXBvbmVudEluZm8udGFyZ2V0LCBmaWxlQ29tcG9uZW50SW5mby5wbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlnY2FwdGlvbiA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0YXJnZXRFbGVtZW50LCAnRklHQ0FQVElPTicpO1xyXG4gICAgICAgICAgICBpZiAoZmlnY2FwdGlvbiAmJiB1dGlsLmlzTm9uRWRpdGFibGUoZmlnY2FwdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGZpZ2NhcHRpb24uZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5faXNJbmxpbmUgJiYgIWNvcmUuX2lubGluZVRvb2xiYXJBdHRyLmlzU2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhcklubGluZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWRlVG9vbGJhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2hpZGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZ2NhcHRpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGhpZGVUb29sYmFyKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmaWdjYXB0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoaWRlVG9vbGJhcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2VkaXRvclJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZS5kZXRhaWwgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIpICYmIHJhbmdlLmVuZE9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gY29yZS5zZXRSYW5nZShyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lci5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuX3JhbmdlSW5mbyhyYW5nZSwgY29yZS5nZXRTZWxlY3Rpb24oKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbk5vZGUgPSBjb3JlLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICB3aGlsZSAoc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkLmZpcnN0Q2hpbGQpIHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCA9IHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRDb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZENvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZUVsICYmIHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIpIGNvcmUuc2VsZWN0Q29tcG9uZW50KHNlbGVjdGVkQ29tcG9uZW50SW5mby50YXJnZXQsIHNlbGVjdGVkQ29tcG9uZW50SW5mby5wbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JlLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbykgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3JtYXRFbCAmJiAhdXRpbC5pc05vbkVkaXRhYmxlKHRhcmdldEVsZW1lbnQpICYmICF1dGlsLmlzTGlzdChyYW5nZUVsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKSA9PT0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLmVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3QocmFuZ2VFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvTGkgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZMaSA9IHNlbGVjdGlvbk5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvTGkuYXBwZW5kQ2hpbGQoc2VsZWN0aW9uTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwuaW5zZXJ0QmVmb3JlKG9MaSwgcHJldkxpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXV0aWwuaXNXeXNpd3lnRGl2KHNlbGVjdGlvbk5vZGUpICYmICF1dGlsLmlzQ29tcG9uZW50KHNlbGVjdGlvbk5vZGUpICYmICghdXRpbC5pc1RhYmxlKHNlbGVjdGlvbk5vZGUpIHx8IHV0aWwuaXNDZWxsKHNlbGVjdGlvbk5vZGUpKSAmJiBjb3JlLl9zZXREZWZhdWx0Rm9ybWF0KHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbCkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZykgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbikgX3cuc2V0VGltZW91dChldmVudC5fdG9nZ2xlVG9vbGJhckJhbGxvb24pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iYWxsb29uRGVsYXk6IG51bGwsXHJcbiAgICAgICAgX3Nob3dUb29sYmFyQmFsbG9vbkRlbGF5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5fYmFsbG9vbkRlbGF5KSB7XHJcbiAgICAgICAgICAgICAgICBfdy5jbGVhclRpbWVvdXQoZXZlbnQuX2JhbGxvb25EZWxheSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV2ZW50Ll9iYWxsb29uRGVsYXkgPSBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF93LmNsZWFyVGltZW91dCh0aGlzLl9iYWxsb29uRGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbkRlbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dUb29sYmFyQmFsbG9vbigpO1xyXG4gICAgICAgICAgICB9LmJpbmQoZXZlbnQpLCAzNTApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF90b2dnbGVUb29sYmFyQmFsbG9vbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKGNvcmUuX2JpbmRDb250cm9sbGVyc09mZiB8fCAoIWNvcmUuX2lzQmFsbG9vbkFsd2F5cyAmJiByYW5nZS5jb2xsYXBzZWQpKSBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgZWxzZSBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKHJhbmdlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2hvd1Rvb2xiYXJCYWxsb29uOiBmdW5jdGlvbiAocmFuZ2VPYmopIHtcclxuICAgICAgICAgICAgaWYgKCFjb3JlLl9pc0JhbGxvb24pIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gcmFuZ2VPYmogfHwgY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvcEFyZWEgPSBjb250ZXh0LmVsZW1lbnQudG9wQXJlYTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gY29yZS5nZXRTZWxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBpc0RpclRvcDtcclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbkFsd2F5cyAmJiByYW5nZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIGlzRGlyVG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb24uZm9jdXNOb2RlID09PSBzZWxlY3Rpb24uYW5jaG9yTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgaXNEaXJUb3AgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQgPCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgaXNEaXJUb3AgPSB1dGlsLmdldEFycmF5SW5kZXgoY2hpbGROb2Rlcywgc2VsZWN0aW9uLmZvY3VzTm9kZSkgPCB1dGlsLmdldEFycmF5SW5kZXgoY2hpbGROb2Rlcywgc2VsZWN0aW9uLmFuY2hvck5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjdHMgPSByYW5nZS5nZXRDbGllbnRSZWN0cygpO1xyXG4gICAgICAgICAgICByZWN0cyA9IHJlY3RzW2lzRGlyVG9wID8gMCA6IHJlY3RzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZ2xvYmFsU2Nyb2xsID0gY29yZS5nZXRHbG9iYWxTY3JvbGxPZmZzZXQoKTtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbExlZnQgPSBnbG9iYWxTY3JvbGwubGVmdDtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbFRvcCA9IGdsb2JhbFNjcm9sbC50b3A7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3JXaWR0aCA9IHRvcEFyZWEub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSBldmVudC5fZ2V0RWRpdG9yT2Zmc2V0cyhudWxsKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RpY2t5VG9wID0gb2Zmc2V0cy50b3A7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckxlZnQgPSBvZmZzZXRzLmxlZnQ7XHJcblxyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLnRvcCA9ICctMTAwMDBweCc7XHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyZWN0cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmluc2VydE5vZGUoemVyb1dpZHRoLCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZSh6ZXJvV2lkdGgsIDEsIHplcm9XaWR0aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWN0cyA9IGNvcmUuZ2V0UmFuZ2UoKS5nZXRDbGllbnRSZWN0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3RzID0gcmVjdHNbaXNEaXJUb3AgPyAwIDogcmVjdHMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFyZWN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVPZmZzZXQgPSB1dGlsLmdldE9mZnNldChub2RlLCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICByZWN0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogbm9kZU9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IG5vZGVPZmZzZXQudG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogbm9kZU9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IG5vZGVPZmZzZXQudG9wICsgbm9kZS5vZmZzZXRIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVGV4dDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpc0RpclRvcCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFycm93TWFyZ2luID0gX3cuTWF0aC5yb3VuZChjb250ZXh0LmVsZW1lbnQuX2Fycm93Lm9mZnNldFdpZHRoIC8gMik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJXaWR0aCA9IHRvb2xiYXIub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJIZWlnaHQgPSB0b29sYmFyLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgY29uc3QgaWZyYW1lUmVjdHMgPSAvaWZyYW1lL2kudGVzdChjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLm5vZGVOYW1lKSA/IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuZ2V0Q2xpZW50UmVjdHMoKVswXSA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChpZnJhbWVSZWN0cykge1xyXG4gICAgICAgICAgICAgICAgcmVjdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogcmVjdHMubGVmdCArIGlmcmFtZVJlY3RzLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiByZWN0cy50b3AgKyBpZnJhbWVSZWN0cy50b3AsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHJlY3RzLnJpZ2h0ICsgaWZyYW1lUmVjdHMucmlnaHQgLSBpZnJhbWVSZWN0cy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHJlY3RzLmJvdHRvbSArIGlmcmFtZVJlY3RzLmJvdHRvbSAtIGlmcmFtZVJlY3RzLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXZlbnQuX3NldFRvb2xiYXJPZmZzZXQoaXNEaXJUb3AsIHJlY3RzLCB0b29sYmFyLCBlZGl0b3JMZWZ0LCBlZGl0b3JXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wLCBzdGlja3lUb3AsIGFycm93TWFyZ2luKTtcclxuICAgICAgICAgICAgaWYgKHRvb2xiYXJXaWR0aCAhPT0gdG9vbGJhci5vZmZzZXRXaWR0aCB8fCB0b29sYmFySGVpZ2h0ICE9PSB0b29sYmFyLm9mZnNldEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3NldFRvb2xiYXJPZmZzZXQoaXNEaXJUb3AsIHJlY3RzLCB0b29sYmFyLCBlZGl0b3JMZWZ0LCBlZGl0b3JXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wLCBzdGlja3lUb3AsIGFycm93TWFyZ2luKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWRpdG9yUGFyZW50ID0gdG9wQXJlYS5wYXJlbnRFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBvcHRpb25zLnRvb2xiYXJDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IGNvbnRhaW5lci5vZmZzZXRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvcCA9IGNvbnRhaW5lci5vZmZzZXRUb3A7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUoIWNvbnRhaW5lci5wYXJlbnRFbGVtZW50LmNvbnRhaW5zKGVkaXRvclBhcmVudCkgfHwgIS9eKEJPRFl8SFRNTCkkL2kudGVzdChjb250YWluZXIucGFyZW50RWxlbWVudC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIub2Zmc2V0UGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgKz0gY29udGFpbmVyLm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wICs9IGNvbnRhaW5lci5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5sZWZ0ID0gKHRvb2xiYXIub2Zmc2V0TGVmdCAtIGxlZnQgKyB0b3BBcmVhLm9mZnNldExlZnQpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUudG9wID0gKHRvb2xiYXIub2Zmc2V0VG9wIC0gdG9wICsgdG9wQXJlYS5vZmZzZXRUb3ApICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFRvb2xiYXJPZmZzZXQ6IGZ1bmN0aW9uIChpc0RpclRvcCwgcmVjdHMsIHRvb2xiYXIsIGVkaXRvckxlZnQsIGVkaXRvcldpZHRoLCBzY3JvbGxMZWZ0LCBzY3JvbGxUb3AsIHN0aWNreVRvcCwgYXJyb3dNYXJnaW4pIHtcclxuICAgICAgICAgICAgY29uc3QgcGFkZGluZyA9IDE7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJXaWR0aCA9IHRvb2xiYXIub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJIZWlnaHQgPSByZWN0cy5ub1RleHQgJiYgIWlzRGlyVG9wID8gMCA6IHRvb2xiYXIub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWJzb2x1dGVMZWZ0ID0gKGlzRGlyVG9wID8gcmVjdHMubGVmdCA6IHJlY3RzLnJpZ2h0KSAtIGVkaXRvckxlZnQgLSAodG9vbGJhcldpZHRoIC8gMikgKyBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICBjb25zdCBvdmVyUmlnaHQgPSBhYnNvbHV0ZUxlZnQgKyB0b29sYmFyV2lkdGggLSBlZGl0b3JXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIGxldCB0ID0gKGlzRGlyVG9wID8gcmVjdHMudG9wIC0gdG9vbGJhckhlaWdodCAtIGFycm93TWFyZ2luIDogcmVjdHMuYm90dG9tICsgYXJyb3dNYXJnaW4pIC0gKHJlY3RzLm5vVGV4dCA/IDAgOiBzdGlja3lUb3ApICsgc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBsZXQgbCA9IGFic29sdXRlTGVmdCA8IDAgPyBwYWRkaW5nIDogb3ZlclJpZ2h0IDwgMCA/IGFic29sdXRlTGVmdCA6IGFic29sdXRlTGVmdCAtIG92ZXJSaWdodCAtIHBhZGRpbmcgLSAxO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc2V0VG9wID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwYWNlID0gdCArIChpc0RpclRvcCA/IChldmVudC5fZ2V0RWRpdG9yT2Zmc2V0cyhudWxsKS50b3ApIDogKHRvb2xiYXIub2Zmc2V0SGVpZ2h0IC0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcub2Zmc2V0SGVpZ2h0KSk7XHJcbiAgICAgICAgICAgIGlmICghaXNEaXJUb3AgJiYgc3BhY2UgPiAwICYmIGV2ZW50Ll9nZXRQYWdlQm90dG9tU3BhY2UoKSA8IHNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBpc0RpclRvcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXNldFRvcCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEaXJUb3AgJiYgX2QuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFRvcCA+IHNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBpc0RpclRvcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRUb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzZXRUb3ApIHQgPSAoaXNEaXJUb3AgPyByZWN0cy50b3AgLSB0b29sYmFySGVpZ2h0IC0gYXJyb3dNYXJnaW4gOiByZWN0cy5ib3R0b20gKyBhcnJvd01hcmdpbikgLSAocmVjdHMubm9UZXh0ID8gMCA6IHN0aWNreVRvcCkgKyBzY3JvbGxUb3A7XHJcblxyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLmxlZnQgPSBfdy5NYXRoLmZsb29yKGwpICsgJ3B4JztcclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS50b3AgPSBfdy5NYXRoLmZsb29yKHQpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0RpclRvcCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0LmVsZW1lbnQuX2Fycm93LCAnc2UtYXJyb3ctdXAnKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoY29udGV4dC5lbGVtZW50Ll9hcnJvdywgJ3NlLWFycm93LWRvd24nKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fYXJyb3cuc3R5bGUudG9wID0gdG9vbGJhckhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvbnRleHQuZWxlbWVudC5fYXJyb3csICdzZS1hcnJvdy1kb3duJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNvbnRleHQuZWxlbWVudC5fYXJyb3csICdzZS1hcnJvdy11cCcpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9hcnJvdy5zdHlsZS50b3AgPSAtYXJyb3dNYXJnaW4gKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhcnJvd19sZWZ0ID0gX3cuTWF0aC5mbG9vcigodG9vbGJhcldpZHRoIC8gMikgKyAoYWJzb2x1dGVMZWZ0IC0gbCkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX2Fycm93LnN0eWxlLmxlZnQgPSAoYXJyb3dfbGVmdCArIGFycm93TWFyZ2luID4gdG9vbGJhci5vZmZzZXRXaWR0aCA/IHRvb2xiYXIub2Zmc2V0V2lkdGggLSBhcnJvd01hcmdpbiA6IGFycm93X2xlZnQgPCBhcnJvd01hcmdpbiA/IGFycm93TWFyZ2luIDogYXJyb3dfbGVmdCkgKyAncHgnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zaG93VG9vbGJhcklubGluZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWNvcmUuX2lzSW5saW5lKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIHRvb2xiYXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgICAgICBlbHNlIHRvb2xiYXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIGNvcmUuX2lubGluZVRvb2xiYXJBdHRyLndpZHRoID0gdG9vbGJhci5zdHlsZS53aWR0aCA9IG9wdGlvbnMudG9vbGJhcldpZHRoO1xyXG4gICAgICAgICAgICBjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci50b3AgPSB0b29sYmFyLnN0eWxlLnRvcCA9IChvcHRpb25zLnRvb2xiYXJDb250YWluZXIgPyAwIDogKC0xIC0gdG9vbGJhci5vZmZzZXRIZWlnaHQpKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5zaG93SW5saW5lID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMuc2hvd0lubGluZSh0b29sYmFyLCBjb250ZXh0LCBjb3JlKTtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50Lm9uU2Nyb2xsX3dpbmRvdygpO1xyXG4gICAgICAgICAgICBjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLnZpc2liaWxpdHkgPSAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaGlkZVRvb2xiYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjb3JlLl9ub3RIaWRlVG9vbGJhciAmJiAhY29yZS5fdmFyaWFibGUuaXNGdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgY29yZS5faW5saW5lVG9vbGJhckF0dHIuaXNTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbklucHV0X3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgvQVVESU8vLnRlc3QoZS50YXJnZXQubm9kZU5hbWUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzUmVhZE9ubHkgfHwgY29yZS5pc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LmdvKGNvcmUuaGlzdG9yeS5nZXRDdXJyZW50SW5kZXgoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2VkaXRvclJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gKGUuZGF0YSA9PT0gbnVsbCA/ICcnIDogZS5kYXRhID09PSB1bmRlZmluZWQgPyAnICcgOiBlLmRhdGEpIHx8ICcnO1xyXG4gICAgICAgICAgICBpZiAoIWNvcmUuX2NoYXJDb3VudChkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbklucHV0ID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbklucHV0KGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNVbmVkaXRhYmxlTm9kZTogZnVuY3Rpb24gKHJhbmdlLCBpc0Zyb250KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGlzRnJvbnQgPyByYW5nZS5zdGFydENvbnRhaW5lciA6IHJhbmdlLmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gaXNGcm9udCA/IHJhbmdlLnN0YXJ0T2Zmc2V0IDogcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICBjb25zdCBzaWJsaW5nS2V5ID0gaXNGcm9udCA/ICdwcmV2aW91c1NpYmxpbmcnIDogJ25leHRTaWJsaW5nJztcclxuICAgICAgICAgICAgY29uc3QgaXNFbGVtZW50ID0gY29udGFpbmVyLm5vZGVUeXBlID09PSAxO1xyXG4gICAgICAgICAgICBsZXQgc2libGluZ05vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nTm9kZSA9IGV2ZW50Ll9pc1VuZWRpdGFibGVOb2RlX2dldFNpYmxpbmcoY29udGFpbmVyLmNoaWxkTm9kZXNbb2Zmc2V0XSwgc2libGluZ0tleSwgY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaWJsaW5nTm9kZSAmJiBzaWJsaW5nTm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBzaWJsaW5nTm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpID09PSAnZmFsc2UnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2libGluZ05vZGUgPSBldmVudC5faXNVbmVkaXRhYmxlTm9kZV9nZXRTaWJsaW5nKGNvbnRhaW5lciwgc2libGluZ0tleSwgY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb3JlLmlzRWRnZVBvaW50KGNvbnRhaW5lciwgb2Zmc2V0LCBpc0Zyb250ID8gJ2Zyb250JyA6ICdlbmQnKSAmJiAoc2libGluZ05vZGUgJiYgc2libGluZ05vZGUubm9kZVR5cGUgPT09IDEgJiYgc2libGluZ05vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKSA9PT0gJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNVbmVkaXRhYmxlTm9kZV9nZXRTaWJsaW5nOiBmdW5jdGlvbiAoc2VsZWN0Tm9kZSwgc2libGluZ0tleSwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZWN0Tm9kZSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGxldCBzaWJsaW5nTm9kZSA9IHNlbGVjdE5vZGVbc2libGluZ0tleV07XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNpYmxpbmdOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nTm9kZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgc2libGluZ05vZGUgPSBzaWJsaW5nTm9kZSA/IHNpYmxpbmdOb2RlW3NpYmxpbmdLZXldIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nTm9kZSAmJiAhdXRpbC5pc0NvbXBvbmVudChzaWJsaW5nTm9kZSkpIHNpYmxpbmdOb2RlID0gc2libGluZ0tleSA9PT0gJ3ByZXZpb3VzU2libGluZycgPyBzaWJsaW5nTm9kZS5maXJzdENoaWxkIDogc2libGluZ05vZGUubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmdOb2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblNob3J0Y3V0S2V5OiBmYWxzZSxcclxuICAgICAgICBvbktleURvd25fd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGlvbk5vZGUgPSBjb3JlLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNJbnB1dEVsZW1lbnQoc2VsZWN0aW9uTm9kZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gZS5zaGlmdEtleTtcclxuICAgICAgICAgICAgY29uc3QgY3RybCA9IGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwga2V5Q29kZSA9PT0gOTEgfHwga2V5Q29kZSA9PT0gOTIgfHwga2V5Q29kZSA9PT0gMjI0O1xyXG4gICAgICAgICAgICBjb25zdCBhbHQgPSBlLmFsdEtleTtcclxuICAgICAgICAgICAgZXZlbnQuX0lFaXNDb21wb3NpbmcgPSBrZXlDb2RlID09PSAyMjk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWN0cmwgJiYgY29yZS5pc1JlYWRPbmx5ICYmICFldmVudC5fY3Vyc29yTW92ZUtleUNvZGUudGVzdChrZXlDb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9pc0JhbGxvb24pIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uS2V5RG93biA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbnMub25LZXlEb3duKGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLyoqIFNob3J0Y3V0cyAqL1xyXG4gICAgICAgICAgICBpZiAoY3RybCAmJiBldmVudC5fc2hvcnRjdXRDb21tYW5kKGtleUNvZGUsIHNoaWZ0KSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX29uU2hvcnRjdXRLZXkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5fb25TaG9ydGN1dEtleSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX29uU2hvcnRjdXRLZXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIGRlZmF1bHQga2V5IGFjdGlvbiAqL1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0UmFuZ2UgPSAhcmFuZ2UuY29sbGFwc2VkIHx8IHJhbmdlLnN0YXJ0Q29udGFpbmVyICE9PSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnROYW1lID0gY29yZS5fZmlsZU1hbmFnZXIucGx1Z2luUmVnRXhwLnRlc3QoY29yZS5jdXJyZW50Q29udHJvbGxlck5hbWUpID8gY29yZS5jdXJyZW50Q29udHJvbGxlck5hbWUgOiAnJztcclxuICAgICAgICAgICAgbGV0IGZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUsIG51bGwpIHx8IHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgIGxldCByYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNBcnJvd0tleSA9IC8zN3wzOHwzOXw0MC8udGVzdChlLmtleUNvZGUpO1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJvd0tleSAmJiBldmVudC5fb25LZXlEb3duX3d5c2l3eWdfYXJyb3dLZXkoZSkgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgODogLyoqIGJhY2tzcGFjZSBrZXkgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUucGx1Z2luc1tmaWxlQ29tcG9uZW50TmFtZV0uZGVzdHJveS5jYWxsKGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RSYW5nZSAmJiBldmVudC5faGFyZERlbGV0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KGZvcm1hdEVsKSAmJiAhY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuZmlyc3RFbGVtZW50Q2hpbGQgJiYgIXV0aWwuaXNDb21wb25lbnQoc2VsZWN0aW9uTm9kZSkgJiYgY29yZS5fc2V0RGVmYXVsdEZvcm1hdChvcHRpb25zLmRlZmF1bHRUYWcpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RSYW5nZSAmJiAhZm9ybWF0RWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAocmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDAgJiYgIXNlbGVjdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzTGlzdENlbGwoZm9ybWF0RWwpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh1dGlsLmlzRm9ybWF0RWxlbWVudChmb3JtYXRFbCkgJiYgKCF1dGlsLmlzRnJlZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwpIHx8IHV0aWwuaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwpKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsb3N1cmUgcmFuZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNDbG9zdXJlUmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdEVsLnBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1haW50YWluIGRlZmF1bHQgZm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0Rpdihmb3JtYXRFbC5wYXJlbnROb2RlKSAmJiBmb3JtYXRFbC5jaGlsZE5vZGVzLmxlbmd0aCA8PSAxICYmICghZm9ybWF0RWwuZmlyc3RDaGlsZCB8fCB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShmb3JtYXRFbC50ZXh0Q29udGVudCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBvcHRpb25zLmRlZmF1bHRUYWcudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IGZvcm1hdEVsLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGF0dHJzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyc1swXS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRGb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Rm9ybWF0LmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5wYXJlbnRFbGVtZW50LnJlcGxhY2VDaGlsZChkZWZhdWx0Rm9ybWF0LCBmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiByZW1vdmUgdGFnXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRDb24gPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RWwgJiYgIWZvcm1hdEVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDAgJiYgc3RhcnRDb24ubm9kZVR5cGUgPT09IDMgJiYgIXV0aWwuaXNGb3JtYXRFbGVtZW50KHN0YXJ0Q29uLnBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gc3RhcnRDb24ucGFyZW50Tm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBzdGFydENvbi5wYXJlbnROb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByZXYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwuYXBwZW5kQ2hpbGQocHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBuZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29uID0gc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGZvcm1hdEVsLmNvbnRhaW5zKGNvbikgJiYgIWNvbi5wcmV2aW91c1NpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbiA9IGNvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvcm1hdEVsLmNvbnRhaW5zKGNvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKHN0YXJ0Q29uLCBudWxsLCBmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFnW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Ll9pc1VuZWRpdGFibGVOb2RlKHJhbmdlLCB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9ybWF0IGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlICYmIGNvcmUuX2lzRWRnZUZvcm1hdChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsICdzdGFydCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChmb3JtYXRFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5fZm9ybWF0QXR0cnNUZW1wID0gZm9ybWF0RWwucHJldmlvdXNFbGVtZW50U2libGluZy5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1vbkNvbiA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIGZvcm1hdEVsICYmICF1dGlsLmlzQ2VsbChyYW5nZUVsKSAmJiAhL15GSUdDQVBUSU9OJC9pLnRlc3QocmFuZ2VFbC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChmb3JtYXRFbCkgJiYgdXRpbC5pc0xpc3QocmFuZ2VFbCkgJiYgKHV0aWwuaXNMaXN0Q2VsbChyYW5nZUVsLnBhcmVudE5vZGUpIHx8IGZvcm1hdEVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpICYmIChzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCB8fCAoc2VsZWN0aW9uTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiAoIXNlbGVjdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nIHx8IHV0aWwuaXNMaXN0KHNlbGVjdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nKSkpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCkgIT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIsIG51bGwpID8gcmFuZ2VFbC5jb250YWlucyhyYW5nZS5zdGFydENvbnRhaW5lcikgOiAocmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDAgICYmIHJhbmdlLmNvbGxhcHNlZCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgIT09IHJhbmdlLmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5yZW1vdmVOb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBmb3JtYXRFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IHJhbmdlRWwucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKHByZXYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2TGFzdCA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJldi5jb250YWlucyhmb3JtYXRFbCkgJiYgdXRpbC5pc0xpc3RDZWxsKHByZXZMYXN0KSAmJiB1dGlsLmlzTGlzdChwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkxhc3QgPSBwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodXRpbC5pc0xpc3RDZWxsKHByZXZMYXN0KSAmJiB1dGlsLmlzTGlzdChwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZMYXN0ID0gcHJldkxhc3QubGFzdEVsZW1lbnRDaGlsZCAmJiBwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gcHJldkxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb24gPSBwcmV2ID09PSByYW5nZUVsLnBhcmVudE5vZGUgPyByYW5nZUVsLnByZXZpb3VzU2libGluZyA6IHByZXYubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29uLCByYW5nZUVsLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY29uLm5vZGVUeXBlID09PSAzID8gY29uLnRleHRDb250ZW50Lmxlbmd0aCA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gZm9ybWF0RWwuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFmdGVyID0gY29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkcmVuWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldi5pbnNlcnRCZWZvcmUoY2hpbGQsIGFmdGVyLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUVsLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgdXRpbC5yZW1vdmVJdGVtKHJhbmdlRWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShjb24sIG9mZnNldCwgY29uLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGV0YWNoIHJhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZXRhY2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbW0gPSBjb21tb25Db247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY29tbSAmJiBjb21tICE9PSByYW5nZUVsICYmICF1dGlsLmlzV3lzaXd5Z0Rpdihjb21tKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbS5wcmV2aW91c1NpYmxpbmcubm9kZVR5cGUgPT09IDEgfHwgIXV0aWwub25seVplcm9XaWR0aFNwYWNlKGNvbW0ucHJldmlvdXNTaWJsaW5nLnRleHRDb250ZW50LnRyaW0oKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbSA9IGNvbW0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWNoICYmIHJhbmdlRWwucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUVsLCAodXRpbC5pc0xpc3RDZWxsKGZvcm1hdEVsKSA/IFtmb3JtYXRFbF0gOiBudWxsKSwgbnVsbCwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgZm9ybWF0RWwgJiYgKHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwIHx8IChzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCA/ICEhZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gOiBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdGlvbk5vZGUgPT09IGZvcm1hdEVsID8gZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gOiBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gZm9ybWF0RWwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgZmlsZSBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWdub3JlWldTID0gKGNvbW1vbkNvbi5ub2RlVHlwZSA9PT0gMyB8fCB1dGlsLmlzQnJlYWsoY29tbW9uQ29uKSkgJiYgIWNvbW1vbkNvbi5wcmV2aW91c1NpYmxpbmcgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWwgJiYgIXNlbC5wcmV2aW91c1NpYmxpbmcgJiYgKCAoY29tbW9uQ29uICYmIHV0aWwuaXNDb21wb25lbnQoY29tbW9uQ29uLnByZXZpb3VzU2libGluZykpIHx8IChpZ25vcmVaV1MgJiYgdXRpbC5pc0NvbXBvbmVudChwcmV2KSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29tcG9uZW50SW5mbyA9IGNvcmUuZ2V0RmlsZUNvbXBvbmVudChwcmV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbC50ZXh0Q29udGVudC5sZW5ndGggPT09IDApIHV0aWwucmVtb3ZlSXRlbShmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuc2VsZWN0Q29tcG9uZW50KGZpbGVDb21wb25lbnRJbmZvLnRhcmdldCwgZmlsZUNvbXBvbmVudEluZm8ucGx1Z2luTmFtZSkgPT09IGZhbHNlKSBjb3JlLmJsdXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc0NvbXBvbmVudChwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShwcmV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBub25FZGl0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsICYmIHV0aWwuaXNOb25FZGl0YWJsZShzZWwucHJldmlvdXNTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShzZWwucHJldmlvdXNTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDY6IC8qKiBkZWxldGUga2V5ICovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5wbHVnaW5zW2ZpbGVDb21wb25lbnROYW1lXS5kZXN0cm95LmNhbGwoY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdFJhbmdlICYmIGV2ZW50Ll9oYXJkRGVsZXRlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhZ1tjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5faXNVbmVkaXRhYmxlTm9kZShyYW5nZSwgZmFsc2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHV0aWwuaXNGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUpIHx8IHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcgPT09IG51bGwgfHwgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcpICYmIHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcubmV4dFNpYmxpbmcgPT09IG51bGwpKSAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEVsID0gZm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRFbCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQ29tcG9uZW50KG5leHRFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoZm9ybWF0RWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdEVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0YWJsZSBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1RhYmxlKG5leHRFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB1dGlsLmdldENoaWxkRWxlbWVudChuZXh0RWwsIHV0aWwuaXNDZWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwgPSBjZWxsLmZpcnN0RWxlbWVudENoaWxkIHx8IGNlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoY2VsbCwgMCwgY2VsbCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgZmlsZSBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KG5leHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLnNlbGVjdENvbXBvbmVudChmaWxlQ29tcG9uZW50SW5mby50YXJnZXQsIGZpbGVDb21wb25lbnRJbmZvLnBsdWdpbk5hbWUpID09PSBmYWxzZSkgY29yZS5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNDb21wb25lbnQobmV4dEVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKG5leHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgKGNvcmUuaXNFZGdlUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpIHx8IChzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCA/ICEhZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gOiBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdGlvbk5vZGUgPT09IGZvcm1hdEVsID8gZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gfHwgc2VsZWN0aW9uTm9kZSA6IHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBub25FZGl0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsICYmIHV0aWwuaXNOb25FZGl0YWJsZShzZWwubmV4dFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHNlbC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzQ29tcG9uZW50KHNlbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oc2VsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXQgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgY29yZS5faXNFZGdlRm9ybWF0KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCAnZW5kJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGZvcm1hdEVsLm5leHRFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuX2Zvcm1hdEF0dHJzVGVtcCA9IGZvcm1hdEVsLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5lc3RlZCBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChmb3JtYXRFbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChmb3JtYXRFbCkgJiYgdXRpbC5pc0xpc3QocmFuZ2VFbCkgJiYgKHNlbGVjdGlvbk5vZGUgPT09IGZvcm1hdEVsIHx8IChzZWxlY3Rpb25Ob2RlLm5vZGVUeXBlID09PSAzICYmICghc2VsZWN0aW9uTm9kZS5uZXh0U2libGluZyB8fCB1dGlsLmlzTGlzdChzZWxlY3Rpb25Ob2RlLm5leHRTaWJsaW5nKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCkgIT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIsIG51bGwpID8gcmFuZ2VFbC5jb250YWlucyhyYW5nZS5lbmRDb250YWluZXIpIDogKHJhbmdlLmVuZE9mZnNldCA9PT0gc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudC5sZW5ndGggJiYgcmFuZ2UuY29sbGFwc2VkKSkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgIT09IHJhbmdlLmVuZENvbnRhaW5lcikgY29yZS5yZW1vdmVOb2RlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHV0aWwuZ2V0QXJyYXlJdGVtKGZvcm1hdEVsLmNoaWxkcmVuLCB1dGlsLmlzTGlzdCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dCB8fCBmb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcgfHwgcmFuZ2VFbC5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgKHV0aWwuaXNMaXN0KG5leHQpIHx8IHV0aWwuZ2V0QXJyYXlJdGVtKG5leHQuY2hpbGRyZW4sIHV0aWwuaXNMaXN0LCBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbiwgY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3QobmV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IG5leHQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbiA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5pbnNlcnRCZWZvcmUoY2hpbGRyZW5bMF0sIG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gPSBuZXh0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBuZXh0LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLmFwcGVuZENoaWxkKGNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShjb24sIDAsIGNvbiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5OiAvKiogdGFiIGtleSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50TmFtZSB8fCBvcHRpb25zLnRhYkRpc2FibGUpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3RybCB8fCBhbHQgfHwgdXRpbC5pc1d5c2l3eWdEaXYoc2VsZWN0aW9uTm9kZSkpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0VkZ2UgPSAoIXJhbmdlLmNvbGxhcHNlZCB8fCBjb3JlLmlzRWRnZVBvaW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRm9ybWF0cyA9IGNvcmUuZ2V0U2VsZWN0ZWRFbGVtZW50cyhudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmMgPSB1dGlsLmlzTGlzdENlbGwoc2VsZWN0ZWRGb3JtYXRzWzBdKSwgbGMgPSB1dGlsLmlzTGlzdENlbGwoc2VsZWN0ZWRGb3JtYXRzW3NlbGVjdGVkRm9ybWF0cy5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSB7c2M6IHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzbzogcmFuZ2Uuc3RhcnRPZmZzZXQsIGVjOiByYW5nZS5lbmRDb250YWluZXIsIGVvOiByYW5nZS5lbmRPZmZzZXR9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoLCBmOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHNlbGVjdGVkRm9ybWF0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChmKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgIXNoaWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBOZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwICYmIGlzRWRnZSAmJiBjb3JlLnBsdWdpbnMubGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gY29yZS5wbHVnaW5zLmxpc3QuZWRpdEluc2lkZUxpc3QuY2FsbChjb3JlLCBzaGlmdCwgY2VsbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlQ2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3Rpb25Ob2RlLCB1dGlsLmlzQ2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZUNlbGwgJiYgaXNFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZSA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0YWJsZUNlbGwsICd0YWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB1dGlsLmdldExpc3RDaGlsZHJlbih0YWJsZSwgdXRpbC5pc0NlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlkeCA9IHNoaWZ0ID8gdXRpbC5wcmV2SWR4KGNlbGxzLCB0YWJsZUNlbGwpIDogdXRpbC5uZXh0SWR4KGNlbGxzLCB0YWJsZUNlbGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPT09IGNlbGxzLmxlbmd0aCAmJiAhc2hpZnQpIGlkeCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAtMSAmJiBzaGlmdCkgaWR4ID0gY2VsbHMubGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW92ZUNlbGwgPSBjZWxsc1tpZHhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3ZlQ2VsbCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlQ2VsbCA9IG1vdmVDZWxsLmZpcnN0RWxlbWVudENoaWxkIHx8IG1vdmVDZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShtb3ZlQ2VsbCwgMCwgbW92ZUNlbGwsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzID0gbGluZXMuY29uY2F0KGNlbGxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmMgPSBsYyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBMaW5lcyB0YWIoNClcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNoaWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJUZXh0ID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShuZXcgX3cuQXJyYXkoY29yZS5fdmFyaWFibGUudGFiU2l6ZSArIDEpLmpvaW4oJ1xcdTAwQTAnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dFJhbmdlID0gY29yZS5pbnNlcnROb2RlKHRhYlRleHQsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGV4dFJhbmdlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNjID0gdGFiVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zbyA9IHRleHRSYW5nZS5lbmRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5lYyA9IHRhYlRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZW8gPSB0ZXh0UmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuID0gbGluZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgY2hpbGQ7IGkgPD0gbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBsaW5lc1tpXS5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lc1tpXS5pbnNlcnRCZWZvcmUodGFiVGV4dC5jbG9uZU5vZGUoZmFsc2UpLCBjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC50ZXh0Q29udGVudCA9IHRhYlRleHQudGV4dENvbnRlbnQgKyBjaGlsZC50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RDaGlsZCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVzWzBdLCAndGV4dCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRDaGlsZCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVzW2xlbl0sICd0ZXh0JywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmYyAmJiBmaXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2MgPSBmaXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNvID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsYyAmJiBlbmRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmVjID0gZW5kQ2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZW8gPSBlbmRDaGlsZC50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuID0gbGluZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsaW5lOyBpIDw9IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmVzW2ldLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBsaW5lLmxlbmd0aCwgY2hpbGQ7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBsaW5lW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKGNoaWxkKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15cXHN7MSw0fSQvLnRlc3QoY2hpbGQudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eXFxzezEsNH0vLnRlc3QoY2hpbGQudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC50ZXh0Q29udGVudCA9IGNoaWxkLnRleHRDb250ZW50LnJlcGxhY2UoL15cXHN7MSw0fS8sICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lc1swXSwgJ3RleHQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRDaGlsZCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVzW2xlbl0sICd0ZXh0JywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZjICYmIGZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNjID0gZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNvID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGMgJiYgZW5kQ2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmVjID0gZW5kQ2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5lbyA9IGVuZENoaWxkLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShyLnNjLCByLnNvLCByLmVjLCByLmVvKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMTM6IC8qKiBlbnRlciBrZXkgKi9cclxuICAgICAgICAgICAgICAgICAgICAvLyBlbnRlciBsb2dpbiBzdGFydFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWVGb3JtYXRFbCA9IHV0aWwuZ2V0RnJlZUZvcm1hdEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgbnVsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLl9jaGFyVHlwZUhUTUwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVudGVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFzaGlmdCAmJiBmcmVlRm9ybWF0RWwpIHx8IHNoaWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlckhUTUwgPSAnPCcgKyBmb3JtYXRFbC5ub2RlTmFtZSArICc+PGJyPjwvJyArIGZvcm1hdEVsLm5vZGVOYW1lICsgJz4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvcmUuY2hlY2tDaGFyQ291bnQoZW50ZXJIVE1MLCAnYnl0ZS1odG1sJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaGlmdCAmJiAhZmlsZUNvbXBvbmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0RW5kRWRnZSA9IGNvcmUuX2lzRWRnZUZvcm1hdChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRTdGFydEVkZ2UgPSBjb3JlLl9pc0VkZ2VGb3JtYXQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCAnc3RhcnQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBkZWZhdWx0IGZvcm1hdCBsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbmRFZGdlICYmICgvXkhbMS02XSQvaS50ZXN0KGZvcm1hdEVsLm5vZGVOYW1lKSB8fCAvXkhSJC9pLnRlc3QoZm9ybWF0RWwubm9kZU5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Zvcm1hdCA9IGNvcmUuYXBwZW5kRm9ybWF0VGFnKGZvcm1hdEVsLCBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbmRFZGdlICYmIGZvcm1hdEVuZEVkZ2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSBmb3JtYXRFbmRFZGdlLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlubmVyTm9kZSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoZm9ybWF0RW5kRWRnZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSB0ZW1wLmFwcGVuZENoaWxkKGZvcm1hdEVuZEVkZ2UucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdGb3JtYXQuYXBwZW5kQ2hpbGQoaW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gIXRlbXAgPyBuZXdGb3JtYXQuZmlyc3RDaGlsZCA6IHRlbXAuYXBwZW5kQ2hpbGQobmV3Rm9ybWF0LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayh0ZW1wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHplcm9XaWR0aCA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIHRlbXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoemVyb1dpZHRoLCAxLCB6ZXJvV2lkdGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKHRlbXAsIDAsIHRlbXAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2VFbCAmJiBmb3JtYXRFbCAmJiAhdXRpbC5pc0NlbGwocmFuZ2VFbCkgJiYgIS9eRklHQ0FQVElPTiQvaS50ZXN0KHJhbmdlRWwubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvcmUuaXNFZGdlUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpICYmIHV0aWwuaXNMaXN0KHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdFbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnTEknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiciA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5hcHBlbmRDaGlsZChicik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBmb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsLmFwcGVuZENoaWxkKHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGJyLCAxLCBiciwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMyA/ICFyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcgOiB0cnVlKSAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShmb3JtYXRFbC5pbm5lclRleHQudHJpbSgpKSAmJiAhdXRpbC5pc0xpc3RDZWxsKGZvcm1hdEVsLm5leHRFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdFbCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwocmFuZ2VFbC5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRMaSA9IGZvcm1hdEVsLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbCA9IHBhcmVudExpLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xpc3RDZWxsID0gdXRpbC5jcmVhdGVFbGVtZW50KCdMSScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0Q2VsbC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3TGlzdENlbGwsIGZvcm1hdEVsLCBvcHRpb25zLmxpbmVBdHRyUmVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IG5ld0xpc3RDZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsLmluc2VydEJlZm9yZShuZXdFbCwgcGFyZW50TGkubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdGb3JtYXQgPSB1dGlsLmlzQ2VsbChyYW5nZUVsLnBhcmVudE5vZGUpID8gJ0RJVicgOiB1dGlsLmlzTGlzdChyYW5nZUVsLnBhcmVudE5vZGUpID8gJ0xJJyA6ICh1dGlsLmlzRm9ybWF0RWxlbWVudChyYW5nZUVsLm5leHRFbGVtZW50U2libGluZykgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbC5uZXh0RWxlbWVudFNpYmxpbmcpKSA/IHJhbmdlRWwubmV4dEVsZW1lbnRTaWJsaW5nLm5vZGVOYW1lIDogKHV0aWwuaXNGb3JtYXRFbGVtZW50KHJhbmdlRWwucHJldmlvdXNFbGVtZW50U2libGluZykgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSkgPyByYW5nZUVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcubm9kZU5hbWUgOiBvcHRpb25zLmRlZmF1bHRUYWc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gdXRpbC5jcmVhdGVFbGVtZW50KG5ld0Zvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3RWwsIGZvcm1hdEVsLCBvcHRpb25zLmxpbmVBdHRyUmVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGdlID0gY29yZS5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbCwgW2Zvcm1hdEVsXSwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2UuY2MuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlZGdlLmVjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKGZvcm1hdEVsLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG5ld0VsLCAxLCBuZXdFbCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVlRm9ybWF0RWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25Gb3JtYXQgPSBzZWxlY3Rpb25Ob2RlID09PSBmcmVlRm9ybWF0RWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3U2VsZWN0aW9uID0gY29yZS5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2VsZWN0aW9uTm9kZS5jaGlsZE5vZGVzLCBvZmZzZXQgPSB3U2VsZWN0aW9uLmZvY3VzT2Zmc2V0LCBwcmV2ID0gc2VsZWN0aW9uTm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCBuZXh0ID0gc2VsZWN0aW9uTm9kZS5uZXh0U2libGluZztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQoZnJlZUZvcm1hdEVsKSAmJiAhIWNoaWxkcmVuICYmICgoc2VsZWN0aW9uRm9ybWF0ICYmIHJhbmdlLmNvbGxhcHNlZCAmJiBjaGlsZHJlbi5sZW5ndGggLSAxIDw9IG9mZnNldCArIDEgJiYgdXRpbC5pc0JyZWFrKGNoaWxkcmVuW29mZnNldF0pICYmICghY2hpbGRyZW5bb2Zmc2V0ICsgMV0gfHwgKCghY2hpbGRyZW5bb2Zmc2V0ICsgMl0gfHwgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoY2hpbGRyZW5bb2Zmc2V0ICsgMl0udGV4dENvbnRlbnQpKSAmJiBjaGlsZHJlbltvZmZzZXQgKyAxXS5ub2RlVHlwZSA9PT0gMyAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjaGlsZHJlbltvZmZzZXQgKyAxXS50ZXh0Q29udGVudCkpKSAmJiAgb2Zmc2V0ID4gMCAmJiB1dGlsLmlzQnJlYWsoY2hpbGRyZW5bb2Zmc2V0IC0gMV0pKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghc2VsZWN0aW9uRm9ybWF0ICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQpICYmIHV0aWwuaXNCcmVhayhwcmV2KSAmJiAodXRpbC5pc0JyZWFrKHByZXYucHJldmlvdXNTaWJsaW5nKSB8fCAhdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocHJldi5wcmV2aW91c1NpYmxpbmcudGV4dENvbnRlbnQpKSAmJiAoIW5leHQgfHwgKCF1dGlsLmlzQnJlYWsobmV4dCkgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UobmV4dC50ZXh0Q29udGVudCkpKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkZvcm1hdCkgdXRpbC5yZW1vdmVJdGVtKGNoaWxkcmVuW29mZnNldCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHV0aWwucmVtb3ZlSXRlbShzZWxlY3Rpb25Ob2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdFbCA9IGNvcmUuYXBwZW5kRm9ybWF0VGFnKGZyZWVGb3JtYXRFbCwgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGZyZWVGb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcpICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGZyZWVGb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcpKSA/IGZyZWVGb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlGb3JtYXRBdHRyaWJ1dGVzKG5ld0VsLCBmcmVlRm9ybWF0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UobmV3RWwsIDEsIG5ld0VsLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25zLmluc2VydEhUTUwoKChyYW5nZS5jb2xsYXBzZWQgJiYgdXRpbC5pc0JyZWFrKHJhbmdlLnN0YXJ0Q29udGFpbmVyLmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXQgLSAxXSkpID8gJzxicj4nIDogJzxicj48YnI+JyksIHRydWUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvY3VzTm9kZSA9IHdTZWxlY3Rpb24uZm9jdXNOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdPZmZzZXQgPSB3U2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVlRm9ybWF0RWwgPT09IGZvY3VzTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c05vZGUgPSBmb2N1c05vZGUuY2hpbGROb2Rlc1t3T2Zmc2V0IC0gb2Zmc2V0ID4gMSA/IHdPZmZzZXQgLSAxIDogd09mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGZvY3VzTm9kZSwgMSwgZm9jdXNOb2RlLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9jdXNOZXh0ID0gd1NlbGVjdGlvbi5mb2N1c05vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnIgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5pbnNlcnROb2RlKGJyLCBudWxsLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyUHJldiA9IGJyLnByZXZpb3VzU2libGluZywgYnJOZXh0ID0gYnIubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzQnJlYWsoZm9jdXNOZXh0KSAmJiAhdXRpbC5pc0JyZWFrKGJyUHJldikgJiYgKCFick5leHQgfHwgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoYnJOZXh0KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYnIuY2xvbmVOb2RlKGZhbHNlKSwgYnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGJyLCAxLCBiciwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShick5leHQsIDAsIGJyTmV4dCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9vblNob3J0Y3V0S2V5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgZm9ybWF0IGF0dHJzIC0gZWRnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkICYmIChmb3JtYXRTdGFydEVkZ2UgfHwgZm9ybWF0RW5kRWRnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2N1c0JSID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Rm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGZvcm1hdEVsLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3Rm9ybWF0LCBmb3JtYXRFbCwgb3B0aW9ucy5saW5lQXR0clJlc2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBmb2N1c0JSO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKHNlbGVjdGlvbk5vZGUpICYmIHNlbGVjdGlvbk5vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZiA9IHNlbGVjdGlvbk5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZSA9IHNlbGVjdGlvbk5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUoZm9ybWF0RWwgIT09IHNlbGVjdGlvbk5vZGUgJiYgZm9ybWF0RWwuY29udGFpbnMoc2VsZWN0aW9uTm9kZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Zvcm1hdC5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdGb3JtYXQsIGZvcm1hdFN0YXJ0RWRnZSAmJiAhZm9ybWF0RW5kRWRnZSA/IGZvcm1hdEVsIDogZm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbmRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShmb2N1c0JSLCAxLCBmb2N1c0JSLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdFbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyYW5nZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc011bHRpTGluZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCkgIT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Zvcm1hdCA9IGZvcm1hdEVsLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Rm9ybWF0LmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gY29yZS5yZW1vdmVOb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoci5jb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3RWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KHIuY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmFwcGVuZENoaWxkKG5ld0Zvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IG5ld0Zvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3RWwsIGZvcm1hdEVsLCBvcHRpb25zLmxpbmVBdHRyUmVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShuZXdFbCwgb2Zmc2V0LCBuZXdFbCwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlubmVyUmFuZ2UgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChyLmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBuZXdFbC5jb250YWlucyhpbm5lclJhbmdlKSA/IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGlubmVyUmFuZ2UsIHV0aWwuZ2V0Rm9ybWF0RWxlbWVudC5iaW5kKHV0aWwpKSA6IG5ld0VsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc011bHRpTGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RW5kRWRnZSAmJiAhZm9ybWF0U3RhcnRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdGb3JtYXQsICghci5wcmV2Q29udGFpbmVyIHx8IHIuY29udGFpbmVyID09PSByLnByZXZDb250YWluZXIpID8gbmV3RWwubmV4dEVsZW1lbnRTaWJsaW5nIDogbmV3RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBuZXdGb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gci5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0U3RhcnRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcEVsID0gbmV3RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Rm9ybWF0LCBuZXdFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVuZEVkZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSB0ZW1wRWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVuZEVkZ2UgJiYgZm9ybWF0U3RhcnRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdGb3JtYXQsIChyLnByZXZDb250YWluZXIgJiYgci5jb250YWluZXIgPT09IHIucHJldkNvbnRhaW5lcikgPyBuZXdFbC5uZXh0RWxlbWVudFNpYmxpbmcgOiBuZXdFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IG5ld0Zvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuc3BsaXRFbGVtZW50KHIuY29udGFpbmVyLCByLm9mZnNldCwgdXRpbC5nZXRFbGVtZW50RGVwdGgoZm9ybWF0RWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKGZvcm1hdEVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IGNvcmUuYXBwZW5kRm9ybWF0VGFnKGZvcm1hdEVsLCBmb3JtYXRFbC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuc3BsaXRFbGVtZW50KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCB1dGlsLmdldEVsZW1lbnREZXB0aChmb3JtYXRFbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhuZXdFbCwgZm9ybWF0RWwsIG9wdGlvbnMubGluZUF0dHJSZXNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG5ld0VsLCBvZmZzZXQsIG5ld0VsLCBvZmZzZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0UmFuZ2UpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbCAmJiB1dGlsLmdldFBhcmVudEVsZW1lbnQocmFuZ2VFbCwgJ0ZJR0NBUFRJT04nKSAmJiB1dGlsLmdldFBhcmVudEVsZW1lbnQocmFuZ2VFbCwgdXRpbC5pc0xpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsID0gY29yZS5hcHBlbmRGb3JtYXRUYWcoZm9ybWF0RWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGZvcm1hdEVsLCAwLCBmb3JtYXRFbCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmNvbnRhaW5lck9mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wQ29udGV4dCA9IGNvbnRleHRbZmlsZUNvbXBvbmVudE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb21wQ29udGV4dC5fY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaWJsaW5nID0gY29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgY29udGFpbmVyLm5leHRFbGVtZW50U2libGluZztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdFbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoY29udGFpbmVyLnBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gdXRpbC5jcmVhdGVFbGVtZW50KCh1dGlsLmlzRm9ybWF0RWxlbWVudChzaWJsaW5nKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChzaWJsaW5nKSkgPyBzaWJsaW5nLm5vZGVOYW1lIDogb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoaWZ0KSBjb250YWluZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuY2FsbFBsdWdpbihmaWxlQ29tcG9uZW50TmFtZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuc2VsZWN0Q29tcG9uZW50KGNvbXBDb250ZXh0Ll9lbGVtZW50LCBmaWxlQ29tcG9uZW50TmFtZSkgPT09IGZhbHNlKSBjb3JlLmJsdXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2hpZnQgJiYga2V5Q29kZSA9PT0gMTYpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IGNvcmUucGx1Z2lucy50YWJsZTtcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZVBsdWdpbiAmJiAhdGFibGVQbHVnaW4uX3NoaWZ0ICYmICF0YWJsZVBsdWdpbi5fcmVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChmb3JtYXRFbCwgdXRpbC5pc0NlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLm9uVGFibGVDZWxsTXVsdGlTZWxlY3QuY2FsbChjb3JlLCBjZWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGlmdCAmJiAodXRpbC5pc09TWF9JT1MgPyBhbHQgOiBjdHJsKSAmJiBrZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ic3AgPSBjb3JlLmluc2VydE5vZGUodXRpbC5jcmVhdGVUZXh0Tm9kZSgnXFx1MDBhMCcpKTtcclxuICAgICAgICAgICAgICAgIGlmIChuYnNwICYmIG5ic3AuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShuYnNwLmNvbnRhaW5lciwgbmJzcC5lbmRPZmZzZXQsIG5ic3AuY29udGFpbmVyLCBuYnNwLmVuZE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0lFICYmICFjdHJsICYmICFhbHQgJiYgIXNlbGVjdFJhbmdlICYmICFldmVudC5fbm9uVGV4dEtleUNvZGUudGVzdChrZXlDb2RlKSAmJiB1dGlsLmlzQnJlYWsocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5pbnNlcnROb2RlKHplcm9XaWR0aCwgbnVsbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZSh6ZXJvV2lkdGgsIDEsIHplcm9XaWR0aCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5fZGlyZWN0aW9uS2V5Q29kZS50ZXN0KGtleUNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uS2V5RG93bl93eXNpd3lnX2Fycm93S2V5OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkgcmV0dXJuOyAvLyBzaGlmdGtleSBuZWVkcyg/KSBvdGhlciBjdXN0b20gaGFuZGxlci4gVGhpcyBvbmUgbWF5IGJlIGFkYXB0ZWQgKGluICdzZWxlY3ROb2RlKC4uLiknKSwgYnV0IG5vdCBmb3IgdGFibGVcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3ROb2RlID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCA9IDApIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudEluZm8gPSBjb3JlLmdldEZpbGVDb21wb25lbnQobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2VsZWN0Q29tcG9uZW50KGNvbXBvbmVudEluZm8udGFyZ2V0LCBjb21wb25lbnRJbmZvLnBsdWdpbk5hbWUpOyAgIC8vIG1vcmUgcmVzcG9uc2l2ZSBmb3Iga2V5IGhvbGRuZXNzXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2Uobm9kZSwgb2Zmc2V0LCBub2RlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGlvbk5vZGUsICd0YWJsZScpO1xyXG4gICAgICAgICAgICBpZiAodGFibGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgJ3RyJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Q2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3Rpb25Ob2RlLCAndGQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudENlbGxGaXJzdE5vZGUgPSBjdXJyZW50Q2VsbDtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50Q2VsbExhc3ROb2RlID0gY3VycmVudENlbGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudENlbGxGaXJzdE5vZGUuZmlyc3RDaGlsZCkgY3VycmVudENlbGxGaXJzdE5vZGUgPSBjdXJyZW50Q2VsbEZpcnN0Tm9kZS5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50Q2VsbExhc3ROb2RlLmxhc3RDaGlsZCkgY3VycmVudENlbGxMYXN0Tm9kZSA9IGN1cnJlbnRDZWxsTGFzdE5vZGUubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkKSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2VsbEZpcnN0Tm9kZSA9IChzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPT09IGN1cnJlbnRDZWxsRmlyc3ROb2RlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2VsbExhc3ROb2RlID0gKHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCA9PT0gY3VycmVudENlbGxMYXN0Tm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNpYmxpbmdUb1NldCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM4ICYmIGlzQ2VsbEZpcnN0Tm9kZSkgeyAvLyBVUFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzUm93ID0gY3VycmVudFJvdyAmJiBjdXJyZW50Um93LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzUm93KSBzaWJsaW5nVG9TZXQgPSBwcmV2aW91c1Jvdy5jaGlsZHJlbltjdXJyZW50Q2VsbC5jZWxsSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Ugc2libGluZ1RvU2V0ID0gdXRpbC5nZXRQcmV2aW91c0RlZXBlc3ROb2RlKHRhYmxlLCBjb3JlLmNvbnRleHQuZWxlbWVudC53eXNpd3lnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNpYmxpbmdUb1NldC5sYXN0Q2hpbGQpIHNpYmxpbmdUb1NldCA9IHNpYmxpbmdUb1NldC5sYXN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpYmxpbmdUb1NldCkgb2Zmc2V0ID0gc2libGluZ1RvU2V0LnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCAmJiBpc0NlbGxMYXN0Tm9kZSkgeyAgLy8gRE9XTlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRSb3cgPSBjdXJyZW50Um93ICYmIGN1cnJlbnRSb3cubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Um93KSBzaWJsaW5nVG9TZXQgPSBuZXh0Um93LmNoaWxkcmVuW2N1cnJlbnRDZWxsLmNlbGxJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBzaWJsaW5nVG9TZXQgPSB1dGlsLmdldE5leHREZWVwZXN0Tm9kZSh0YWJsZSwgY29yZS5jb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzaWJsaW5nVG9TZXQuZmlyc3RDaGlsZCkgc2libGluZ1RvU2V0ID0gc2libGluZ1RvU2V0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNpYmxpbmdUb1NldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdE5vZGUoc2libGluZ1RvU2V0LCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50SW5mbyA9IGNvcmUuZ2V0RmlsZUNvbXBvbmVudChzZWxlY3Rpb25Ob2RlKTtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdFByZXZpb3VzID0gLzM3fDM4Ly50ZXN0KGUua2V5Q29kZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3ROZXh0ID0gLzM5fDQwLy50ZXN0KGUua2V5Q29kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdFByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNEZWVwZXN0Tm9kZSA9IHV0aWwuZ2V0UHJldmlvdXNEZWVwZXN0Tm9kZShjb21wb25lbnRJbmZvLnRhcmdldCwgY29yZS5jb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0Tm9kZShwcmV2aW91c0RlZXBlc3ROb2RlLCBwcmV2aW91c0RlZXBlc3ROb2RlICYmIHByZXZpb3VzRGVlcGVzdE5vZGUudGV4dENvbnRlbnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0TmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHREZWVwZXN0Tm9kZSA9IHV0aWwuZ2V0TmV4dERlZXBlc3ROb2RlKGNvbXBvbmVudEluZm8udGFyZ2V0LCBjb3JlLmNvbnRleHQuZWxlbWVudC53eXNpd3lnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3ROb2RlKG5leHREZWVwZXN0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25LZXlVcF93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuX29uU2hvcnRjdXRLZXkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0cmwgPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGtleUNvZGUgPT09IDkxIHx8IGtleUNvZGUgPT09IDkyIHx8IGtleUNvZGUgPT09IDIyNDtcclxuICAgICAgICAgICAgY29uc3QgYWx0ID0gZS5hbHRLZXk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN0cmwgJiYgZXZlbnQuX2N1cnNvck1vdmVLZXlDb2RlLnRlc3Qoa2V5Q29kZSkpIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5faXNCYWxsb29uICYmICgoY29yZS5faXNCYWxsb29uQWx3YXlzICYmIGtleUNvZGUgIT09IDI3KSB8fCAhcmFuZ2UuY29sbGFwc2VkKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbkFsd2F5cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlDb2RlICE9PSAyNykgZXZlbnQuX3Nob3dUb29sYmFyQmFsbG9vbkRlbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhckJhbGxvb24oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICB3aGlsZSAoc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkLmZpcnN0Q2hpbGQpIHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCA9IHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRDb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgIGlmICghKGUua2V5Q29kZSA9PT0gMTYgfHwgZS5zaGlmdEtleSkgJiYgc2VsZWN0ZWRDb21wb25lbnRJbmZvKSBjb3JlLnNlbGVjdENvbXBvbmVudChzZWxlY3RlZENvbXBvbmVudEluZm8udGFyZ2V0LCBzZWxlY3RlZENvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvcmUuY3VycmVudEZpbGVDb21wb25lbnRJbmZvKSBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAvKiogd2hlbiBmb3JtYXQgdGFnIGRlbGV0ZWQgKi9cclxuICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IDggJiYgdXRpbC5pc1d5c2l3eWdEaXYoc2VsZWN0aW9uTm9kZSkgJiYgc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudCA9PT0gJycgJiYgc2VsZWN0aW9uTm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZS5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvRm9ybWF0VGFnID0gdXRpbC5jcmVhdGVFbGVtZW50KHV0aWwuaXNGb3JtYXRFbGVtZW50KGNvcmUuX3ZhcmlhYmxlLmN1cnJlbnROb2Rlc1swXSkgPyBjb3JlLl92YXJpYWJsZS5jdXJyZW50Tm9kZXNbMF0gOiBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgb0Zvcm1hdFRhZy5pbm5lckhUTUwgPSAnPGJyPic7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZS5hcHBlbmRDaGlsZChvRm9ybWF0VGFnKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2Uob0Zvcm1hdFRhZywgMCwgb0Zvcm1hdFRhZywgMCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fYXBwbHlUYWdFZmZlY3RzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXRFbCA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2VFbCA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUsIG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBhdHRycyA9IGNvcmUuX2Zvcm1hdEF0dHJzVGVtcDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhdHRycykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IDEzICYmIC9eaWQkL2kudGVzdChhdHRyc1tpXS5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5zZXRBdHRyaWJ1dGUoYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29yZS5fZm9ybWF0QXR0cnNUZW1wID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3JtYXRFbCAmJiByYW5nZS5jb2xsYXBzZWQgJiYgIXV0aWwuaXNDb21wb25lbnQoc2VsZWN0aW9uTm9kZSkgJiYgIXV0aWwuaXNMaXN0KHNlbGVjdGlvbk5vZGUpICYmIGNvcmUuX3NldERlZmF1bHRGb3JtYXQodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChyYW5nZUVsKSA/ICdESVYnIDogb3B0aW9ucy5kZWZhdWx0VGFnKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0ZXh0S2V5ID0gIWN0cmwgJiYgIWFsdCAmJiAhZXZlbnQuX25vblRleHRLZXlDb2RlLnRlc3Qoa2V5Q29kZSk7XHJcbiAgICAgICAgICAgIGlmICh0ZXh0S2V5ICYmIHNlbGVjdGlvbk5vZGUubm9kZVR5cGUgPT09IDMgJiYgdXRpbC56ZXJvV2lkdGhSZWdFeHAudGVzdChzZWxlY3Rpb25Ob2RlLnRleHRDb250ZW50KSAmJiAhKGUuaXNDb21wb3NpbmcgIT09IHVuZGVmaW5lZCA/IGUuaXNDb21wb3NpbmcgOiBldmVudC5fSUVpc0NvbXBvc2luZykpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0LCBlbyA9IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyb250WmVyb1dpZHRoQ250ID0gKHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQuc3Vic3RyaW5nKDAsIGVvKS5tYXRjaChldmVudC5fZnJvbnRaZXJvV2lkdGhSZWcpIHx8ICcnKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0IC0gZnJvbnRaZXJvV2lkdGhDbnQ7XHJcbiAgICAgICAgICAgICAgICBlbyA9IHJhbmdlLmVuZE9mZnNldCAtIGZyb250WmVyb1dpZHRoQ250O1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudCA9IHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQucmVwbGFjZSh1dGlsLnplcm9XaWR0aFJlZ0V4cCwgJycpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShzZWxlY3Rpb25Ob2RlLCBzbyA8IDAgPyAwIDogc28sIHNlbGVjdGlvbk5vZGUsIGVvIDwgMCA/IDAgOiBlbyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2NoYXJDb3VudCgnJyk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uS2V5VXAgPT09ICdmdW5jdGlvbicgJiYgZnVuY3Rpb25zLm9uS2V5VXAoZSwgY29yZSkgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIGlmICghY3RybCAmJiAhYWx0ICYmICFldmVudC5faGlzdG9yeUlnbm9yZUtleUNvZGUudGVzdChrZXlDb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblNjcm9sbF93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9pc0JhbGxvb24pIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vblNjcm9sbCA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLm9uU2Nyb2xsKGUsIGNvcmUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uRm9jdXNfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGNvcmUuX2FudGlCbHVyKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvcmUuaGFzRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzSW5saW5lKSBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25Gb2N1cyA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLm9uRm9jdXMoZSwgY29yZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25CbHVyX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9hbnRpQmx1ciB8fCBjb3JlLl92YXJpYWJsZS5pc0NvZGVWaWV3KSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvcmUuaGFzRm9jdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29yZS5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5faXNJbmxpbmUgfHwgY29yZS5faXNCYWxsb29uKSBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuX3NldEtleUVmZmVjdChbXSk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5jdXJyZW50Tm9kZXMgPSBbXTtcclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzTWFwID0gW107XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dQYXRoTGFiZWwpIGNvbnRleHQuZWxlbWVudC5uYXZpZ2F0aW9uLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25CbHVyID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMub25CbHVyKGUsIGNvcmUsdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25Nb3VzZURvd25fcmVzaXppbmdCYXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUucmVzaXplQ2xpZW50WSA9IGUuY2xpZW50WTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlc2l6ZUJhY2tncm91bmQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9zdXJlRnVuYygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZXNpemVCYWNrZ3JvdW5kLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICBfZC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudC5fcmVzaXplX2VkaXRvcik7XHJcbiAgICAgICAgICAgICAgICBfZC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgY2xvc3VyZUZ1bmMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudC5fcmVzaXplX2VkaXRvcik7XHJcbiAgICAgICAgICAgIF9kLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBjbG9zdXJlRnVuYyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3Jlc2l6ZV9lZGl0b3I6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZUludGVydmFsID0gY29udGV4dC5lbGVtZW50LmVkaXRvckFyZWEub2Zmc2V0SGVpZ2h0ICsgKGUuY2xpZW50WSAtIGNvcmUuX3ZhcmlhYmxlLnJlc2l6ZUNsaWVudFkpO1xyXG4gICAgICAgICAgICBjb25zdCBoID0gKHJlc2l6ZUludGVydmFsIDwgY29yZS5fdmFyaWFibGUubWluUmVzaXppbmdTaXplID8gY29yZS5fdmFyaWFibGUubWluUmVzaXppbmdTaXplIDogcmVzaXplSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmhlaWdodCA9IGNvbnRleHQuZWxlbWVudC5jb2RlLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5yZXNpemVDbGllbnRZID0gZS5jbGllbnRZO1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCkgY29yZS5fX2NhbGxSZXNpemVGdW5jdGlvbihoLCBudWxsKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblJlc2l6ZV93aW5kb3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQpIGNvcmUucmVzZXRSZXNwb25zaXZlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhciA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyO1xyXG4gICAgICAgICAgICBjb25zdCBpc1Rvb2xiYXJIaWRkZW4gPSAodG9vbGJhci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgKGNvcmUuX2lzSW5saW5lICYmICFjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cpKTtcclxuICAgICAgICAgICAgaWYgKHRvb2xiYXIub2Zmc2V0V2lkdGggPT09IDAgJiYgIWlzVG9vbGJhckhpZGRlbikgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZmlsZUJyb3dzZXIgJiYgY29udGV4dC5maWxlQnJvd3Nlci5hcmVhLnN0eWxlLmRpc3BsYXkgPT09ICdibG9jaycpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIuYm9keS5zdHlsZS5tYXhIZWlnaHQgPSAoX3cuaW5uZXJIZWlnaHQgLSBjb250ZXh0LmZpbGVCcm93c2VyLmhlYWRlci5vZmZzZXRIZWlnaHQgLSA1MCkgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5zdWJtZW51QWN0aXZlQnV0dG9uICYmIGNvcmUuc3VibWVudSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fc2V0TWVudVBvc2l0aW9uKGNvcmUuc3VibWVudUFjdGl2ZUJ1dHRvbiwgY29yZS5zdWJtZW51KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbikge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiArPSAoX3cuaW5uZXJIZWlnaHQgLSB0b29sYmFyLm9mZnNldEhlaWdodCkgLSBjb3JlLl92YXJpYWJsZS5pbm5lckhlaWdodF9mdWxsU2NyZWVuO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmVkaXRvckFyZWEuc3R5bGUuaGVpZ2h0ID0gY29yZS5fdmFyaWFibGUuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiArICdweCc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl92YXJpYWJsZS5pc0NvZGVWaWV3ICYmIGNvcmUuX2lzSW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29yZS5faWZyYW1lQXV0b0hlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX3N0aWNreSkge1xyXG4gICAgICAgICAgICAgICAgdG9vbGJhci5zdHlsZS53aWR0aCA9IChjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5vZmZzZXRXaWR0aCAtIDIpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGV2ZW50Lm9uU2Nyb2xsX3dpbmRvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25TY3JvbGxfd2luZG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4gfHwgY29udGV4dC5lbGVtZW50LnRvb2xiYXIub2Zmc2V0V2lkdGggPT09IDAgfHwgb3B0aW9ucy5zdGlja3lUb29sYmFyIDwgMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgZWRpdG9ySGVpZ2h0ID0gZWxlbWVudC5lZGl0b3JBcmVhLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgY29uc3QgeSA9ICh0aGlzLnNjcm9sbFkgfHwgX2QuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgKyBvcHRpb25zLnN0aWNreVRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvclRvcCA9IGV2ZW50Ll9nZXRFZGl0b3JPZmZzZXRzKG9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikudG9wIC0gKGNvcmUuX2lzSW5saW5lID8gZWxlbWVudC50b29sYmFyLm9mZnNldEhlaWdodCA6IDApO1xyXG4gICAgICAgICAgICBjb25zdCBpbmxpbmVPZmZzZXQgPSBjb3JlLl9pc0lubGluZSAmJiAoeSAtIGVkaXRvclRvcCkgPiAwID8geSAtIGVkaXRvclRvcCAtIGNvbnRleHQuZWxlbWVudC50b29sYmFyLm9mZnNldEhlaWdodCA6IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoeSA8IGVkaXRvclRvcCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX29mZlN0aWNreVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh5ICsgY29yZS5fdmFyaWFibGUubWluUmVzaXppbmdTaXplID49IGVkaXRvckhlaWdodCArIGVkaXRvclRvcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb3JlLl9zdGlja3kpIGV2ZW50Ll9vblN0aWNreVRvb2xiYXIoaW5saW5lT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudG9vbGJhci5zdHlsZS50b3AgPSAoaW5saW5lT2Zmc2V0ICsgZWRpdG9ySGVpZ2h0ICsgZWRpdG9yVG9wICsgb3B0aW9ucy5zdGlja3lUb29sYmFyIC0geSAtIGNvcmUuX3ZhcmlhYmxlLm1pblJlc2l6aW5nU2l6ZSkgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHkgPj0gZWRpdG9yVG9wKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fb25TdGlja3lUb29sYmFyKGlubGluZU9mZnNldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0RWRpdG9yT2Zmc2V0czogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0RWwgPSBjb250YWluZXIgfHwgY29udGV4dC5lbGVtZW50LnRvcEFyZWE7XHJcbiAgICAgICAgICAgIGxldCB0ID0gMCwgbCA9IDAsIHMgPSAwO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKG9mZnNldEVsKSB7XHJcbiAgICAgICAgICAgICAgICB0ICs9IG9mZnNldEVsLm9mZnNldFRvcDtcclxuICAgICAgICAgICAgICAgIGwgKz0gb2Zmc2V0RWwub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgICAgIHMgKz0gb2Zmc2V0RWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0RWwgPSBvZmZzZXRFbC5vZmZzZXRQYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHQsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBsLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsOiBzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldFBhZ2VCb3R0b21TcGFjZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2QuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCAtIChldmVudC5fZ2V0RWRpdG9yT2Zmc2V0cyhudWxsKS50b3AgKyBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblN0aWNreVRvb2xiYXI6IGZ1bmN0aW9uIChpbmxpbmVPZmZzZXQpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbnRleHQuZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29yZS5faXNJbmxpbmUgJiYgIW9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuaGVpZ2h0ID0gZWxlbWVudC50b29sYmFyLm9mZnNldEhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Ll9zdGlja3lEdW1teS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudC50b29sYmFyLnN0eWxlLnRvcCA9IChvcHRpb25zLnN0aWNreVRvb2xiYXIgKyBpbmxpbmVPZmZzZXQpICsgJ3B4JztcclxuICAgICAgICAgICAgZWxlbWVudC50b29sYmFyLnN0eWxlLndpZHRoID0gY29yZS5faXNJbmxpbmUgPyBjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci53aWR0aCA6IGVsZW1lbnQudG9vbGJhci5vZmZzZXRXaWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoZWxlbWVudC50b29sYmFyLCAnc2UtdG9vbGJhci1zdGlja3knKTtcclxuICAgICAgICAgICAgY29yZS5fc3RpY2t5ID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb2ZmU3RpY2t5VG9vbGJhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dC5lbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgZWxlbWVudC50b29sYmFyLnN0eWxlLnRvcCA9IGNvcmUuX2lzSW5saW5lID8gY29yZS5faW5saW5lVG9vbGJhckF0dHIudG9wIDogJyc7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudG9vbGJhci5zdHlsZS53aWR0aCA9IGNvcmUuX2lzSW5saW5lID8gY29yZS5faW5saW5lVG9vbGJhckF0dHIud2lkdGggOiAnJztcclxuICAgICAgICAgICAgZWxlbWVudC5lZGl0b3JBcmVhLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LnRvb2xiYXIsICdzZS10b29sYmFyLXN0aWNreScpO1xyXG4gICAgICAgICAgICBjb3JlLl9zdGlja3kgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY29kZVZpZXdBdXRvSGVpZ2h0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4pIHJldHVybjtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gY29udGV4dC5lbGVtZW50LmNvZGUuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBGaXJlRm94IC0gdGFibGUgZGVsZXRlLCBDaHJvbWUgLSBpbWFnZSwgdmlkZW8sIGF1ZGlvXHJcbiAgICAgICAgX2hhcmREZWxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgLy8gdGFibGVcclxuICAgICAgICAgICAgY29uc3Qgc0NlbGwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzYyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVDZWxsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZWMpO1xyXG4gICAgICAgICAgICBjb25zdCBzSXNDZWxsID0gdXRpbC5pc0NlbGwoc0NlbGwpO1xyXG4gICAgICAgICAgICBjb25zdCBlSXNDZWxsID0gdXRpbC5pc0NlbGwoZUNlbGwpO1xyXG4gICAgICAgICAgICBjb25zdCBhbmNlc3RvciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBpZiAoKChzSXNDZWxsICYmICFzQ2VsbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICFzQ2VsbC5wYXJlbnRFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHx8IChlSXNDZWxsICYmICFlQ2VsbC5uZXh0RWxlbWVudFNpYmxpbmcgJiYgIWVDZWxsLnBhcmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSkgJiYgc0NlbGwgIT09IGVDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNJc0NlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odXRpbC5nZXRQYXJlbnRFbGVtZW50KGVDZWxsLCBmdW5jdGlvbihjdXJyZW50KSB7cmV0dXJuIGFuY2VzdG9yID09PSBjdXJyZW50LnBhcmVudE5vZGU7fSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZUlzQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbSh1dGlsLmdldFBhcmVudEVsZW1lbnQoc0NlbGwsIGZ1bmN0aW9uKGN1cnJlbnQpIHtyZXR1cm4gYW5jZXN0b3IgPT09IGN1cnJlbnQucGFyZW50Tm9kZTt9KSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbSh1dGlsLmdldFBhcmVudEVsZW1lbnQoc0NlbGwsIGZ1bmN0aW9uKGN1cnJlbnQpIHtyZXR1cm4gYW5jZXN0b3IgPT09IGN1cnJlbnQucGFyZW50Tm9kZTt9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgY29uc3Qgc0NvbXAgPSBzYy5ub2RlVHlwZSA9PT0gMSA/IHV0aWwuZ2V0UGFyZW50RWxlbWVudChzYywgJy5zZS1jb21wb25lbnQnKSA6IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IGVDb21wID0gZWMubm9kZVR5cGUgPT09IDEgPyB1dGlsLmdldFBhcmVudEVsZW1lbnQoZWMsICcuc2UtY29tcG9uZW50JykgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoc0NvbXApIHV0aWwucmVtb3ZlSXRlbShzQ29tcCk7XHJcbiAgICAgICAgICAgIGlmIChlQ29tcCkgdXRpbC5yZW1vdmVJdGVtKGVDb21wKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblBhc3RlX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaXBib2FyZERhdGEgPSB1dGlsLmlzSUUgPyBfdy5jbGlwYm9hcmREYXRhIDogZS5jbGlwYm9hcmREYXRhO1xyXG4gICAgICAgICAgICBpZiAoIWNsaXBib2FyZERhdGEpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuX2RhdGFUcmFuc2ZlckFjdGlvbigncGFzdGUnLCBlLCBjbGlwYm9hcmREYXRhKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0Q2xpcGJvYXJkQ29tcG9uZW50OiBmdW5jdGlvbiAoZSwgaW5mbywgY2xpcGJvYXJkRGF0YSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dC9odG1sJywgaW5mby5jb21wb25lbnQub3V0ZXJIVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNvcHlfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xpcGJvYXJkRGF0YSA9IHV0aWwuaXNJRSA/IF93LmNsaXBib2FyZERhdGEgOiBlLmNsaXBib2FyZERhdGE7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uQ29weSA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbnMub25Db3B5KGUsIGNsaXBib2FyZERhdGEsIGNvcmUpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGNvcmUuY3VycmVudEZpbGVDb21wb25lbnRJbmZvO1xyXG4gICAgICAgICAgICBpZiAoaW5mbyAmJiAhdXRpbC5pc0lFKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fc2V0Q2xpcGJvYXJkQ29tcG9uZW50KGUsIGluZm8sIGNsaXBib2FyZERhdGEpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhpbmZvLmNvbXBvbmVudCwgJ3NlLWNvbXBvbmVudC1jb3B5Jyk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb3B5IGVmZmVjdFxyXG4gICAgICAgICAgICAgICAgX3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhpbmZvLmNvbXBvbmVudCwgJ3NlLWNvbXBvbmVudC1jb3B5Jyk7XHJcbiAgICAgICAgICAgICAgICB9LCAxNTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25TYXZlX3d5c2l3eWc6IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25TYXZlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbnMub25TYXZlKGNvbnRlbnQsIGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25DdXRfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xpcGJvYXJkRGF0YSA9IHV0aWwuaXNJRSA/IF93LmNsaXBib2FyZERhdGEgOiBlLmNsaXBib2FyZERhdGE7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uQ3V0ID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbkN1dChlLCBjbGlwYm9hcmREYXRhLCBjb3JlKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBjb3JlLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbztcclxuICAgICAgICAgICAgaWYgKGluZm8gJiYgIXV0aWwuaXNJRSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3NldENsaXBib2FyZENvbXBvbmVudChlLCBpbmZvLCBjbGlwYm9hcmREYXRhKTtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShpbmZvLmNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkRyb3Bfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGNvcmUuaXNSZWFkT25seSB8fCB1dGlsLmlzSUUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFUcmFuc2ZlciA9IGUuZGF0YVRyYW5zZmVyO1xyXG4gICAgICAgICAgICBpZiAoIWRhdGFUcmFuc2ZlcikgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICBldmVudC5fc2V0RHJvcExvY2F0aW9uU2VsZWN0aW9uKGUpO1xyXG4gICAgICAgICAgICBjb3JlLnJlbW92ZU5vZGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyhjb3JlLmN1cnJlbnRDb250cm9sbGVyVGFyZ2V0KSkgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50Ll9kYXRhVHJhbnNmZXJBY3Rpb24oJ2Ryb3AnLCBlLCBkYXRhVHJhbnNmZXIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXREcm9wTG9jYXRpb25TZWxlY3Rpb246IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0geyBzdGFydENvbnRhaW5lcjogbnVsbCwgc3RhcnRPZmZzZXQ6IG51bGwsIGVuZENvbnRhaW5lcjogbnVsbCwgZW5kT2Zmc2V0OiBudWxsIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgciA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChlLnJhbmdlUGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IGUucmFuZ2VQYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IGUucmFuZ2VPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5lbmRDb250YWluZXIgPSBlLnJhbmdlUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UuZW5kT2Zmc2V0ID0gZS5yYW5nZU9mZnNldDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JlLl93ZC5jYXJldFJhbmdlRnJvbVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByID0gY29yZS5fd2QuY2FyZXRSYW5nZUZyb21Qb2ludChlLmNsaWVudFgsIGUuY2xpZW50WSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IHIuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IHIuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5lbmRDb250YWluZXIgPSByLmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IHIuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCB1dGlsLmlzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29yZS5zZXRSYW5nZShyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZGF0YVRyYW5zZmVyQWN0aW9uOiBmdW5jdGlvbiAodHlwZSwgZSwgZGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgcGxhaW5UZXh0LCBjbGVhbkRhdGE7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzSUUpIHtcclxuICAgICAgICAgICAgICAgIHBsYWluVGV4dCA9IGRhdGEuZ2V0RGF0YSgnVGV4dCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcERpdiA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wUmFuZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2M6IHJhbmdlLnN0YXJ0Q29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvOiByYW5nZS5zdGFydE9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICBlYzogcmFuZ2UuZW5kQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGVvOiByYW5nZS5lbmRPZmZzZXRcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgdGVtcERpdi5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOmFic29sdXRlOyB0b3A6MDsgbGVmdDowOyB3aWR0aDoxcHg7IGhlaWdodDoxcHg7IG92ZXJmbG93OmhpZGRlbjsnO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5hcHBlbmRDaGlsZCh0ZW1wRGl2KTtcclxuICAgICAgICAgICAgICAgIHRlbXBEaXYuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSB0ZW1wRGl2LmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odGVtcERpdik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZSh0ZW1wUmFuZ2Uuc2MsIHRlbXBSYW5nZS5zbywgdGVtcFJhbmdlLmVjLCB0ZW1wUmFuZ2UuZW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zZXRDbGlwYm9hcmREYXRhKHR5cGUsIGUsIHBsYWluVGV4dCwgY2xlYW5EYXRhLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGxhaW5UZXh0ID0gZGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XHJcbiAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSBkYXRhLmdldERhdGEoJ3RleHQvaHRtbCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Ll9zZXRDbGlwYm9hcmREYXRhKHR5cGUsIGUsIHBsYWluVGV4dCwgY2xlYW5EYXRhLCBkYXRhKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0Q2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKHR5cGUsIGUsIHBsYWluVGV4dCwgY2xlYW5EYXRhLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIE1TIHdvcmQsIE9uZU5vZGUsIEV4Y2VsXHJcbiAgICAgICAgICAgIGNvbnN0IE1TRGF0YSA9IC9jbGFzcz1bXCInXSpNc28oTm9ybWFsfExpc3QpL2kudGVzdChjbGVhbkRhdGEpIHx8IC9jb250ZW50PVtcIiddKldvcmQuRG9jdW1lbnQvaS50ZXN0KGNsZWFuRGF0YSkgfHwgL2NvbnRlbnQ9W1wiJ10qT25lTm90ZS5GaWxlL2kudGVzdChjbGVhbkRhdGEpIHx8IC9jb250ZW50PVtcIiddKkV4Y2VsLlNoZWV0L2kudGVzdChjbGVhbkRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBvbmx5VGV4dCA9ICFjbGVhbkRhdGE7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9ubHlUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSBjbGVhbkRhdGEucmVwbGFjZSgvXjxodG1sPlxccj9cXG4/PGJvZHk+XFxyP1xcbj9cXHgzQyEtLVN0YXJ0RnJhZ21lbnQtLVxcPnxcXHgzQyEtLUVuZEZyYWdtZW50LS0+XFxyP1xcbj88XFwvYm9keVxcPlxccj9cXG4/PFxcL2h0bWw+JC9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoTVNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5EYXRhID0gY2xlYW5EYXRhLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWluVGV4dCA9IHBsYWluVGV4dC5yZXBsYWNlKC9cXG4vZywgJyAnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsZWFuRGF0YSA9IGNvcmUuY2xlYW5IVE1MKGNsZWFuRGF0YSwgY29yZS5wYXN0ZVRhZ3NXaGl0ZWxpc3RSZWdFeHAsIGNvcmUucGFzdGVUYWdzQmxhY2tsaXN0UmVnRXhwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNsZWFuRGF0YSA9IHV0aWwuX0hUTUxDb252ZXJ0b3IocGxhaW5UZXh0KS5yZXBsYWNlKC9cXG4vZywgJzxicj4nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgbWF4Q2hhckNvdW50ID0gY29yZS5fY2hhckNvdW50KGNvcmUuX2NoYXJUeXBlSFRNTCA/IGNsZWFuRGF0YSA6IHBsYWluVGV4dCk7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnQgLSBwYXN0ZVxyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3Bhc3RlJyAmJiB0eXBlb2YgZnVuY3Rpb25zLm9uUGFzdGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZnVuY3Rpb25zLm9uUGFzdGUoZSwgY2xlYW5EYXRhLCBtYXhDaGFyQ291bnQsIGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50IC0gZHJvcFxyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2Ryb3AnICYmIHR5cGVvZiBmdW5jdGlvbnMub25Ecm9wID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZ1bmN0aW9ucy5vbkRyb3AoZSwgY2xlYW5EYXRhLCBtYXhDaGFyQ291bnQsIGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZmlsZXNcclxuICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBkYXRhLmZpbGVzO1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCAmJiAhTVNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoL15pbWFnZS8udGVzdChmaWxlc1swXS50eXBlKSAmJiBjb3JlLnBsdWdpbnMuaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnMuaW5zZXJ0SW1hZ2UoZmlsZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW1heENoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2xlYW5EYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbnMuaW5zZXJ0SFRNTChjbGVhbkRhdGEsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uTW91c2VNb3ZlX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzRGlzYWJsZWQgfHwgY29yZS5pc1JlYWRPbmx5KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChlLnRhcmdldCwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVCcmVha2VyU3R5bGUgPSBjb3JlLl9saW5lQnJlYWtlci5zdHlsZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgIWNvcmUuY3VycmVudENvbnRyb2xsZXJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdHhFbCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGxldCBzY3JvbGxUb3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVsID0gY3R4RWwud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3AgKz0gZWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKGVsICYmICEvXihCT0RZfEhUTUwpJC9pLnRlc3QoZWwubm9kZU5hbWUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB3U2Nyb2xsID0gY3R4RWwud3lzaXd5Zy5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRzID0gZXZlbnQuX2dldEVkaXRvck9mZnNldHMobnVsbCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRUb3AgPSB1dGlsLmdldE9mZnNldChjb21wb25lbnQsIGN0eEVsLnd5c2l3eWdGcmFtZSkudG9wICsgd1Njcm9sbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBlLnBhZ2VZICsgc2Nyb2xsVG9wICsgKG9wdGlvbnMuaWZyYW1lICYmICFvcHRpb25zLnRvb2xiYXJDb250YWluZXIgPyBjdHhFbC50b29sYmFyLm9mZnNldEhlaWdodCA6IDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGNvbXBvbmVudFRvcCArIChvcHRpb25zLmlmcmFtZSA/IHNjcm9sbFRvcCA6IG9mZnNldHMudG9wKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0xpc3QgPSB1dGlsLmlzTGlzdENlbGwoY29tcG9uZW50LnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpciA9ICcnLCB0b3AgPSAnJztcclxuICAgICAgICAgICAgICAgIGlmICgoaXNMaXN0ID8gIWNvbXBvbmVudC5wcmV2aW91c1NpYmxpbmcgOiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29tcG9uZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKSAmJiB5IDwgKGMgKyAyMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBjb21wb25lbnRUb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyID0gJ3QnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoaXNMaXN0ID8gIWNvbXBvbmVudC5uZXh0U2libGluZyA6ICF1dGlsLmlzRm9ybWF0RWxlbWVudChjb21wb25lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSkgJiYgeSA+IChjICsgY29tcG9uZW50Lm9mZnNldEhlaWdodCAtIDIwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGNvbXBvbmVudFRvcCArIGNvbXBvbmVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyID0gJ2InO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lQnJlYWtlclN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLl9saW5lQnJlYWtDb21wID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuX2xpbmVCcmVha0RpciA9IGRpcjtcclxuICAgICAgICAgICAgICAgIGxpbmVCcmVha2VyU3R5bGUudG9wID0gKHRvcCAtIHdTY3JvbGwpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGNvcmUuX2xpbmVCcmVha2VyQnV0dG9uLnN0eWxlLmxlZnQgPSAodXRpbC5nZXRPZmZzZXQoY29tcG9uZW50KS5sZWZ0ICsgKGNvbXBvbmVudC5vZmZzZXRXaWR0aCAvIDIpIC0gMTUpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGxpbmVCcmVha2VyU3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIH0gLy8gb2ZmIGxpbmUgYnJlYWtlclxyXG4gICAgICAgICAgICBlbHNlIGlmIChsaW5lQnJlYWtlclN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgbGluZUJyZWFrZXJTdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2VudGVyUHJldmVudChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzTW9iaWxlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9fZm9jdXNUZW1wLmZvY3VzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VEb3duX2xpbmVCcmVhazogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkxpbmVCcmVhazogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gY29yZS5fdmFyaWFibGUuX2xpbmVCcmVha0NvbXA7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpciA9ICF0aGlzID8gY29yZS5fdmFyaWFibGUuX2xpbmVCcmVha0RpciA6IHRoaXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGlzdCA9IHV0aWwuaXNMaXN0Q2VsbChjb21wb25lbnQucGFyZW50Tm9kZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoaXNMaXN0ID8gJ0JSJyA6IHV0aWwuaXNDZWxsKGNvbXBvbmVudC5wYXJlbnROb2RlKSA/ICdESVYnIDogb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgaWYgKCFpc0xpc3QpIGZvcm1hdC5pbm5lckhUTUwgPSAnPGJyPic7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5fY2hhclR5cGVIVE1MICYmICFjb3JlLmNoZWNrQ2hhckNvdW50KGZvcm1hdC5vdXRlckhUTUwsICdieXRlLWh0bWwnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29tcG9uZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgZGlyID09PSAndCcgPyBjb21wb25lbnQgOiBjb21wb25lbnQubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICBjb3JlLl9saW5lQnJlYWtlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5fbGluZUJyZWFrQ29tcCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb2N1c0VsID0gaXNMaXN0ID8gZm9ybWF0IDogZm9ybWF0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoZm9jdXNFbCwgMSwgZm9jdXNFbCwgMSk7XHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZXNpemVPYnNlcnZlcjogbnVsbCxcclxuICAgICAgICBfdG9vbGJhck9ic2VydmVyOiBudWxsLFxyXG4gICAgICAgIF9hZGRFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBldmVudFd5c2l3eWcgPSBvcHRpb25zLmlmcmFtZSA/IGNvcmUuX3d3IDogY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyID0gbmV3IF93LlJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uKGVudHJpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLl9fY2FsbFJlc2l6ZUZ1bmN0aW9uKC0xLCBlbnRyaWVzWzBdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiogdG9vbGJhciBldmVudCAqL1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fYnV0dG9uc0V2ZW50SGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX21lbnVUcmF5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Ll9idXR0b25zRXZlbnRIYW5kbGVyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQub25DbGlja190b29sYmFyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8qKiBlZGl0b3IgYXJlYSAqL1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQub25Nb3VzZURvd25fd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5vbkNsaWNrX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIodXRpbC5pc0lFID8gJ3RleHRpbnB1dCcgOiAnaW5wdXQnLCBldmVudC5vbklucHV0X3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudC5vbktleURvd25fd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudC5vbktleVVwX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgZXZlbnQub25QYXN0ZV93eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdjb3B5JywgZXZlbnQub25Db3B5X3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2N1dCcsIGV2ZW50Lm9uQ3V0X3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBldmVudC5vbkRyb3Bfd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZXZlbnQub25TY3JvbGxfd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBldmVudC5vbkZvY3VzX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBldmVudC5vbkJsdXJfd3lzaXd5ZywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgLyoqIGxpbmUgYnJlYWtlciAqL1xyXG4gICAgICAgICAgICBldmVudC5fbGluZUJyZWFrZXJCaW5kID0geyBhOiBldmVudC5fb25MaW5lQnJlYWsuYmluZCgnJyksIHQ6IGV2ZW50Ll9vbkxpbmVCcmVhay5iaW5kKCd0JyksIGI6IGV2ZW50Ll9vbkxpbmVCcmVhay5iaW5kKCdiJykgfTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50Lm9uTW91c2VNb3ZlX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29yZS5fbGluZUJyZWFrZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX29uTW91c2VEb3duX2xpbmVCcmVhaywgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb3JlLl9saW5lQnJlYWtlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50Ll9saW5lQnJlYWtlckJpbmQuYSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX2IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2xpbmVCcmVha2VyQmluZC5iLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAvKiogRXZlbnRzIGFyZSByZWdpc3RlcmVkIG1vYmlsZS4gICovXHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZXZlbnQub25Nb3VzZURvd25fd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGV2ZW50Lm9uQ2xpY2tfd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcblxyXG4gICAgICAgICAgICAvKiogY29kZSB2aWV3IGFyZWEgYXV0byBsaW5lICovXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nICYmICFvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgZXZlbnQuX2NvZGVWaWV3QXV0b0hlaWdodCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiogcmVzaXppbmdCYXIgKi9cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0Jhcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKC9cXGQrLy50ZXN0KG9wdGlvbnMuaGVpZ2h0KSAmJiBvcHRpb25zLnJlc2l6ZUVuYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0Jhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5vbk1vdXNlRG93bl9yZXNpemluZ0JhciwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0JhciwgJ3NlLXJlc2l6aW5nLW5vbmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHNldCByZXNwb25zZSB0b29sYmFyICovXHJcbiAgICAgICAgICAgIGV2ZW50Ll9zZXRSZXNwb25zaXZlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlc3BvbnNpdmUgdG9vbGJhciBvYnNlcnZlciAqL1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1Jlc2l6ZU9ic2VydmVyU3VwcG9ydGVkKSB0aGlzLl90b29sYmFyT2JzZXJ2ZXIgPSBuZXcgX3cuUmVzaXplT2JzZXJ2ZXIoY29yZS5yZXNldFJlc3BvbnNpdmVUb29sYmFyKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiB3aW5kb3cgZXZlbnQgKi9cclxuICAgICAgICAgICAgX3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZXZlbnQub25SZXNpemVfd2luZG93LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0aWNreVRvb2xiYXIgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgX3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZXZlbnQub25TY3JvbGxfd2luZG93LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnRXeXNpd3lnID0gb3B0aW9ucy5pZnJhbWUgPyBjb3JlLl93dyA6IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2J1dHRvbnNFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX21lbnVUcmF5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Ll9idXR0b25zRXZlbnRIYW5kbGVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5vbkNsaWNrX3Rvb2xiYXIpO1xyXG5cclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Lm9uTW91c2VEb3duX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5vbkNsaWNrX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcih1dGlsLmlzSUUgPyAndGV4dGlucHV0JyA6ICdpbnB1dCcsIGV2ZW50Lm9uSW5wdXRfd3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQub25LZXlEb3duX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudC5vbktleVVwX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBldmVudC5vblBhc3RlX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29weScsIGV2ZW50Lm9uQ29weV93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2N1dCcsIGV2ZW50Lm9uQ3V0X3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIGV2ZW50Lm9uRHJvcF93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGV2ZW50Lm9uU2Nyb2xsX3d5c2l3eWcpO1xyXG5cclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50Lm9uTW91c2VNb3ZlX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBjb3JlLl9saW5lQnJlYWtlckJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fb25Nb3VzZURvd25fbGluZUJyZWFrKTtcclxuICAgICAgICAgICAgY29yZS5fbGluZUJyZWFrZXJCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLmEpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfdC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLnQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfYi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLmIpO1xyXG4gICAgICAgICAgICBldmVudC5fbGluZUJyZWFrZXJCaW5kID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZXZlbnQub25Nb3VzZURvd25fd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGV2ZW50Lm9uQ2xpY2tfd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGV2ZW50Lm9uRm9jdXNfd3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgZXZlbnQub25CbHVyX3d5c2l3eWcpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdwYXN0ZScsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0Jhcikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlc2l6aW5nQmFyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Lm9uTW91c2VEb3duX3Jlc2l6aW5nQmFyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50Ll9yZXNpemVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3Jlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9yZXNpemVPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5fdG9vbGJhck9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fdG9vbGJhck9ic2VydmVyLnVub2JzZXJ2ZShjb250ZXh0LmVsZW1lbnQuX3Rvb2xiYXJTaGFkb3cpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3Rvb2xiYXJPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGV2ZW50Lm9uUmVzaXplX3dpbmRvdyk7XHJcbiAgICAgICAgICAgIF93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGV2ZW50Lm9uU2Nyb2xsX3dpbmRvdyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFJlc3BvbnNpdmVUb29sYmFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfcmVzcG9uc2l2ZUJ1dHRvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZUJ1dHRvbnMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudC5fcmVzcG9uc2l2ZUN1cnJlbnRTaXplID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgICAgICBjb25zdCBzaXplQXJyYXkgPSBldmVudC5fcmVzcG9uc2l2ZUJ1dHRvblNpemUgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uc09iaiA9IGV2ZW50Ll9yZXNwb25zaXZlQnV0dG9ucyA9IHtkZWZhdWx0OiBfcmVzcG9uc2l2ZUJ1dHRvbnNbMF19O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gX3Jlc3BvbnNpdmVCdXR0b25zLmxlbmd0aCwgc2l6ZSwgYnV0dG9uR3JvdXA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uR3JvdXAgPSBfcmVzcG9uc2l2ZUJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBzaXplID0gYnV0dG9uR3JvdXBbMF0gKiAxO1xyXG4gICAgICAgICAgICAgICAgc2l6ZUFycmF5LnB1c2goc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zT2JqW3NpemVdID0gYnV0dG9uR3JvdXBbMV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNpemVBcnJheS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhIC0gYjsgfSkudW5zaGlmdCgnZGVmYXVsdCcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqIGZ1bmN0aW9ucyAqL1xyXG4gICAgY29uc3QgZnVuY3Rpb25zID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb3JlLCBVdGlsIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcmU6IGNvcmUsXHJcbiAgICAgICAgdXRpbDogdXRpbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IGZ1bmN0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIEV2ZW50IE9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25sb2FkOiBudWxsLFxyXG4gICAgICAgIG9uU2Nyb2xsOiBudWxsLFxyXG4gICAgICAgIG9uTW91c2VEb3duOiBudWxsLFxyXG4gICAgICAgIG9uQ2xpY2s6IG51bGwsXHJcbiAgICAgICAgb25JbnB1dDogbnVsbCxcclxuICAgICAgICBvbktleURvd246IG51bGwsXHJcbiAgICAgICAgb25LZXlVcDogbnVsbCxcclxuICAgICAgICBvbkNvcHk6IG51bGwsXHJcbiAgICAgICAgb25DdXQ6IG51bGwsXHJcbiAgICAgICAgb25Gb2N1czogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IGZ1bmN0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIEV2ZW50IE9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIEN1cnJlbnQgY29udGVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkJsdXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCBmdW5jdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgQ3VycmVudCBjb250ZW50c1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25DaGFuZ2U6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCBmdW5jdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgQ3VycmVudCBjb250ZW50c1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25TYXZlOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXZlbnQgZnVuY3Rpb25zIChkcm9wLCBwYXN0ZSlcclxuICAgICAgICAgKiBXaGVuIGZhbHNlIGlzIHJldHVybmVkLCB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBzdG9wcGVkLlxyXG4gICAgICAgICAqIElmIHRoZSBzdHJpbmcgaXMgcmV0dXJuZWQsIHRoZSBjbGVhbkRhdGEgdmFsdWUgaXMgbW9kaWZpZWQgdG8gdGhlIHJldHVybiB2YWx1ZS5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZSBFdmVudCBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNsZWFuRGF0YSBIVE1MIHN0cmluZyBtb2RpZmllZCBmb3IgZWRpdG9yIGZvcm1hdC5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1heENoYXJ0Q291bnQgb3B0aW9uICh0cnVlIGlmIG1heCBjaGFyYWN0ZXIgaXMgZXhjZWVkZWQpXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnxTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25Ecm9wOiBudWxsLFxyXG4gICAgICAgIG9uUGFzdGU6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQganVzdCBiZWZvcmUgdGhlIGlubGluZSB0b29sYmFyIGlzIHBvc2l0aW9uZWQgYW5kIGRpc3BsYXllZCBvbiB0aGUgc2NyZWVuLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdG9vbGJhciBUb29sYmFyIEVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dCBUaGUgZWRpdG9yJ3MgY29udGV4dCBvYmplY3QgKGVkaXRvci5nZXRDb250ZXh0KCkpXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93SW5saW5lOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGp1c3QgYWZ0ZXIgdGhlIGNvbnRyb2xsZXIgaXMgcG9zaXRpb25lZCBhbmQgZGlzcGxheWVkIG9uIHRoZSBzY3JlZW4uXHJcbiAgICAgICAgICogY29udHJvbGxlciAtIGVkaXRpbmcgZWxlbWVudHMgZGlzcGxheWVkIG9uIHRoZSBzY3JlZW4gW2ltYWdlIHJlc2l6aW5nLCB0YWJsZSBlZGl0b3IsIGxpbmsgZWRpdG9yLi5dXVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4gdGhhdCBjYWxsZWQgdGhlIGNvbnRyb2xsZXJcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBjb250cm9sbGVycyBBcnJheSBvZiBDb250cm9sbGVyIGVsZW1lbnRzXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93Q29udHJvbGxlcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFuIGV2ZW50IHdoZW4gdG9nZ2xpbmcgYmV0d2VlbiBjb2RlIHZpZXcgYW5kIHd5c2l3eWcgdmlldy5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQ29kZVZpZXcgV2hldGhlciB0aGUgY3VycmVudCBjb2RlIHZpZXcgbW9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlQ29kZVZpZXc6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBbiBldmVudCB3aGVuIHRvZ2dsaW5nIGZ1bGwgc2NyZWVuLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNGdWxsU2NyZWVuIFdoZXRoZXIgdGhlIGN1cnJlbnQgZnVsbCBzY3JlZW4gbW9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRnVsbFNjcmVlbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEl0IHJlcGxhY2VzIHRoZSBkZWZhdWx0IGNhbGxiYWNrIGZ1bmN0aW9uIG9mIHRoZSBpbWFnZSB1cGxvYWRcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgUmVzcG9uc2Ugb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gSW5wdXQgaW5mb3JtYXRpb25cclxuICAgICAgICAgKiAtIGxpbmtWYWx1ZTogTGluayB1cmwgdmFsdWVcclxuICAgICAgICAgKiAtIGxpbmtOZXdXaW5kb3c6IE9wZW4gaW4gbmV3IHdpbmRvdyBDaGVjayBWYWx1ZVxyXG4gICAgICAgICAqIC0gaW5wdXRXaWR0aDogVmFsdWUgb2Ygd2lkdGggaW5wdXRcclxuICAgICAgICAgKiAtIGlucHV0SGVpZ2h0OiBWYWx1ZSBvZiBoZWlnaHQgaW5wdXRcclxuICAgICAgICAgKiAtIGFsaWduOiBBbGlnbiBDaGVjayBWYWx1ZVxyXG4gICAgICAgICAqIC0gaXNVcGRhdGU6IFVwZGF0ZSBpbWFnZSBpZiB0cnVlLCBjcmVhdGUgaW1hZ2UgaWYgZmFsc2VcclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IElmIGlzVXBkYXRlIGlzIHRydWUsIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaW1hZ2UuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbWFnZVVwbG9hZEhhbmRsZXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJdCByZXBsYWNlcyB0aGUgZGVmYXVsdCBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgdmlkZW8gdXBsb2FkXHJcbiAgICAgICAgICogQHBhcmFtIHhtbEh0dHAgeG1sSHR0cFJlcXVlc3Qgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIGluZm8gSW5wdXQgaW5mb3JtYXRpb25cclxuICAgICAgICAgKiAtIGlucHV0V2lkdGg6IFZhbHVlIG9mIHdpZHRoIGlucHV0XHJcbiAgICAgICAgICogLSBpbnB1dEhlaWdodDogVmFsdWUgb2YgaGVpZ2h0IGlucHV0XHJcbiAgICAgICAgICogLSBhbGlnbjogQWxpZ24gQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlzVXBkYXRlOiBVcGRhdGUgdmlkZW8gaWYgdHJ1ZSwgY3JlYXRlIHZpZGVvIGlmIGZhbHNlXHJcbiAgICAgICAgICogLSBlbGVtZW50OiBJZiBpc1VwZGF0ZSBpcyB0cnVlLCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHZpZGVvLlxyXG4gICAgICAgICAqIEBwYXJhbSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmlkZW9VcGxvYWRIYW5kbGVyOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSXQgcmVwbGFjZXMgdGhlIGRlZmF1bHQgY2FsbGJhY2sgZnVuY3Rpb24gb2YgdGhlIGF1ZGlvIHVwbG9hZFxyXG4gICAgICAgICAqIEBwYXJhbSB4bWxIdHRwIHhtbEh0dHBSZXF1ZXN0IG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmZvIElucHV0IGluZm9ybWF0aW9uXHJcbiAgICAgICAgICogLSBpc1VwZGF0ZTogVXBkYXRlIGF1ZGlvIGlmIHRydWUsIGNyZWF0ZSBhdWRpbyBpZiBmYWxzZVxyXG4gICAgICAgICAqIC0gZWxlbWVudDogSWYgaXNVcGRhdGUgaXMgdHJ1ZSwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhdWRpby5cclxuICAgICAgICAgKiBAcGFyYW0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGF1ZGlvVXBsb2FkSGFuZGxlcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCBiZWZvcmUgdGhlIGltYWdlIGlzIHVwbG9hZGVkXHJcbiAgICAgICAgICogSWYgdHJ1ZSBpcyByZXR1cm5lZCwgdGhlIGludGVybmFsIHVwbG9hZCBwcm9jZXNzIHJ1bnMgbm9ybWFsbHkuXHJcbiAgICAgICAgICogSWYgZmFsc2UgaXMgcmV0dXJuZWQsIG5vIGltYWdlIHVwbG9hZCBpcyBwZXJmb3JtZWQuXHJcbiAgICAgICAgICogSWYgbmV3IGZpbGVMaXN0IGFyZSByZXR1cm5lZCwgIHJlcGxhY2VkIHRoZSBwcmV2aW91cyBmaWxlTGlzdFxyXG4gICAgICAgICAqIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCwgaXQgd2FpdHMgdW50aWwgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgZXhlY3V0ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gZmlsZXMgRmlsZXMgYXJyYXlcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyBpbmZvOiB7XHJcbiAgICAgICAgICogLSBsaW5rVmFsdWU6IExpbmsgdXJsIHZhbHVlXHJcbiAgICAgICAgICogLSBsaW5rTmV3V2luZG93OiBPcGVuIGluIG5ldyB3aW5kb3cgQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlucHV0V2lkdGg6IFZhbHVlIG9mIHdpZHRoIGlucHV0XHJcbiAgICAgICAgICogLSBpbnB1dEhlaWdodDogVmFsdWUgb2YgaGVpZ2h0IGlucHV0XHJcbiAgICAgICAgICogLSBhbGlnbjogQWxpZ24gQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlzVXBkYXRlOiBVcGRhdGUgaW1hZ2UgaWYgdHJ1ZSwgY3JlYXRlIGltYWdlIGlmIGZhbHNlXHJcbiAgICAgICAgICogLSBlbGVtZW50OiBJZiBpc1VwZGF0ZSBpcyB0cnVlLCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGltYWdlLlxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwbG9hZEhhbmRsZXIgSWYgdW5kZWZpbmVkIGlzIHJldHVybmVkLCBpdCB3YWl0cyB1bnRpbCBcInVwbG9hZEhhbmRsZXJcIiBpcyBleGVjdXRlZC5cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBcInVwbG9hZEhhbmRsZXJcIiBpcyBhbiB1cGxvYWQgZnVuY3Rpb24gd2l0aCBcImNvcmVcIiBhbmQgXCJpbmZvXCIgYm91bmQuXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW3VwbG9hZCBmaWxlc10gOiB1cGxvYWRIYW5kbGVyKGZpbGVzIG9yIFtuZXcgRmlsZSguLi4pLF0pXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW2Vycm9yXSAgICAgICAgOiB1cGxvYWRIYW5kbGVyKFwiRXJyb3IgbWVzc2FnZVwiKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtKdXN0IGZpbmlzaF0gIDogdXBsb2FkSGFuZGxlcigpXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW2RpcmVjdGx5IHJlZ2lzdGVyXSA6IHVwbG9hZEhhbmRsZXIocmVzcG9uc2UpIC8vIFNhbWUgZm9ybWF0IGFzIFwiaW1hZ2VVcGxvYWRVcmxcIiByZXNwb25zZVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleCkge1xyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcImVycm9yTWVzc2FnZVwiOiBcImluc2VydCBlcnJvciBtZXNzYWdlXCIsXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVzdWx0XCI6IFsgeyBcInVybFwiOiBcIi4uLlwiLCBcIm5hbWVcIjogXCIuLi5cIiwgXCJzaXplXCI6IFwiOTk5XCIgfSwgXVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW58QXJyYXl8dW5kZWZpbmVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uSW1hZ2VVcGxvYWRCZWZvcmU6IG51bGwsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCBiZWZvcmUgdGhlIHZpZGVvIGlzIHVwbG9hZGVkXHJcbiAgICAgICAgICogSWYgdHJ1ZSBpcyByZXR1cm5lZCwgdGhlIGludGVybmFsIHVwbG9hZCBwcm9jZXNzIHJ1bnMgbm9ybWFsbHkuXHJcbiAgICAgICAgICogSWYgZmFsc2UgaXMgcmV0dXJuZWQsIG5vIHZpZGVvKGlmcmFtZSwgdmlkZW8pIHVwbG9hZCBpcyBwZXJmb3JtZWQuXHJcbiAgICAgICAgICogSWYgbmV3IGZpbGVMaXN0IGFyZSByZXR1cm5lZCwgIHJlcGxhY2VkIHRoZSBwcmV2aW91cyBmaWxlTGlzdFxyXG4gICAgICAgICAqIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCwgaXQgd2FpdHMgdW50aWwgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgZXhlY3V0ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gZmlsZXMgRmlsZXMgYXJyYXlcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyBpbmZvOiB7XHJcbiAgICAgICAgICogLSBpbnB1dFdpZHRoOiBWYWx1ZSBvZiB3aWR0aCBpbnB1dFxyXG4gICAgICAgICAqIC0gaW5wdXRIZWlnaHQ6IFZhbHVlIG9mIGhlaWdodCBpbnB1dFxyXG4gICAgICAgICAqIC0gYWxpZ246IEFsaWduIENoZWNrIFZhbHVlXHJcbiAgICAgICAgICogLSBpc1VwZGF0ZTogVXBkYXRlIHZpZGVvIGlmIHRydWUsIGNyZWF0ZSB2aWRlbyBpZiBmYWxzZVxyXG4gICAgICAgICAqIC0gZWxlbWVudDogSWYgaXNVcGRhdGUgaXMgdHJ1ZSwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2aWRlby5cclxuICAgICAgICAgKiB9XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGxvYWRIYW5kbGVyIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCwgaXQgd2FpdHMgdW50aWwgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgZXhlY3V0ZWQuXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgYW4gdXBsb2FkIGZ1bmN0aW9uIHdpdGggXCJjb3JlXCIgYW5kIFwiaW5mb1wiIGJvdW5kLlxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFt1cGxvYWQgZmlsZXNdIDogdXBsb2FkSGFuZGxlcihmaWxlcyBvciBbbmV3IEZpbGUoLi4uKSxdKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtlcnJvcl0gICAgICAgIDogdXBsb2FkSGFuZGxlcihcIkVycm9yIG1lc3NhZ2VcIilcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbSnVzdCBmaW5pc2hdICA6IHVwbG9hZEhhbmRsZXIoKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtkaXJlY3RseSByZWdpc3Rlcl0gOiB1cGxvYWRIYW5kbGVyKHJlc3BvbnNlKSAvLyBTYW1lIGZvcm1hdCBhcyBcInZpZGVvVXBsb2FkVXJsXCIgcmVzcG9uc2VcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXgpIHtcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJlcnJvck1lc3NhZ2VcIjogXCJpbnNlcnQgZXJyb3IgbWVzc2FnZVwiLFxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdFwiOiBbIHsgXCJ1cmxcIjogXCIuLi5cIiwgXCJuYW1lXCI6IFwiLi4uXCIsIFwic2l6ZVwiOiBcIjk5OVwiIH0sIF1cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufEFycmF5fHVuZGVmaW5lZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBvblZpZGVvVXBsb2FkQmVmb3JlOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgYmVmb3JlIHRoZSBhdWRpbyBpcyB1cGxvYWRlZFxyXG4gICAgICAgICAqIElmIHRydWUgaXMgcmV0dXJuZWQsIHRoZSBpbnRlcm5hbCB1cGxvYWQgcHJvY2VzcyBydW5zIG5vcm1hbGx5LlxyXG4gICAgICAgICAqIElmIGZhbHNlIGlzIHJldHVybmVkLCBubyBhdWRpbyB1cGxvYWQgaXMgcGVyZm9ybWVkLlxyXG4gICAgICAgICAqIElmIG5ldyBmaWxlTGlzdCBhcmUgcmV0dXJuZWQsICByZXBsYWNlZCB0aGUgcHJldmlvdXMgZmlsZUxpc3RcclxuICAgICAgICAgKiBJZiB1bmRlZmluZWQgaXMgcmV0dXJuZWQsIGl0IHdhaXRzIHVudGlsIFwidXBsb2FkSGFuZGxlclwiIGlzIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbGVzIEZpbGVzIGFycmF5XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gaW5mbzoge1xyXG4gICAgICAgICAqIC0gaXNVcGRhdGU6IFVwZGF0ZSBhdWRpbyBpZiB0cnVlLCBjcmVhdGUgYXVkaW8gaWYgZmFsc2VcclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IElmIGlzVXBkYXRlIGlzIHRydWUsIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgYXVkaW8uXHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBsb2FkSGFuZGxlciBJZiB1bmRlZmluZWQgaXMgcmV0dXJuZWQsIGl0IHdhaXRzIHVudGlsIFwidXBsb2FkSGFuZGxlclwiIGlzIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFwidXBsb2FkSGFuZGxlclwiIGlzIGFuIHVwbG9hZCBmdW5jdGlvbiB3aXRoIFwiY29yZVwiIGFuZCBcImluZm9cIiBib3VuZC5cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbdXBsb2FkIGZpbGVzXSA6IHVwbG9hZEhhbmRsZXIoZmlsZXMgb3IgW25ldyBGaWxlKC4uLiksXSlcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbZXJyb3JdICAgICAgICA6IHVwbG9hZEhhbmRsZXIoXCJFcnJvciBtZXNzYWdlXCIpXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW0p1c3QgZmluaXNoXSAgOiB1cGxvYWRIYW5kbGVyKClcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbZGlyZWN0bHkgcmVnaXN0ZXJdIDogdXBsb2FkSGFuZGxlcihyZXNwb25zZSkgLy8gU2FtZSBmb3JtYXQgYXMgXCJhdWRpb1VwbG9hZFVybFwiIHJlc3BvbnNlXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4KSB7XHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFwiZXJyb3JNZXNzYWdlXCI6IFwiaW5zZXJ0IGVycm9yIG1lc3NhZ2VcIixcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXN1bHRcIjogWyB7IFwidXJsXCI6IFwiLi4uXCIsIFwibmFtZVwiOiBcIi4uLlwiLCBcInNpemVcIjogXCI5OTlcIiB9LCBdXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnxBcnJheXx1bmRlZmluZWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25BdWRpb1VwbG9hZEJlZm9yZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSBpbWFnZSBpcyB1cGxvYWRlZCwgdXBkYXRlZCwgZGVsZXRlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0RWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBVcGxvYWRlZCBpbmRleFxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSBVcGxvYWQgc3RhdHVzICgnY3JlYXRlJywgJ3VwZGF0ZScsICdkZWxldGUnKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIEltYWdlIGluZm8gb2JqZWN0XHJcbiAgICAgICAgICogLSBpbmRleDogZGF0YSBpbmRleFxyXG4gICAgICAgICAqIC0gbmFtZTogZmlsZSBuYW1lXHJcbiAgICAgICAgICogLSBzaXplOiBmaWxlIHNpemVcclxuICAgICAgICAgKiAtIHNlbGVjdDogc2VsZWN0IGZ1bmN0aW9uXHJcbiAgICAgICAgICogLSBkZWxldGU6IGRlbGV0ZSBmdW5jdGlvblxyXG4gICAgICAgICAqIC0gZWxlbWVudDogdGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiAtIHNyYzogc3JjIGF0dHJpYnV0ZSBvZiB0YWdcclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVtYWluaW5nRmlsZXNDb3VudCBDb3VudCBvZiByZW1haW5pbmcgZmlsZXMgdG8gdXBsb2FkICgwIHdoZW4gYWRkZWQgYXMgYSB1cmwpXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkltYWdlVXBsb2FkOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSB2aWRlbyhpZnJhbWUsIHZpZGVvKSBpcyBpcyB1cGxvYWRlZCwgdXBkYXRlZCwgZGVsZXRlZFxyXG4gICAgICAgICogLS0gYXJndW1lbnRzIGlzIHNhbWUgXCJvbkltYWdlVXBsb2FkXCIgLS1cclxuICAgICAgICAqL1xyXG4gICAgICAgIG9uVmlkZW9VcGxvYWQ6IG51bGwsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlIGF1ZGlvIGlzIGlzIHVwbG9hZGVkLCB1cGRhdGVkLCBkZWxldGVkXHJcbiAgICAgICAgKiAtLSBhcmd1bWVudHMgaXMgc2FtZSBcIm9uSW1hZ2VVcGxvYWRcIiAtLVxyXG4gICAgICAgICovXHJcbiAgICAgICAgb25BdWRpb1VwbG9hZDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSBpbWFnZSBpcyB1cGxvYWQgZmFpbGVkXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGVycm9yTWVzc2FnZSBFcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdCBSZXNwb25zZSBPYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uSW1hZ2VVcGxvYWRFcnJvcjogbnVsbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlIHZpZGVvKGlmcmFtZSwgdmlkZW8pIHVwbG9hZCBmYWlsZWRcclxuICAgICAgICAgKiAtLSBhcmd1bWVudHMgaXMgc2FtZSBcIm9uSW1hZ2VVcGxvYWRFcnJvclwiIC0tXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25WaWRlb1VwbG9hZEVycm9yOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiB0aGUgYXVkaW8gdXBsb2FkIGZhaWxlZFxyXG4gICAgICAgICAqIC0tIGFyZ3VtZW50cyBpcyBzYW1lIFwib25JbWFnZVVwbG9hZEVycm9yXCIgLS1cclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkF1ZGlvVXBsb2FkRXJyb3I6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiB0aGUgZWRpdG9yIGlzIHJlc2l6ZWQgdXNpbmcgdGhlIGJvdHRvbSBiYXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBvblJlc2l6ZUVkaXRvcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCBhZnRlciB0aGUgXCJzZXRUb29sYmFyQnV0dG9uc1wiIGludm9jYXRpb24uXHJcbiAgICAgICAgICogQ2FuIGJlIHVzZWQgdG8gdHdlYWsgYnV0dG9ucyBwcm9wZXJ0aWVzICh1c2VmdWwgZm9yIGN1c3RvbSBidXR0b25zKVxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGJ1dHRvbkxpc3QgQnV0dG9uIGxpc3QgXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBvblNldFRvb2xiYXJCdXR0b25zOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXQgdGhlIGJ1dHRvbnMgb24gdGhlIHRvb2xiYXIuIChFZGl0b3IgaXMgbm90IHJlbG9hZGVkKVxyXG4gICAgICAgICAqIFlvdSBjYW5ub3Qgc2V0IGEgbmV3IHBsdWdpbiBmb3IgdGhlIGJ1dHRvbi5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBidXR0b25MaXN0IEJ1dHRvbiBsaXN0IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFRvb2xiYXJCdXR0b25zOiBmdW5jdGlvbiAoYnV0dG9uTGlzdCkge1xyXG4gICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5jb250YWluZXJPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5tb3JlTGF5ZXJPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rvb2xiYXIgPSBfQ29uc3RydWN0b3IuX2NyZWF0ZVRvb2xCYXIoX2QsIGJ1dHRvbkxpc3QsIGNvcmUucGx1Z2lucywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIF9yZXNwb25zaXZlQnV0dG9ucyA9IG5ld1Rvb2xiYXIucmVzcG9uc2l2ZUJ1dHRvbnM7XHJcbiAgICAgICAgICAgIGV2ZW50Ll9zZXRSZXNwb25zaXZlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIucmVwbGFjZUNoaWxkKG5ld1Rvb2xiYXIuX2J1dHRvblRyYXksIGNvbnRleHQuZWxlbWVudC5fYnV0dG9uVHJheSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRleHQgPSBfQ29udGV4dChjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudCwgY29yZS5fZ2V0Q29uc3RydWN0ZWQoY29udGV4dC5lbGVtZW50KSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQgPSBuZXdDb250ZXh0LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnRleHQudG9vbCA9IG5ld0NvbnRleHQudG9vbDtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZyA9IGNvcmUuX3dkLmJvZHk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9yZWNvdmVyQnV0dG9uU3RhdGVzKCk7XHJcbiAgICAgICAgICAgIGNvcmUuX2NhY2hpbmdCdXR0b25zKCk7XHJcbiAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5fcmVzZXRDYWNoaW5nQnV0dG9uKCk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLmVmZmVjdE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5oYXNGb2N1cykgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5KSB1dGlsLnNldERpc2FibGVkQnV0dG9ucyh0cnVlLCBjb3JlLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25TZXRUb29sYmFyQnV0dG9ucyA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLm9uU2V0VG9vbGJhckJ1dHRvbnMobmV3VG9vbGJhci5fYnV0dG9uVHJheS5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKSwgY29yZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBvciByZXNldCBvcHRpb24gcHJvcGVydHkgKEVkaXRvciBpcyByZWxvYWRlZClcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gX29wdGlvbnMgT3B0aW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIChfb3B0aW9ucykge1xyXG4gICAgICAgICAgICBldmVudC5fcmVtb3ZlRXZlbnQoKTtcclxuICAgICAgICAgICAgY29yZS5fcmVzZXRDb21wb25lbnRzKCk7XHJcblxyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvcmUuX3N0eWxlQ29tbWFuZE1hcC5zaG93QmxvY2tzLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoY29yZS5fc3R5bGVDb21tYW5kTWFwLmNvZGVWaWV3LCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLmlzQ29kZVZpZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29yZS5faWZyYW1lQXV0byA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb3JlLnBsdWdpbnMgPSBfb3B0aW9ucy5wbHVnaW5zIHx8IGNvcmUucGx1Z2lucztcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VPcHRpb25zID0gW29wdGlvbnMsIF9vcHRpb25zXS5yZWR1Y2UoZnVuY3Rpb24gKGluaXQsIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24ob3B0aW9uLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAncGx1Z2lucycgJiYgb3B0aW9uW2tleV0gJiYgaW5pdFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpID0gaW5pdFtrZXldLCBvID0gb3B0aW9uW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLmxlbmd0aCA/IGkgOiBfdy5PYmplY3Qua2V5cyhpKS5tYXAoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gaVtuYW1lXTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBvLmxlbmd0aCA/IG8gOiBfdy5PYmplY3Qua2V5cyhvKS5tYXAoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gb1tuYW1lXTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRba2V5XSA9IChvLmZpbHRlcihmdW5jdGlvbih2YWwpIHsgcmV0dXJuIGkuaW5kZXhPZih2YWwpID09PSAtMTsgfSkpLmNvbmNhdChpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0W2tleV0gPSBvcHRpb25ba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdDtcclxuICAgICAgICAgICAgfSwge30pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZWwgPSBjb250ZXh0LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IF9pbml0SFRNTCA9IGVsLnd5c2l3eWcuaW5uZXJIVE1MO1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IG9wdGlvblxyXG4gICAgICAgICAgICBjb25zdCBjb25zID0gX0NvbnN0cnVjdG9yLl9zZXRPcHRpb25zKG1lcmdlT3B0aW9ucywgY29udGV4dCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29ucy5jYWxsQnV0dG9ucykge1xyXG4gICAgICAgICAgICAgICAgcGx1Z2luQ2FsbEJ1dHRvbnMgPSBjb25zLmNhbGxCdXR0b25zO1xyXG4gICAgICAgICAgICAgICAgY29yZS5pbml0UGx1Z2lucyA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29ucy5wbHVnaW5zKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLnBsdWdpbnMgPSBwbHVnaW5zID0gY29ucy5wbHVnaW5zO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyByZXNldCBjb250ZXh0XHJcbiAgICAgICAgICAgIGlmIChlbC5fbWVudVRyYXkuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB0aGlzLl9tZW51VHJheSA9IHt9O1xyXG4gICAgICAgICAgICBfcmVzcG9uc2l2ZUJ1dHRvbnMgPSBjb25zLnRvb2xiYXIucmVzcG9uc2l2ZUJ1dHRvbnM7XHJcbiAgICAgICAgICAgIGNvcmUub3B0aW9ucyA9IG9wdGlvbnMgPSBtZXJnZU9wdGlvbnM7XHJcbiAgICAgICAgICAgIGNvcmUubGFuZyA9IGxhbmcgPSBvcHRpb25zLmxhbmc7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGVsLnd5c2l3eWdGcmFtZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuX3NldElmcmFtZURvY3VtZW50KHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuX3NldE9wdGlvbnNJbml0KGVsLCBfaW5pdEhUTUwpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsLmVkaXRvckFyZWEuYXBwZW5kQ2hpbGQoZWwud3lzaXd5Z0ZyYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGNvcmUuX3NldE9wdGlvbnNJbml0KGVsLCBfaW5pdEhUTUwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCBcIm9wdGlvbnMuZGVmYXVsdFN0eWxlXCIgc3R5bGUuXHJcbiAgICAgICAgICogRGVmaW5lIHRoZSBzdHlsZSBvZiB0aGUgZWRpdCBhcmVhXHJcbiAgICAgICAgICogSXQgY2FuIGFsc28gYmUgZGVmaW5lZCB3aXRoIHRoZSBcInNldE9wdGlvbnNcIiBtZXRob2QsIGJ1dCB0aGUgXCJzZXREZWZhdWx0U3R5bGVcIiBtZXRob2QgZG9lcyBub3QgcmVuZGVyIHRoZSBlZGl0b3IgYWdhaW4uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0eWxlIFN0eWxlIHN0cmluZ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldERlZmF1bHRTdHlsZTogZnVuY3Rpb24gKHN0eWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0eWxlcyA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcyA9IHV0aWwuX3NldERlZmF1bHRPcHRpb25TdHlsZShvcHRpb25zLCBzdHlsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gY29udGV4dC5lbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgLy8gdG9wIGFyZWFcclxuICAgICAgICAgICAgZWwudG9wQXJlYS5zdHlsZS5jc3NUZXh0ID0gbmV3U3R5bGVzLnRvcDtcclxuICAgICAgICAgICAgLy8gY29kZSB2aWV3XHJcbiAgICAgICAgICAgIGVsLmNvZGUuc3R5bGUuY3NzVGV4dCA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcy5mcmFtZTtcclxuICAgICAgICAgICAgZWwuY29kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgZWwuY29kZS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwuY29kZS5zdHlsZS5vdmVyZmxvdyA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHd5c2l3eWcgZnJhbWVcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZWwud3lzaXd5Z0ZyYW1lLnN0eWxlLmNzc1RleHQgPSBuZXdTdHlsZXMuZnJhbWUgKyBuZXdTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwud3lzaXd5Z0ZyYW1lLnN0eWxlLmNzc1RleHQgPSBuZXdTdHlsZXMuZnJhbWU7XHJcbiAgICAgICAgICAgICAgICBlbC53eXNpd3lnLnN0eWxlLmNzc1RleHQgPSBuZXdTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gYSBub3RpY2UgYXJlYVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIE5vdGljZSBtZXNzYWdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbm90aWNlT3BlbjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgY29yZS5ub3RpY2Uub3Blbi5jYWxsKGNvcmUsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZSBhIG5vdGljZSBhcmVhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbm90aWNlQ2xvc2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29yZS5ub3RpY2UuY2xvc2UuY2FsbChjb3JlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29weWluZyB0aGUgY29udGVudHMgb2YgdGhlIGVkaXRvciB0byB0aGUgb3JpZ2luYWwgdGV4dGFyZWEgYW5kIGV4ZWN1dGUgb25TYXZlIGNhbGxiYWNrXHJcbiAgICAgICAgICogKiBub3Qgd29ya2luZyBkdXJpbmcgZW5hYmxlZCBjb2RlVmlldyBtb2RlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50cyA9IGNvcmUuZ2V0Q29udGVudHMoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudC52YWx1ZSA9IGNvbnRlbnRzO1xyXG4gICAgICAgICAgICBldmVudC5vblNhdmVfd3lzaXd5Zyhjb250ZW50cywgY29yZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIHN1bmVkaXRvcidzIGNvbnRleHQgb2JqZWN0LiBDb250YWlucyBzZXR0aW5ncywgcGx1Z2lucywgYW5kIGNhY2hlZCBlbGVtZW50IG9iamVjdHNcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKiAqIG5vdCB3b3JraW5nIGR1cmluZyBlbmFibGVkIGNvZGVWaWV3IG1vZGVcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9ubHlDb250ZW50cyAtIFJldHVybiBvbmx5IHRoZSBjb250ZW50cyBvZiB0aGUgYm9keSB3aXRob3V0IGhlYWRlcnMgd2hlbiB0aGUgXCJmdWxsUGFnZVwiIG9wdGlvbiBpcyB0cnVlXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRDb250ZW50czogZnVuY3Rpb24gKG9ubHlDb250ZW50cykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29yZS5nZXRDb250ZW50cyhvbmx5Q29udGVudHMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIG9ubHkgdGhlIHRleHQgb2YgdGhlIHN1bmVkaXRvciBjb250ZW50c1xyXG4gICAgICAgICAqICogbm90IHdvcmtpbmcgZHVyaW5nIGVuYWJsZWQgY29kZVZpZXcgbW9kZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0VGV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgZWRpdG9yJ3MgbnVtYmVyIG9mIGNoYXJhY3RlcnMgb3IgYmluYXJ5IGRhdGEgc2l6ZS5cclxuICAgICAgICAgKiBZb3UgY2FuIHVzZSB0aGUgXCJjaGFyQ291bnRlclR5cGVcIiBvcHRpb24gZm9ybWF0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IGNoYXJDb3VudGVyVHlwZSBvcHRpb25zIC0gY2hhckNvdW50ZXJUeXBlICgnY2hhcicsICdieXRlJywgJ2J5dGUtaHRtbCcpXHJcbiAgICAgICAgICogSWYgYXJndW1lbnQgaXMgbm8gdmFsdWUsIHRoZSBjdXJyZW50bHkgc2V0IFwiY2hhckNvdW50ZXJUeXBlXCIgb3B0aW9uIGlzIHVzZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRDaGFyQ291bnQ6IGZ1bmN0aW9uIChjaGFyQ291bnRlclR5cGUpIHtcclxuICAgICAgICAgICAgY2hhckNvdW50ZXJUeXBlID0gdHlwZW9mIGNoYXJDb3VudGVyVHlwZSA9PT0gJ3N0cmluZycgPyBjaGFyQ291bnRlclR5cGUgOiBvcHRpb25zLmNoYXJDb3VudGVyVHlwZTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvcmUuZ2V0Q2hhckxlbmd0aCgoY29yZS5fY2hhclR5cGVIVE1MID8gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuaW5uZXJIVE1MIDogY29udGV4dC5lbGVtZW50Lnd5c2l3eWcudGV4dENvbnRlbnQpLCBjaGFyQ291bnRlclR5cGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHVwbG9hZGVkIGltYWdlcyBpbmZvcm1hdGlvbnNcclxuICAgICAgICAgKiAtIGluZGV4OiBkYXRhIGluZGV4XHJcbiAgICAgICAgICogLSBuYW1lOiBmaWxlIG5hbWVcclxuICAgICAgICAgKiAtIHNpemU6IGZpbGUgc2l6ZVxyXG4gICAgICAgICAqIC0gc2VsZWN0OiBzZWxlY3QgZnVuY3Rpb25cclxuICAgICAgICAgKiAtIGRlbGV0ZTogZGVsZXRlIGZ1bmN0aW9uXHJcbiAgICAgICAgICogLSBlbGVtZW50OiB0YXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIC0gc3JjOiBzcmMgYXR0cmlidXRlIG9mIHRhZ1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRJbWFnZXNJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmltYWdlID8gY29udGV4dC5pbWFnZS5faW5mb0xpc3QgOiBbXTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB1cGxvYWRlZCBmaWxlcyhwbHVnaW4gdXNpbmcgZmlsZU1hbmFnZXIpIGluZm9ybWF0aW9uIGxpc3QuXHJcbiAgICAgICAgICogaW1hZ2U6IFtpbWddLCB2aWRlbzogW3ZpZGVvLCBpZnJhbWVdLCBhdWRpbzogW2F1ZGlvXVxyXG4gICAgICAgICAqIFdoZW4gdGhlIGFyZ3VtZW50IHZhbHVlIGlzICdpbWFnZScsIGl0IGlzIHRoZSBzYW1lIGZ1bmN0aW9uIGFzIFwiZ2V0SW1hZ2VzSW5mb1wiLlxyXG4gICAgICAgICAqIC0gaW5kZXg6IGRhdGEgaW5kZXhcclxuICAgICAgICAgKiAtIG5hbWU6IGZpbGUgbmFtZVxyXG4gICAgICAgICAqIC0gc2l6ZTogZmlsZSBzaXplXHJcbiAgICAgICAgICogLSBzZWxlY3Q6IHNlbGVjdCBmdW5jdGlvblxyXG4gICAgICAgICAqIC0gZGVsZXRlOiBkZWxldGUgZnVuY3Rpb25cclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IHRhcmdldCBlbGVtZW50XHJcbiAgICAgICAgICogLSBzcmM6IHNyYyBhdHRyaWJ1dGUgb2YgdGFnXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWUgKGltYWdlLCB2aWRlbywgYXVkaW8pXHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEZpbGVzSW5mbzogZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHRbcGx1Z2luTmFtZV0gPyBjb250ZXh0W3BsdWdpbk5hbWVdLl9pbmZvTGlzdCA6IFtdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBVcGxvYWQgaW1hZ2VzIHVzaW5nIGltYWdlIHBsdWdpblxyXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZUxpc3R9IGZpbGVzIEZpbGVMaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0SW1hZ2U6IGZ1bmN0aW9uIChmaWxlcykge1xyXG4gICAgICAgICAgICBpZiAoIWNvcmUucGx1Z2lucy5pbWFnZSB8fCAhZmlsZXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29yZS5pbml0UGx1Z2lucy5pbWFnZSkgY29yZS5jYWxsUGx1Z2luKCdpbWFnZScsIGNvcmUucGx1Z2lucy5pbWFnZS5zdWJtaXRBY3Rpb24uYmluZChjb3JlLCBmaWxlcyksIG51bGwpO1xyXG4gICAgICAgICAgICBlbHNlIGNvcmUucGx1Z2lucy5pbWFnZS5zdWJtaXRBY3Rpb24uY2FsbChjb3JlLCBmaWxlcyk7XHJcbiAgICAgICAgICAgIGNvcmUuZm9jdXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyBhbiBIVE1MIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgb3IgcGxhaW4gc3RyaW5nIGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGh0bWwgSFRNTCBFbGVtZW50IG9yIEhUTUwgc3RyaW5nIG9yIHBsYWluIHN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbm90Q2xlYW5pbmdEYXRhIElmIHRydWUsIGluc2VydHMgdGhlIEhUTUwgc3RyaW5nIHdpdGhvdXQgcmVmaW5pbmcgaXQgd2l0aCBjb3JlLmNsZWFuSFRNTC5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrQ2hhckNvdW50IElmIHRydWUsIGlmIFwib3B0aW9ucy5tYXhDaGFyQ291bnRcIiBpcyBleGNlZWRlZCB3aGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBudWxsIGlzIHJldHVybmVkIHdpdGhvdXQgYWRkaXRpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByYW5nZVNlbGVjdGlvbiBJZiB0cnVlLCByYW5nZSBzZWxlY3QgdGhlIGluc2VydGVkIG5vZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0SFRNTDogZnVuY3Rpb24gKGh0bWwsIG5vdENsZWFuaW5nRGF0YSwgY2hlY2tDaGFyQ291bnQsIHJhbmdlU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICghY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5jb250YWlucyhjb3JlLmdldFNlbGVjdGlvbigpLmZvY3VzTm9kZSkpIGNvcmUuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbm90Q2xlYW5pbmdEYXRhKSBodG1sID0gY29yZS5jbGVhbkhUTUwoaHRtbCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwodXRpbC5nZXRGb3JtYXRFbGVtZW50KGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpLCBudWxsKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9tID0gX2QuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbVRyZWUgPSBkb20uY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuX2lzRm9ybWF0RGF0YShkb21UcmVlKSkgaHRtbCA9IGNvcmUuX2NvbnZlcnRMaXN0Q2VsbChkb21UcmVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbSA9IF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbVRyZWUgPSBkb20uY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrQ2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBjb3JlLl9jaGFyVHlwZUhUTUwgPyAnb3V0ZXJIVE1MJyA6ICd0ZXh0Q29udGVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGVja0hUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRvbVRyZWUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrSFRNTCArPSBkb21UcmVlW2ldW3R5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29yZS5jaGVja0NoYXJDb3VudChjaGVja0hUTUwsIG51bGwpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYywgYSwgdCwgcHJldiwgZmlyc3RDb247XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjID0gZG9tVHJlZVswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgJiYgcHJldi5ub2RlVHlwZSA9PT0gMyAmJiBhICYmIGEubm9kZVR5cGUgPT09IDEgJiYgdXRpbC5pc0JyZWFrKGMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBjb3JlLmluc2VydE5vZGUoYywgYSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gdC5jb250YWluZXIgfHwgdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdENvbikgZmlyc3RDb24gPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gYztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2Lm5vZGVUeXBlID09PSAzICYmIGEubm9kZVR5cGUgPT09IDEpIGEgPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGEubm9kZVR5cGUgPT09IDMgPyAodC5lbmRPZmZzZXQgfHwgYS50ZXh0Q29udGVudC5sZW5ndGgpOiBhLmNoaWxkTm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZVNlbGVjdGlvbikgY29yZS5zZXRSYW5nZShmaXJzdENvbi5jb250YWluZXIgfHwgZmlyc3RDb24sIGZpcnN0Q29uLnN0YXJ0T2Zmc2V0IHx8IDAsIGEsIG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBjb3JlLnNldFJhbmdlKGEsIG9mZnNldCwgYSwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuaXNEaXNhYmxlZCB8fCBjb3JlLmlzUmVhZE9ubHkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuaW5zZXJ0SFRNTC5mYWlsXSAnICsgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuZXhlY0NvbW1hbmQoJ2luc2VydEhUTUwnLCBmYWxzZSwgaHRtbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChodG1sKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaW5zZXJ0Q29tcG9uZW50KGh0bWwsIGZhbHNlLCBjaGVja0NoYXJDb3VudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoaHRtbCkgfHwgdXRpbC5pc01lZGlhKGh0bWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChjb3JlLmdldFNlbGVjdGlvbk5vZGUoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaW5zZXJ0Tm9kZShodG1sLCBhZnRlck5vZGUsIGNoZWNrQ2hhckNvdW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29yZS5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgY29yZS5mb2N1cygpO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoYW5nZSB0aGUgY29udGVudHMgb2YgdGhlIHN1bmVkaXRvclxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfHVuZGVmaW5lZH0gY29udGVudHMgQ29udGVudHMgdG8gSW5wdXRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRDb250ZW50czogZnVuY3Rpb24gKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGNvcmUuc2V0Q29udGVudHMoY29udGVudHMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGQgY29udGVudHMgdG8gdGhlIHN1bmVkaXRvclxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZW50cyBDb250ZW50cyB0byBJbnB1dFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFwcGVuZENvbnRlbnRzOiBmdW5jdGlvbiAoY29udGVudHMpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udmVydFZhbHVlID0gY29yZS5jb252ZXJ0Q29udGVudHNGb3JFZGl0b3IoY29udGVudHMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb3JlLl92YXJpYWJsZS5pc0NvZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gdXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgICAgIHRlbXAuaW5uZXJIVE1MID0gY29udmVydFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHd5c2l3eWcgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGVtcC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbltpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3eXNpd3lnLmFwcGVuZENoaWxkKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9zZXRDb2RlVmlldyhjb3JlLl9nZXRDb2RlVmlldygpICsgJ1xcbicgKyBjb3JlLmNvbnZlcnRIVE1MRm9yQ29kZVZpZXcoY29udmVydFZhbHVlLCBmYWxzZSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU3dpdGNoIHRvIG9yIG9mZiBcIlJlYWRPbmx5XCIgbW9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlIFwicmVhZE9ubHlcIiBib29sZWFuIHZhbHVlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlYWRPbmx5OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgY29yZS5pc1JlYWRPbmx5ID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICB1dGlsLnNldERpc2FibGVkQnV0dG9ucyghIXZhbHVlLCBjb3JlLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLyoqIG9mZiBtZW51cyAqL1xyXG4gICAgICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuc3VibWVudUFjdGl2ZUJ1dHRvbiAmJiBjb3JlLnN1Ym1lbnVBY3RpdmVCdXR0b24uZGlzYWJsZWQpIGNvcmUuc3VibWVudU9mZigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuX21vcmVMYXllckFjdGl2ZUJ1dHRvbiAmJiBjb3JlLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24uZGlzYWJsZWQpIGNvcmUubW9yZUxheWVyT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5jb250YWluZXJBY3RpdmVCdXR0b24gJiYgY29yZS5jb250YWluZXJBY3RpdmVCdXR0b24uZGlzYWJsZWQpIGNvcmUuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5tb2RhbEZvcm0pIGNvcmUucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbChjb3JlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5zZXRBdHRyaWJ1dGUoXCJyZWFkT25seVwiLCBcInRydWVcIik7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUsICdzZS1yZWFkLW9ubHknKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnJlbW92ZUF0dHJpYnV0ZShcInJlYWRPbmx5XCIpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLCAnc2UtcmVhZC1vbmx5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5zZXRPcHRpb24oJ3JlYWRPbmx5JywgISF2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERpc2FibGUgdGhlIHN1bmVkaXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy50b29sYmFyLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgdGhpcy53eXNpd3lnLmRpc2FibGUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAzLjAuMCB2ZXJzaW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVuYWJsZSB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZW5hYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhci5lbmFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy53eXNpd3lnLmVuYWJsZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIDMuMC4wIHZlcnNpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICBlbmFibGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgdGhlIHN1bmVkaXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgdG9wQXJlYVN0eWxlID0gY29udGV4dC5lbGVtZW50LnRvcEFyZWEuc3R5bGU7XHJcbiAgICAgICAgICAgIGlmICh0b3BBcmVhU3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB0b3BBcmVhU3R5bGUuZGlzcGxheSA9IG9wdGlvbnMuZGlzcGxheTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSGlkZSB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXN0cm95IHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8qKiBvZmYgbWVudXMgKi9cclxuICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgaWYgKGNvcmUubm90aWNlKSBjb3JlLm5vdGljZS5jbG9zZS5jYWxsKGNvcmUpO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5tb2RhbEZvcm0pIGNvcmUucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbChjb3JlKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiByZW1vdmUgaGlzdG9yeSAqL1xyXG4gICAgICAgICAgICBjb3JlLmhpc3RvcnkuX2Rlc3Ryb3koKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiByZW1vdmUgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgICAgIGV2ZW50Ll9yZW1vdmVFdmVudCgpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlbW92ZSBlbGVtZW50ICovXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShjb250ZXh0LmVsZW1lbnQudG9vbGJhcik7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShjb250ZXh0LmVsZW1lbnQudG9wQXJlYSk7XHJcblxyXG4gICAgICAgICAgICAvKiogcmVtb3ZlIG9iamVjdCByZWZlcmVuY2UgKi9cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBjb3JlLmZ1bmN0aW9ucykgeyBpZiAodXRpbC5oYXNPd24oY29yZSwgaykpIGRlbGV0ZSBjb3JlLmZ1bmN0aW9uc1trXTsgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGNvcmUpIHsgaWYgKHV0aWwuaGFzT3duKGNvcmUsIGspKSBkZWxldGUgY29yZVtrXTsgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGV2ZW50KSB7IGlmICh1dGlsLmhhc093bihldmVudCwgaykpIGRlbGV0ZSBldmVudFtrXTsgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGNvbnRleHQpIHsgaWYgKHV0aWwuaGFzT3duKGNvbnRleHQsIGspKSBkZWxldGUgY29udGV4dFtrXTsgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIHBsdWdpbkNhbGxCdXR0b25zKSB7IGlmICh1dGlsLmhhc093bihwbHVnaW5DYWxsQnV0dG9ucywgaykpIGRlbGV0ZSBwbHVnaW5DYWxsQnV0dG9uc1trXTsgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHJlbW92ZSB1c2VyIG9iamVjdCAqL1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIHRoaXMpIHsgaWYgKHV0aWwuaGFzT3duKHRoaXMsIGspKSBkZWxldGUgdGhpc1trXTsgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUb29sYmFyIG1ldGhvZHNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGlzYWJsZSB0aGUgdG9vbGJhclxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLyoqIG9mZiBtZW51cyAqL1xyXG4gICAgICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLm1vcmVMYXllck9mZigpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5jb250YWluZXJPZmYoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRvb2wuY292ZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMy4wLjAgdmVyc2lvblxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbmFibGUgdGhlIHRvb2xiYXJcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGVuYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC50b29sLmNvdmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMy4wLjAgdmVyc2lvblxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZW5hYmxlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmFibGUoKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyB0aGUgdG9vbGJhclxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuX2lzSW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX3N0aWNreUR1bW15LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBldmVudC5vblJlc2l6ZV93aW5kb3coKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gSGlkZSB0aGUgdG9vbGJhclxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuX2lzSW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2hpZGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9zdGlja3lEdW1teS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGV2ZW50Lm9uUmVzaXplX3dpbmRvdygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBXeXNpd3lnIG1ldGhvZHNcclxuICAgICAgICAgKi9cclxuICAgICAgICB3eXNpd3lnOiB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGlzYWJsZSB0aGUgd3lzaXd5ZyBhcmVhXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvKiogb2ZmIG1lbnVzICovXHJcbiAgICAgICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5tb2RhbEZvcm0pIGNvcmUucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbChjb3JlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuaXNEaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5zZXRPcHRpb24oJ3JlYWRPbmx5JywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gRW5hYmxlIHRoZSB3eXNpd3lnIGFyZWFcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGVuYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuaXNEaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3Iuc2V0T3B0aW9uKCdyZWFkT25seScsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqKioqKioqKioqKiBDb3JlIGluaXQgKioqKioqKioqKioqL1xyXG4gICAgLy8gZnVuY3Rpb25zXHJcbiAgICBjb3JlLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcclxuICAgIGNvcmUub3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRvIHNpYmxpbmcgbm9kZVxyXG4gICAgbGV0IGNvbnRleHRFbCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgIGxldCBvcmlnaW5FbCA9IGNvbnRleHRFbC5vcmlnaW5FbGVtZW50O1xyXG4gICAgbGV0IHRvcEVsID0gY29udGV4dEVsLnRvcEFyZWE7XHJcbiAgICBvcmlnaW5FbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgdG9wRWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgLy8gaW5pdFxyXG4gICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgY29udGV4dEVsLnd5c2l3eWdGcmFtZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1dGlsLl9zZXRJZnJhbWVEb2N1bWVudCh0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgY29yZS5fZWRpdG9ySW5pdChmYWxzZSwgb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgICAgIG9wdGlvbnMudmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGluc2VydCBlZGl0b3IgZWxlbWVudFxyXG4gICAgaWYgKHR5cGVvZiBvcmlnaW5FbC5uZXh0RWxlbWVudFNpYmxpbmcgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgb3JpZ2luRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodG9wRWwsIG9yaWdpbkVsLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9yaWdpbkVsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodG9wRWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHRFbC5lZGl0b3JBcmVhLmFwcGVuZENoaWxkKGNvbnRleHRFbC53eXNpd3lnRnJhbWUpO1xyXG4gICAgY29udGV4dEVsID0gb3JpZ2luRWwgPSB0b3BFbCA9IG51bGw7XHJcblxyXG4gICAgLy8gaW5pdFxyXG4gICAgaWYgKCFvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgIGNvcmUuX2VkaXRvckluaXQoZmFsc2UsIG9wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIG9wdGlvbnMudmFsdWUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbnM7XHJcbn0iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE5IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvcmUsIGNoYW5nZSkge1xyXG4gICAgY29uc3QgX3cgPSBjb3JlLl93O1xyXG4gICAgY29uc3QgdXRpbCA9IGNvcmUudXRpbDtcclxuICAgIGNvbnN0IGRlbGF5VGltZSA9IGNvcmUub3B0aW9ucy5oaXN0b3J5U3RhY2tEZWxheVRpbWU7XHJcbiAgICBsZXQgZWRpdG9yID0gY29yZS5jb250ZXh0LmVsZW1lbnQ7XHJcbiAgICBsZXQgdW5kbyA9IGNvcmUuY29udGV4dC50b29sLnVuZG87XHJcbiAgICBsZXQgcmVkbyA9IGNvcmUuY29udGV4dC50b29sLnJlZG87XHJcblxyXG4gICAgbGV0IHB1c2hEZWxheSA9IG51bGw7XHJcbiAgICBsZXQgc3RhY2tJbmRleCA9IDA7XHJcbiAgICBsZXQgc3RhY2sgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXRDb250ZW50c0Zyb21TdGFjayAoKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHN0YWNrW3N0YWNrSW5kZXhdO1xyXG4gICAgICAgIGVkaXRvci53eXNpd3lnLmlubmVySFRNTCA9IGl0ZW0uY29udGVudHM7XHJcblxyXG4gICAgICAgIGNvcmUuc2V0UmFuZ2UodXRpbC5nZXROb2RlRnJvbVBhdGgoaXRlbS5zLnBhdGgsIGVkaXRvci53eXNpd3lnKSwgaXRlbS5zLm9mZnNldCwgdXRpbC5nZXROb2RlRnJvbVBhdGgoaXRlbS5lLnBhdGgsIGVkaXRvci53eXNpd3lnKSwgaXRlbS5lLm9mZnNldCk7XHJcbiAgICAgICAgY29yZS5mb2N1cygpO1xyXG5cclxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgICAgaWYgKHVuZG8pIHVuZG8uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAocmVkbykgcmVkby5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHN0YWNrSW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh1bmRvKSB1bmRvLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWRvKSByZWRvLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFja0luZGV4ID09PSBzdGFjay5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodW5kbykgdW5kby5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVkbykgcmVkby5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodW5kbykgdW5kby5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVkbykgcmVkby5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICBjb3JlLl9jaGVja0NvbXBvbmVudHMoKTtcclxuICAgICAgICBjb3JlLl9zZXRDaGFyQ291bnQoKTtcclxuICAgICAgICBjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIG9uQ2hhbmdlXHJcbiAgICAgICAgY2hhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHVzaFN0YWNrICgpIHtcclxuICAgICAgICBjb3JlLl9jaGVja0NvbXBvbmVudHMoKTtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gZWRpdG9yLnd5c2l3eWcuaW5uZXJIVE1MO1xyXG4gICAgICAgIGlmICghY3VycmVudCB8fCAoISFzdGFja1tzdGFja0luZGV4XSAmJiBjdXJyZW50ID09PSBzdGFja1tzdGFja0luZGV4XS5jb250ZW50cykpIHJldHVybjtcclxuXHJcbiAgICAgICAgc3RhY2tJbmRleCsrO1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5fdmFyaWFibGUuX3JhbmdlO1xyXG5cclxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gc3RhY2tJbmRleCkge1xyXG4gICAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIHN0YWNrSW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAocmVkbykgcmVkby5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXJhbmdlKSB7XHJcbiAgICAgICAgICAgIHN0YWNrW3N0YWNrSW5kZXhdID0ge1xyXG4gICAgICAgICAgICAgICAgY29udGVudHM6IGN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICBzOiB7IHBhdGg6IFswLCAwXSwgb2Zmc2V0OiBbMCwgMF0gfSxcclxuICAgICAgICAgICAgICAgIGU6IHsgcGF0aDogMCwgb2Zmc2V0OiAwIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFja1tzdGFja0luZGV4XSA9IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBjdXJyZW50LFxyXG4gICAgICAgICAgICAgICAgczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IHV0aWwuZ2V0Tm9kZVBhdGgocmFuZ2Uuc3RhcnRDb250YWluZXIsIG51bGwsIG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogcmFuZ2Uuc3RhcnRPZmZzZXRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogdXRpbC5nZXROb2RlUGF0aChyYW5nZS5lbmRDb250YWluZXIsIG51bGwsIG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogcmFuZ2UuZW5kT2Zmc2V0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhY2tJbmRleCA9PT0gMSAmJiB1bmRvKSB1bmRvLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgY29yZS5fc2V0Q2hhckNvdW50KCk7XHJcbiAgICAgICAgLy8gb25DaGFuZ2VcclxuICAgICAgICBjaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBIaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhY2s6IHN0YWNrLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2F2aW5nIHRoZSBjdXJyZW50IHN0YXR1cyB0byB0aGUgaGlzdG9yeSBvYmplY3Qgc3RhY2tcclxuICAgICAgICAgKiBJZiBcImRlbGF5XCIgaXMgdHJ1ZSwgaXQgd2lsbCBiZSBzYXZlZCBhZnRlciAob3B0aW9ucy5oaXN0b3J5U3RhY2tEZWxheVRpbWUgfHwgNDAwKSBtaWxpc2Vjb25kc1xyXG4gICAgICAgICAqIElmIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gd2l0aCB0aGUgXCJkZWxheVwiIGFyZ3VtZW50IHRydWUgYmVmb3JlIGl0IGlzIHNhdmVkLCB0aGUgZGVsYXkgdGltZSBpcyByZW5ld2FsXHJcbiAgICAgICAgICogWW91IGNhbiBzcGVjaWZ5IHRoZSBkZWxheSB0aW1lIGJ5IHNlbmRpbmcgYSBudW1iZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gZGVsYXkgSWYgdHJ1ZSwgQWRkIHN0YWNrIHdpdGhvdXQgZGVsYXkgdGltZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdXNoOiBmdW5jdGlvbiAoZGVsYXkpIHtcclxuICAgICAgICAgICAgX3cuc2V0VGltZW91dChjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgY29uc3QgdGltZSA9IHR5cGVvZiBkZWxheSA9PT0gJ251bWJlcicgPyAoZGVsYXkgPiAwID8gZGVsYXkgOiAwKSA6ICghZGVsYXkgPyAwIDogZGVsYXlUaW1lKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghdGltZSB8fCBwdXNoRGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIF93LmNsZWFyVGltZW91dChwdXNoRGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFN0YWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwdXNoRGVsYXkgPSBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF93LmNsZWFyVGltZW91dChwdXNoRGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgcHVzaERlbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHB1c2hTdGFjaygpO1xyXG4gICAgICAgICAgICB9LCB0aW1lKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVW5kbyBmdW5jdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHVuZG86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWNrSW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFja0luZGV4LS07XHJcbiAgICAgICAgICAgICAgICBzZXRDb250ZW50c0Zyb21TdGFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlZG8gZnVuY3Rpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWRvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggLSAxID4gc3RhY2tJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgc3RhY2tJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgc2V0Q29udGVudHNGcm9tU3RhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHbyB0byB0aGUgaGlzdG9yeSBzdGFjayBmb3IgdGhhdCBpbmRleC5cclxuICAgICAgICAgKiBJZiBcImluZGV4XCIgaXMgLTEsIGdvIHRvIHRoZSBsYXN0IHN0YWNrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ286IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICBzdGFja0luZGV4ID0gaW5kZXggPCAwID8gKHN0YWNrLmxlbmd0aCAtIDEpIDogaW5kZXg7XHJcbiAgICAgICAgICAgIHNldENvbnRlbnRzRnJvbVN0YWNrKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgY3VycmVudCBoaXN0b3J5IHN0YWNrIGluZGV4LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IEN1cnJlbnQgU3RhY2sgaW5kZXhcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRDdXJyZW50SW5kZXg6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrSW5kZXg7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXQgdGhlIGhpc3Rvcnkgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIChpZ25vcmVDaGFuZ2VFdmVudCkge1xyXG4gICAgICAgICAgICBpZiAodW5kbykgdW5kby5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmIChyZWRvKSByZWRvLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuaXNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLmNvbnRleHQudG9vbC5zYXZlKSBjb3JlLmNvbnRleHQudG9vbC5zYXZlLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YWNrLnNwbGljZSgwKTtcclxuICAgICAgICAgICAgc3RhY2tJbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBwdXNoU3RhY2tcclxuICAgICAgICAgICAgc3RhY2tbc3RhY2tJbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50czogY29yZS5nZXRDb250ZW50cyh0cnVlKSxcclxuICAgICAgICAgICAgICAgIHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBbMCwgMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IFswLCAwXSxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICghaWdub3JlQ2hhbmdlRXZlbnQpIGNoYW5nZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCB0aGUgZGlzYWJsZWQgc3RhdGUgb2YgdGhlIGJ1dHRvbnMgdG8gZml0IHRoZSBjdXJyZW50IHN0YWNrLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3Jlc2V0Q2FjaGluZ0J1dHRvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlZGl0b3IgPSBjb3JlLmNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgdW5kbyA9IGNvcmUuY29udGV4dC50b29sLnVuZG87XHJcbiAgICAgICAgICAgIHJlZG8gPSBjb3JlLmNvbnRleHQudG9vbC5yZWRvO1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YWNrSW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh1bmRvKSB1bmRvLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWRvICYmIHN0YWNrSW5kZXggPT09IHN0YWNrLmxlbmd0aCAtIDEpIHJlZG8uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuaXNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5jb250ZXh0LnRvb2wuc2F2ZSkgY29yZS5jb250ZXh0LnRvb2wuc2F2ZS5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2tJbmRleCA9PT0gc3RhY2subGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZG8pIHJlZG8uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSBhbGwgc3RhY2tzIGFuZCByZW1vdmUgdGhlIHRpbWVvdXQgZnVuY3Rpb24uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAocHVzaERlbGF5KSBfdy5jbGVhclRpbWVvdXQocHVzaERlbGF5KTtcclxuICAgICAgICAgICAgc3RhY2sgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0iLCIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgJy4vYXNzZXRzL2Nzcy9zdW5lZGl0b3IuY3NzJztcclxuaW1wb3J0ICcuL2Fzc2V0cy9jc3Mvc3VuZWRpdG9yLWNvbnRlbnRzLmNzcyc7XHJcblxyXG5pbXBvcnQgcGx1Z2lucyBmcm9tICcuL3BsdWdpbnMnO1xyXG5pbXBvcnQgc3VuZWRpdG9yIGZyb20gJy4vc3VuZWRpdG9yJztcclxuXHJcbmlmICghd2luZG93LlNVTkVESVRPUikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUicsIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiBzdW5lZGl0b3IuaW5pdCh7XHJcbiAgICAgICAgICAgIHBsdWdpbnM6IHBsdWdpbnNcclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn0iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xyXG4gICAgICAgICAgICBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOlxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF3LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVU5FRElUT1JfTU9EVUxFUyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGdsb2JhbCk7XHJcbiAgICB9XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0ge1xyXG4gICAgICAgIG5hbWU6ICdjb21wb25lbnQnLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgYSBjb250YWluZXIgZm9yIHRoZSByZXNpemluZyBjb21wb25lbnQgYW5kIGluc2VydCB0aGUgZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvdmVyIENvdmVyIGVsZW1lbnQgKEZJR1VSRSlcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIENsYXNzIG5hbWUgb2YgY29udGFpbmVyIChmaXhlZDogc2UtY29tcG9uZW50KVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtFbGVtZW50fSBDcmVhdGVkIGNvbnRhaW5lciBlbGVtZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0X2NvbnRhaW5lcjogZnVuY3Rpb24gKGNvdmVyLCBjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ3NlLWNvbXBvbmVudCAnICsgY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY292ZXIpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvdmVyIHRoZSB0YXJnZXQgZWxlbWVudCB3aXRoIGEgRklHVVJFIGVsZW1lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRhcmdldCBlbGVtZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0X2NvdmVyOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb3ZlciA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdGSUdVUkUnKTtcclxuICAgICAgICAgICAgY292ZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIGNvdmVyO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm4gSFRNTCBzdHJpbmcgb2YgY2FwdGlvbihGSUdDQVBUSU9OKSBlbGVtZW50XHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBjcmVhdGVfY2FwdGlvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjYXB0aW9uID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0ZJR0NBUFRJT04nKTtcclxuICAgICAgICAgICAgY2FwdGlvbi5pbm5lckhUTUwgPSAnPGRpdj4nICsgdGhpcy5sYW5nLmRpYWxvZ0JveC5jYXB0aW9uICsgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgIHJldHVybiBjYXB0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBub0dsb2JhbCA9PT0gdHlwZW9mIHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICghd2luZG93LlNVTkVESVRPUl9NT0RVTEVTKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdTVU5FRElUT1JfTU9EVUxFUycsIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVU5FRElUT1JfTU9EVUxFUywgJ2NvbXBvbmVudCcsIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB2YWx1ZTogY29tcG9uZW50XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvbXBvbmVudDtcclxufSkpOyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9NT0RVTEVTIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcclxuICAgIH1cclxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICh3aW5kb3csIG5vR2xvYmFsKSB7XHJcbiAgICBjb25zdCByZXNpemluZyA9IHtcclxuICAgICAgICBuYW1lOiAncmVzaXppbmcnLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb25zdHJ1Y3RvclxyXG4gICAgICAgICAqIFJlcXVpcmUgY29udGV4dCBwcm9wZXJ0aWVzIHdoZW4gcmVzaXppbmcgbW9kdWxlXHJcbiAgICAgICAgICAgIGlucHV0WDogRWxlbWVudCxcclxuICAgICAgICAgICAgaW5wdXRZOiBFbGVtZW50LFxyXG4gICAgICAgICAgICBfY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICBfY292ZXI6IG51bGwsXHJcbiAgICAgICAgICAgIF9lbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBfZWxlbWVudF93OiAxLFxyXG4gICAgICAgICAgICBfZWxlbWVudF9oOiAxLFxyXG4gICAgICAgICAgICBfZWxlbWVudF9sOiAwLFxyXG4gICAgICAgICAgICBfZWxlbWVudF90OiAwLFxyXG4gICAgICAgICAgICBfZGVmYXVsdFNpemVYOiAnYXV0bycsXHJcbiAgICAgICAgICAgIF9kZWZhdWx0U2l6ZVk6ICdhdXRvJyxcclxuICAgICAgICAgICAgX29yaWdpbl93OiBjb3JlLm9wdGlvbnMuaW1hZ2VXaWR0aCA9PT0gJ2F1dG8nID8gJycgOiBjb3JlLm9wdGlvbnMuaW1hZ2VXaWR0aCxcclxuICAgICAgICAgICAgX29yaWdpbl9oOiBjb3JlLm9wdGlvbnMuaW1hZ2VIZWlnaHQgPT09ICdhdXRvJyA/ICcnIDogY29yZS5vcHRpb25zLmltYWdlSGVpZ2h0LFxyXG4gICAgICAgICAgICBfcHJvcG9ydGlvbkNoZWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIC8vIC0tIHNlbGVjdCBmdW5jdGlvbiAtLVxyXG4gICAgICAgICAgICBfcmVzaXppbmc6IGNvcmUub3B0aW9ucy5pbWFnZVJlc2l6aW5nLFxyXG4gICAgICAgICAgICBfcmVzaXplRG90SGlkZTogIWNvcmUub3B0aW9ucy5pbWFnZUhlaWdodFNob3csXHJcbiAgICAgICAgICAgIF9yb3RhdGlvbjogY29yZS5vcHRpb25zLmltYWdlUm90YXRpb24sXHJcbiAgICAgICAgICAgIF9vbmx5UGVyY2VudGFnZTogY29yZS5vcHRpb25zLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlLFxyXG4gICAgICAgICAgICBfcmF0aW86IGZhbHNlLFxyXG4gICAgICAgICAgICBfcmF0aW9YOiAxLFxyXG4gICAgICAgICAgICBfcmF0aW9ZOiAxXHJcbiAgICAgICAgICAgIF9jYXB0aW9uU2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgLy8gLS0gd2hlbiB1c2VkIGNhcHRpb24gKF9jYXB0aW9uU2hvdzogdHJ1ZSkgLS1cclxuICAgICAgICAgICAgX2NhcHRpb246IG51bGwsXHJcbiAgICAgICAgICAgIF9jYXB0aW9uQ2hlY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNhcHRpb25DaGVja0VsOiBudWxsLFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc2l6aW5nID0ge1xyXG4gICAgICAgICAgICAgICAgX3Jlc2l6ZUNsaWVudFg6IDAsXHJcbiAgICAgICAgICAgICAgICBfcmVzaXplQ2xpZW50WTogMCxcclxuICAgICAgICAgICAgICAgIF9yZXNpemVfcGx1Z2luOiAnJyxcclxuICAgICAgICAgICAgICAgIF9yZXNpemVfdzogMCxcclxuICAgICAgICAgICAgICAgIF9yZXNpemVfaDogMCxcclxuICAgICAgICAgICAgICAgIF9vcmlnaW5fdzogMCxcclxuICAgICAgICAgICAgICAgIF9vcmlnaW5faDogMCxcclxuICAgICAgICAgICAgICAgIF9yb3RhdGVWZXJ0aWNhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBfcmVzaXplX2RpcmVjdGlvbjogJycsXHJcbiAgICAgICAgICAgICAgICBfbW92ZV9wYXRoOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgX2lzQ2hhbmdlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFsaWduSWNvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNpYzogaWNvbnMuYWxpZ25fanVzdGlmeSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBpY29ucy5hbGlnbl9sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBpY29ucy5hbGlnbl9yaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IGljb25zLmFsaWduX2NlbnRlclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlc2l6ZSBjb250cm9sbGVyLCBidXR0b24gKi9cclxuICAgICAgICAgICAgbGV0IHJlc2l6ZV9kaXZfY29udGFpbmVyID0gdGhpcy5zZXRDb250cm9sbGVyX3Jlc2l6ZShjb3JlKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5yZXNpemVDb250YWluZXIgPSByZXNpemVfZGl2X2NvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucmVzaXplRGl2ID0gcmVzaXplX2Rpdl9jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlLW1vZGFsLXJlc2l6ZScpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZURvdCA9IHJlc2l6ZV9kaXZfY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZS1yZXNpemUtZG90Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucmVzaXplRGlzcGxheSA9IHJlc2l6ZV9kaXZfY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZS1yZXNpemUtZGlzcGxheScpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc2l6ZV9idXR0b24gPSB0aGlzLnNldENvbnRyb2xsZXJfYnV0dG9uKGNvcmUpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZUJ1dHRvbiA9IHJlc2l6ZV9idXR0b247XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVzaXplX2hhbmRsZXMgPSBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZUhhbmRsZXMgPSBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZURvdC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucmVzaXplQnV0dG9uR3JvdXAgPSByZXNpemVfYnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfcmVzaXppbmdfYnRuX2dyb3VwJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucm90YXRpb25CdXR0b25zID0gcmVzaXplX2J1dHRvbi5xdWVyeVNlbGVjdG9yQWxsKCcuX3NlX3Jlc2l6aW5nX2J0bl9ncm91cCAuX3NlX3JvdGF0aW9uJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucGVyY2VudGFnZUJ1dHRvbnMgPSByZXNpemVfYnV0dG9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5fc2VfcmVzaXppbmdfYnRuX2dyb3VwIC5fc2VfcGVyY2VudGFnZScpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5hbGlnbk1lbnUgPSByZXNpemVfYnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJy5zZS1yZXNpemluZy1hbGlnbi1saXN0Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcuYWxpZ25NZW51TGlzdCA9IGNvbnRleHQucmVzaXppbmcuYWxpZ25NZW51LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5hbGlnbkJ1dHRvbiA9IHJlc2l6ZV9idXR0b24ucXVlcnlTZWxlY3RvcignLl9zZV9yZXNpemluZ19hbGlnbl9idXR0b24nKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5hdXRvU2l6ZUJ1dHRvbiA9IHJlc2l6ZV9idXR0b24ucXVlcnlTZWxlY3RvcignLl9zZV9yZXNpemluZ19idG5fZ3JvdXAgLl9zZV9hdXRvX3NpemUnKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5jYXB0aW9uQnV0dG9uID0gcmVzaXplX2J1dHRvbi5xdWVyeVNlbGVjdG9yKCcuX3NlX3Jlc2l6aW5nX2NhcHRpb25fYnV0dG9uJyk7XHJcblxyXG4gICAgICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgICAgICByZXNpemVfZGl2X2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pO1xyXG4gICAgICAgICAgICByZXNpemVfaGFuZGxlc1swXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duX3Jlc2l6ZV9oYW5kbGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9oYW5kbGVzWzFdLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd25fcmVzaXplX2hhbmRsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgcmVzaXplX2hhbmRsZXNbMl0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICByZXNpemVfaGFuZGxlc1szXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duX3Jlc2l6ZV9oYW5kbGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9oYW5kbGVzWzRdLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd25fcmVzaXplX2hhbmRsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgcmVzaXplX2hhbmRsZXNbNV0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICByZXNpemVfaGFuZGxlc1s2XS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duX3Jlc2l6ZV9oYW5kbGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9oYW5kbGVzWzddLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd25fcmVzaXplX2hhbmRsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgcmVzaXplX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja19yZXNpemVCdXR0b24uYmluZChjb3JlKSk7XHJcblxyXG4gICAgICAgICAgICAvKiogYXBwZW5kIGh0bWwgKi9cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKHJlc2l6ZV9kaXZfY29udGFpbmVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKHJlc2l6ZV9idXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgICAgICByZXNpemVfZGl2X2NvbnRhaW5lciA9IG51bGwsIHJlc2l6ZV9idXR0b24gPSBudWxsLCByZXNpemVfaGFuZGxlcyA9IG51bGw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqIHJlc2l6ZSBjb250cm9sbGVyLCBidXR0b24gKGltYWdlLCBpZnJhbWUsIHZpZGVvKSAqL1xyXG4gICAgICAgIHNldENvbnRyb2xsZXJfcmVzaXplOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNpemVfY29udGFpbmVyID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICAgICAgcmVzaXplX2NvbnRhaW5lci5jbGFzc05hbWUgPSAnc2UtY29udHJvbGxlciBzZS1yZXNpemluZy1jb250YWluZXInO1xyXG4gICAgICAgICAgICByZXNpemVfY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9jb250YWluZXIuaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1tb2RhbC1yZXNpemVcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtcmVzaXplLWRvdFwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwidGxcIj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJ0clwiPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImJsXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYnJcIj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJsd1wiPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInRoXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicndcIj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJiaFwiPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtcmVzaXplLWRpc3BsYXlcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc2l6ZV9jb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0Q29udHJvbGxlcl9idXR0b246IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGljb25zID0gY29yZS5pY29ucztcclxuICAgICAgICAgICAgY29uc3QgcmVzaXplX2J1dHRvbiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO1xyXG5cclxuICAgICAgICAgICAgcmVzaXplX2J1dHRvbi5jbGFzc05hbWUgPSBcInNlLWNvbnRyb2xsZXIgc2UtY29udHJvbGxlci1yZXNpemluZ1wiO1xyXG4gICAgICAgICAgICByZXNpemVfYnV0dG9uLmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYXJyb3cgc2UtYXJyb3ctdXBcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYnRuLWdyb3VwIF9zZV9yZXNpemluZ19idG5fZ3JvdXBcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJwZXJjZW50XCIgZGF0YS12YWx1ZT1cIjFcIiBjbGFzcz1cInNlLXRvb2x0aXAgX3NlX3BlcmNlbnRhZ2VcIj4nICtcclxuICAgICAgICAgICAgICAgICc8c3Bhbj4xMDAlPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yZXNpemUxMDAgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJwZXJjZW50XCIgZGF0YS12YWx1ZT1cIjAuNzVcIiBjbGFzcz1cInNlLXRvb2x0aXAgX3NlX3BlcmNlbnRhZ2VcIj4nICtcclxuICAgICAgICAgICAgICAgICc8c3Bhbj43NSU8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnJlc2l6ZTc1ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwicGVyY2VudFwiIGRhdGEtdmFsdWU9XCIwLjVcIiBjbGFzcz1cInNlLXRvb2x0aXAgX3NlX3BlcmNlbnRhZ2VcIj4nICtcclxuICAgICAgICAgICAgICAgICc8c3Bhbj41MCU8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnJlc2l6ZTUwICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiYXV0b1wiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX2F1dG9fc2l6ZVwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMuYXV0b19zaXplICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuYXV0b1NpemUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJyb3RhdGVcIiBkYXRhLXZhbHVlPVwiLTkwXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcCBfc2Vfcm90YXRpb25cIj4nICtcclxuICAgICAgICAgICAgICAgIGljb25zLnJvdGF0ZV9sZWZ0ICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIucm90YXRlTGVmdCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cInJvdGF0ZVwiIGRhdGEtdmFsdWU9XCI5MFwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3JvdGF0aW9uXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5yb3RhdGVfcmlnaHQgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yb3RhdGVSaWdodCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXBcIiBzdHlsZT1cInBhZGRpbmctdG9wOiAwO1wiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cIm1pcnJvclwiIGRhdGEtdmFsdWU9XCJoXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMubWlycm9yX2hvcml6b250YWwgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5taXJyb3JIb3Jpem9udGFsICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwibWlycm9yXCIgZGF0YS12YWx1ZT1cInZcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5taXJyb3JfdmVydGljYWwgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5taXJyb3JWZXJ0aWNhbCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cIm9uYWxpZ25cIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwIF9zZV9yZXNpemluZ19hbGlnbl9idXR0b25cIj4nICtcclxuICAgICAgICAgICAgICAgIGljb25zLmFsaWduX2p1c3RpZnkgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcudG9vbGJhci5hbGlnbiArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXAtc3ViIHN1bi1lZGl0b3ItY29tbW9uIHNlLWxpc3QtbGF5ZXIgc2UtcmVzaXppbmctYWxpZ24tbGlzdFwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLXRvb2x0aXBcIiBkYXRhLWNvbW1hbmQ9XCJhbGlnblwiIGRhdGEtdmFsdWU9XCJiYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMuYWxpZ25fanVzdGlmeSArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5kaWFsb2dCb3guYmFzaWMgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj48L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLXRvb2x0aXBcIiBkYXRhLWNvbW1hbmQ9XCJhbGlnblwiIGRhdGEtdmFsdWU9XCJsZWZ0XCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5hbGlnbl9sZWZ0ICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmRpYWxvZ0JveC5sZWZ0ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+PC9saT4nICtcclxuICAgICAgICAgICAgICAgICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCBzZS10b29sdGlwXCIgZGF0YS1jb21tYW5kPVwiYWxpZ25cIiBkYXRhLXZhbHVlPVwiY2VudGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5hbGlnbl9jZW50ZXIgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuZGlhbG9nQm94LmNlbnRlciArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JyArXHJcbiAgICAgICAgICAgICAgICAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3Qgc2UtdG9vbHRpcFwiIGRhdGEtY29tbWFuZD1cImFsaWduXCIgZGF0YS12YWx1ZT1cInJpZ2h0XCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5hbGlnbl9yaWdodCArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5kaWFsb2dCb3gucmlnaHQgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj48L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvdWw+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiY2FwdGlvblwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3Jlc2l6aW5nX2NhcHRpb25fYnV0dG9uXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5jYXB0aW9uICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmRpYWxvZ0JveC5jYXB0aW9uICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwicmV2ZXJ0XCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMucmV2ZXJ0ICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmRpYWxvZ0JveC5yZXZlcnRCdXR0b24gKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJ1cGRhdGVcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5tb2RpZnkgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5lZGl0ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiZGVsZXRlXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMuZGVsZXRlICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNpemVfYnV0dG9uO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSB3aWR0aCBzaXplXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRQbHVnaW4gY29udGV4dCBvYmplY3Qgb2YgcGx1Z2luIChjb3JlLmNvbnRleHRbcGx1Z2luXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvdmVyIENvdmVyIGVsZW1lbnQgKEZJR1VSRSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRhaW5lciBDb250YWluZXIgZWxlbWVudCAoRElWLnNlLWNvbXBvbmVudClcclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tb2R1bGVfZ2V0U2l6ZVg6IGZ1bmN0aW9uIChjb250ZXh0UGx1Z2luLCBlbGVtZW50LCBjb3ZlciwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGlmICghZWxlbWVudCkgZWxlbWVudCA9IGNvbnRleHRQbHVnaW4uX2VsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICghY292ZXIpIGNvdmVyID0gY29udGV4dFBsdWdpbi5fY292ZXI7XHJcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyKSBjb250YWluZXIgPSBjb250ZXh0UGx1Z2luLl9jb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybiAnJztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAhLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUud2lkdGgpID8gZWxlbWVudC5zdHlsZS53aWR0aCA6ICgoY29udGFpbmVyICYmIHRoaXMudXRpbC5nZXROdW1iZXIoY29udGFpbmVyLnN0eWxlLndpZHRoLCAyKSkgfHwgMTAwKSArICclJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgaGVpZ2h0IHNpemVcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFBsdWdpbiBjb250ZXh0IG9iamVjdCBvZiBwbHVnaW4gKGNvcmUuY29udGV4dFtwbHVnaW5dKVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY292ZXIgQ292ZXIgZWxlbWVudCAoRklHVVJFKVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY29udGFpbmVyIENvbnRhaW5lciBlbGVtZW50IChESVYuc2UtY29tcG9uZW50KVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX21vZHVsZV9nZXRTaXplWTogZnVuY3Rpb24gKGNvbnRleHRQbHVnaW4sIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpIHtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSBlbGVtZW50ID0gY29udGV4dFBsdWdpbi5fZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKCFjb3ZlcikgY292ZXIgPSBjb250ZXh0UGx1Z2luLl9jb3ZlcjtcclxuICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIGNvbnRhaW5lciA9IGNvbnRleHRQbHVnaW4uX2NvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyIHx8ICFjb3ZlcikgcmV0dXJuIChlbGVtZW50ICYmIGVsZW1lbnQuc3R5bGUuaGVpZ2h0KSB8fCAnJztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvdmVyLnN0eWxlLnBhZGRpbmdCb3R0b20sIDApID4gMCAmJiAhdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCA/IGNvdmVyLnN0eWxlLmhlaWdodCA6ICghLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUuaGVpZ2h0KSB8fCAhLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUud2lkdGgpID8gZWxlbWVudC5zdHlsZS5oZWlnaHQgOiAoKGNvbnRhaW5lciAmJiB0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvbnRhaW5lci5zdHlsZS5oZWlnaHQsIDIpKSB8fCAxMDApICsgJyUnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGF0IHRoZSBcIm9wZW5Nb2RpZnlcIiB0byBwdXQgdGhlIHNpemUgb2YgdGhlIGN1cnJlbnQgdGFyZ2V0IGludG8gdGhlIHNpemUgaW5wdXQgZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFBsdWdpbiBjb250ZXh0IG9iamVjdCBvZiBwbHVnaW4gKGNvcmUuY29udGV4dFtwbHVnaW5dKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW5PYmogUGx1Z2luIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tb2R1bGVfc2V0TW9kaWZ5SW5wdXRTaXplOiBmdW5jdGlvbiAoY29udGV4dFBsdWdpbiwgcGx1Z2luT2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VSb3RhdGlvbiA9IGNvbnRleHRQbHVnaW4uX29ubHlQZXJjZW50YWdlICYmIHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWw7XHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4ucHJvcG9ydGlvbi5jaGVja2VkID0gY29udGV4dFBsdWdpbi5fcHJvcG9ydGlvbkNoZWNrZWQgPSBjb250ZXh0UGx1Z2luLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9wb3J0aW9uJykgIT09ICdmYWxzZSc7XHJcblxyXG4gICAgICAgICAgICBsZXQgeCA9IHBlcmNlbnRhZ2VSb3RhdGlvbiA/ICcnIDogdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfZ2V0U2l6ZVguY2FsbCh0aGlzLCBjb250ZXh0UGx1Z2luKTtcclxuICAgICAgICAgICAgaWYgKHggPT09IGNvbnRleHRQbHVnaW4uX2RlZmF1bHRTaXplWCkgeCA9ICcnO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UpIHggPSB0aGlzLnV0aWwuZ2V0TnVtYmVyKHgsIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSA9IHg7XHJcbiAgICAgICAgICAgIHBsdWdpbk9iai5zZXRJbnB1dFNpemUuY2FsbCh0aGlzLCAneCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0UGx1Z2luLl9vbmx5UGVyY2VudGFnZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHkgPSBwZXJjZW50YWdlUm90YXRpb24gPyAnJyA6IHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVZLmNhbGwodGhpcywgY29udGV4dFBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA9PT0gY29udGV4dFBsdWdpbi5fZGVmYXVsdFNpemVZKSB5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UpIHkgPSB0aGlzLnV0aWwuZ2V0TnVtYmVyKHksIDIpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFBsdWdpbi5pbnB1dFkudmFsdWUgPSB5O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WC5kaXNhYmxlZCA9IHBlcmNlbnRhZ2VSb3RhdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgY29udGV4dFBsdWdpbi5pbnB1dFkuZGlzYWJsZWQgPSBwZXJjZW50YWdlUm90YXRpb24gPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4ucHJvcG9ydGlvbi5kaXNhYmxlZCA9IHBlcmNlbnRhZ2VSb3RhdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHBsdWdpbk9iai5zZXRSYXRpby5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBjYWxsZWQgaW4gXCJzZXRJbnB1dFNpemVcIiAoaW5wdXQgdGFnIGtleXVwRXZlbnQpLCBcclxuICAgICAgICAgKiBjaGVja3MgdGhlIHZhbHVlIGVudGVyZWQgaW4gdGhlIGlucHV0IHRhZywgXHJcbiAgICAgICAgICogY2FsY3VsYXRlcyB0aGUgcmF0aW8sIGFuZCBzZXRzIHRoZSBjYWxjdWxhdGVkIHZhbHVlIGluIHRoZSBpbnB1dCB0YWcgb2YgdGhlIG9wcG9zaXRlIHNpemUuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRQbHVnaW4gY29udGV4dCBvYmplY3Qgb2YgcGx1Z2luIChjb3JlLmNvbnRleHRbcGx1Z2luXSlcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30geHkgJ3gnOiB3aWR0aCwgJ3knOiBoZWlnaHRcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbW9kdWxlX3NldElucHV0U2l6ZTogZnVuY3Rpb24gKGNvbnRleHRQbHVnaW4sIHh5KSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLl9vbmx5UGVyY2VudGFnZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHh5ID09PSAneCcgJiYgY29udGV4dFBsdWdpbi5pbnB1dFgudmFsdWUgPiAxMDApIGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlID0gMTAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5wcm9wb3J0aW9uLmNoZWNrZWQgJiYgY29udGV4dFBsdWdpbi5fcmF0aW8gJiYgL1xcZC8udGVzdChjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSkgJiYgL1xcZC8udGVzdChjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhVbml0ID0gY29udGV4dFBsdWdpbi5pbnB1dFgudmFsdWUucmVwbGFjZSgvXFxkK3xcXC4vZywgJycpIHx8IGNvbnRleHRQbHVnaW4uc2l6ZVVuaXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5VW5pdCA9IGNvbnRleHRQbHVnaW4uaW5wdXRZLnZhbHVlLnJlcGxhY2UoL1xcZCt8XFwuL2csICcnKSB8fCBjb250ZXh0UGx1Z2luLnNpemVVbml0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh4VW5pdCAhPT0geVVuaXQpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWMgPSB4VW5pdCA9PT0gJyUnID8gMiA6IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHh5ID09PSAneCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSA9IHRoaXMudXRpbC5nZXROdW1iZXIoY29udGV4dFBsdWdpbi5fcmF0aW9ZICogdGhpcy51dGlsLmdldE51bWJlcihjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSwgZGVjKSwgZGVjKSArIHlVbml0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSA9IHRoaXMudXRpbC5nZXROdW1iZXIoY29udGV4dFBsdWdpbi5fcmF0aW9YICogdGhpcy51dGlsLmdldE51bWJlcihjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSwgZGVjKSwgZGVjKSArIHhVbml0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGNhbGxlZCBpbiBcInNldFJhdGlvXCIgKGlucHV0IGFuZCBwcm9wb3J0aW9uQ2hlY2sgdGFncyBjaGFuZ2VFdmVudCksIFxyXG4gICAgICAgICAqIGNoZWNrcyB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IHRhZywgY2FsY3VsYXRlcyB0aGUgcmF0aW8sIGFuZCByZXNldHMgaXQgaW4gdGhlIGlucHV0IHRhZy5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFBsdWdpbiBjb250ZXh0IG9iamVjdCBvZiBwbHVnaW4gKGNvcmUuY29udGV4dFtwbHVnaW5dKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tb2R1bGVfc2V0UmF0aW86IGZ1bmN0aW9uIChjb250ZXh0UGx1Z2luKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHhWYWx1ZSA9IGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCB5VmFsdWUgPSBjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLnByb3BvcnRpb24uY2hlY2tlZCAmJiAvXFxkKy8udGVzdCh4VmFsdWUpICYmIC9cXGQrLy50ZXN0KHlWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhVbml0ID0geFZhbHVlLnJlcGxhY2UoL1xcZCt8XFwuL2csICcnKSB8fCBjb250ZXh0UGx1Z2luLnNpemVVbml0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeVVuaXQgPSB5VmFsdWUucmVwbGFjZSgvXFxkK3xcXC4vZywgJycpIHx8IGNvbnRleHRQbHVnaW4uc2l6ZVVuaXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHhVbml0ICE9PSB5VW5pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX3JhdGlvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFjb250ZXh0UGx1Z2luLl9yYXRpbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSB0aGlzLnV0aWwuZ2V0TnVtYmVyKHhWYWx1ZSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IHRoaXMudXRpbC5nZXROdW1iZXIoeVZhbHVlLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFBsdWdpbi5fcmF0aW8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX3JhdGlvWCA9IHggLyB5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX3JhdGlvWSA9IHkgLyB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFBsdWdpbi5fcmF0aW8gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXZlcnQgc2l6ZSBvZiBlbGVtZW50IHRvIG9yaWdpbiBzaXplIChwbHVnaW4uX29yaWdpbl93LCBwbHVnaW4uX29yaWdpbl9oKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0UGx1Z2luIGNvbnRleHQgb2JqZWN0IG9mIHBsdWdpbiAoY29yZS5jb250ZXh0W3BsdWdpbl0pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX21vZHVsZV9zaXplUmV2ZXJ0OiBmdW5jdGlvbiAoY29udGV4dFBsdWdpbikge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlID0gY29udGV4dFBsdWdpbi5fb3JpZ2luX3cgPiAxMDAgPyAxMDAgOiBjb250ZXh0UGx1Z2luLl9vcmlnaW5fdztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlID0gY29udGV4dFBsdWdpbi5fb3JpZ2luX3c7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSA9IGNvbnRleHRQbHVnaW4uX29yaWdpbl9oO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNhdmUgdGhlIHNpemUgZGF0YSAoZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNpemVcIikpXHJcbiAgICAgICAgICogVXNlZCBhdCB0aGUgXCJzZXRTaXplXCIgbWV0aG9kXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRQbHVnaW4gY29udGV4dCBvYmplY3Qgb2YgcGx1Z2luIChjb3JlLmNvbnRleHRbcGx1Z2luXSlcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbW9kdWxlX3NhdmVDdXJyZW50U2l6ZTogZnVuY3Rpb24gKGNvbnRleHRQbHVnaW4pIHtcclxuICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVYLmNhbGwodGhpcywgY29udGV4dFBsdWdpbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGNvbnRleHRQbHVnaW4pO1xyXG4gICAgICAgICAgICAvLyBhZGQgdG9vIHdpZHRoLCBoZWlnaHQgYXR0cmlidXRlXHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX2VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHgucmVwbGFjZSgncHgnLCAnJykpO1xyXG4gICAgICAgICAgICBjb250ZXh0UGx1Z2luLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgeS5yZXBsYWNlKCdweCcsICcnKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCB4ICsgJywnICsgeSk7XHJcbiAgICAgICAgICAgIGlmICghIWNvbnRleHRQbHVnaW4uX3ZpZGVvUmF0aW8pIGNvbnRleHRQbHVnaW4uX3ZpZGVvUmF0aW8gPSB5O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsIHRoZSByZXNpemluZyBtb2R1bGVcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldEVsZW1lbnQgUmVzaXppbmcgdGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1Z2luIFBsdWdpbiBuYW1lXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gU2l6ZSBvZiByZXNpemluZyBkaXYge3csIGgsIHQsIGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbF9jb250cm9sbGVyX3Jlc2l6ZTogZnVuY3Rpb24gKHRhcmdldEVsZW1lbnQsIHBsdWdpbikge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0UmVzaXppbmcgPSB0aGlzLmNvbnRleHQucmVzaXppbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRQbHVnaW4gPSB0aGlzLmNvbnRleHRbcGx1Z2luXTtcclxuICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLl9yZXNpemVfcGx1Z2luID0gcGx1Z2luO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzaXplQ29udGFpbmVyID0gY29udGV4dFJlc2l6aW5nLnJlc2l6ZUNvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3QgcmVzaXplRGl2ID0gY29udGV4dFJlc2l6aW5nLnJlc2l6ZURpdjtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy51dGlsLmdldE9mZnNldCh0YXJnZXRFbGVtZW50LCB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IGNvbnRleHRSZXNpemluZy5fcm90YXRlVmVydGljYWwgPSAvXig5MHwyNzApJC8udGVzdChNYXRoLmFicyh0YXJnZXRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnKSkudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3ID0gaXNWZXJ0aWNhbCA/IHRhcmdldEVsZW1lbnQub2Zmc2V0SGVpZ2h0IDogdGFyZ2V0RWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgY29uc3QgaCA9IGlzVmVydGljYWwgPyB0YXJnZXRFbGVtZW50Lm9mZnNldFdpZHRoIDogdGFyZ2V0RWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBvZmZzZXQudG9wO1xyXG4gICAgICAgICAgICBjb25zdCBsID0gb2Zmc2V0LmxlZnQgLSB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuc2Nyb2xsTGVmdDtcclxuXHJcbiAgICAgICAgICAgIHJlc2l6ZUNvbnRhaW5lci5zdHlsZS50b3AgPSB0ICsgJ3B4JztcclxuICAgICAgICAgICAgcmVzaXplQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBsICsgJ3B4JztcclxuICAgICAgICAgICAgcmVzaXplQ29udGFpbmVyLnN0eWxlLndpZHRoID0gdyArICdweCc7XHJcbiAgICAgICAgICAgIHJlc2l6ZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIHJlc2l6ZURpdi5zdHlsZS50b3AgPSAnMHB4JztcclxuICAgICAgICAgICAgcmVzaXplRGl2LnN0eWxlLmxlZnQgPSAnMHB4JztcclxuICAgICAgICAgICAgcmVzaXplRGl2LnN0eWxlLndpZHRoID0gIHcgKyAncHgnO1xyXG4gICAgICAgICAgICByZXNpemVEaXYuc3R5bGUuaGVpZ2h0ID0gIGggKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgbGV0IGFsaWduID0gdGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWxpZ24nKSB8fCAnYmFzaWMnO1xyXG4gICAgICAgICAgICBhbGlnbiA9IGFsaWduID09PSAnbm9uZScgPyAnYmFzaWMnIDogYWxpZ247XHJcblxyXG4gICAgICAgICAgICAvLyB0ZXh0XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHRhcmdldEVsZW1lbnQsIHRoaXMudXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQodGFyZ2V0RWxlbWVudCwgJ0ZJR1VSRScpO1xyXG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5WCA9IHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVYLmNhbGwodGhpcywgY29udGV4dFBsdWdpbiwgdGFyZ2V0RWxlbWVudCwgY292ZXIsIGNvbnRhaW5lcikgfHwgJ2F1dG8nO1xyXG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5WSA9IGNvbnRleHRQbHVnaW4uX29ubHlQZXJjZW50YWdlICYmIHBsdWdpbiA9PT0gJ2ltYWdlJyA/ICcnIDogJywgJyArICh0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGNvbnRleHRQbHVnaW4sIHRhcmdldEVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpIHx8ICdhdXRvJyk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQoY29udGV4dFJlc2l6aW5nLnJlc2l6ZURpc3BsYXksIHRoaXMubGFuZy5kaWFsb2dCb3hbYWxpZ25dICsgJyAoJyArIGRpc3BsYXlYICsgZGlzcGxheVkgKyAnKScpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVzaXppbmcgZGlzcGxheVxyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcucmVzaXplQnV0dG9uR3JvdXAuc3R5bGUuZGlzcGxheSA9IGNvbnRleHRQbHVnaW4uX3Jlc2l6aW5nID8gJycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZURvdFNob3cgPSBjb250ZXh0UGx1Z2luLl9yZXNpemluZyAmJiAhY29udGV4dFBsdWdpbi5fcmVzaXplRG90SGlkZSAmJiAhY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UgPyAnZmxleCcgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZUhhbmRsZXMgPSBjb250ZXh0UmVzaXppbmcucmVzaXplSGFuZGxlcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlc2l6ZUhhbmRsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc2l6ZUhhbmRsZXNbaV0uc3R5bGUuZGlzcGxheSA9IHJlc2l6ZURvdFNob3c7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLl9yZXNpemluZykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb25zID0gY29udGV4dFJlc2l6aW5nLnJvdGF0aW9uQnV0dG9ucztcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uc1swXS5zdHlsZS5kaXNwbGF5ID0gcm90YXRpb25zWzFdLnN0eWxlLmRpc3BsYXkgPSBjb250ZXh0UGx1Z2luLl9yb3RhdGlvbiA/ICcnIDogJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhbGlnbiBpY29uXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLl9hbGlnbkhpZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5hbGlnbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLmFsaWduQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWduTGlzdCA9IGNvbnRleHRSZXNpemluZy5hbGlnbk1lbnVMaXN0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZUVsZW1lbnQoY29udGV4dFJlc2l6aW5nLmFsaWduQnV0dG9uLmZpcnN0RWxlbWVudENoaWxkLCBjb250ZXh0UmVzaXppbmcuYWxpZ25JY29uc1thbGlnbl0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFsaWduTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGlnbkxpc3RbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgPT09IGFsaWduKSB0aGlzLnV0aWwuYWRkQ2xhc3MoYWxpZ25MaXN0W2ldLCAnb24nKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhhbGlnbkxpc3RbaV0sICdvbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBwZXJjZW50YWdlIGFjdGl2ZVxyXG4gICAgICAgICAgICBjb25zdCBwQnV0dG9ucyA9IGNvbnRleHRSZXNpemluZy5wZXJjZW50YWdlQnV0dG9ucztcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAvJSQvLnRlc3QodGFyZ2V0RWxlbWVudC5zdHlsZS53aWR0aCkgJiYgLyUkLy50ZXN0KGNvbnRhaW5lci5zdHlsZS53aWR0aCkgPyAodGhpcy51dGlsLmdldE51bWJlcihjb250YWluZXIuc3R5bGUud2lkdGgsIDApIC8gMTAwKSArICcnIDogJycgO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcEJ1dHRvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChwQnV0dG9uc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MocEJ1dHRvbnNbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHBCdXR0b25zW2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGNhcHRpb24gZGlzcGxheSwgYWN0aXZlXHJcbiAgICAgICAgICAgIGlmICghY29udGV4dFBsdWdpbi5fY2FwdGlvblNob3cpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5jYXB0aW9uQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuY2FwdGlvbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51dGlsLmdldENoaWxkRWxlbWVudCh0YXJnZXRFbGVtZW50LnBhcmVudE5vZGUsICdmaWdjYXB0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dFJlc2l6aW5nLmNhcHRpb25CdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLl9jYXB0aW9uQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0UmVzaXppbmcuY2FwdGlvbkJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX2NhcHRpb25DaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlc2l6ZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFkZE9mZnNldCA9IHtsZWZ0OiAwLCB0b3A6IDUwfTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGFkZE9mZnNldC5sZWZ0IC09IHRoaXMuY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5wYXJlbnRFbGVtZW50Lm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgICAgICBhZGRPZmZzZXQudG9wIC09IHRoaXMuY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5wYXJlbnRFbGVtZW50Lm9mZnNldFRvcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRDb250cm9sbGVyUG9zaXRpb24oY29udGV4dFJlc2l6aW5nLnJlc2l6ZUJ1dHRvbiwgcmVzaXplQ29udGFpbmVyLCAnYm90dG9tJywgYWRkT2Zmc2V0KTtcclxuICAgICAgICAgICAgY29uc3Qgb25Db250cm9sc09mZiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zZXREaXNhYmxlZEJ1dHRvbnMuY2FsbCh0aGlzLnV0aWwsIGZhbHNlLCB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5fcmVzZXRDYWNoaW5nQnV0dG9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPbihyZXNpemVDb250YWluZXIsIGNvbnRleHRSZXNpemluZy5yZXNpemVCdXR0b24sIG9uQ29udHJvbHNPZmYuYmluZCh0aGlzKSwgdGFyZ2V0RWxlbWVudCwgcGx1Z2luKTtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnNldERpc2FibGVkQnV0dG9ucyh0cnVlLCB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcmVzaXplX3cgPSB3O1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZV9oID0gaDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpblNpemUgPSAodGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ29yaWdpbi1zaXplJykgfHwgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fb3JpZ2luX3cgPSBvcmlnaW5TaXplWzBdIHx8IHRhcmdldEVsZW1lbnQubmF0dXJhbFdpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX29yaWdpbl9oID0gb3JpZ2luU2l6ZVsxXSB8fCB0YXJnZXRFbGVtZW50Lm5hdHVyYWxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdzogdyxcclxuICAgICAgICAgICAgICAgIGg6IGgsXHJcbiAgICAgICAgICAgICAgICB0OiB0LFxyXG4gICAgICAgICAgICAgICAgbDogbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jbG9zZUFsaWduTWVudTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gYWxpZ24gc3VibWVudSBvZiBtb2R1bGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBvcGVuQWxpZ25NZW51OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsaWduQnV0dG9uID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduQnV0dG9uO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoYWxpZ25CdXR0b24sICdvbicpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQucmVzaXppbmcuYWxpZ25NZW51LnN0eWxlLnRvcCA9IChhbGlnbkJ1dHRvbi5vZmZzZXRUb3AgKyBhbGlnbkJ1dHRvbi5vZmZzZXRIZWlnaHQpICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduTWVudS5zdHlsZS5sZWZ0ID0gKGFsaWduQnV0dG9uLm9mZnNldExlZnQgLSBhbGlnbkJ1dHRvbi5vZmZzZXRXaWR0aCAvIDIpICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduTWVudS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fY2xvc2VBbGlnbk1lbnUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduQnV0dG9uLCAnb24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5hbGlnbk1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jRXZlbnQoJ2NsaWNrJywgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9jbG9zZUFsaWduTWVudSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX2Nsb3NlQWxpZ25NZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGREb2NFdmVudCgnY2xpY2snLCB0aGlzLnBsdWdpbnMucmVzaXppbmcuX2Nsb3NlQWxpZ25NZW51KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xpY2sgZXZlbnQgb2YgcmVzaXppbmcgdG9vbGJhclxyXG4gICAgICAgICAqIFBlcmZvcm1zIHRoZSBhY3Rpb24gb2YgdGhlIGNsaWNrZWQgdG9vbGJhciBidXR0b24uXHJcbiAgICAgICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlIEV2ZW50IG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uQ2xpY2tfcmVzaXplQnV0dG9uOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSB8fCB0YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCB0YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbk5hbWUgPSB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW47XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250ZXh0ID0gdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0RWwgPSBjdXJyZW50Q29udGV4dC5fZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudE1vZHVsZSA9IHRoaXMucGx1Z2luc1twbHVnaW5OYW1lXTtcclxuXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9jbG9zZUFsaWduTWVudSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9jbG9zZUFsaWduTWVudSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdvbmFsaWduJykgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2F1dG8nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5yZXNldFRyYW5zZm9ybS5jYWxsKHRoaXMsIGNvbnRleHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRBdXRvU2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGNvbnRleHRFbCwgcGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwZXJjZW50JzpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGVyY2VudFkgPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGN1cnJlbnRDb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gY29udGV4dEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wZXJjZW50YWdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50YWdlKSBwZXJjZW50WSA9IHBlcmNlbnRhZ2Uuc3BsaXQoJywnKVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5yZXNldFRyYW5zZm9ybS5jYWxsKHRoaXMsIGNvbnRleHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRQZXJjZW50U2l6ZS5jYWxsKHRoaXMsICh2YWx1ZSAqIDEwMCksICh0aGlzLnV0aWwuZ2V0TnVtYmVyKHBlcmNlbnRZLCAwKSA9PT0gbnVsbCB8fCAhLyUkLy50ZXN0KHBlcmNlbnRZKSkgPyAnJyA6IHBlcmNlbnRZKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudChjb250ZXh0RWwsIHBsdWdpbk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlycm9yJzpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gY29udGV4dEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnKSB8fCAnMCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHggPSBjb250ZXh0RWwuZ2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVgnKSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IGNvbnRleHRFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm90YXRlWScpIHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID09PSAnaCcgJiYgIXRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWwpIHx8ICh2YWx1ZSA9PT0gJ3YnICYmIHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSB5ID8gJycgOiAnMTgwJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0geCA/ICcnIDogJzE4MCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0RWwuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVgnLCB4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0RWwuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVknLCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9zZXRUcmFuc0Zvcm0oY29udGV4dEVsLCByLCB4LCB5KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dFJlc2l6aW5nID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsb3BlID0gKGNvbnRleHRFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm90YXRlJykgKiAxKSArICh2YWx1ZSAqIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZyA9IHRoaXMuX3cuTWF0aC5hYnMoc2xvcGUpID49IDM2MCA/IDAgOiBzbG9wZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dEVsLnNldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnLCBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcm90YXRlVmVydGljYWwgPSAvXig5MHwyNzApJC8udGVzdCh0aGlzLl93Lk1hdGguYWJzKGRlZykudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnNldFRyYW5zZm9ybVNpemUuY2FsbCh0aGlzLCBjb250ZXh0RWwsIG51bGwsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudChjb250ZXh0RWwsIHBsdWdpbk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb25hbGlnbic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLm9wZW5BbGlnbk1lbnUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbic6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxpZ25WYWx1ZSA9IHZhbHVlID09PSAnYmFzaWMnID8gJ25vbmUnIDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRBbGlnbi5jYWxsKHRoaXMsIGFsaWduVmFsdWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGNvbnRleHRFbCwgcGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjYXB0aW9uJzpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXB0aW9uID0gIWN1cnJlbnRDb250ZXh0Ll9jYXB0aW9uQ2hlY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kdWxlLm9wZW5Nb2RpZnkuY2FsbCh0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dC5fY2FwdGlvbkNoZWNrZWQgPSBjdXJyZW50Q29udGV4dC5jYXB0aW9uQ2hlY2tFbC5jaGVja2VkID0gY2FwdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS51cGRhdGVfaW1hZ2UuY2FsbCh0aGlzLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FwdGlvblRleHQgPSB0aGlzLnV0aWwuZ2V0Q2hpbGRFbGVtZW50KGN1cnJlbnRDb250ZXh0Ll9jYXB0aW9uLCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQubm9kZVR5cGUgPT09IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYXB0aW9uVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbnRleHQuX2NhcHRpb24uZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoY2FwdGlvblRleHQsIDAsIGNhcHRpb25UZXh0LCBjYXB0aW9uVGV4dC50ZXh0Q29udGVudC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoY29udGV4dEVsLCBwbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5vcGVuTW9kaWZ5LmNhbGwodGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JldmVydCc6XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRPcmlnaW5TaXplLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoY29udGV4dEVsLCBwbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5vcGVuTW9kaWZ5LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kdWxlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemUgdGhlIHRyYW5zZm9ybSBzdHlsZSAocm90YXRpb24pIG9mIHRoZSBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBzaXplID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW4nKSB8fCAnJykuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xyXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcnO1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnLCAnJyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVgnLCAnJyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVknLCAnJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5zZXRTaXplLmNhbGwodGhpcywgc2l6ZVswXSA/IHNpemVbMF0gOiAnYXV0bycsIHNpemVbMV0gPyBzaXplWzFdIDogJycsIHRydWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgdGhlIHRyYW5zZm9ybSBzdHlsZSAocm90YXRpb24pIG9mIHRoZSBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfG51bGx9IHdpZHRoIEVsZW1lbnQncyB3aWR0aCBzaXplXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ8bnVsbH0gaGVpZ2h0IEVsZW1lbnQncyBoZWlnaHQgc2l6ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFRyYW5zZm9ybVNpemU6IGZ1bmN0aW9uIChlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGxldCBwZXJjZW50YWdlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScpO1xyXG4gICAgICAgICAgICBjb25zdCBpc1ZlcnRpY2FsID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbDtcclxuICAgICAgICAgICAgY29uc3QgZGVnID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm90YXRlJykgKiAxO1xyXG4gICAgICAgICAgICBsZXQgdHJhbnNPcmlnaW4gPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChwZXJjZW50YWdlICYmICFpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlID0gcGVyY2VudGFnZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBlcmNlbnRhZ2VbMF0gPT09ICdhdXRvJyAmJiBwZXJjZW50YWdlWzFdID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5zZXRBdXRvU2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5zZXRQZXJjZW50U2l6ZS5jYWxsKHRoaXMsIHBlcmNlbnRhZ2VbMF0sIHBlcmNlbnRhZ2VbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY292ZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCAnRklHVVJFJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VyA9IHdpZHRoIHx8IGVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRIID0gaGVpZ2h0IHx8IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdyA9IChpc1ZlcnRpY2FsID8gb2Zmc2V0SCA6IG9mZnNldFcpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGggPSAoaXNWZXJ0aWNhbCA/IG9mZnNldFcgOiBvZmZzZXRIKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zW3RoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbl0uY2FuY2VsUGVyY2VudEF0dHIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luc1t0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW5dLnNldFNpemUuY2FsbCh0aGlzLCBvZmZzZXRXICsgJ3B4Jywgb2Zmc2V0SCArICdweCcsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLndpZHRoID0gdztcclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLmhlaWdodCA9ICghIXRoaXMuY29udGV4dFt0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW5dLl9jYXB0aW9uID8gJycgOiBoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc1cgPSAob2Zmc2V0VyAvIDIpICsgJ3B4ICcgKyAob2Zmc2V0VyAvIDIpICsgJ3B4IDAnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc0ggPSAob2Zmc2V0SCAvIDIpICsgJ3B4ICcgKyAob2Zmc2V0SCAvIDIpICsgJ3B4IDAnO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zT3JpZ2luID0gZGVnID09PSA5MCB8fCBkZWcgPT09IC0yNzAgPyB0cmFuc0ggOiB0cmFuc1c7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gdHJhbnNPcmlnaW47XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fc2V0VHJhbnNGb3JtKGVsZW1lbnQsIGRlZy50b1N0cmluZygpLCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGVYJykgfHwgJycsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVknKSB8fCAnJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkgZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9ICdub25lJztcclxuICAgICAgICAgICAgZWxzZSBlbGVtZW50LnN0eWxlLm1heFdpZHRoID0gJyc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuc2V0Q2FwdGlvblBvc2l0aW9uLmNhbGwodGhpcywgZWxlbWVudCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFRyYW5zRm9ybTogZnVuY3Rpb24gKGVsZW1lbnQsIHIsIHgsIHkpIHtcclxuICAgICAgICAgICAgbGV0IHdpZHRoID0gKGVsZW1lbnQub2Zmc2V0V2lkdGggLSBlbGVtZW50Lm9mZnNldEhlaWdodCkgKiAoLy0vLnRlc3QocikgPyAxIDogLTEpO1xyXG4gICAgICAgICAgICBsZXQgdHJhbnNsYXRlID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoL1sxLTldLy50ZXN0KHIpICYmICh4IHx8IHkpKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGUgPSB4ID8gJ1knIDogJ1gnO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzkwJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlID0geCAmJiB5ID8gJ1gnIDogeSA/IHRyYW5zbGF0ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcyNzAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAqPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlID0geCAmJiB5ID8gJ1knIDogeCA/IHRyYW5zbGF0ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICctOTAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUgPSB4ICYmIHkgPyAnWScgOiB4ID8gdHJhbnNsYXRlIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJy0yNzAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAqPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlID0geCAmJiB5ID8gJ1gnIDogeSA/IHRyYW5zbGF0ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHIgJSAxODAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubWF4V2lkdGggPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKCcgKyByICsgJ2RlZyknICsgKHggPyAnIHJvdGF0ZVgoJyArIHggKyAnZGVnKScgOiAnJykgKyAoeSA/ICcgcm90YXRlWSgnICsgeSArICdkZWcpJyA6ICcnKSArICh0cmFuc2xhdGUgPyAnIHRyYW5zbGF0ZScgKyB0cmFuc2xhdGUgKyAnKCcgKyB3aWR0aCArICdweCknIDogJycpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgcG9zaXRpb24gb2YgdGhlIGNhcHRpb24gaXMgc2V0IGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRhcmdldCBlbGVtZW50IChub3QgY2FwdGlvbiBlbGVtZW50KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENhcHRpb25Qb3NpdGlvbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlnY2FwdGlvbiA9IHRoaXMudXRpbC5nZXRDaGlsZEVsZW1lbnQodGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgJ0ZJR1VSRScpLCAnRklHQ0FQVElPTicpO1xyXG4gICAgICAgICAgICBpZiAoZmlnY2FwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZmlnY2FwdGlvbi5zdHlsZS5tYXJnaW5Ub3AgPSAodGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCA/IGVsZW1lbnQub2Zmc2V0V2lkdGggLSBlbGVtZW50Lm9mZnNldEhlaWdodCA6IDApICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBNb3VzZSBkb3duIGV2ZW50IG9mIHJlc2l6ZSBoYW5kbGVzXHJcbiAgICAgICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlIEV2ZW50IG9iamVjdCBcclxuICAgICAgICAgKi9cclxuICAgICAgICBvbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0UmVzaXppbmcgPSB0aGlzLmNvbnRleHQucmVzaXppbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGNvbnRleHRSZXNpemluZy5fcmVzaXplX2RpcmVjdGlvbiA9IGUudGFyZ2V0LmNsYXNzTGlzdFswXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcmVzaXplQ2xpZW50WCA9IGUuY2xpZW50WDtcclxuICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLl9yZXNpemVDbGllbnRZID0gZS5jbGllbnRZO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZWxlbWVudC5yZXNpemVCYWNrZ3JvdW5kLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcucmVzaXplQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUuZmxvYXQgPSAvbC8udGVzdChkaXJlY3Rpb24pID8gJ3JpZ2h0JyA6IC9yLy50ZXN0KGRpcmVjdGlvbikgPyAnbGVmdCcgOiAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjbG9zdXJlRnVuY19iaW5kID0gZnVuY3Rpb24gY2xvc3VyZUZ1bmMoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nICYmIGUua2V5Q29kZSAhPT0gMjcpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBjb250ZXh0UmVzaXppbmcuX2lzQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLl9pc0NoYW5nZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jRXZlbnQoJ21vdXNlbW92ZScsIHJlc2l6aW5nX2VsZW1lbnRfYmluZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdtb3VzZXVwJywgY2xvc3VyZUZ1bmNfYmluZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdrZXlkb3duJywgY2xvc3VyZUZ1bmNfYmluZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5lbGVtZW50LnJlc2l6ZUJhY2tncm91bmQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5pbml0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgcmVzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLmNhbmNlbF9jb250cm9sbGVyX3Jlc2l6ZS5jYWxsKHRoaXMsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UpIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzaXppbmdfZWxlbWVudF9iaW5kID0gdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnJlc2l6aW5nX2VsZW1lbnQuYmluZCh0aGlzLCBjb250ZXh0UmVzaXppbmcsIGRpcmVjdGlvbiwgdGhpcy5jb250ZXh0W2NvbnRleHRSZXNpemluZy5fcmVzaXplX3BsdWdpbl0pO1xyXG4gICAgICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdtb3VzZW1vdmUnLCByZXNpemluZ19lbGVtZW50X2JpbmQpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdtb3VzZXVwJywgY2xvc3VyZUZ1bmNfYmluZCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRG9jRXZlbnQoJ2tleWRvd24nLCBjbG9zdXJlRnVuY19iaW5kKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gTW91c2UgbW92ZSBldmVudCBhZnRlciBjYWxsIFwib25Nb3VzZURvd25fcmVzaXplX2hhbmRsZVwiIG9mIHJlc2l6ZSBoYW5kbGVzXHJcbiAgICAgICAgICogVGhlIHNpemUgb2YgdGhlIG1vZHVsZSdzIFwiZGl2XCIgaXMgYWRqdXN0ZWQgYWNjb3JkaW5nIHRvIHRoZSBtb3VzZSBtb3ZlIGV2ZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0UmVzaXppbmcgXCJjb3JlLmNvbnRleHQucmVzaXppbmdcIiBvYmplY3QgKGJpbmRpbmcgYXJndW1lbnQpXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvbiBEaXJlY3Rpb24gKFwidGxcIiwgXCJ0clwiLCBcImJsXCIsIFwiYnJcIiwgXCJsd1wiLCBcInRoXCIsIFwicndcIiwgXCJiaFwiKSAoYmluZGluZyBhcmd1bWVudClcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIFwiY29yZS5jb250ZXh0W2N1cnJlbnRQbHVnaW5dXCIgb2JqZWN0IChiaW5kaW5nIGFyZ3VtZW50KVxyXG4gICAgICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZSBFdmVudCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXNpemluZ19lbGVtZW50OiBmdW5jdGlvbiAoY29udGV4dFJlc2l6aW5nLCBkaXJlY3Rpb24sIHBsdWdpbiwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGllbnRYID0gZS5jbGllbnRYO1xyXG4gICAgICAgICAgICBjb25zdCBjbGllbnRZID0gZS5jbGllbnRZO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc3VsdFcgPSBwbHVnaW4uX2VsZW1lbnRfdztcclxuICAgICAgICAgICAgbGV0IHJlc3VsdEggPSBwbHVnaW4uX2VsZW1lbnRfaDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHcgPSBwbHVnaW4uX2VsZW1lbnRfdyArICgvci8udGVzdChkaXJlY3Rpb24pID8gY2xpZW50WCAtIGNvbnRleHRSZXNpemluZy5fcmVzaXplQ2xpZW50WCA6IGNvbnRleHRSZXNpemluZy5fcmVzaXplQ2xpZW50WCAtIGNsaWVudFgpO1xyXG4gICAgICAgICAgICBjb25zdCBoID0gcGx1Z2luLl9lbGVtZW50X2ggKyAoL2IvLnRlc3QoZGlyZWN0aW9uKSA/IGNsaWVudFkgLSBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZUNsaWVudFkgOiBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZUNsaWVudFkgLSBjbGllbnRZKTtcclxuICAgICAgICAgICAgY29uc3Qgd2ggPSAoKHBsdWdpbi5fZWxlbWVudF9oIC8gcGx1Z2luLl9lbGVtZW50X3cpICogdyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoL3QvLnRlc3QoZGlyZWN0aW9uKSkgY29udGV4dFJlc2l6aW5nLnJlc2l6ZURpdi5zdHlsZS50b3AgPSAocGx1Z2luLl9lbGVtZW50X2ggLSAoL2gvLnRlc3QoZGlyZWN0aW9uKSA/IGggOiB3aCkpICsgJ3B4JztcclxuICAgICAgICAgICAgaWYgKC9sLy50ZXN0KGRpcmVjdGlvbikpIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUubGVmdCA9IChwbHVnaW4uX2VsZW1lbnRfdyAtIHcpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIGlmICgvcnxsLy50ZXN0KGRpcmVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUud2lkdGggPSB3ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIHJlc3VsdFcgPSB3O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoL14odHxiKVteaF0kLy50ZXN0KGRpcmVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUuaGVpZ2h0ID0gd2ggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SCA9IHdoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKC9eKHR8YiloJC8udGVzdChkaXJlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0UmVzaXppbmcucmVzaXplRGl2LnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SCA9IGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcmVzaXplX3cgPSByZXN1bHRXO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZV9oID0gcmVzdWx0SDtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dChjb250ZXh0UmVzaXppbmcucmVzaXplRGlzcGxheSwgdGhpcy5fdy5NYXRoLnJvdW5kKHJlc3VsdFcpICsgJyB4ICcgKyB0aGlzLl93Lk1hdGgucm91bmQocmVzdWx0SCkpO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX2lzQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzaXplIHRoZSBlbGVtZW50IHRvIHRoZSBzaXplIG9mIHRoZSBcImRpdlwiIGFkanVzdGVkIGluIHRoZSBcInJlc2l6aW5nX2VsZW1lbnRcIiBtZXRob2QuXHJcbiAgICAgICAgICogQ2FsbGVkIGF0IHRoZSBtb3VzZS11cCBldmVudCByZWdpc3RlcmVkIGluIFwib25Nb3VzZURvd25fcmVzaXplX2hhbmRsZVwiLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb24gRGlyZWN0aW9uIChcInRsXCIsIFwidHJcIiwgXCJibFwiLCBcImJyXCIsIFwibHdcIiwgXCJ0aFwiLCBcInJ3XCIsIFwiYmhcIilcclxuICAgICAgICAgKi9cclxuICAgICAgICBjYW5jZWxfY29udHJvbGxlcl9yZXNpemU6IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWw7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmVsZW1lbnQucmVzaXplQmFja2dyb3VuZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgbGV0IHcgPSB0aGlzLl93Lk1hdGgucm91bmQoaXNWZXJ0aWNhbCA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX2ggOiB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV93KTtcclxuICAgICAgICAgICAgbGV0IGggPSB0aGlzLl93Lk1hdGgucm91bmQoaXNWZXJ0aWNhbCA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3cgOiB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9oKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghaXNWZXJ0aWNhbCAmJiAhLyUkLy50ZXN0KHcpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gMTY7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW1pdCA9IHRoaXMuY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5jbGllbnRXaWR0aCAtIChwYWRkaW5nICogMikgLSAyO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuZ2V0TnVtYmVyKHcsIDApID4gbGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoID0gdGhpcy5fdy5NYXRoLnJvdW5kKChoIC8gdykgKiBsaW1pdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdyA9IGxpbWl0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW5OYW1lID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbcGx1Z2luTmFtZV0uc2V0U2l6ZS5jYWxsKHRoaXMsIHcsIGgsIGZhbHNlLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnNldFRyYW5zZm9ybVNpemUuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHRbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5fZWxlbWVudCwgdywgaCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudCh0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0uX2VsZW1lbnQsIHBsdWdpbk5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBub0dsb2JhbCA9PT0gdHlwZW9mIHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICghd2luZG93LlNVTkVESVRPUl9NT0RVTEVTKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdTVU5FRElUT1JfTU9EVUxFUycsIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVU5FRElUT1JfTU9EVUxFUywgJ3Jlc2l6aW5nJywge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZXNpemluZ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXNpemluZztcclxufSkpOyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9NT0RVTEVTIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcclxuICAgIH1cclxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICh3aW5kb3csIG5vR2xvYmFsKSB7XHJcbiAgICBjb25zdCBmaWxlTWFuYWdlciA9IHtcclxuICAgICAgICBuYW1lOiAnZmlsZU1hbmFnZXInLFxyXG4gICAgICAgIF94bWxIdHRwOiBudWxsLFxyXG5cclxuICAgICAgICBfY2hlY2tNZWRpYUNvbXBvbmVudDogZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgICAgICBpZiAoL0lNRy9pLnRlc3QodGFnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEvRklHVVJFL2kudGVzdCh0YWcucGFyZW50RWxlbWVudC5ub2RlTmFtZSkgfHwgIS9GSUdVUkUvaS50ZXN0KHRhZy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBVcGxvYWQgdGhlIGZpbGUgdG8gdGhlIHNlcnZlci5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXBsb2FkVXJsIFVwbG9hZCBzZXJ2ZXIgdXJsXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gdXBsb2FkSGVhZGVyIFJlcXVlc3QgaGVhZGVyXHJcbiAgICAgICAgICogQHBhcmFtIHtGb3JtRGF0YX0gZm9ybURhdGEgRm9ybURhdGEgaW4gYm9keVxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gY2FsbEJhY2sgU3VjY2VzcyBjYWxsIGJhY2sgZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IGVycm9yQ2FsbEJhY2sgRXJyb3IgY2FsbCBiYWNrIGZ1bmN0aW9uXHJcbiAgICAgICAgICogQGV4YW1wbGUgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnVwbG9hZC5jYWxsKHRoaXMsIGltYWdlVXBsb2FkVXJsLCB0aGlzLm9wdGlvbnMuaW1hZ2VVcGxvYWRIZWFkZXIsIGZvcm1EYXRhLCB0aGlzLnBsdWdpbnMuaW1hZ2UuY2FsbEJhY2tfaW1nVXBsb2FkLmJpbmQodGhpcywgaW5mbyksIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWRFcnJvcik7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXBsb2FkOiBmdW5jdGlvbiAodXBsb2FkVXJsLCB1cGxvYWRIZWFkZXIsIGZvcm1EYXRhLCBjYWxsQmFjaywgZXJyb3JDYWxsQmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQbHVnaW4gPSB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHhtbEh0dHAgPSBmaWxlUGx1Z2luLl94bWxIdHRwID0gdGhpcy51dGlsLmdldFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZpbGVQbHVnaW4uX2NhbGxCYWNrVXBsb2FkLmJpbmQodGhpcywgeG1sSHR0cCwgY2FsbEJhY2ssIGVycm9yQ2FsbEJhY2spO1xyXG4gICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ3Bvc3QnLCB1cGxvYWRVcmwsIHRydWUpO1xyXG4gICAgICAgICAgICBpZih1cGxvYWRIZWFkZXIgIT09IG51bGwgJiYgdHlwZW9mIHVwbG9hZEhlYWRlciA9PT0gJ29iamVjdCcgJiYgdGhpcy5fdy5PYmplY3Qua2V5cyh1cGxvYWRIZWFkZXIpLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBrZXkgaW4gdXBsb2FkSGVhZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB1cGxvYWRIZWFkZXJba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeG1sSHR0cC5zZW5kKGZvcm1EYXRhKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY2FsbEJhY2tVcGxvYWQ6IGZ1bmN0aW9uICh4bWxIdHRwLCBjYWxsQmFjaywgZXJyb3JDYWxsQmFjaykge1xyXG4gICAgICAgICAgICBpZiAoeG1sSHR0cC5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeG1sSHR0cC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxCYWNrKHhtbEh0dHApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuZmlsZU1hbmFnZXIudXBsb2FkLmNhbGxCYWNrLmZhaWxdIGNhdXNlIDogXCInICsgZS5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBleGNlcHRpb25cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9ICF4bWxIdHRwLnJlc3BvbnNlVGV4dCA/IHhtbEh0dHAgOiBKU09OLnBhcnNlKHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yQ2FsbEJhY2sgIT09ICdmdW5jdGlvbicgfHwgZXJyb3JDYWxsQmFjaygnJywgcmVzLCB0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSAnW1NVTkVESVRPUi5maWxlTWFuYWdlci51cGxvYWQuc2VydmVyRXhjZXB0aW9uXSBzdGF0dXM6ICcgKyB4bWxIdHRwLnN0YXR1cyArICcsIHJlc3BvbnNlOiAnICsgKHJlcy5lcnJvck1lc3NhZ2UgfHwgeG1sSHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5ub3RpY2VPcGVuKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2tlIHRoZSBmaWxlJ3MgaW5mb3JtYXRpb24gYW5kIG1vZGlmeSB0aGUgdGFnIHRoYXQgZG9lcyBub3QgZml0IHRoZSBmb3JtYXQuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB0YWdOYW1lcyBUYWcgYXJyYXkgdG8gY2hlY2tcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHVwbG9hZEV2ZW50SGFuZGxlciBFdmVudCBoYW5kbGVyIHRvIHByb2Nlc3MgdXBkYXRlZCBmaWxlIGluZm8gYWZ0ZXIgY2hlY2tpbmcgKHVzZWQgaW4gXCJzZXRJbmZvXCIpXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZ5SGFuZGxlciBBIGZ1bmN0aW9uIHRvIG1vZGlmeSBhIHRhZyB0aGF0IGRvZXMgbm90IGZpdCB0aGUgZm9ybWF0IChBcmd1bWVudCB2YWx1ZTogVGFnIGVsZW1lbnQpXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXNpemluZyBUcnVlIGlmIHRoZSBwbHVnaW4gaXMgdXNpbmcgYSByZXNpemluZyBtb2R1bGVcclxuICAgICAgICAgKiBAZXhhbXBsZSBcclxuICAgICAgICAgKiBjb25zdCBtb2RpZnlIYW5kbGVyID0gZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgICAqICAgICAgaW1hZ2VQbHVnaW4ub25Nb2RpZnlNb2RlLmNhbGwodGhpcywgdGFnLCBudWxsKTtcclxuICAgICAgICAgKiAgICAgIGltYWdlUGx1Z2luLm9wZW5Nb2RpZnkuY2FsbCh0aGlzLCB0cnVlKTtcclxuICAgICAgICAgKiAgICAgIGltYWdlUGx1Z2luLnVwZGF0ZV9pbWFnZS5jYWxsKHRoaXMsIHRydWUsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgKiAgfS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAqICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuY2hlY2tJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgWydpbWcnXSwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgbW9kaWZ5SGFuZGxlciwgdHJ1ZSk7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hlY2tJbmZvOiBmdW5jdGlvbiAocGx1Z2luTmFtZSwgdGFnTmFtZXMsIHVwbG9hZEV2ZW50SGFuZGxlciwgbW9kaWZ5SGFuZGxlciwgcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgbGV0IHRhZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRhZ05hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdzID0gdGFncy5jb25jYXQoW10uc2xpY2UuY2FsbCh0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnLnF1ZXJ5U2VsZWN0b3JBbGwodGFnTmFtZXNbaV0gKyAnOm5vdChbZGF0YS1zZS1lbWJlZD1cInRydWVcIl0pJykpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZU1hbmFnZXJQbHVnaW4gPSB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV07XHJcbiAgICAgICAgICAgIGNvbnN0IGluZm9MaXN0ID0gY29udGV4dC5faW5mb0xpc3Q7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldEZpbGVJbmZvID0gZmlsZU1hbmFnZXJQbHVnaW4uc2V0SW5mby5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID09PSBpbmZvTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29tcG9uZW50c0luZm9SZXNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0YWdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEZpbGVJbmZvKHBsdWdpbk5hbWUsIHRhZ3NbaV0sIHVwbG9hZEV2ZW50SGFuZGxlciwgbnVsbCwgcmVzaXppbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5mb1VwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbmZvTGlzdC5sZW5ndGgsIGluZm87IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvID0gaW5mb0xpc3RbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdzLmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gaW5mby5zcmMgPT09IHQuc3JjICYmIGluZm8uaW5kZXgudG9TdHJpbmcoKSA9PT0gdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTsgfSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3NcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluZm9VcGRhdGUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2hlY2tcclxuICAgICAgICAgICAgY29uc3QgX3Jlc2l6ZV9wbHVnaW4gPSByZXNpemluZyA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA6ICcnO1xyXG4gICAgICAgICAgICBpZiAocmVzaXppbmcpIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9IHBsdWdpbk5hbWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUYWdzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGluZm9JbmRleCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaW5mb0xpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGluZm9JbmRleFtpXSA9IGluZm9MaXN0W2ldLmluZGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQuX191cGRhdGVUYWdzID0gdGFncztcclxuXHJcbiAgICAgICAgICAgIHdoaWxlICh0YWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhZyA9IHRhZ3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQodGFnLCB0aGlzLnV0aWwuaXNNZWRpYUNvbXBvbmVudCkgfHwgIWZpbGVNYW5hZ2VyUGx1Z2luLl9jaGVja01lZGlhQ29tcG9uZW50KHRhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGFncy5wdXNoKGNvbnRleHQuX2luZm9JbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZ5SGFuZGxlcih0YWcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGFnLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpIHx8IGluZm9JbmRleC5pbmRleE9mKHRhZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSAqIDEpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYWdzLnB1c2goY29udGV4dC5faW5mb0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB0YWcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RmlsZUluZm8ocGx1Z2luTmFtZSwgdGFnLCB1cGxvYWRFdmVudEhhbmRsZXIsIG51bGwsIHJlc2l6aW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRhZ3MucHVzaCh0YWcuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykgKiAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGRhdGFJbmRleDsgaSA8IGluZm9MaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhSW5kZXggPSBpbmZvTGlzdFtpXS5pbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VGFncy5pbmRleE9mKGRhdGFJbmRleCkgPiAtMSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaW5mb0xpc3Quc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGxvYWRFdmVudEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHVwbG9hZEV2ZW50SGFuZGxlcihudWxsLCBkYXRhSW5kZXgsICdkZWxldGUnLCBudWxsLCAwLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlc2l6aW5nKSB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW4gPSBfcmVzaXplX3BsdWdpbjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIGluZm8gb2JqZWN0IG9mIGZpbGUgYW5kIGFkZCBpdCB0byBcIl9pbmZvTGlzdFwiICh0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0uX2luZm9MaXN0W10pXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWUgXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdXBsb2FkRXZlbnRIYW5kbGVyIEV2ZW50IGhhbmRsZXIgdG8gcHJvY2VzcyB1cGRhdGVkIGZpbGUgaW5mbyAoY3JlYXRlZCBpbiBzZXRJbmZvKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IGZpbGUgXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXNpemluZyBUcnVlIGlmIHRoZSBwbHVnaW4gaXMgdXNpbmcgYSByZXNpemluZyBtb2R1bGVcclxuICAgICAgICAgKiBAZXhhbXBsZSBcclxuICAgICAgICAgKiB1cGxvYWRDYWxsQmFjayB7Li4gZmlsZSA9IHsgbmFtZTogZmlsZUxpc3RbaV0ubmFtZSwgc2l6ZTogZmlsZUxpc3RbaV0uc2l6ZSB9O1xyXG4gICAgICAgICAqIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgb0ltZywgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgZmlsZSwgdHJ1ZSk7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0SW5mbzogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIGVsZW1lbnQsIHVwbG9hZEV2ZW50SGFuZGxlciwgZmlsZSwgcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgY29uc3QgX3Jlc2l6ZV9wbHVnaW4gPSByZXNpemluZyA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA6ICcnO1xyXG4gICAgICAgICAgICBpZiAocmVzaXppbmcpIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9IHBsdWdpbk5hbWU7XHJcbiAgICBcclxuICAgICAgICAgICAgY29uc3QgcGxndWluID0gdGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBpbmZvTGlzdCA9IGNvbnRleHQuX2luZm9MaXN0O1xyXG4gICAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcclxuICAgICAgICAgICAgbGV0IGluZm8gPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgc3RhdGUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmICghZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtbmFtZScpIHx8ICh0eXBlb2YgZWxlbWVudC5zcmMgPT09ICdzdHJpbmcnID8gZWxlbWVudC5zcmMuc3BsaXQoJy8nKS5wb3AoKSA6ICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAnc2l6ZSc6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtc2l6ZScpIHx8IDBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAvLyBjcmVhdGVcclxuICAgICAgICAgICAgaWYgKCFkYXRhSW5kZXggfHwgdGhpcy5fY29tcG9uZW50c0luZm9Jbml0KSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICdjcmVhdGUnO1xyXG4gICAgICAgICAgICAgICAgZGF0YUluZGV4ID0gY29udGV4dC5faW5mb0luZGV4Kys7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JywgZGF0YUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtbmFtZScsIGZpbGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1maWxlLXNpemUnLCBmaWxlLnNpemUpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyYzogZWxlbWVudC5zcmMsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGRhdGFJbmRleCAqIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IGZpbGUuc2l6ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaW5mb0xpc3QucHVzaChpbmZvKTtcclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gdXBkYXRlXHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICd1cGRhdGUnO1xyXG4gICAgICAgICAgICAgICAgZGF0YUluZGV4ICo9IDE7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbmZvTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhSW5kZXggPT09IGluZm9MaXN0W2ldLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8gPSBpbmZvTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoIWluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhSW5kZXggPSBjb250ZXh0Ll9pbmZvSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICBpbmZvID0geyBpbmRleDogZGF0YUluZGV4IH07XHJcbiAgICAgICAgICAgICAgICAgICAgaW5mb0xpc3QucHVzaChpbmZvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaW5mby5zcmMgPSBlbGVtZW50LnNyYztcclxuICAgICAgICAgICAgICAgIGluZm8ubmFtZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1maWxlLW5hbWVcIik7XHJcbiAgICAgICAgICAgICAgICBpbmZvLnNpemUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZmlsZS1zaXplXCIpICogMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIG1ldGhvZCBiaW5kXHJcbiAgICAgICAgICAgIGluZm8uZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGluZm8uZGVsZXRlID0gcGxndWluLmRlc3Ryb3kuYmluZCh0aGlzLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgaW5mby5zZWxlY3QgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3cuc2V0VGltZW91dChwbGd1aW4uc2VsZWN0LmJpbmQodGhpcywgZWxlbWVudCkpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcywgZWxlbWVudCk7XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKHJlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdvcmlnaW4tc2l6ZScpICYmIGVsZW1lbnQubmF0dXJhbFdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ29yaWdpbi1zaXplJywgZWxlbWVudC5uYXR1cmFsV2lkdGggKyAnLCcgKyBlbGVtZW50Lm5hdHVyYWxIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdGhpcy51dGlsLmlzTWVkaWFDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgJ0ZJR1VSRScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHcgPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWC5jYWxsKHRoaXMsIGNvbnRleHQsIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGNvbnRleHQsIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicsIHcgKyAnLCcgKyBoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zaXplJywgdyArICcsJyArIGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LnN0eWxlLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luJykgfHwgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxndWluLm9uTW9kaWZ5TW9kZS5jYWxsKHRoaXMsIGVsZW1lbnQsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsZ3Vpbi5hcHBseVNpemUuY2FsbCh0aGlzLCBzaXplWzBdLCBzaXplWzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9IF9yZXNpemVfcGx1Z2luO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHVwbG9hZEV2ZW50SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykgdXBsb2FkRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGRhdGFJbmRleCwgc3RhdGUsIGluZm8sIC0tY29udGV4dC5fdXBsb2FkRmlsZUxlbmd0aCA8IDAgPyAwIDogY29udGV4dC5fdXBsb2FkRmlsZUxlbmd0aCwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERlbGV0ZSBpbmZvIG9iamVjdCBhdCBcIl9pbmZvTGlzdFwiXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWUgXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IGluZGV4IG9mIGluZm8gb2JqZWN0ICh0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0uX2luZm9MaXN0W10uaW5kZXgpXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB1cGxvYWRFdmVudEhhbmRsZXIgRXZlbnQgaGFuZGxlciB0byBwcm9jZXNzIHVwZGF0ZWQgZmlsZSBpbmZvIChjcmVhdGVkIGluIHNldEluZm8pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVsZXRlSW5mbzogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIGluZGV4LCB1cGxvYWRFdmVudEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZm9MaXN0ID0gdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdLl9pbmZvTGlzdDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGluZm9MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBpbmZvTGlzdFtpXS5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvTGlzdC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkRXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB1cGxvYWRFdmVudEhhbmRsZXIobnVsbCwgaW5kZXgsICdkZWxldGUnLCBudWxsLCAwLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCBpbmZvIG9iamVjdCBhbmQgXCJfaW5mb0xpc3QgPSBbXVwiLCBcIl9pbmZvSW5kZXggPSAwXCJcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBQbHVnaW4gbmFtZSBcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHVwbG9hZEV2ZW50SGFuZGxlciBFdmVudCBoYW5kbGVyIHRvIHByb2Nlc3MgdXBkYXRlZCBmaWxlIGluZm8gKGNyZWF0ZWQgaW4gc2V0SW5mbylcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXNldEluZm86IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCB1cGxvYWRFdmVudEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dFtwbHVnaW5OYW1lXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkRXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvTGlzdCA9IGNvbnRleHQuX2luZm9MaXN0O1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGluZm9MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkRXZlbnRIYW5kbGVyKG51bGwsIGluZm9MaXN0W2ldLmluZGV4LCAnZGVsZXRlJywgbnVsbCwgMCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuX2luZm9MaXN0ID0gW107XHJcbiAgICAgICAgICAgIGNvbnRleHQuX2luZm9JbmRleCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG5vR2xvYmFsID09PSB0eXBlb2YgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX01PRFVMRVMpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9NT0RVTEVTJywge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZToge31cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9NT0RVTEVTLCAnZmlsZU1hbmFnZXInLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgdmFsdWU6IGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZpbGVNYW5hZ2VyO1xyXG59KSk7Il0sInNvdXJjZVJvb3QiOiIifQ==